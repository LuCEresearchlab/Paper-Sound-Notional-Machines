@misc{10ReasonsPh,
  title = {10 Reasons {{Ph}}.{{D}}. Students Fail},
  urldate = {2020-06-06},
  howpublished = {http://matt.might.net/articles/ways-to-fail-a-phd/},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/8IYMJN6M/ways-to-fail-a-phd.html}
}

@misc{10TipsHow,
  title = {10 Tips on How to Give an Academic Talk},
  urldate = {2020-06-06},
  howpublished = {http://matt.might.net/articles/academic-presentation-tips/},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/P8C24MHI/academic-presentation-tips.html}
}

@misc{12ResolutionsGrad,
  title = {12 Resolutions for Grad Students},
  urldate = {2020-06-06},
  howpublished = {http://matt.might.net/articles/grad-student-resolutions/},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/RDAJ6BXW/grad-student-resolutions.html}
}

@misc{12ResolutionsProgrammers,
  title = {12 Resolutions for Programmers},
  urldate = {2020-06-06},
  howpublished = {http://matt.might.net/articles/programmers-resolutions/},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/UN44E9N3/programmers-resolutions.html}
}

@misc{2019plmwicfpPdf,
  title = {2019-Plmw-Icfp.Pdf},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/VUFTELMQ/2019-plmw-icfp.pdf}
}

@misc{2023UnderstandingTheUnderstandingOfExpressions,
  title = {2023-{{UnderstandingTheUnderstandingOfExpressions}}},
  urldate = {2023-11-08},
  abstract = {An online LaTeX editor that's easy to use. No installation, real-time collaboration, version control, hundreds of LaTeX templates, and more.},
  howpublished = {https://www.overleaf.com/project/64f72ec572041f1adb95a9ab},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/QESTQ47S/64f72ec572041f1adb95a9ab.html}
}

@misc{8201Functional,
  title = {(82) 3 01 {{A Functional Programmer}}'s {{Guide}} to {{Homotopy Type Theory}} - {{YouTube}}},
  urldate = {2021-04-12},
  howpublished = {https://www.youtube.com/watch?v=caSOTjr1z18\&ab\_channel=ICFPVideo}
}

@mastersthesis{aalvikVisASTGenericAST2019,
  title = {{{VisAST}}: {{Generic AST Visualiser}} for {{Software Language Education}}},
  author = {Aalvik, Ragnhild},
  year = {2019},
  month = may,
  abstract = {Structural concepts, like abstract syntax trees (ASTs), are often best explained through vi- sual representations. Students seem to have little trouble understanding what is presented to them visually, but they find it harder to translate their visual conception into source code when programming assignments on their own. Few resources are available to help students make this connection between visual and textual representations. We developed a tool, visAST, for dynamically visualising ASTs of small languages writ- ten in Haskell, to help students connect the visual representations of ASTs to their own source code. The goal was to make the visualisations of visAST effortless to adopt for any new language that the students define. To assess the benefits and usability of visAST we conducted a user study, where visAST was used while implementing a simple interpreter. We asked students about their opinions on the tool and measured their performance with and without visAST. Our results show that students like visAST and find it useful. The results also suggest that visAST slightly improved students' performance in a programming class.},
  langid = {english},
  school = {Universitet I Bergen},
  file = {/Users/igormoreno/Zotero/storage/B96UTLX2/Aalvik - 2019 - VisAST.pdf}
}

@book{aaronCodeMusicSonic2016,
  title = {Code {{Music}} with {{Sonic Pi}}},
  author = {Aaron, Sam},
  year = {2016},
  month = feb,
  publisher = {{Raspberry Pi (Trading) Ltd.}},
  file = {/Users/igormoreno/Zotero/storage/P2MEWYNQ/Essentials_Sonic_Pi-v1.pdf}
}

@inproceedings{aaronTemporalSemanticsLive2014,
  title = {Temporal Semantics for a Live Coding Language},
  booktitle = {Proceedings of the 2nd {{ACM SIGPLAN}} International Workshop on {{Functional}} Art, Music, Modeling \& Design},
  author = {Aaron, Samuel and Orchard, Dominic and Blackwell, Alan F.},
  year = {2014},
  month = sep,
  series = {{{FARM}} '14},
  pages = {37--47},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2633638.2633648},
  urldate = {2022-06-05},
  abstract = {Sonic Pi is a music live coding language that has been designed for educational use as a first programming language. However, it is not straightforward to achieve the necessary simplicity of a first language in a music live coding setting, for reasons largely related to the manipulation of time. The original version of Sonic Pi used a `sleep' function for managing time, blocking computation for a specified time period. However, while this approach was conceptually simple, it resulted in badly timed music, especially when multiple musical threads were executing concurrently. This paper describes an alternative programming approach for timing (implemented in Sonic Pi v2.0) which maintains syntactic compatibility with v1.0, yet provides accurate timing via interaction between real time and a "virtual time''. We provide a formal specification of the temporal behaviour of Sonic Pi, motivated in relation to other recent approaches to the semantics of time in live coding and general computation. We then define a monadic model of the Sonic Pi temporal semantics which is sound with respect to this specification, using Haskell as a metalanguage.},
  isbn = {978-1-4503-3039-8},
  keywords = {live coding,monads,music,temporal semantics,time},
  file = {/Users/igormoreno/Zotero/storage/IG95GEE5/Aaron et al - 2014 - Temporal semantics for a live coding language.pdf}
}

@techreport{abelsonGlossaryLOGOPrimitives1974,
  title = {A {{Glossary}} of {{LOGO Primitives}}},
  author = {Abelson, Hal and Adams, Jim},
  year = {1974},
  month = dec,
  number = {AIM-315 / LOGO Memo 14},
  institution = {{MIT}},
  urldate = {2022-01-12},
  abstract = {This is a brief description of the primitives in  PDP 11 LOGO. It is intended to provide a  quick reference for users who are already  familiar with LOGO basics. For a more  detailed and comprehensive description of  LOGO, consult the LOGO Manual (A.I. Memo  313, LOGO Memo 7).},
  langid = {american},
  annotation = {Accepted: 2004-10-04T14:46:40Z},
  file = {/Users/igormoreno/Zotero/storage/83MVI9NM/Abelson and Adams - 1974 - A Glossary of LOGO Primitives.pdf;/Users/igormoreno/Zotero/storage/ZHBESFKI/6228.html}
}

@techreport{abelsonLOGOManual1974,
  title = {{{LOGO Manual}}},
  author = {Abelson, Hal and Goodman, Nat and Rudolph, Lee},
  year = {1974},
  month = dec,
  number = {AIM-313 / LOGO Memo 7},
  pages = {84},
  institution = {{MIT}},
  abstract = {This document descibes the LOGO system implemented for the PDP 11/45 at the M.I.T. Artificial Intelligence Laboratory. The "system" includes not only the LOGO evaluator, but also a dedicated time-sharing system which services about a dozen users. There are also various special devices such as robot turtles, tone generators, and CRT displays.},
  file = {/Users/igormoreno/Zotero/storage/6JJD26W5/Abelson et al - 1974 - LOGO Manual.pdf}
}

@book{abelsonStructureInterpretationComputer1996,
  title = {Structure and Interpretation of Computer Programs, (Second Edition)},
  author = {Abelson, Harold and Sussman, Gerald Jay and Sussman, Julie},
  year = {1996},
  edition = {Second Edition},
  volume = {33},
  urldate = {2020-11-10},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/U2892LK8/Abelson et al - 1996 - Structure and interpretation of computer programs, (second edition).pdf}
}

@book{abelsonStructureInterpretationComputer2022,
  title = {Structure and {{Interpretation}} of {{Computer Programs}}: {{JavaScript Edition}}},
  shorttitle = {Structure and {{Interpretation}} of {{Computer Programs}}},
  author = {Abelson, Harold and Sussman, Gerald Jay},
  year = {2022},
  month = may,
  publisher = {{MIT Press}},
  abstract = {A new version of the classic and widely used text adapted for the JavaScript programming language.Since the publication of its first edition in 1984 and its second edition in 1996, Structure and Interpretation of Computer Programs (SICP) has influenced computer science curricula around the world. Widely adopted as a textbook, the book has its origins in a popular entry-level computer science course taught by Harold Abelson and Gerald Jay Sussman at MIT. SICP introduces the reader to central ideas of computation by establishing a series of mental models for computation. Earlier editions used the programming language Scheme in their program examples. This new version of the second edition has been adapted for JavaScript. The first three chapters of SICP cover programming concepts that are common to all modern high-level programming languages. Chapters four and five, which used Scheme to formulate language processors for Scheme, required significant revision. Chapter four offers new material, in particular an introduction to the notion of program parsing. The evaluator and compiler in chapter five introduce a subtle stack discipline to support return statements (a prominent feature of statement-oriented languages) without sacrificing tail recursion. The JavaScript programs included in the book run in any implementation of the language that complies with the ECMAScript 2020 specification, using the JavaScript package sicp provided by the MIT Press website.},
  googlebooks = {WSUuEAAAQBAJ},
  isbn = {978-0-262-36762-2},
  langid = {english},
  keywords = {Computers / Computer Science,Computers / Languages / General,Computers / Languages / JavaScript}
}

@book{abelsonTurtleGeometryComputer1981,
  title = {Turtle {{Geometry}}: {{The Computer}} as a {{Medium}} for {{Exploring Mathematics}}},
  shorttitle = {Turtle {{Geometry}}},
  author = {Abelson, Harold and {diSessa}, Andrea},
  editor = {Bobrow, Daniel G. and Brady, Michael and Davis, Randall and Winston, Patrick Henry},
  year = {1981},
  month = jun,
  series = {Artificial {{Intelligence Series}}},
  publisher = {{MIT Press}},
  address = {{Cambridge, MA, USA}},
  abstract = {Turtle Geometry presents an innovative program of mathematical discovery that demonstrates how the effective use of personal computers can profoundly change the nature of a student's contact with mathematics. Using this book and a few simple computer programs, students can explore the properties of space by following an imaginary turtle across the screen. The concept of turtle geometry grew out of the Logo Group at MIT. Directed by Seymour Papert, author of Mindstorms, this group has done extensive work with preschool children, high school students and university undergraduates.},
  isbn = {978-0-262-01063-4},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/2A8XH6YH/0c Acknowledgements.pdf;/Users/igormoreno/Zotero/storage/2JJ82CZC/AA Turtle Procedure Notation.pdf;/Users/igormoreno/Zotero/storage/4VJLBSCD/08 Piecewise Flat Surfaces.pdf;/Users/igormoreno/Zotero/storage/52IPRZE2/06 Exploring the Cube.pdf;/Users/igormoreno/Zotero/storage/5PI4TV4F/01 Introduction to Turtle Geometry.pdf;/Users/igormoreno/Zotero/storage/74WGGGR5/B1 Hints for Selected Exercises.pdf;/Users/igormoreno/Zotero/storage/7TM8XCBW/AB Turtle Programs in Conventional Computer Languages.pdf;/Users/igormoreno/Zotero/storage/8URXPBPB/B2 Answers to Selected Exercises.pdf;/Users/igormoreno/Zotero/storage/BR4MZL8Y/B3 Index.pdf;/Users/igormoreno/Zotero/storage/EFXLY3G3/05 Turtle Escapes the Plane.pdf;/Users/igormoreno/Zotero/storage/EIMZISVN/0d Preliminary Notes.pdf;/Users/igormoreno/Zotero/storage/HLASSMQ4/09 Curved Space and General Relativity.pdf;/Users/igormoreno/Zotero/storage/IJ2KUGH2/02 Feedback, Growth, and Form.pdf;/Users/igormoreno/Zotero/storage/KT8RBUJU/0b Preface.pdf;/Users/igormoreno/Zotero/storage/M4KVAHED/07 A Second Look at the Sphere.pdf;/Users/igormoreno/Zotero/storage/PUSMZ2KU/0a Series Foreword.pdf;/Users/igormoreno/Zotero/storage/QB64PX9N/03 Vector Methods in Turtle Geometry.pdf;/Users/igormoreno/Zotero/storage/QISPCTI6/04 Topology of Turtle Paths.pdf;/Users/igormoreno/Zotero/storage/JMKQ7QYD/Turtle-GeometryThe-Computer-as-a-Medium-for.html}
}

@article{abimbolaProblemTerminologyStudy1988,
  title = {The Problem of Terminology in the Study of Student Conceptions in Science},
  author = {Abimbola, I. O.},
  year = {1988},
  journal = {Science Education},
  volume = {72},
  number = {2},
  pages = {175--184},
  issn = {1098-237X},
  doi = {10.1002/sce.3730720206},
  urldate = {2021-01-05},
  langid = {english},
  annotation = {00282},
  file = {/Users/igormoreno/Zotero/storage/R6EP9VHB/Abimbola - 1988 - The problem of terminology in the study of student.pdf;/Users/igormoreno/Zotero/storage/7HW6UWPG/sce.html}
}

@misc{AbstractingGradualTyping,
  title = {Abstracting {{Gradual Typing}} - {{YouTube}}},
  urldate = {2022-11-21},
  howpublished = {https://www.youtube.com/watch?v=1xN7jAcakAA\&ab\_channel=RasBodik},
  file = {/Users/igormoreno/Zotero/storage/LD89S27A/watch.html}
}

@inproceedings{abuthawabehImprovedDecompositionDrawing2015,
  title = {An Improved Decomposition and Drawing Process for Optimal Topological Visualization of Directed Graphs},
  booktitle = {Proceedings of the 31st {{Spring Conference}} on {{Computer Graphics}}},
  author = {Abuthawabeh, Ala and Zeckzer, Dirk},
  year = {2015},
  month = apr,
  pages = {89--96},
  publisher = {{ACM}},
  address = {{Smolenice Slovakia}},
  doi = {10.1145/2788539.2788551},
  urldate = {2023-11-14},
  isbn = {978-1-4503-3693-2},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/8VKJPVGZ/Abuthawabeh and Zeckzer - 2015 - An improved decomposition and drawing process for .pdf}
}

@misc{AcademicJobHunt,
  title = {Academic Job Hunt Advice: {{Tips}} for Searching for and Landing a Professorship},
  urldate = {2020-06-06},
  howpublished = {http://matt.might.net/articles/advice-for-academic-job-hunt/},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/BZHTUEJY/advice-for-academic-job-hunt.html}
}

@incollection{acetoCHAPTERStructuralOperational2001,
  title = {{{CHAPTER}} 3 - {{Structural Operational Semantics}}},
  booktitle = {Handbook of {{Process Algebra}}},
  author = {Aceto, Luca and Fokkink, Wan and Verhoef, Chris},
  editor = {Bergstra, J. A. and Ponse, A. and Smolka, S. A.},
  year = {2001},
  month = jan,
  pages = {197--292},
  publisher = {{Elsevier Science}},
  address = {{Amsterdam}},
  doi = {10.1016/B978-044482830-9/50021-7},
  urldate = {2018-12-02},
  abstract = {Structural Operational Semantics (SOS) provides a framework to give an operational semantics to programming and specification languages, which, because of its intuitive appeal and flexibility, has found considerable application in the theory of concurrent processes. Even though SOS is widely used in programming language semantics at large, some of its most interesting theoretical developments have taken place within concurrency theory. In particular, SOS has been successfully applied as a formal tool to establish results that hold for whole classes of process description languages. The concept of rule format has played a major role in the development of this general theory of process description languages, and several such formats have been proposed in the research literature. This chapter presents an exposition of existing rule formats, and of the rich body of results that are guaranteed to hold for any process description language whose SOS is within one of these formats. As far as possible, the theory is developed for SOS with features like predicates and negative premises.},
  isbn = {978-0-444-82830-9},
  file = {/Users/igormoreno/Zotero/storage/SMMG8LVE/Aceto et al - 2001 - CHAPTER 3 - Structural Operational Semantics.pdf;/Users/igormoreno/Zotero/storage/3EBGEAWM/B9780444828309500217.html}
}

@book{acmcomputingcurriculataskforceComputerScienceCurricula2013,
  title = {Computer {{Science Curricula}} 2013: {{Curriculum Guidelines}} for {{Undergraduate Degree Programs}} in {{Computer Science}}},
  shorttitle = {Computer {{Science Curricula}} 2013},
  editor = {{ACM Computing Curricula Task Force}},
  year = {2013},
  month = jan,
  publisher = {{ACM, Inc}},
  address = {{New York, NY}},
  doi = {10.1145/2534860},
  urldate = {2018-10-07},
  isbn = {978-1-4503-2309-3},
  langid = {english},
  keywords = {Curriculus},
  file = {/Users/igormoreno/Zotero/storage/4JKJIJM6/ACM Computing Curricula Task Force - 2013 - Computer Science Curricula 2013 Curriculum Guidel.pdf}
}

@techreport{acmcomputingcurriculataskforceComputingCurricula20202020,
  title = {Computing {{Curricula}} 2020},
  author = {{ACM Computing Curricula Task Force}},
  year = {2020},
  month = dec,
  pages = {204},
  urldate = {2021-06-09},
  file = {/Users/igormoreno/Zotero/storage/FHP33MPU/ACM Computing Curricula Task Force - 2020 - Computing Curricula 2020.pdf}
}

@misc{acmsigplanEfficientAlgorithmTypeSafe2019,
  title = {An {{Efficient Algorithm}} for {{Type-Safe Structural Diffing}}},
  author = {{ACM SIGPLAN}},
  year = {2019},
  month = dec,
  urldate = {2022-03-11}
}

@misc{AdditionalNotesDrawing,
  title = {Additional {{Notes}} on "{{Drawing Dynamic Visualizations}}"},
  urldate = {2023-01-21},
  howpublished = {http://worrydream.com/DrawingDynamicVisualizationsTalkAddendum/},
  file = {/Users/igormoreno/Zotero/storage/G8H7M5BQ/DrawingDynamicVisualizationsTalkAddendum.html}
}

@misc{AddTypeAnnotations,
  title = {Add Type Annotations {$\cdot$} {{Issue}} \#3 {$\cdot$} {{LuCEresearchlab}}/Expression-Service-Python},
  journal = {GitHub},
  urldate = {2022-11-21},
  abstract = {Leverage Google's PyType to infer types and add them as annotations to the original source (before parsing).},
  howpublished = {https://github.com/LuCEresearchlab/expression-service-python/issues/3},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/X3W5FV5W/3.html}
}

@book{adeyReallyRaisingStandards2016,
  title = {Really {{Raising Standards}}: {{Cognitive}} Intervention and Academic Achievement},
  shorttitle = {Really {{Raising Standards}}},
  author = {Adey, Philip and Shayer, Dr Michael and Shayer, {\relax MICHAEL}},
  year = {2016},
  month = jan,
  edition = {1st Edition},
  publisher = {{Routledge}},
  address = {{Place of publication not identified}},
  abstract = {Written by experienced teachers and educational researchers Phillip Adey and Michael Shayer, Really Raising Standards analyses attempts to teach children to think more effectively and efficiently. Their practical advice on how to improve children's performance by the application of the findings of the CASE research project will radically alter the approach of many professional teachers and student teachers as to the education of children in schools. An important contribution to the application of psychological theory in education.},
  isbn = {978-1-138-13742-4},
  langid = {english},
  annotation = {00000}
}

@book{adeyScienceThinkingScience1999,
  title = {The Science of Thinking, and Science for Thinking: A Description of {{Cognitive Acceleration}} through {{Science Education}} ({{CASE}})},
  author = {Adey, Philip},
  year = {1999},
  series = {{{INNODATA MONOGRAPHS}}},
  number = {2},
  publisher = {{International Bureau of Education}},
  address = {{Geneva, Switzerland}},
  abstract = {Cognitive Acceleration through Science Education...},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/T58KSIJA/Adey - 1999 - The science of thinking, and science for thinking.pdf}
}

@phdthesis{adrianschmassmannLambdakalkulFurGymnasium2022,
  type = {{{GymInf}}: {{Individuelles Projekt}}},
  title = {Das {{Lambdakalk\"ul}} F\"ur Das {{Gymnasium}}},
  author = {Adrian Schmassmann, Hans},
  year = {2022},
  file = {/Users/igormoreno/Zotero/storage/ZA3KVGSR/C07AE051-5CB6-42B1-9178-2E8A4F01C9A6.arbeit.pdf}
}

@inproceedings{aggarwalDemonstratingAbilityElementary2018,
  title = {Demonstrating the {{Ability}} of {{Elementary School Students}} to {{Reason About Programs}}},
  booktitle = {Proceedings of the 49th {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Aggarwal, Ashish and Touretzky, David S. and {Gardner-McCune}, Christina},
  year = {2018},
  month = feb,
  pages = {735--740},
  publisher = {{ACM}},
  address = {{Baltimore Maryland USA}},
  doi = {10.1145/3159450.3159488},
  urldate = {2020-06-22},
  abstract = {Over the last decade, CS Education researchers have developed different curricula, resources, and strategies to foster computer science learning in K-12 education. However, there is a lack of research about how elementary school students develop the ability to reason about programs. Reasoning about programs consists of a student's ability to read, write, debug, trace, and predict program behavior. This paper presents results from a think-aloud study of fourth and fifth grade students learning to program in Kodu. The goal of this study was to track students' understanding of how Kodu interprets and executes rules of a program. To understand students' reasoning of program execution, we explicitly taught them the Laws of Kodu computation which govern the decision making and execution process of Kodu rules. We collected students' responses on preand post-assessments, and we conducted think-aloud interviews with students where students explained their answers to assessment questions. We found that explicitly teaching students how Kodu rules are interpreted significantly improved their ability to understand the execution of programs and to explain program behavior. The results of this study provide insight into how elementary school students reason about simple programs, and how this ability can be scaffolded.},
  isbn = {978-1-4503-5103-4},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/KY2JPK8F/Aggarwal et al - 2018 - Demonstrating the Ability of Elementary School Students to Reason About Programs.pdf}
}

@article{aguiar-castilloGamificationDeepLearning2021,
  title = {Gamification and Deep Learning Approaches in Higher Education},
  author = {{Aguiar-Castillo}, Lidia and {Clavijo-Rodriguez}, Alberto and {Hern{\'a}ndez-L{\'o}pez}, Lidia and {De Saa-P{\'e}rez}, Petra and {P{\'e}rez-Jim{\'e}nez}, Rafael},
  year = {2021},
  month = nov,
  journal = {Journal of Hospitality, Leisure, Sport \& Tourism Education},
  volume = {29},
  pages = {100290},
  issn = {14738376},
  doi = {10.1016/j.jhlste.2020.100290},
  urldate = {2023-06-27},
  abstract = {Gamification is a tool that has been used to promote commitment and motivation to students. This fact, coupled with the intensive use made by students of their smart phones, has led to the development of the HEgameApp application. This study shows that students' satisfaction will be influenced directly by application features, and it will influence pro-deep-learning approaches. Besides, the initiative will be visible through word of mouth. According to this study a gamified application can contribute to the pro-deep-learning approaches as students wish to expose their private learning-related actions to friends. An interesting finding of this study is the connection between the users' satisfaction and the promotion of behaviors related to deep learning strategies, since the more satisfied the students are, the more their deep learning strategies will be promoted. Another relevant finding comes from the teaching institution, as this type of initiative is very well accepted by the students and will improve the image, providing a smart academic, studentfocused reputation to the implementing academia.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/7K26K86J/Aguiar-Castillo et al. - 2021 - Gamification and deep learning approaches in highe.pdf}
}

@inproceedings{ahadiReplicationComputingEducation2016,
  title = {Replication in Computing Education Research: Researcher Attitudes and Experiences},
  shorttitle = {Replication in Computing Education Research},
  booktitle = {Proceedings of the 16th {{Koli Calling International Conference}} on {{Computing Education Research}}},
  author = {Ahadi, Alireza and Hellas, Arto and Ihantola, Petri and Korhonen, Ari and Petersen, Andrew},
  year = {2016},
  month = nov,
  pages = {2--11},
  publisher = {{ACM}},
  address = {{Koli Finland}},
  doi = {10.1145/2999541.2999554},
  urldate = {2021-10-03},
  abstract = {Replicability is a core principle of the scientific method. However, several scientific disciplines have suffered crises in confidence caused, in large part, by attitudes toward replication. This work reports on the value the computing education research community associates with studies that aim to replicate, reproduce or repeat earlier research. The results were obtained from a survey of 73 computing education researchers.},
  isbn = {978-1-4503-4770-9},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/5QULE24R/Ahadi et al. - 2016 - Replication in computing education research resea.pdf}
}

@incollection{ainsworthAnalysingCostsBenefits1998,
  title = {Analysing the Costs and Benefits of Multi-Representational Learning Environments},
  booktitle = {Learning with Multiple Representations},
  author = {Ainsworth, Shaaron E and Bibby, Peter A and Wood, David J},
  year = {1998},
  pages = {120--134},
  publisher = {{Pergamon Amsterdam}},
  urldate = {2019-04-07}
}

@article{ainsworthDeFTConceptualFramework2006,
  title = {{{DeFT}}: {{A}} Conceptual Framework for Considering Learning with Multiple Representations},
  shorttitle = {{{DeFT}}},
  author = {Ainsworth, Shaaron},
  year = {2006},
  journal = {Learning and Instruction},
  volume = {16},
  pages = {183--198},
  abstract = {Multiple (external) representations can provide unique benefits when people are learning complex new ideas. Unfortunately, many studies have shown this promise is not always achieved. The DeFT (Design, Functions, Tasks) framework for learning with multiple representations integrates research on learning, the cognitive science of representation and constructivist theories of education. It proposes that the effectiveness of multiple representations can best be understood by considering three fundamental aspects of learning: the design parameters that are unique to learning with multiple representations; the functions that multiple representations serve in supporting learning and the cognitive tasks that must be undertaken by a learner interacting with multiple representations. The utility of this framework is proposed to be in identifying a broad range of factors that influence learning, reconciling inconsistent experimental findings, revealing under-explored areas of multi-representational research and pointing forward to potential design heuristics for learning with multiple representations.},
  file = {/Users/igormoreno/Zotero/storage/5CB87U89/Ainsworth - 2006 - DeFT.pdf;/Users/igormoreno/Zotero/storage/GJMGU43Y/summary.html}
}

@article{ainsworthFunctionsMultipleRepresentations1999,
  title = {The Functions of Multiple Representations},
  author = {Ainsworth, Shaaron},
  year = {1999},
  month = sep,
  journal = {Computers \& Education},
  volume = {33},
  number = {2},
  pages = {131--152},
  issn = {0360-1315},
  doi = {10.1016/S0360-1315(99)00029-9},
  urldate = {2018-12-02},
  abstract = {Multiple representations and multi-media can support learning in many different ways. In this paper, it is claimed that by identifying the functions that they can serve, many of the conflicting findings arising out of the existing evaluations of multi-representational learning environments can be explained. This will lead to more systematic design principles. To this end, this paper describes a functional taxonomy of MERs. This taxonomy is used to ask how translation across representations should be supported to maximise learning outcomes and what information should be gathered from empirical evaluation in order to determine the effectiveness of multi-representational learning environments.},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/2LYTHDFR/Ainsworth - 1999 - The functions of multiple representations.pdf;/Users/igormoreno/Zotero/storage/K6T6R94F/Ainsworth - 1999 - The functions of multiple representations.pdf;/Users/igormoreno/Zotero/storage/YMSPHTPH/S0360131599000299.html}
}

@article{ainsworthMultipleFormsDynamic2004,
  title = {Multiple Forms of Dynamic Representation},
  author = {Ainsworth, Shaaron and VanLabeke, Nicolas},
  year = {2004},
  month = jun,
  journal = {Learning and Instruction},
  series = {Dynamic {{Visualisations}} and {{Learning}}},
  volume = {14},
  number = {3},
  pages = {241--255},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2004.06.002},
  urldate = {2018-11-06},
  abstract = {The terms dynamic representation and animation are often used as if they are synonymous, but in this paper we argue that there are multiple ways to represent phenomena that change over time. Time-persistent representations show a range of values over time. Time-implicit representations also show a range of values but not the specific times when the values occur. Time-singular representations show only a single point of time. In this paper, we examine the use of dynamic representations in instructional simulations. We argue that the three types of dynamic representations have distinct advantages compared to static representations. We also suggest there are specific cognitive tasks associated with their use. Furthermore, dynamic representations of different form are often displayed simultaneously. We conclude that to understand learning with multiple dynamic representations, it is crucial to consider the way in which time is displayed.},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/LVXBLUFI/Ainsworth and VanLabeke - 2004 - Multiple forms of dynamic representation.pdf;/Users/igormoreno/Zotero/storage/LYZEXFS6/S0959475204000301.html}
}

@article{ainsworthThereMoreOne1998,
  title = {There Is More than One Way to Solve a Problem: {{Evaluating}} a Learning Environment That Supports the Development of Children's Multiplication Skills},
  shorttitle = {There Is More than One Way to Solve a Problem},
  author = {Ainsworth, Shaaron and Wood, David and O'Malley, Claire},
  year = {1998},
  month = apr,
  journal = {Learning and Instruction},
  volume = {8},
  number = {2},
  pages = {141--157},
  issn = {0959-4752},
  doi = {10.1016/S0959-4752(97)00013-3},
  urldate = {2018-12-02},
  abstract = {Interpretation of the nature of mathematical understanding has changed recently. These changes have prompted calls for different instructional methods in the primary classroom. COPPERS is a mathematical learning environment which explores how such goals should be implemented computationally. Two experiments have examined how system components have advanced children's understanding that multiplication problems can have many different correct solutions. Different numbers of decompositions, learner's choice of strategy and feedback in either tabular or place value representations were all found to significantly affect learning. Theoretical interpretations of these results are considered in terms of Vygotskian approaches to scaffolding learning and current research on external representations.},
  file = {/Users/igormoreno/Zotero/storage/P2KH3I8A/Ainsworth et al - 1998 - There is more than one way to solve a problem.pdf;/Users/igormoreno/Zotero/storage/NR36QUHD/S0959475297000133.html}
}

@inproceedings{aivaloglouDatasetScratchPrograms2017,
  title = {A {{Dataset}} of {{Scratch Programs}}: {{Scraped}}, {{Shaped}} and {{Scored}}},
  shorttitle = {A {{Dataset}} of {{Scratch Programs}}},
  booktitle = {2017 {{IEEE}}/{{ACM}} 14th {{International Conference}} on {{Mining Software Repositories}} ({{MSR}})},
  author = {Aivaloglou, Efthimia and Hermans, Felienne and {Moreno-Leon}, Jesus and Robles, Gregorio},
  year = {2017},
  month = may,
  pages = {511--514},
  doi = {10.1109/MSR.2017.45},
  abstract = {Scratch is increasingly popular, both as an introductory programming language and as a research target in the computing education research field. In this paper, we present a dataset of 250K recent Scratch projects from 100K different authors scraped from the Scratch project repository. We processed the projects' source code and metadata to encode them into a database that facilitates querying and further analysis. We further evaluated the projects in terms of programming skills and mastery, and included the project scoring results. The dataset enables the analysis of the source code of Scratch projects, of their quality characteristics, and of the programming skills that their authors exhibit. The dataset can be used for empirical research in software engineering and computing education.},
  keywords = {computing education,dataset,Education,Metadata,Programming profession,Scratch,Shape,Sprites (computer),Tools},
  file = {/Users/igormoreno/Zotero/storage/RTB6F4UK/Aivaloglou et al. - 2017 - A Dataset of Scratch Programs Scraped, Shaped and.pdf;/Users/igormoreno/Zotero/storage/8NL7X58L/7962409.html}
}

@inproceedings{aivaloglouHowKidsCode2016,
  title = {How {{Kids Code}} and {{How We Know}}: {{An Exploratory Study}} on the {{Scratch Repository}}},
  shorttitle = {How {{Kids Code}} and {{How We Know}}},
  booktitle = {Proceedings of the 2016 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Aivaloglou, Efthimia and Hermans, Felienne},
  year = {2016},
  month = aug,
  pages = {53--61},
  publisher = {{ACM}},
  address = {{Melbourne VIC Australia}},
  doi = {10.1145/2960310.2960325},
  urldate = {2021-07-20},
  abstract = {Block-based programming languages like Scratch, Alice and Blockly are becoming increasingly common as introductory languages in programming education. There is substantial research showing that these visual programming environments are suitable for teaching programming concepts. But, what do people do when they use Scratch? In this paper we explore the characteristics of Scratch programs. To this end we have scraped the Scratch public repository and retrieved 250,000 projects. We present an analysis of these projects in three different dimensions. Initially, we look at the types of blocks used and the size of the projects. We then investigate complexity, used abstractions and programming concepts. Finally we detect code smells such as large scripts, dead code and duplicated code blocks. Our results show that 1) most Scratch programs are small, however Scratch programs consisting of over 100 sprites exist, 2) programming abstraction concepts like procedures are not commonly used and 3) Scratch programs do suffer from code smells including large scripts and unmatched broadcast signals.},
  isbn = {978-1-4503-4449-4},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/N35N67WE/Aivaloglou and Hermans - 2016 - How Kids Code and How We Know An Exploratory Stud.pdf}
}

@inproceedings{ajanovskiEvolutionaryCurriculumReconstruction2017,
  title = {Evolutionary {{Curriculum Reconstruction}}: {{Process Model}} and {{Information System Development}}},
  shorttitle = {Evolutionary {{Curriculum Reconstruction}}},
  booktitle = {Proceedings of the 18th {{Annual Conference}} on {{Information Technology Education}} - {{SIGITE}} '17},
  author = {Ajanovski, Vangel V.},
  year = {2017},
  pages = {89--94},
  publisher = {{ACM Press}},
  address = {{Rochester, New York, USA}},
  doi = {10.1145/3125659.3125698},
  urldate = {2020-09-22},
  abstract = {The paper proposes a new evolutionary curriculum development process based on a structured approach. The process uses ideas from the Rational Uni ed Process (RUP) \textendash{} a well-known software development methodology in the eld of software engineering. The process that is proposed in this paper is customized from the point of view of an institutional-wide curriculum reconstruction project. This process should have a spiral approach in several iterations, whereas each iteration will go into more depth with the curriculum speci cations and nally produce study plans and syllabi that will be ready for accreditation and put into production. The rationale behind the introduction of such a process is the deepening of the institutional knowledge on the curricula structure and contents. A system architecture is described that enables the introduction of such a process within an institution and the information system that was implemented on top of this base architecture is presented.},
  isbn = {978-1-4503-5100-3},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/ZS6QJQTW/Ajanovski - 2017 - Evolutionary Curriculum Reconstruction.pdf}
}

@inproceedings{al-fedaghiNetworkArchitectureThinging2018,
  title = {Network {{Architecture}} as a {{Thinging Machine}}},
  booktitle = {2018 {{International Conference}} on {{Computational Science}} and {{Computational Intelligence}} ({{CSCI}})},
  author = {{Al-Fedaghi}, Sabah and Alnasser, Hadeel},
  year = {2018},
  month = dec,
  pages = {884--889},
  publisher = {{IEEE}},
  address = {{Las Vegas, NV, USA}},
  doi = {10.1109/CSCI46756.2018.00175},
  urldate = {2020-06-22},
  abstract = {This paper has utilized a new conceptual model in creating a description of network architecture based on the notion of a thinging (abstract) machine (TM). Current network graphs are fragmental and, most of the time, result in uniformed notation (e.g., photographs, technical manual pictures, network towers) or holistic conceptualization in the sense of applying to parts and the whole of a system. TM is used in depicting a grand conceptual (application-independent) machine of the network's architecture. Additionally, the proposed model includes network processes as in devices that execute programs to handle packets. We have demonstrated the viability of TM through an actual case study that presents a descriptive methodology that contrasted with some current network diagrams.},
  isbn = {978-1-72811-360-9},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/97HLDZ7W/Al-Fedaghi and Alnasser - 2018 - Network Architecture as a Thinging Machine.pdf}
}

@inproceedings{al-zubidyUpdatedReviewEmpiricism2016,
  title = {A ({{Updated}}) {{Review}} of {{Empiricism}} at the {{SIGCSE Technical Symposium}}},
  booktitle = {Proceedings of the 47th {{ACM Technical Symposium}} on {{Computing Science Education}}},
  author = {{Al-Zubidy}, Ahmed and Carver, Jeffrey C. and Heckman, Sarah and Sherriff, Mark},
  year = {2016},
  month = feb,
  pages = {120--125},
  publisher = {{ACM}},
  address = {{Memphis Tennessee USA}},
  doi = {10.1145/2839509.2844601},
  urldate = {2021-06-17},
  abstract = {The computer science education (CSEd) research community consists of a large group of passionate CS educators who often contribute to other disciplines of CS research. There has been a trend in other disciplines toward more rigorous and empirical evaluation of various hypotheses. Prior investigations of the thencurrent state of CSEd research showed a distinct lack of rigor in the top research publication venues, with most papers falling in the general category of experience reports. In this paper, we present our examination of the two most recent proceedings of the SIGCSE Technical Symposium, providing a snapshot of the current state of empiricism at the largest CSEd venue. Our goal to categorize the current state of empiricism in the SIGCSE Technical Symposium and identify where the community might benefit from increased empiricism when conducting CSEd research. We found an increase in empirical validation of CSEd research to over 70\%; however, our findings suggest that current CSEd research minimizes replication precluding meta-analysis and theory building.},
  isbn = {978-1-4503-3685-7},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/RJ2VDLQM/Al-Zubidy et al. - 2016 - A (Updated) Review of Empiricism at the SIGCSE Tec.pdf}
}

@article{ala-mutkaSurveyAutomatedAssessment2005,
  title = {A {{Survey}} of {{Automated Assessment Approaches}} for {{Programming Assignments}}},
  author = {{Ala-Mutka}, Kirsti M.},
  year = {2005},
  month = jun,
  journal = {Computer Science Education},
  volume = {15},
  number = {2},
  pages = {83--102},
  issn = {0899-3408},
  doi = {10.1080/08993400500150747},
  urldate = {2019-09-27},
  abstract = {Practical programming is one of the basic skills pursued in computer science education. On programming courses, the coursework consists of programming assignments that need to be assessed from different points of view. Since the submitted assignments are executable programs with a formal structure, some features can be assessed automatically. The basic requirement for automated assessment is the numerical measurability of assessment targets, but semiautomatic approaches can overcome this restriction. Recognizing automatically assessable features can help teachers to create educational models, where automatic tools let teachers concentrate their work on the learning issues that need student-teacher interaction the most. Several automatic tools for both static and dynamic assessment of computer programs have been reported in the literature. This article promotes these issues by surveying several automatic approaches for assessing programming assignments. Not all the existing tools will be covered, simply because of the vast number of them. The article concentrates on bringing forward different assessment techniques and approaches to give an interested reader starting points for finding further information in the area. Automatic assessment tools can be used to help teachers in grading tasks as well as to support students' working process with automatic feedback. Common advantages of automation are the speed, availability, consistency and objectivity of assessment. However, automatic tools emphasize the need for careful pedagogical design of the assignment and assessment settings. To effectively share the knowledge and good assessment solutions already developed, better interoperability and portability of the tools is needed.},
  file = {/Users/igormoreno/Zotero/storage/RY45CGEW/08993400500150747.html}
}

@article{aldemirQualitativeInvestigationStudent2018,
  title = {A Qualitative Investigation of Student Perceptions of Game Elements in a Gamified Course},
  author = {Aldemir, Tugce and Celik, Berkan and Kaplan, Goknur},
  year = {2018},
  month = jan,
  journal = {Computers in Human Behavior},
  volume = {78},
  pages = {235--254},
  issn = {07475632},
  doi = {10.1016/j.chb.2017.10.001},
  urldate = {2023-06-27},
  abstract = {As gamification grows in popularity, there has been increased interest in its potential as a motivating and engaging learning strategy. Yet, it is still a controversial issue in education and has received several criticisms. The existing literature suggests that when gamification is designed well and utilized correctly, it has potential to improve learning, but qualitative investigations are required in order to reveal how a wide range of game elements fit into different learning contexts. In order to address this gap, this qualitative study aims to explore students' overall perceptions about various game elements in a gamified instructional technology and material development course within a teacher education context. Based on the data gathered via interviews, observation, and documents (n {$\frac{1}{4}$} 118) for one academic year, the study examines possible impacts of game elements and how they should be designed and implemented from the students' perspectives. The results yielded nine main themes: challenge, narrative, leaderboard, reward, badge, teams, win-state, points, and constraints. This paper presents the gamification process, iterations made into the game elements, and main features of the game elements in a gamified teacher education course.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/7XLMG59R/Aldemir et al. - 2018 - A qualitative investigation of student perceptions.pdf}
}

@inproceedings{aldrichPowerInteroperabilityWhy2013,
  title = {The Power of Interoperability: Why Objects Are Inevitable},
  shorttitle = {The Power of Interoperability},
  booktitle = {Proceedings of the 2013 {{ACM}} International Symposium on {{New}} Ideas, New Paradigms, and Reflections on Programming \& Software - {{Onward}}! '13},
  author = {Aldrich, Jonathan},
  year = {2013},
  pages = {101--116},
  publisher = {{ACM Press}},
  address = {{Indianapolis, Indiana, USA}},
  doi = {10.1145/2509578.2514738},
  urldate = {2022-03-16},
  abstract = {Three years ago in this venue, Cook argued that in their essence, objects are what Reynolds called procedural data structures. His observation raises a natural question: if procedural data structures are the essence of objects, has this contributed to the empirical success of objects, and if so, how? This essay attempts to answer that question. After reviewing Cook's definition, I propose the term service abstractions to capture the essential nature of objects. This terminology emphasizes, following Kay, that objects are not primarily about representing and manipulating data, but are more about providing services in support of higher-level goals. Using examples taken from object-oriented frameworks, I illustrate the unique design leverage that service abstractions provide: the ability to define abstractions that can be extended, and whose extensions are interoperable in a first-class way. The essay argues that the form of interoperable extension supported by service abstractions is essential to modern software: many modern frameworks and ecosystems could not have been built without service abstractions. In this sense, the success of objects was not a coincidence: it was an inevitable consequence of their service abstraction nature.},
  isbn = {978-1-4503-2472-4},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/ALSLA6JM/Aldrich - 2013 - The power of interoperability why objects are ine.pdf}
}

@article{alhammadGamificationSoftwareEngineering2018,
  title = {Gamification in Software Engineering Education: {{A}} Systematic Mapping},
  shorttitle = {Gamification in Software Engineering Education},
  author = {Alhammad, Manal M. and Moreno, Ana M.},
  year = {2018},
  month = jul,
  journal = {Journal of Systems and Software},
  volume = {141},
  pages = {131--150},
  issn = {01641212},
  doi = {10.1016/j.jss.2018.03.065},
  urldate = {2023-06-27},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/5WQAAQM8/Alhammad and Moreno - 2018 - Gamification in software engineering education A .pdf}
}

@article{alharbiEffectGamificationLearning2019,
  title = {The {{Effect}} of {{Gamification}} in {{Learning Computer Sciences}}: {{A Critical Analysis}}},
  author = {Alharbi, Khalid Rakyan and Jamaludin, Rozinah},
  year = {2019},
  pages = {6},
  abstract = {The intention of these paper is to rigorously examine the effect of gamification in learning computer science using a critically literature review analysis as method. Different literature reviews indicated the gamification is one of the most important elements of learning computing technology in this century. However, this has come alone with number of challenges and effect from various context. Some of the challenges from the critical review conducted by this paper include resistances to changes lack of will to move traditional and conventional learning methods to the modern once. This paper therefore recommended an orientation approach from both teachers and the learners to understand the importance and the advantages accepting modern innovation such as gamification in teaching and learning computer science.},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/C8GYJJWM/Alharbi e Jamaludin - 2019 - The Effect of Gamification in Learning Computer Sc.pdf}
}

@misc{allenh.bradyIntroductoryServiceCourses,
  title = {The {{Introductory}} and {{Service Courses}} in {{Computing}}: {{Some Experiences}} and a {{Critical Assessment}}},
  author = {{Allen H. Brady}},
  publisher = {{University of Nevada System Computing Center}},
  file = {/Users/igormoreno/Zotero/storage/PQWFAXEH/Allen H. Brady - The Introductory and Service Courses in Computing.pdf}
}

@article{almeidaTeachingHowProgram2018,
  title = {Teaching How to Program Using Automated Assessment and Functional Glossy Games (Experience Report)},
  author = {Almeida, Jos{\'e} Bacelar and Cunha, Alcino and Macedo, Nuno and Pacheco, Hugo and Proen{\c c}a, Jos{\'e}},
  year = {2018},
  month = jul,
  journal = {Proceedings of the ACM on Programming Languages},
  volume = {2},
  number = {ICFP},
  pages = {82:1--82:17},
  doi = {10.1145/3236777},
  urldate = {2021-12-16},
  abstract = {Our department has long been an advocate of the functional-first school of programming and has been teaching Haskell as a first language in introductory programming course units for 20 years. Although the functional style is largely beneficial, it needs to be taught in an enthusiastic and captivating way to fight the unusually high computer science drop-out rates and appeal to a heterogeneous population of students. This paper reports our experience of restructuring, over the last 5 years, an introductory laboratory course unit that trains hands-on functional programming concepts and good software development practices. We have been using game programming to keep students motivated, and following a methodology that hinges on test-driven development and continuous bidirectional feedback. We summarise successes and missteps, and how we have learned from our experience to arrive at a model for comprehensive and interactive functional game programming assignments and a general functionally-powered automated assessment platform, that together provide a more engaging learning experience for students. In our experience, we have been able to teach increasingly more advanced functional programming concepts while improving student engagement.},
  keywords = {automated assessment,gamification,programming education,test-driven development},
  file = {/Users/igormoreno/Zotero/storage/B8QKCBXR/Almeida et al - 2018 - Teaching how to program using automated assessment and functional glossy games.pdf}
}

@article{almstrumChallengesComputerScience,
  title = {Challenges to {{Computer Science Education Research}}},
  author = {Almstrum, Vicki L and Hazzan, Orit},
  pages = {2},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/USU2AD3H/Almstrum e Hazzan - Challenges to Computer Science Education Research.pdf}
}

@inproceedings{almstrumConceptInventoriesComputer2006,
  title = {Concept {{Inventories}} in {{Computer Science}} for the {{Topic Discrete Mathematics}}},
  booktitle = {Working {{Group Reports}} on {{ITiCSE}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Almstrum, Vicki L. and Henderson, Peter B. and Harvey, Valerie and Heeren, Cinda and Marion, William and Riedesel, Charles and Soh, Leen-Kiat and Tew, Allison Elliott},
  year = {2006},
  series = {{{ITiCSE-WGR}} '06},
  pages = {132--145},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1189215.1189182},
  urldate = {2018-10-22},
  abstract = {This report describes concept inventories, specialized assessment instruments that enable educational researchers to investigate student (mis)understandings of concepts in a particular domain. While students experience a concept inventory as a set of multiple-choice items taken as a test, this belies its purpose, its careful development, and its validation. A concept inventory is not intended to be a comprehensive instrument, but rather a tool that probes student comprehension of a carefully selected subset of concepts that give rise to the most common and pervasive mismodelings. The report explains how concept inventories have been developed and used in other STEM fields, then outlines a project to explore the feasibility of concept inventories in the computing field. We use the domain of discrete mathematics to illustrate a suggested plan of action.},
  isbn = {978-1-59593-603-5},
  keywords = {assessment,assessment tools,concept inventory,discrete mathematics,distractors,misconceptions},
  file = {/Users/igormoreno/Zotero/storage/3PBYE6TP/Almstrum et al_2006_Concept Inventories in Computer Science for the Topic Discrete Mathematics.pdf;/Users/igormoreno/Zotero/storage/BSPLXR5E/Almstrum et al - 2006 - Concept Inventories in Computer Science for the Topic Discrete Mathematics.pdf}
}

@article{alonCode2vecLearningDistributed2019,
  title = {Code2vec: Learning Distributed Representations of Code},
  shorttitle = {Code2vec},
  author = {Alon, Uri and Zilberstein, Meital and Levy, Omer and Yahav, Eran},
  year = {2019},
  month = jan,
  journal = {Proceedings of the ACM on Programming Languages},
  volume = {3},
  number = {POPL},
  pages = {1--29},
  issn = {24751421},
  doi = {10.1145/3290353},
  urldate = {2020-01-22},
  langid = {english},
  keywords = {Strong,To Read},
  annotation = {00192},
  file = {/Users/igormoreno/Zotero/storage/RC3EDECB/Alon et al - 2019 - code2vec.pdf}
}

@inproceedings{alphonceUsingGraphicsSupport2003,
  title = {Using Graphics to Support the Teaching of Fundamental Object-Oriented Principles in {{CS1}}},
  booktitle = {Companion of the 18th Annual {{ACM SIGPLAN}} Conference on {{Object-oriented}} Programming, Systems, Languages, and Applications},
  author = {Alphonce, Carl and Ventura, Phil},
  year = {2003},
  month = oct,
  pages = {156--161},
  publisher = {{ACM}},
  address = {{Anaheim CA USA}},
  doi = {10.1145/949344.949391},
  urldate = {2023-04-24},
  isbn = {978-1-58113-751-4},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/85NRRQNN/Alphonce and Ventura - 2003 - Using graphics to support the teaching of fundamen.pdf}
}

@inproceedings{altadmri37MillionCompilations2015,
  title = {37 {{Million Compilations}}: {{Investigating Novice Programming Mistakes}} in {{Large-Scale Student Data}}},
  shorttitle = {37 {{Million Compilations}}},
  booktitle = {Proceedings of the 46th {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Altadmri, Amjad and Brown, Neil C.C.},
  year = {2015},
  month = feb,
  series = {{{SIGCSE}} '15},
  pages = {522--527},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2676723.2677258},
  urldate = {2020-10-13},
  abstract = {Previous investigations of student errors have typically focused on samples of hundreds of students at individual institutions. This work uses a year's worth of compilation events from over 250,000 students all over the world, taken from the large Blackbox data set. We analyze the frequency, time-to-fix, and spread of errors among users, showing how these factors inter-relate, in addition to their development over the course of the year. These results can inform the design of courses, textbooks and also tools to target the most frequent (or hardest to fix) errors.},
  isbn = {978-1-4503-2966-8},
  keywords = {blackbox,programming mistakes},
  annotation = {00149},
  file = {/Users/igormoreno/Zotero/storage/TERD6J98/Altadmri and Brown - 2015 - 37 Million Compilations.pdf}
}

@book{alves-fossFormalSyntaxSemantics1999,
  title = {Formal {{Syntax}} and {{Semantics}} of {{Java}}},
  editor = {{Alves-Foss}, Jim},
  year = {1999},
  series = {Lecture {{Notes}} in {{Computer Science}}, {{Lect}}.{{Notes ComputerState-of-the-Art Surveys}}},
  publisher = {{Springer-Verlag}},
  address = {{Berlin Heidelberg}},
  doi = {10.1007/3-540-48737-9},
  urldate = {2020-11-12},
  abstract = {Java, undoubtedly, has its roots in embedded systems and the Web. Nevertheless, it is a fully functional high-level programming language that can provide users with a wide range of functionality and versatility. This thoroughly cross-reviewed state-of-the-art survey is devoted to the study of the syntax and semantics of Java from a formal-methods point of view. It consists of the following chapters by leading researchers: Formal Grammar for Java; Describing the Semantics of Java and Proving Type Soundness; Proving Java Type Soundness; Machine-Checking the Java Specification: Proving Type-Safety; An Event-Based Structural Operational Semantics of Multi-Threaded Java Dynamic Denotational Semantics of Java; A Programmer's Reduction Semantics for Classes and Mixins; A Formal Specification of Java Virtual Machine Instructions for Objects, Methods and Subroutines; The Operational Semantics of a Java Secure Processor; A Programmer Friendly Modular Definition of the Semantics of Java.},
  isbn = {978-3-540-66158-0},
  langid = {english},
  annotation = {00124},
  file = {/Users/igormoreno/Zotero/storage/WPPGACXF/9783540661580.html}
}

@article{amadieuAttentionguidingEffectCognitive2011,
  title = {The Attention-Guiding Effect and Cognitive Load in the Comprehension of Animations},
  author = {Amadieu, Franck and Marin{\'e}, Claudette and Laimay, Carole},
  year = {2011},
  month = jan,
  journal = {Computers in Human Behavior},
  series = {Current {{Research Topics}} in {{Cognitive Load Theory}}},
  volume = {27},
  number = {1},
  pages = {36--40},
  issn = {0747-5632},
  doi = {10.1016/j.chb.2010.05.009},
  urldate = {2018-11-06},
  abstract = {To be effective, instructional animations should avoid causing high extraneous cognitive load imposed by the high attentional requirements of selecting and processing relevant elements. In accordance with the attention-guiding principle (B\'etrancourt, 2005), a study was carried out concerning the impact of cueing on cognitive load and comprehension of animations which depicted a dynamic process in a neurobiology domain. Cueing consisted of zooming in important information at each step of the process. Thirty-six undergraduate psychology students were exposed to an animation three times. Half of the participants received an animation without cueing while the other half received the same animation with cueing. Measures of cognitive load and comprehension performance (questions on isolated elements and on high-element interactivity material) were administered twice, after one and three exposures to the animation. The analyses revealed two main results. First, extraneous cognitive load was reduced by cueing after three exposures. Second, retention of the isolated elements was improved in both animation groups, whereas comprehension of high-element interactive material (i.e., the causal relations between elements) increased only in the cueing condition. Furthermore, a problem solving task showed that cueing supported the development of a more elaborate mental model.},
  keywords = {Animation,Attention,Cognitive load,Comprehension,Cueing,Element interactivity},
  file = {/Users/igormoreno/Zotero/storage/YH8SFEBQ/Amadieu et al - 2011 - The attention-guiding effect and cognitive load in the comprehension of.pdf;/Users/igormoreno/Zotero/storage/E3XJTNEF/S0747563210001469.html}
}

@incollection{amadieuConceptMapsComprehension2014,
  title = {Concept {{Maps}} for {{Comprehension}} and {{Navigation}} of {{Hypertexts}}},
  booktitle = {Digital {{Knowledge Maps}} in {{Education}}: {{Technology-Enhanced Support}} for {{Teachers}} and {{Learners}}},
  author = {Amadieu, Franck and Salmer{\'o}n, Ladislao},
  editor = {Ifenthaler, Dirk and Hanewald, Ria},
  year = {2014},
  pages = {41--59},
  publisher = {{Springer New York}},
  address = {{New York, NY}},
  doi = {10.1007/978-1-4614-3178-7_3},
  urldate = {2018-11-06},
  abstract = {Comprehension and learning with hypertexts are challenging due to the nonlinearity of such digital documents. Processing hypertexts may involve navigation and comprehension problems, leading learners to cognitive overhead. Concept maps have been added to hypertexts to reduce the cognitive requirements of navigation and comprehension. This chapter explores the literature to examine the effects of concept maps on navigation, comprehension, and learning from hypertexts. The literature review aims to elucidate how concept maps may contribute to processing hypertexts and under which conditions. In spite of the variability of concept maps used in hypertexts, some findings converge. Concept maps reduce the cognitive requirements for processing hypertexts. They support outcomes as well as guiding learner navigation. They convey a macrostructure of the semantic relationships between content that supports more coherent navigation and promotes the construction of a mental representation of the information structure of hypertexts. In practice, concept maps are only beneficial for learners with low skills or low prior domain knowledge. Studies have shown that different strategies in processing concept maps may explain a part of the variance in the benefits provided by the concept maps. Processing that occurs early in the learning task yields better comprehension performance. The conclusions lead to recommendations for designing effective concept maps for learning from hypertexts. Further research could be conducted on the online processes by using eye movement recording in order to analyze dynamic processes during learning.},
  isbn = {978-1-4614-3178-7},
  langid = {english},
  keywords = {Comprehension,Concept map,Hypertext,Navigation,Prior knowledge,Skills},
  file = {/Users/igormoreno/Zotero/storage/JJMXXQ6T/Amadieu and Salmerón - 2014 - Concept Maps for Comprehension and Navigation of Hypertexts.pdf}
}

@article{amadieuEffectsPriorKnowledge2009,
  title = {Effects of Prior Knowledge and Concept-Map Structure on Disorientation, Cognitive Load, and Learning},
  author = {Amadieu, Franck and {van Gog}, Tamara and Paas, Fred and Tricot, Andr{\'e} and Marin{\'e}, Claudette},
  year = {2009},
  month = oct,
  journal = {Learning and Instruction},
  series = {Cognitive Load in Interactive Knowledge Construction},
  volume = {19},
  number = {5},
  pages = {376--386},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2009.02.005},
  urldate = {2018-11-06},
  abstract = {This study explored the effects of prior knowledge (high vs. low; HPK and LPK) and concept-map structure (hierarchical vs. network; HS and NS) on disorientation, cognitive load, and learning from non-linear documents on ``the infection process of a retrograde virus (HIV)''. Participants in the study were 24 adults. Overall subjective ratings of disorientation and cognitive load, as well as detailed analysis of eye movement and navigation data were used. The results showed that LPK learners gained equal factual knowledge from the HS and NS concept maps, gained more conceptual knowledge from the HS concept map, and had to invest less mental effort in the posttest after learning with the HS concept map. On the other hand, HPK learners gained more factual knowledge from the HS concept map than from the NS concept map, and gained equal conceptual knowledge from both concept-map structures. Also, LPK learners experienced higher disorientation during learning with the NS concept map than the HS map, whereas no differential effect of concept-map structure was found for HPK learners. Both LPK and HPK learners invested less mental effort in processing the HS concept map. The eye tracking and navigation data provided more detailed insight into these findings.},
  keywords = {Cognitive load,Concept map,Expertise reversal effect,Non-linear document,Prior knowledge},
  file = {/Users/igormoreno/Zotero/storage/K7TT28CC/Amadieu et al - 2009 - Effects of prior knowledge and concept-map structure on disorientation,.pdf;/Users/igormoreno/Zotero/storage/X72R9T4P/Amadieu et al - 2009 - Effects of prior knowledge and concept-map structure on disorientation,.pdf;/Users/igormoreno/Zotero/storage/IRSSDYYE/S0959475209000152.html;/Users/igormoreno/Zotero/storage/N4U8VH4X/S0959475209000152.html}
}

@book{amarelReadingsArtificialIntelligence1985,
  title = {Readings in Artificial Intelligence: A Collection of Articles},
  shorttitle = {Readings in Artificial Intelligence},
  editor = {Amarel, Saul and Webber, Bonnie Lynn and Nilsson, Nils J.},
  year = {1985},
  publisher = {{Morgan Kaufmann, Publishers}},
  address = {{Los Altos, Calif}},
  isbn = {978-0-934613-03-3},
  langid = {english},
  lccn = {Q335.5 .R3 1985},
  keywords = {Artificial intelligence},
  file = {/Users/igormoreno/Zotero/storage/2D4AX7SI/Amarel et al. - 1985 - Readings in artificial intelligence a collection .pdf}
}

@book{ambroseHowLearningWorks,
  title = {How {{Learning Works}}: {{Seven Research-Based Principles}} for {{Smart Teaching}}},
  author = {Ambrose, Susan A},
  langid = {english},
  annotation = {03035},
  file = {/Users/igormoreno/Zotero/storage/7RYQLSF3/Ambrose - How Learning Works Seven Research-Based Principle.pdf}
}

@book{americaneducationalresearchassociationReportRecommendationsReauthorization2011,
  title = {Report and Recommendations for the Reauthorization of the Institute of Education Sciences},
  editor = {American Educational Research Association},
  year = {2011},
  publisher = {{American Educational Research Association}},
  address = {{Washington, D.C}},
  isbn = {978-0-935302-35-6},
  langid = {english},
  lccn = {LB1028 .A435 2011},
  keywords = {Education,Research},
  annotation = {OCLC: ocn826867074}
}

@inproceedings{ananeDynamicVisualisationAlgorithm2020,
  title = {A {{Dynamic Visualisation}} of the {{DES Algorithm}} and a {{Multi-faceted Evaluation}} of {{Its Educational Value}}},
  booktitle = {Proceedings of the 2020 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Anane, Rachid and Alshammari, Mohammad T.},
  year = {2020},
  month = jun,
  pages = {370--376},
  publisher = {{ACM}},
  address = {{Trondheim Norway}},
  doi = {10.1145/3341525.3387386},
  urldate = {2021-06-14},
  abstract = {There is a general consensus that visualisations can be effective in teaching, compared to traditional modes of instruction. Encryption offers an interesting case study for the application of visualisation, largely due to its complex and abstract nature. This paper is concerned with the presentation of a dynamic and interactive visualisation of the Data Encryption Standard (DES) algorithm, and the evaluation of its educational value. Its design was motivated by the desire to seamlessly bridge the gap between algorithm formulation and its visualisation, and to provide instruction in context. As DES is an archetypal cryptographic algorithm, a visualisation of its operations on confusion and diffusion is a key requirement. The educational value of the visualisation is expressed in terms of four facets: its educational effectiveness, its presentation as an interactive and dynamic graphical object, its perceived usefulness by students and its completeness as a learning resource. Educational effectiveness was assessed in terms of the pre-test and post-test scores of a treatment group and a control group of students, whereas the other three facets were evaluated through a survey taken by the treatment group. An analysis of the results of the evaluation of the visualisation confirms its educational value.},
  isbn = {978-1-4503-6874-2},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/VMLGEMIU/Anane e Alshammari - 2020 - A Dynamic Visualisation of the DES Algorithm and a.pdf}
}

@article{andersenSuperLanguagesMaking2017,
  title = {Super 8 Languages for Making Movies (Functional Pearl)},
  author = {Andersen, Leif and Chang, Stephen and Felleisen, Matthias},
  year = {2017},
  month = aug,
  journal = {Proceedings of the ACM on Programming Languages},
  volume = {1},
  number = {ICFP},
  pages = {30:1--30:29},
  doi = {10.1145/3110274},
  urldate = {2021-12-17},
  abstract = {The Racket doctrine tells developers to narrow the gap between the terminology of a problem domain and general programming constructs by creating languages instead of just plain programs. This pearl illustrates this point with the creation of a relatively simple domain-specific language for editing videos. To produce the video proceedings of a conference, for example, video professionals traditionally use "non-linear" GUI editors to manually edit each talk, despite the repetitive nature of the process. As it turns out, video editing naturally splits the work into a declarative phase and an imperative rendering phase at the end. Hence it is natural to create a functional-declarative language for the first phase, which reduces a lot of manual labor. This user-facing DSL utilizes a second, internal DSL to implement the second phase, which is an interface to a general, low-level C library. Finally, we inject type checking into our language via another DSL that supports programming in the language of type formalisms. In short, the development of the video editing language cleanly demonstrates how the Racket doctrine naturally leads to the creation of language hierarchies, analogous to the hierarchies of modules found in conventional functional languages.},
  keywords = {Declarative Languages,Domain-Specific Language,Integrated Development Environment,Language Oriented Design,Movies,Syntax Elaboration,Video Editing},
  file = {/Users/igormoreno/Zotero/storage/2XMQCZX6/Andersen et al - 2017 - Super 8 languages for making movies (functional pearl).pdf}
}

@book{andersonMakingInstrumentsCount1993,
  title = {Making {{Instruments Count}}: {{Essays}} on {{Historical Scientific Instruments Presented}} to {{Gerard L}}'{{Estrange Turner}}},
  shorttitle = {Making {{Instruments Count}}},
  author = {Anderson, R. G. W. and Bennett, J. A. and Ryan, W. F.},
  year = {1993},
  month = dec,
  publisher = {{Variorum}},
  address = {{Aldershot, Hampshire ; Brookfield, Vt}},
  abstract = {This collection of essays, bringing together many of the established curators and historians in the field of scientific instruments and ranging widely over their interests, represents a branch of the history of science whose activity, output and significance within the discipline have blossomed in recent years. It is no longer possible to fence off a grand conceptual succession and represent this as the only essence of scientific development. Practices - in discovery, experiment, application and teaching - are integral parts of what science does and are therefore all part of what it is, and instruments were central to each of these varieties of scientific practice.The instrument historian comes in a number of guises - the scholar, the collector, the curator, the dealer - and the discipline is practised in a variety of settings. The university has very different priorities from the salesroom, the museum from the antiques fair, but the challenge of instrument history is to integrate connoisseurship, technical insight and historical sensitivity, while not neglecting the trade institutions and practices of the makers and remaining familiar with instrument populations in both the captivity of museums and the relative freedom of the market-place.This volume is presented to Gerard Turner, who has been at the forefront of promoting instrument studies in recent years. After a twenty-five-year association with the Museum of the History of Science at Oxford, a Visiting Professorship in the History of Scientific Instruments was established for him at the Imperial College, London, in 1988, from where he has been able to increase his research in this field. Gerard Turner has also been, amongst other positions in his distinguished career, the first Chairman of the Scientific Instrument Society, the President of the Royal Microscopical Society and the President of the British Society for the History of Science. In addition, he currently holds the position of Editor of the journal Annals of Science.The volume includes papers on instruments for mathematics, astronomy, navigation, horology, chemistry, physics, optics and medicine, together with studies of the instrument-making trade and reflections on the significance of such work for our understanding of the past.},
  isbn = {978-0-86078-394-7},
  langid = {english}
}

@inproceedings{andersonShrinkingJavaScriptCS12021,
  title = {Shrinking {{JavaScript}} for {{CS1}}},
  booktitle = {Proceedings of the 2021 {{ACM SIGPLAN International Symposium}} on {{SPLASH-E}}},
  author = {Anderson, Boyd and Henz, Martin and Low, Kok-Lim and Tan, Daryl},
  year = {2021},
  month = oct,
  pages = {87--96},
  publisher = {{ACM}},
  address = {{Chicago IL USA}},
  doi = {10.1145/3484272.3484970},
  urldate = {2022-03-28},
  abstract = {In teaching and learning programming at first-year-university level, simple languages with small feature sets are preferable over industry-strength languages with extensive feature sets, to reduce the learners' cognitive load. At the same time, there is increasing pressure to familiarise students with mainstream languages early in their learning journey, and these languages accumulate features as years go by. In response to these competing requirements, we developed Source, a collection of JavaScript sublanguages with feature sets just expressive enough to introduce first-year computer science students to the elements of computation. These languages are supported by a web-based programming environment custom-built for learning at beginner's level, which provides transpiler, interpreter, virtual machine, and algebraicstepper-based implementations of the languages, and includes tracing, debugging, visualization, type-inference, and smart-editor features. This paper motivates the choice of JavaScript as starting point and describes the syntax and semantics of the Source languages compared to their parent language, and their implementations in the system. We report our experiences in developing and improving the languages and implementations over a period of three years, teaching a total of 1561 computer science first-year students at a university.},
  isbn = {978-1-4503-9089-7},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/L9Y7A25Z/Anderson et al. - 2021 - Shrinking JavaScript for CS1.pdf}
}

@article{andersonSkillAcquisitionLISP1989,
  title = {Skill {{Acquisition}} and the {{LISP Tutor}}},
  author = {Anderson, John R. and Conrad, Frederick G. and Corbett, Albert T.},
  year = {1989},
  journal = {Cognitive Science},
  volume = {13},
  number = {4},
  pages = {467--505},
  issn = {1551-6709},
  doi = {10.1207/s15516709cog1304_1},
  urldate = {2023-03-17},
  abstract = {An analysis of student learning with the LISP tutor indicates that while LISP is complex, learning it is simple. The key to factoring out the complexity of LISP is to monitor the learning of the 500 productions in the LISP tutor which describe the programming skill. The learning of these productions follows the power-law learning curve typical of skill acquisition. There is transfer from other programming experience to the extent that this programming experience involves the same productions. Subjects appear to differ only on the general dimensions of how well they acquire the productions and how well they retain the productions. Instructional manipulations such as remediation, content of feedback, and timing of feedback are effective to the extent they give students more practice programming, and explain to students why correct solutions work.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/95H38F8T/Anderson et al. - 1989 - Skill Acquisition and the LISP Tutor.pdf;/Users/igormoreno/Zotero/storage/MKNKX2T2/s15516709cog1304_1.html}
}

@article{andersonSpreadingActivationTheory,
  title = {A {{Spreading Activation Theory}} of {{Memory}}},
  author = {Anderson, John R},
  pages = {35},
  langid = {english},
  annotation = {02891},
  file = {/Users/igormoreno/Zotero/storage/IFHU9ZJP/Anderson - A Spreading Activation Theory of Memory.pdf}
}

@book{andersonTaxonomyLearningTeaching2000,
  title = {Taxonomy for {{Learning}}, {{Teaching}}, and {{Assessing}}, {{A}}: {{A Revision}} of {{Bloom}}'s {{Taxonomy}} of {{Educational Objectives}}, {{Complete Edition}}},
  shorttitle = {Taxonomy for {{Learning}}, {{Teaching}}, and {{Assessing}}, {{A}}},
  author = {Anderson, Lorin and Krathwohl, David and Airasian, Peter and Cruikshank, Kathleen and Mayer, Richard and Pintrich, Paul and Raths, James and Wittrock, Merlin},
  year = {2000},
  month = dec,
  edition = {Complete edition},
  publisher = {{Pearson}},
  address = {{New York}},
  isbn = {978-0-321-08405-7},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/ZMU34SF2/Anderson et al - 2000 - Taxonomy for Learning, Teaching, and Assessing, A.pdf}
}

@book{andersonTheoryPracticeOnline2008,
  title = {The {{Theory}} and {{Practice}} of {{Online Learning}}},
  author = {Anderson, Terry},
  year = {2008},
  publisher = {{Athabasca University Press}},
  abstract = {"Neither an academic tome nor a prescriptive 'how to' guide, The Theory and Practice of Online Learning is an illuminating collection of essays by practitioners and scholars active in the complex field of distance education. Distance education has evolved significantly in its 150 years of existence. For most of this time, it was an individual pursuit defined by infrequent postal communication. But recently, three more developmental generations have emerged, supported by television and radio, teleconferencing, and computer conferencing. The early 21st century has produced a fifth generation, based on autonomous agents and intelligent, database-assisted learning, that has been referred to as Web 2.0. The second edition of "The Theory and Practice of Online Learning" features updates in each chapter, plus four new chapters on current distance education issues such as connectivism and social software innovations."--BOOK JACKET.},
  googlebooks = {RifNwzU3HR4C},
  isbn = {978-1-897425-08-4},
  langid = {english},
  keywords = {Computers / Educational Software,Education / Computers \& Technology},
  annotation = {02125}
}

@book{andreaalderRekursivesProgrammierenLeitprogramm1995,
  title = {{Rekursives Programmieren: Ein Leitprogramm in Informatik}},
  author = {{Andrea Alder} and {Marco Bettinaglio} and {Werner Hartmann} and {Patrick Leoni} and {Markus Meier} and {Florian Schlotke}},
  year = {1995},
  month = may,
  langid = {ngerman},
  file = {/Users/igormoreno/Zotero/storage/UUX3T4DG/Andrea Alder et al - 1995 - Rekursives Programmieren.pdf}
}

@misc{andreasvaterlausGrundsaetzeFuerCurriculumsentwicklungen2018,
  title = {{Grunds\"atze f\"ur Curriculumsentwicklungen und Curricula von Studiengaengen}},
  author = {{Andreas Vaterlaus}},
  year = {2018},
  month = aug,
  publisher = {{Prorektor Curriculumsentwicklung, ETH Z\"urich}},
  langid = {ngerman},
  file = {/Users/igormoreno/Zotero/storage/PBI7DQ26/Andreas Vaterlaus - 2018 - Grundsätze für Curriculumsentwicklungen und Curricula von Studiengaengen.pdf}
}

@inproceedings{andrewj.koSixLearningBarriers2004,
  title = {Six {{Learning Barriers}} in {{End-User Programming Systems}}},
  booktitle = {2004 {{IEEE Symposium}} on {{Visual Languages}} - {{Human Centric Computing}}},
  author = {Andrew J. Ko and Myers, B.A. and Aung, H.H.},
  year = {2004},
  month = sep,
  pages = {199--206},
  doi = {10.1109/VLHCC.2004.47},
  abstract = {As programming skills increase in demand and utility, the learnability of end-user programming systems is of utmost importance. However, research on learning barriers in programming systems has primarily focused on languages, overlooking potential barriers in the environment and accompanying libraries. To address this, a study of beginning programmers learning Visual Basic.NET was performed. This identified six types of barriers: design, selection, coordination, use, understanding, and information. These barriers inspire a new metaphor of computation, which provides a more learner-centric view of programming system design},
  keywords = {beginning programmers,Computer languages,computer science education,end-user programming systems,Feedback,learnability,learning barriers,Libraries,Manufacturing,programming environments,Programming profession,programming skills,programming system design,Prototypes,Robot control,Robot kinematics,Robot programming,Utility programs,Visual BASIC,Visual Basic.NET},
  file = {/Users/igormoreno/Zotero/storage/9LZALTMD/Andrew J. Ko et al. - 2004 - Six Learning Barriers in End-User Programming Syst.pdf;/Users/igormoreno/Zotero/storage/AWDEP99Q/Andrew J. Ko et al. - 2004 - Six Learning Barriers in End-User Programming Syst.pdf;/Users/igormoreno/Zotero/storage/7STQYPNB/1372321.html;/Users/igormoreno/Zotero/storage/R4JEW8U8/1372321.html}
}

@misc{andrianoffRolePlayingObjectoriented2002,
  title = {Role Playing in an Object-Oriented World},
  author = {Andrianoff, Steven K. and Levine, David B.},
  year = {2002},
  month = feb,
  publisher = {{Association for Computing Machinery}},
  urldate = {2020-04-13},
  abstract = {Role playing exercises are one of many teaching techniques commonly employed to drive home lessons about computer science. Most of the specific role playing described in the literature, however, relates to algorithm or hardware design. More recently, the Pedagogical Patterns Project has published patterns involving role playing in a general sense. In this paper, we draw on three separate role playing exercises that we have developed to show that scripted role playing is a natural and effective way to introduce concepts of object-oriented design.},
  annotation = {00074},
  file = {/Users/igormoreno/Zotero/storage/KAWLYNQT/Andrianoff and Levine - 2002 - Role playing in an object-oriented world.pdf}
}

@techreport{angeloneEntwicklungSchulischerLeistungen2013,
  title = {{Entwicklung schulischer Leistungen w\"ahrend der obligatorischen Schulzeit}},
  author = {Angelone, Domenico and Keller, Florian and Moser, Urs},
  year = {2013},
  month = nov,
  langid = {ngerman},
  file = {/Users/igormoreno/Zotero/storage/4KVH9PVE/Angelone et al. - Entwicklung schulischer Leistungen während der obl.pdf}
}

@misc{AnkiManual,
  title = {Anki {{Manual}}},
  urldate = {2020-02-11},
  howpublished = {https://apps.ankiweb.net/docs/manual.html},
  file = {/Users/igormoreno/Zotero/storage/BGX8UF4L/manual.html}
}

@inproceedings{annamaaIntroducingThonnyPython2015,
  title = {Introducing {{Thonny}}, a {{Python IDE}} for Learning Programming},
  booktitle = {Proceedings of the 15th {{Koli Calling Conference}} on {{Computing Education Research}} - {{Koli Calling}} '15},
  author = {Annamaa, Aivar},
  year = {2015},
  pages = {117--121},
  publisher = {{ACM Press}},
  address = {{Koli, Finland}},
  doi = {10.1145/2828959.2828969},
  urldate = {2020-06-22},
  abstract = {Thonny is a new Python IDE for learning and teaching programming that can make program visualization a natural part of the beginners' workflow. Among its prominent features are different ways of stepping through the code, stepby-step expression evaluation, intuitive visualization of the call stack and mode for explaining the concepts of references and heap. It supports educational research by logging user actions for replaying or analyzing the programming process. It is free to use and open for extension.},
  isbn = {978-1-4503-4020-5},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/9PDIR5ZN/Annamaa - 2015 - Introducing Thonny, a Python IDE for learning programming.pdf}
}

@techreport{annewatsonKeyUnderstandingsMathematics2009,
  title = {Key Understandings in Mathematics Learning},
  author = {{Anne Watson}},
  year = {2009},
  urldate = {2021-05-23},
  file = {/Users/igormoreno/Zotero/storage/6JRTEHME/Anne Watson - 2009 - Key understandings in mathematics learning.pdf}
}

@article{anunpattanaCapturingPotentialImpact2021,
  title = {Capturing Potential Impact of Challenge-Based Gamification on Gamified Quizzing in the Classroom},
  author = {Anunpattana, Punyawee and Khalid, Mohd Nor Akmal and Iida, Hiroyuki and Inchamnan, Wilawan},
  year = {2021},
  month = dec,
  journal = {Heliyon},
  volume = {7},
  number = {12},
  pages = {e08637},
  issn = {24058440},
  doi = {10.1016/j.heliyon.2021.e08637},
  urldate = {2023-06-27},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/I8VDZ97X/Anunpattana et al. - 2021 - Capturing potential impact of challenge-based gami.pdf}
}

@inproceedings{anzaiLearningRecursiveProcedures1982,
  title = {Learning {{Recursive Procedures}} by {{Middleschool Children}}},
  booktitle = {Fourth {{Annual Conference}} of the {{Cognitive Science Society}}},
  author = {Anzai, Yuichiro and Uesato, Yuzuru},
  year = {1982},
  pages = {100--102},
  address = {{Ann Arbor, Michigan}},
  file = {/Users/igormoreno/Zotero/storage/SMD23ENT/Anzai and Uesato - 1982 - Learning Recursive Procedures by Middleschool Ciiiidren.pdf}
}

@misc{ApparatusHybridGraphics,
  title = {Apparatus: {{A}} Hybrid Graphics Editor and Programming Environment for Creating Interactive Diagrams},
  urldate = {2023-01-21},
  howpublished = {http://aprt.us/},
  file = {/Users/igormoreno/Zotero/storage/ZYIQIMGQ/aprt.us.html}
}

@inproceedings{appiah-kubiEvaluationEngineeringTeaching2016,
  title = {Evaluation of Engineering Teaching Effectiveness through Cheat-Sheet Data-Mining},
  booktitle = {{{ASEE Annual Conference}} and {{Exposition}}, {{Conference Proceedings}}},
  author = {{Appiah-Kubi}, P.},
  year = {2016},
  volume = {2016-June},
  abstract = {This research paper describes the study of cheat-sheets and how Engineering Educators can utilize them to evaluate students' ability to identify critical information. Effective teaching has different definitions, which make it a challenge to settle on a single definitive definition. Some of the common words or phrases characterizing an effective teacher are: interesting, helpful, approachable, makes subject interesting, being available, motivating students, setting high but achievable standards, presents material well, and stimulating interest in subject. As good as these attributes are, they may not always guarantee the desired learning outcome. For this reason, it is important to evaluate effective teaching in conjunction with students' learning. Student learning is normally done by evaluating their performances in exams, quizzes, class discussions and other assignments. One area full of information but has received no attention is cheat-sheets prepared students in some exams. These sheets usually contain what students perceive as difficult course material to understand, memorize or pertinent to the exam. Since exams usually contain the core concept of the subjects taught, students prepare cheat-sheets to aid them to prove that they received and understood the core concept of the various subjects. From this study, we conclude that studying the structure and content of cheat-sheets may help engineering educators to gain invaluable knowledge of how students identify the core content of class material, hence, gaining an insight on how to propagate the main subject matter of the courses they teach. \textcopyright{} American Society for Engineering Education, 2016.},
  keywords = {Assessment,Cheat sheet,Formative assessment,Summative assessment,Teaching effectiveness},
  file = {/Users/igormoreno/Zotero/storage/AVI5BZ6A/Appiah-Kubi - 2016 - Evaluation of engineering teaching effectiveness through cheat-sheet data-mining.pdf;/Users/igormoreno/Zotero/storage/CRKRUSXM/display.html}
}

@inproceedings{arawjoTeachingProgrammingGamified2017,
  ids = {arawjoTeachingProgrammingGamified2017a,arawjoTeachingProgrammingGamified2017b},
  title = {Teaching {{Programming}} with {{Gamified Semantics}}},
  booktitle = {Proceedings of the 2017 {{CHI Conference}} on {{Human Factors}} in {{Computing Systems}}},
  author = {Arawjo, Ian and Wang, Cheng-Yao and Myers, Andrew C. and Andersen, Erik and Guimbreti{\`e}re, Fran{\c c}ois},
  year = {2017},
  month = may,
  pages = {4911--4923},
  publisher = {{ACM}},
  address = {{Denver Colorado USA}},
  doi = {10.1145/3025453.3025711},
  urldate = {2020-09-28},
  abstract = {Dominant approaches to programming education emphasize program construction over language comprehension. We present Reduct, an educational game embodying a new, comprehension-first approach to teaching novices core programming concepts which include functions, Booleans, equality, conditionals, and mapping functions over sets. In this novel teaching strategy, the player executes code using reductionbased operational semantics. During gameplay, code representations fade from concrete, block-based graphics to the actual syntax of JavaScript ES2015. We describe our design rationale in depth and report on the results of a study evaluating the efficacy of our approach on young adults (18+) without prior coding experience. In a short timeframe, novices demonstrated promising learning of core concepts expressed in actual JavaScript. We discuss ramifications for the design of future computational thinking games.},
  isbn = {978-1-4503-4655-9},
  langid = {english},
  keywords = {block-based programming,concreteness fading,educational games,novice programming},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/R62XCLC2/Arawjo et al. - 2017 - Teaching Programming with Gamified Semantics.pdf;/Users/igormoreno/Zotero/storage/SLDDNVXW/Arawjo et al - 2017 - Teaching Programming with Gamified Semantics.pdf;/Users/igormoreno/Zotero/storage/UI4RG52D/Arawjo et al. - 2017 - Teaching Programming with Gamified Semantics.pdf;/Users/igormoreno/Zotero/storage/W7HMVNEM/Arawjo et al. - 2017 - Teaching Programming with Gamified Semantics.pdf}
}

@inproceedings{arawjoWriteCodeCultural2020,
  ids = {arawjoWriteCodeCultural2020a},
  title = {To {{Write Code}}: {{The Cultural Fabrication}} of {{Programming Notation}} and {{Practice}}},
  shorttitle = {To {{Write Code}}},
  booktitle = {Proceedings of the 2020 {{CHI Conference}} on {{Human Factors}} in {{Computing Systems}}},
  author = {Arawjo, Ian},
  year = {2020},
  month = apr,
  series = {{{CHI}} '20},
  pages = {1--15},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3313831.3376731},
  urldate = {2020-10-27},
  abstract = {Writing and its means have become detached. Unlike written and drawn practices developed prior to the 20th century, notation for programming computers developed in concert and conflict with discretizing infrastructure such as the shift-key typewriter and data processing pipelines. In this paper, I recall the emergence of high-level notation for representing computation. I show how the earliest inventors of programming notations borrowed from various written cultural practices, some of which came into conflict with the constraints of digitizing machines, most prominently the typewriter. As such, I trace how practices of "writing code" were fabricated along social, cultural, and material lines at the time of their emergence. By juxtaposing early visions with the modern status quo, I question long-standing terminology, dichotomies, and epistemological tendencies in the field of computer programming. Finally, I argue that translation work is a fundamental property of the practice of writing code by advancing an intercultural lens on programming practice rooted in history.},
  isbn = {978-1-4503-6708-0},
  keywords = {culture,infrastructure,materiality,notation,programming},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/3IVBHGAK/Arawjo - 2020 - To Write Code The Cultural Fabricationof Programm.pdf;/Users/igormoreno/Zotero/storage/IUZVRDLQ/Arawjo - 2020 - To Write Code The Cultural Fabrication of Program.pdf}
}

@inproceedings{arcuriAdaptiveRandomTesting2011,
  title = {Adaptive Random Testing: An Illusion of Effectiveness?},
  shorttitle = {Adaptive Random Testing},
  booktitle = {Proceedings of the 2011 {{International Symposium}} on {{Software Testing}} and {{Analysis}}},
  author = {Arcuri, Andrea and Briand, Lionel},
  year = {2011},
  month = jul,
  series = {{{ISSTA}} '11},
  pages = {265--275},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2001420.2001452},
  urldate = {2021-04-08},
  abstract = {Adaptive Random Testing (ART) has been proposed as an enhancement to random testing, based on assumptions on how failing test cases are distributed in the input domain. The main assumption is that failing test cases are usually grouped into contiguous regions. Many papers have been published in which ART has been described as an effective alternative to random testing when using the average number of test case executions needed to find a failure (F-measure). But all the work in the literature is based either on simulations or case studies with unreasonably high failure rates. In this paper, we report on the largest empirical analysis of ART in the literature, in which 3727 mutated programs and nearly ten trillion test cases were used. Results show that ART is highly inefficient even on trivial problems when accounting for distance calculations among test cases, to an extent that probably prevents its practical use in most situations. For example, on the infamous Triangle Classification program, random testing finds failures in few milliseconds whereas ART execution time is prohibitive. Even when assuming a small, fixed size test set and looking at the probability of failure (P-measure), ART only fares slightly better than random testing, which is not sufficient to make it applicable in realistic conditions. We provide precise explanations of this phenomenon based on rigorous empirical analyses. For the simpler case of single-dimension input domains, we also perform formal analyses to support our claim that ART is of little use in most situations, unless drastic enhancements are developed. Such analyses help us explain some of the empirical results and identify the components of ART that need to be improved to make it a viable option in practice.},
  isbn = {978-1-4503-0562-4},
  keywords = {distance,diversity,F-measure,faulty region,P-measure,random testing,shape,similarity},
  file = {/Users/igormoreno/Zotero/storage/TBMGGJQC/Arcuri and Briand - 2011 - Adaptive random testing an illusion of effectiven.pdf}
}

@inproceedings{arcuriPracticalGuideUsing2011,
  title = {A Practical Guide for Using Statistical Tests to Assess Randomized Algorithms in Software Engineering},
  booktitle = {Proceedings of the 33rd {{International Conference}} on {{Software Engineering}}},
  author = {Arcuri, Andrea and Briand, Lionel},
  year = {2011},
  month = may,
  series = {{{ICSE}} '11},
  pages = {1--10},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1985793.1985795},
  urldate = {2021-04-08},
  abstract = {Randomized algorithms have been used to successfully address many different types of software engineering problems. This type of algorithms employ a degree of randomness as part of their logic. Randomized algorithms are useful for difficult problems where a precise solution cannot be derived in a deterministic way within reasonable time. However, randomized algorithms produce different results on every run when applied to the same problem instance. It is hence important to assess the effectiveness of randomized algorithms by collecting data from a large enough number of runs. The use of rigorous statistical tests is then essential to provide support to the conclusions derived by analyzing such data. In this paper, we provide a systematic review of the use of randomized algorithms in selected software engineering venues in 2009. Its goal is not to perform a complete survey but to get a representative snapshot of current practice in software engineering research. We show that randomized algorithms are used in a significant percentage of papers but that, in most cases, randomness is not properly accounted for. This casts doubts on the validity of most empirical results assessing randomized algorithms. There are numerous statistical tests, based on different assumptions, and it is not always clear when and how to use these tests. We hence provide practical guidelines to support empirical research on randomized algorithms in software engineering},
  isbn = {978-1-4503-0445-0},
  keywords = {bonferroni adjustment,confidence interval,effect size,non-parametric test,parametric test,statistical difference,survey,systematic review},
  file = {/Users/igormoreno/Zotero/storage/RD25QR24/Arcuri and Briand - 2011 - A practical guide for using statistical tests to a.pdf}
}

@article{arfeEffectsCodingChildren2020,
  title = {The Effects of Coding on Children's Planning and Inhibition Skills},
  author = {Arf{\'e}, Barbara and Vardanega, Tullio and Ronconi, Lucia},
  year = {2020},
  month = apr,
  journal = {Computers \& Education},
  volume = {148},
  pages = {103807},
  issn = {03601315},
  doi = {10.1016/j.compedu.2020.103807},
  urldate = {2023-03-16},
  abstract = {Computational thinking (CT) and the coding element of it are progressively entering in the pri\- mary school curriculum worldwide. Yet, little is known about the effects of these skills on chil\- dren's cognitive development. In a cluster-randomized controlled trial, we examined how 1stgrade children's gains in coding skills that follow instructional intervention transfer to two important executive functions (EFs): planning and response inhibition. One-hundred seventy-nine (179) first graders from 5 schools and 10 class groups, with no prior experience of coding, were randomly assigned to an experimental (coding, 5 classes) or control (standard STEM, 5 classes) instructional condition. The experimental intervention involved 8 h of coding activities (two weekly lessons for 4 weeks), through the Code.org platform. Children in the control group were exposed to standard STEM instruction. Four coding tasks drawn from Code.org, two standardized planning tasks (Elithorn maze test and Tower of London, ToL, test) and two standardized response inhibition tasks (NEPSY-II inhibition subtest and numerical Stroop), were used to assess children's skills at the pretest and posttest (after the instructional intervention). To measure retention, the same skills were also assessed for 44 children from the experimental group 5 weeks from the posttest (follow up). The results show that practice with coding through Code.org not only improved measurably children's ability to solve coding problems, but also their EFs, increasing the time children spent planning, their ability to solve standardized planning tasks, and to inhibit prepotent responses. Such findings add to the still limited literature on the cognitive effects of coding, deepening our understanding of the positive implications of introducing Computational Thinking early in the school curriculum.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/PC8UHR5D/Arfé et al. - 2020 - The effects of coding on children's planning and i.pdf}
}

@article{arfeEffectsCodingChildren2020a,
  title = {The Effects of Coding on Children's Planning and Inhibition Skills},
  author = {Arf{\'e}, Barbara and Vardanega, Tullio and Ronconi, Lucia},
  year = {2020},
  month = apr,
  journal = {Computers \& Education},
  volume = {148},
  pages = {103807},
  issn = {03601315},
  doi = {10.1016/j.compedu.2020.103807},
  urldate = {2023-03-16},
  abstract = {Computational thinking (CT) and the coding element of it are progressively entering in the pri\- mary school curriculum worldwide. Yet, little is known about the effects of these skills on chil\- dren's cognitive development. In a cluster-randomized controlled trial, we examined how 1stgrade children's gains in coding skills that follow instructional intervention transfer to two important executive functions (EFs): planning and response inhibition. One-hundred seventy-nine (179) first graders from 5 schools and 10 class groups, with no prior experience of coding, were randomly assigned to an experimental (coding, 5 classes) or control (standard STEM, 5 classes) instructional condition. The experimental intervention involved 8 h of coding activities (two weekly lessons for 4 weeks), through the Code.org platform. Children in the control group were exposed to standard STEM instruction. Four coding tasks drawn from Code.org, two standardized planning tasks (Elithorn maze test and Tower of London, ToL, test) and two standardized response inhibition tasks (NEPSY-II inhibition subtest and numerical Stroop), were used to assess children's skills at the pretest and posttest (after the instructional intervention). To measure retention, the same skills were also assessed for 44 children from the experimental group 5 weeks from the posttest (follow up). The results show that practice with coding through Code.org not only improved measurably children's ability to solve coding problems, but also their EFs, increasing the time children spent planning, their ability to solve standardized planning tasks, and to inhibit prepotent responses. Such findings add to the still limited literature on the cognitive effects of coding, deepening our understanding of the positive implications of introducing Computational Thinking early in the school curriculum.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/EBZFF2QG/Arfé et al. - 2020 - The effects of coding on children's planning and i.pdf}
}

@book{arkadievComplexitiesMorphology2020,
  title = {The {{Complexities}} of {{Morphology}}},
  editor = {Arkadiev, Peter and Gardani, Francesco},
  year = {2020},
  month = sep,
  publisher = {{Oxford University Press}},
  address = {{Oxford, New York}},
  abstract = {This volume explores the multiple aspects of morphological complexity, investigating primarily whether certain aspects of morphology can be considered more complex than others, and how that complexity can be measured. The book opens with a detailed introduction from the editors that critically assesses the foundational assumptions that inform contemporary approaches to morphological complexity. In the chapters that follow, the volume's expert contributors approach the topic from typological, acquisitional, sociolinguistic, and diachronic perspectives; the concluding chapter offers an overview of these various approaches, with a focus on the minimum description length principle. The analyses are based on rich empirical data from both well-known languages such as Russian and lesser-studied languages from Africa, Australia, and the Americas, as well as experimental data from artificial language learning.},
  isbn = {978-0-19-886128-7},
  file = {/Users/igormoreno/Zotero/storage/2BMW8CLI/the-complexities-of-morphology-9780198861287.html}
}

@article{armoniLookingSecondaryTeacher2011,
  title = {Looking at {{Secondary Teacher Preparation Through}} the {{Lens}} of {{Computer Science}}},
  author = {Armoni, Michal},
  year = {2011},
  month = nov,
  journal = {ACM Trans. Comput. Educ.},
  volume = {11},
  number = {4},
  pages = {23:1--23:38},
  issn = {1946-6226},
  doi = {10.1145/2048931.2048934},
  urldate = {2019-05-16},
  abstract = {Teaching computer science (CS) in high schools, rather than just programming or even computer literacy, is important as a means of introducing students to the true nature of CS, and enhancing their problem-solving skills. Since teachers are the key to the success of any high school educational initiative, any discussion of high school programs must consider the teachers, and specifically the teacher preparation needed to make the implementation of such programs possible. However, there is scant research on CS teacher education, probably because CS is a relatively young discipline. Very few of the publications in the area of CS teacher preparation are research-based. Most are descriptive papers, including recommendations for specific programs or courses. The purpose of this survey is to import from what is already known in other disciplines in this context. We therefore examine the body of research on teacher education in other disciplines, especially in mathematics and science, to shed light on important challenges for CS teacher education and draw some initial conclusions regarding CS teacher preparation programs.},
  keywords = {Computer science teachers,pre-service teachers,secondary teacher preparation},
  annotation = {00026},
  file = {/Users/igormoreno/Zotero/storage/9B9B5RE5/Armoni - 2011 - Looking at Secondary Teacher Preparation Through the Lens of Computer Science.pdf}
}

@article{armourFiveOrdersIgnorance2000,
  ids = {armourFiveOrdersIgnorance2000a},
  title = {The Five Orders of Ignorance},
  author = {Armour, Phillip G.},
  year = {2000},
  month = oct,
  journal = {Communications of the ACM},
  volume = {43},
  number = {10},
  pages = {17--20},
  issn = {0001-0782},
  doi = {10.1145/352183.352194},
  urldate = {2021-03-15},
  file = {/Users/igormoreno/Zotero/storage/45S9JJDS/Armour - 2000 - The five orders of ignorance.pdf;/Users/igormoreno/Zotero/storage/CFYYRUP8/Armour - 2000 - The five orders of ignorance.pdf}
}

@article{arruzzaScopingReviewRandomised2021,
  title = {A Scoping Review of Randomised Controlled Trials to Assess the Value of Gamification in the Higher Education of Health Science Students},
  author = {Arruzza, Elio and Chau, Minh},
  year = {2021},
  month = mar,
  journal = {Journal of Medical Imaging and Radiation Sciences},
  volume = {52},
  number = {1},
  pages = {137--146},
  issn = {19398654},
  doi = {10.1016/j.jmir.2020.10.003},
  urldate = {2023-06-27},
  abstract = {Introduction: In today's ever-changing technological landscape, novel pedagogical methods are very attractive for medical radiation educators trying to enhance their students' educational experience. This scoping review aimed to assess the evidence regarding the value of gamification as part of health science undergraduate education, in comparison to conventional teaching curriculum. Methods: A comprehensive systematic literature search was conducted in MEDLINE, EMC are and Cochrane databases. Articles were eligible if they were randomised controlled trials comparing the use of gamification for undergraduate health profession students, with conventional teaching methods. Outcomes included knowledge (ie., information acquisition), skills (ie., knowledge application) and perceived benefit. Screening, data extraction and critical appraisal was conducted by two reviewers independently. Results: Eleven RCT studies were included (n {$\frac{1}{4}$} 997). Three of eight reporting studies discovered significant findings for knowledge acquisition scores favouring the intervention group. Varying results were demonstrated in the skills domain across six studies. Perceived benefits including student motivation and satisfaction levels demonstrated positive findings in all but one of six reporting studies. Discussion: Educators should supplement methods with gamified learning rather than replace them, consider group-based gamification, and employ methods at irregular intervals. Conclusion: The findings of this review suggest that gamification may be advantageous for health science undergraduates. Gamification positively impacts student satisfaction and motivation, though its capacity to enhance students' knowledge acquisition and application necessitates further research.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/97NR9GI7/Arruzza and Chau - 2021 - A scoping review of randomised controlled trials t.pdf}
}

@book{ashPsychologyTerritoriesHistorical2007,
  title = {Psychology's {{Territories}}: {{Historical}} and {{Contemporary Perspectives}} from {{Different Disciplines}}},
  author = {Ash, Mitchell and Sturm, Thomas},
  year = {2007},
  month = apr,
  edition = {0},
  publisher = {{Psychology Press}},
  doi = {10.4324/9780203936658},
  urldate = {2021-07-20},
  isbn = {978-0-429-24115-4},
  langid = {english}
}

@article{astesianoCASLCommonAlgebraic2002,
  title = {{{CASL}}: The {{Common Algebraic Specification Language}}},
  shorttitle = {{{CASL}}},
  author = {Astesiano, Egidio and Bidoit, Michel and Kirchner, H{\'e}l{\`e}ne and {Krieg-Br{\"u}ckner}, Bernd and Mosses, Peter D. and Sannella, Donald and Tarlecki, Andrzej},
  year = {2002},
  month = sep,
  journal = {Theoretical Computer Science},
  series = {Current Trends in {{Algebraic Development Techniques}}},
  volume = {286},
  number = {2},
  pages = {153--196},
  issn = {0304-3975},
  doi = {10.1016/S0304-3975(01)00368-1},
  urldate = {2018-12-02},
  abstract = {The Common Algebraic Specification Language (CASL) is an expressive language for the formal specification of functional requirements and modular design of software. It has been designed by COFI, the international Common Framework Initiative for algebraic specification and development. It is based on a critical selection of features that have already been explored in various contexts, including subsorts, partial functions, first-order logic, and structured and architectural specifications. CASL should facilitate interoperability of many existing algebraic prototyping and verification tools. This paper gives an overview of the CASL design. The major issues that had to be resolved in the design process are indicated, and all the main concepts and constructs of CASL are briefly explained and illustrated \textemdash{} the reader is referred to the CASL Language Summary for further details. Some familiarity with the fundamental concepts of algebraic specification would be advantageous.},
  file = {/Users/igormoreno/Zotero/storage/UQT6LKF4/Astesiano et al - 2002 - CASL.pdf;/Users/igormoreno/Zotero/storage/J72UDCWI/S0304397501003681.html}
}

@article{atapattuComprehensiveTextAnalysis2017,
  title = {A Comprehensive Text Analysis of Lecture Slides to Generate Concept Maps},
  author = {Atapattu, Thushari and Falkner, Katrina and Falkner, Nickolas},
  year = {2017},
  month = dec,
  journal = {Computers \& Education},
  volume = {115},
  pages = {96--113},
  issn = {03601315},
  doi = {10.1016/j.compedu.2017.08.001},
  urldate = {2018-11-06},
  abstract = {Current instructional methods widely support verbal learning through linear and sequential teaching materials, focusing on isolated pieces of information. However, an important aspect of learning design is to facilitate students in identifying relationships between information. The transformation of linearity in teaching resources into integrated network models such as concept maps facilitates effective knowledge organisation by constructing relationships between new and existing knowledge. However, the manual construction of concept maps from teaching materials places an additional workload on the academics involved. Consequently, this research investigates the effectiveness of automated approaches in extracting concept maps from lecture slides and the suitability of auto-generated concept maps as a pedagogical tool. We develop a set of Natural Language Processing (NLP) algorithms to support concept-relation-concept triple extraction to form concept maps. Structural and graph-based features are utilised to rank the triples according to their importance. The natural layout of the lecture slides is incorporated to organise the triples in a hierarchy, facilitating highly integrated structure. Our evaluation studies identify promising results, with several case studies demonstrating a statistically significant correlation (rs {$>$} 0.455) between auto-generated concept maps and human experts' judgment. Auto-generated concept maps were rated from `good' to `very good' by the academics on evaluation factors such as coverage, accuracy, and suitability as a pedagogical tool. Thus, auto-generated concept maps from this research can be utilised as a positive alternative to the manual construction of expert concept maps and further, it is possible to utilise these maps for a wider range of applications including knowledge organisation and reflective visualisation of course contents. Our research contributes to bridging the gap between linearity in teaching materials and the necessity of creating integrated network models from teaching resources.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/LLE4WG2N/Atapattu et al - 2017 - A comprehensive text analysis of lecture slides to generate concept maps.pdf}
}

@article{atchisonEvolutionCurriculumDevelopment1991,
  title = {Evolution of Curriculum Development: {{Curriculum}} 68 and Its Successors},
  shorttitle = {Evolution of Curriculum Development},
  author = {Atchison, William F.},
  year = {1991},
  month = jan,
  journal = {Education and Computing},
  volume = {7},
  number = {1-2},
  pages = {19--21},
  issn = {01679287},
  doi = {10.1016/S0167-9287(05)80079-2},
  urldate = {2018-11-06},
  langid = {english},
  keywords = {Curriculus},
  file = {/Users/igormoreno/Zotero/storage/LGPV7QS7/Atchison - 1991 - Evolution of curriculum development Curriculum 68.pdf}
}

@article{atkinsonLearningWorkedOutExamples2006,
  title = {Learning from {{Worked-Out Examples}}: {{What Does}} It {{Mean}}?},
  author = {Atkinson, Dr Robert},
  year = {2006},
  pages = {30},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/7D6E7327/Atkinson - 2006 - Learning from Worked-Out Examples What Does it Me.pdf}
}

@article{attaliGamificationAssessmentPoints2015,
  title = {Gamification in Assessment: {{Do}} Points Affect Test Performance?},
  shorttitle = {Gamification in Assessment},
  author = {Attali, Yigal and {Arieli-Attali}, Meirav},
  year = {2015},
  month = apr,
  journal = {Computers \& Education},
  volume = {83},
  pages = {57--63},
  issn = {03601315},
  doi = {10.1016/j.compedu.2014.12.012},
  urldate = {2023-06-27},
  abstract = {Gamification, applying game mechanics to nongame contexts, has recently become a hot topic across a wide range of industries, and has been presented as a potential disruptive force in education. It is based on the premise that it can promote motivation and engagement and thus contribute to the learning process. However, research examining this assumption is scarce. In a set of studies we examined the effects of points, a basic element of gamification, on performance in a computerized assessment of mastery and fluency of basic mathematics concepts. The first study, with adult participants, found no effect of the point manipulation on accuracy of responses, although the speed of responses increased. In a second study, with 6e8 grade middle school participants, we found the same results for the two aspects of performance. In addition, middle school participants' reactions to the test revealed higher likeability ratings for the test under the points condition, but only in the first of the two sessions, and perceived effort during the test was higher in the points condition, but only for eighth grade students.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/DV9YR863/Attali and Arieli-Attali - 2015 - Gamification in assessment Do points affect test .pdf}
}

@article{atwoodExperimentalStudyVisual1971,
  title = {An Experimental Study of Visual Imagination and Memory},
  author = {Atwood, George},
  year = {1971},
  month = jul,
  journal = {Cognitive Psychology},
  volume = {2},
  number = {3},
  pages = {290--299},
  issn = {0010-0285},
  doi = {10.1016/0010-0285(71)90015-6},
  urldate = {2018-12-02},
  abstract = {It is shown that an irrelevant visual perception interferes more with verbal learning by means of imagery than does an irrelevant auditory perception. The relative interfering effects of these perceptions were reversed in a verbal learning task involving highly abstract materials. Such results implicate the existence of a true visual component in imaginal mediation. A theoretical model is presented in which a visual system and a verbal-auditory system are distinguished. The visual system controls visual perception and visual imagination. The verbal-auditory system controls auditory perception, auditory imagination, internal verbal representation, and speech. Attention can be more easily divided between the two systems than within either one taken by itself. Furthermore, the visual and verbal-auditory systems are functionally linked by information recoding operations. The application of mnemonic imagery appears to involve a recoding of initially verbal information into visual form, and then the encoding of a primarily visual schema into memory. During recall, the schema is decoded as a visual image, and then recoded once again into the verbal-auditory system. Evidence for such transformations is provided not only by the interference data, but also by an analysis of recall-errors made by Ss using mnemonic imagery.},
  file = {/Users/igormoreno/Zotero/storage/RQFA9YHS/Atwood - 1971 - An experimental study of visual imagination and memory.pdf;/Users/igormoreno/Zotero/storage/R2AD2KSB/0010028571900156.html}
}

@article{atwoodTeachingSubsetsPascal1981,
  title = {Teaching Subsets of {{Pascal}}},
  author = {Atwood, J. W. and Regener, E.},
  year = {1981},
  month = feb,
  journal = {ACM SIGCSE Bulletin},
  volume = {13},
  number = {1},
  pages = {96--103},
  issn = {0097-8418},
  doi = {10.1145/953049.800969},
  urldate = {2022-02-07},
  abstract = {In teaching Pascal in our basic programming course since 1975, we have developed a teaching order using a sequence of language subsets, similar in concept to the SP/k, SF/k, and PS/k systems of Holt and Hume. Our scheme introduces each programming idea in as general a context as possible, and presents the elements of the Pascal-S subset (Wirth) before the rest of the language. It is designed for a concentrated presentation together with elements of discrete mathematics, combinatorics, and concepts of program design, for students with a basic course in Fortran as background.},
  keywords = {Discrete mathematics,Introductory course,Pascal,Pascal-S,Teaching subsets},
  file = {/Users/igormoreno/Zotero/storage/2Z4QB77N/Atwood e Regener - 1981 - Teaching subsets of Pascal.pdf}
}

@unpublished{aubryMetaphorsMathematicsIntroduction2009,
  title = {Metaphors in {{Mathematics}}: {{Introduction}} and the {{Case}} of {{Algebraic Geometry}}},
  author = {Aubry, Mathieu},
  year = {2009},
  month = sep,
  abstract = {Analogies play an essential role in Mathematics. George Lakoff and Rafael E. Nunez have shown in Where Mathematics Comes From that our understanding of basic mathematics is deeply linked to our experience of the world. They claim that we understand mathematics throught Conceptual Metaphors between source domains (for example spatial relationships between objects) and target domains (abstract Mathematics). These metaphors are supposed to map certain basic schemata of thought, namely, cross-modal organizational structures. In fact the use of conceptual metaphor is a more general cognitive process, used not only in other sciences (as in physics [6], or Cell Biology and Ecology [7] ) but also in every aspect of our understanding of the world, for example in philosophy [8] and ethics [1]. In this report, I am going to deal with specific cases of metaphors in advanced and abstract mathematics linked to our conception of space. The goal is both to show that conceptual metaphor theory continues to apply with great success in these areas, and to try to understand the theory more deeply.},
  file = {/Users/igormoreno/Zotero/storage/8MNJ34HU/2009-metaphors-in-mathematics.pdf}
}

@book{australasiancomputingeducationconference17th:2015:sydneyaustraliancomputersocietyacsSeventeenthAustralasianComputing2015,
  title = {Seventeenth {{Australasian Computing Education Conference}} ({{ACE}} 2015), {{Sydney}}, {{Australia}}, {{January}} 2015.},
  author = {{Australasian Computing Education Conference (17th : 2015 : Sydney) Australian Computer Society (ACS)} and D'Souza, Daryl and Falkner, Katrina and Ahadi, Alireza and Bower, Matt and Butler, Matthew and Calder, Paul and Carbone, Angela and Comber, Tim and Cooper, Graham and Daniels, Mats and Egan, Matthew Heinsen and Falkner, Katrina and Falkner, Nickolas and Fenwick, Joel and Foster, Keith and Fukazawa, Yoshiaki and Gonsalvez, Christabel and Guerin, Cally and Haden, Patricia and Hamilton, Margaret and Harland, James and Hellou, Anne and Honda, Kiyoshi and Jayatilaka, Asangi and Jollands, Margaret and Kaila, Erkki and Karavirta, Ville and Koziniec, Terry and Kurvinen, Einari and Laakso, Mikko-Jussi and Larusdottir, Marta and Linden, Rolf and Lister, Raymond and Lopez, Mike and {Luxton-Reilly}, Andrew and Mason, Raina and {McCulloch Alistair} and McDermott, Roger and McDonald, Chris and McGill, Tanya and Morgan, Michael and Murray, David and Parsons, Dale and Pulkkis, Goran and Putro, Iwan Handoyo and Rajala, Teemu and Ranasinghe, Damith and Robbins, Phil and Sakamoto, Kazunori and Salakoski, Tapio and Sheard, Judy and {Simon} and Teague, Donna and Tucker, Julie and Vivian, Rebecca and Washizaki, Hironori and Weerasinghe, Amali and Westerlund, Magnus and Whalley, Jacqueline and Wood, Krissi and Yamazki, Shohei and {Australian Computer Society (ACS)}},
  year = {2015},
  abstract = {Conference proceedings presented at the Seventeenth Australasian Computing Education Conference, held in Sydney in 2015.},
  isbn = {978-1-921770-42-5},
  langid = {english},
  annotation = {OCLC: 1125133777},
  file = {/Users/igormoreno/Zotero/storage/VSVQ2R9S/Australasian Computing Education Conference (17th 2015 Sydney) Australian Computer Society (ACS) et al - 2015 - Seventeenth Australasian Computing Education Conference (ACE 2015), Sydney,.pdf}
}

@article{ausubelUseAdvanceOrganizers1960,
  title = {The Use of Advance Organizers in the Learning and Retention of Meaningful Verbal Material},
  author = {Ausubel, David P.},
  year = {1960},
  journal = {Journal of Educational Psychology},
  volume = {51},
  number = {5},
  pages = {267--272},
  issn = {1939-2176(Electronic),0022-0663(Print)},
  doi = {10.1037/h0046669},
  abstract = {It is hypothesized that learning and retention of unfamiliar but meaningful verbal material can be facilitated by the advance introduction of relevant subsuming concepts (organizers). 2 groups of 40 undergraduate Ss each were equated for sex, field of specialization, and ability to learn unfamiliar scientific material. Experimental Ss studied a 500-word-passage that supplied the subsuming concepts. Control Ss studied traditional type historical material of equal length. The learning material was then presented. Comparison of mean retention scores of the 2 groups unequivocably supported the hypothesis. From Psyc Abstracts 36:01:1CI67A. (PsycINFO Database Record (c) 2016 APA, all rights reserved)},
  keywords = {Advance Organizers,College Students,Learning,Retention},
  file = {/Users/igormoreno/Zotero/storage/VUVI98EU/Ausubel - 1960 - The use of advance organizers in the learning and retention of meaningful.pdf;/Users/igormoreno/Zotero/storage/FZWNXHKB/1962-00294-001.html}
}

@inproceedings{auvinenHarmfulStudyHabits2015,
  title = {Harmful {{Study Habits}} in {{Online Learning Environments}} with {{Automatic Assessment}}},
  booktitle = {2015 {{International Conference}} on {{Learning}} and {{Teaching}} in {{Computing}} and {{Engineering}}},
  author = {Auvinen, Tapio},
  year = {2015},
  month = apr,
  pages = {50--57},
  doi = {10.1109/LaTiCE.2015.31},
  abstract = {Learning activities are increasingly performed in online learning environments. Automatic assessment is used in many systems to give students immediate and personalized feedback allowing them to solve exercises regardless of time and place. However, this creates new challenges for students because they are required to independently regulate their own learning. Because of the lack of direct guidance, it is easy for students to resort to bad study habits. In this paper, we investigate what kinds of harmful study habits can be observed in online learning environments that utilize automatic assessment. We study data from two computer science courses with programming exercises and algorithm simulation exercises. The results are in line with earlier findings that starting to study near the deadline is linked to inferior performance. This is also observed in a within-subject comparison which suggests that the relationship is causal. Furthermore, signs of trial-and-error problem solving are observed in some students and they are also correlated with inferior performance in the exercises and the exam.},
  keywords = {Algorithm design and analysis,Computational modeling,Data models,Data structures,educational technology,massed practice,procrastination,Programming profession,study habits,trial and error},
  file = {/Users/igormoreno/Zotero/storage/26KKLYX8/Auvinen - 2015 - Harmful Study Habits in Online Learning Environmen.pdf;/Users/igormoreno/Zotero/storage/28TYV26Z/stamp.html}
}

@inproceedings{auvinenSTOPSGraphbasedStudy2014,
  title = {{{STOPS}}: A Graph-Based Study Planning and Curriculum Development Tool},
  shorttitle = {{{STOPS}}},
  booktitle = {Proceedings of the 14th {{Koli Calling International Conference}} on {{Computing Education Research}}},
  author = {Auvinen, Tapio and Paavola, Juha and Hartikainen, Juha},
  year = {2014},
  month = nov,
  series = {Koli {{Calling}} '14},
  pages = {25--34},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2674683.2674689},
  urldate = {2020-09-22},
  abstract = {STOPS (Software for Target-Oriented Personal Syllabus) is a tool that allows university students to create personal study plans and the staff to maintain and develop course contents and curriculum structure. In the system, the curriculum is modeled as a graph of learning outcomes. First, the courses are broken down to learning outcomes, i.e. what a student should know after completing a course. Second, prerequisite dependencies are defined between the outcomes. Finally, programmes are defined as goals that students can choose for their studies. Programmes consist of competence outcomes that have prerequisite dependencies from the outcomes of the courses. The resulting graph can be visualized so that students can see how the topics taught in various courses are connected to each other, and what each course contributes to the goals that the student has selected. For curriculum developers, the visualizations can reveal shortcomings such as unnecessary repetition or lacking coverage of topics in the course contents.},
  isbn = {978-1-4503-3065-7},
  keywords = {curriculum design,curriculum development,curriculum mapping,curriculum visualization,study planning},
  annotation = {00020},
  file = {/Users/igormoreno/Zotero/storage/9V45BXD4/Auvinen et al - 2014 - STOPS.pdf}
}

@book{ayalaTheoryPracticeItem2008,
  title = {The {{Theory}} and {{Practice}} of {{Item Response Theory}}},
  author = {de Ayala, R. J.},
  year = {2008},
  month = dec,
  edition = {1 edition},
  publisher = {{The Guilford Press}},
  address = {{New York}},
  abstract = {Item response theory (IRT) is a latent variable modeling approach used to minimize bias and optimize the measurement power of educational and psychological tests and other psychometric applications.Designed for researchers, psychometric professionals, and advanced students, this book clearly presents both the "how-to" and the "why" of IRT. It describes simple and more complex IRT models and shows how they are applied with the help of widely available software packages. Chapters follow a consistent format and build sequentially, taking the reader from model development through the fit analysis and interpretation phases that one would perform in practice. The use of common empirical data sets across the chapters facilitates understanding of the various models and how they relate to one another.},
  isbn = {978-1-59385-869-8},
  langid = {english},
  annotation = {00000}
}

@inproceedings{azadmaneshConceptDrivenGenerationIntuitive2017,
  title = {Concept-{{Driven Generation}} of {{Intuitive Explanations}} of {{Program Execution}} for a {{Visual Tutor}}},
  booktitle = {2017 {{IEEE Working Conference}} on {{Software Visualization}} ({{VISSOFT}})},
  author = {Azadmanesh, Mohammadreza and Hauswirth, Matthias},
  year = {2017},
  month = sep,
  pages = {64--73},
  publisher = {{IEEE}},
  address = {{Shanghai}},
  doi = {10.1109/VISSOFT.2017.22},
  urldate = {2020-06-22},
  abstract = {Learning a programming language is hard. Students need to acquire three types of skills: (1) understand the new language concepts, (2) interpret pieces of code that use those concepts, and (3) write pieces of code involving those concepts. In this paper, we present an approach to help with the second type of skill. There are tools that explain/visualize the execution by stepping through the code. However, such tools suffer from two types of problems. First, the granularity of the stepping is coarse, hiding the intermediate steps in evaluating expressions. Second, for a single statement corresponding to a step of the execution, the order of the evaluation of source code constructs is not aligned with the order the constructs appear in the source code. To fix those, we combine compile-time with run-time information to automatically produce intuitive explanations of code. At compile time, we generate the explanations by traversing the AST. The runtime information provides the execution map and runtime values. We applied our idea to the Java version of Online Python Tutor, a web-based program visualization tool. Each explanation is complemented by highlighting the piece of the source code to which it corresponds, being spoken by the system, and a tree structure visualizing the evaluation of the involved expressions. The fact that the generation of explanations is syntax driven makes the result close to what a human tutor would provide.},
  isbn = {978-1-5386-1003-9},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/Q9U9D3C6/Azadmanesh and Hauswirth - 2017 - Concept-Driven Generation of Intuitive Explanations of Program Execution for a.pdf}
}

@article{azadmaneshDebuggingFilteringHistory,
  title = {Debugging by {{Filtering History Slices}}},
  author = {Azadmanesh, Mohammad R},
  pages = {35},
  abstract = {Debugging is a search for the cause of a failure. Inherently, it happens within a twodimensional environment: time and space. Traditional debugging tools assist in onedimensional search. Modern debugging tools contribute to the search within the twodimensional environment, however, they still fall short in supporting the major debugging questions that programmers ask while debugging. In this PhD proposal, I study how to support developers over the course of a debugging session. Past research shows that the major question developers ask while debugging is ``How did the failure come to be?''. However, my survey over modern debugging tools show that they cannot fully answer this question. The techniques employed by those tools are not purely designed to satisfy the requirements for answering the major question. I propose a novel debugging technique that combines slicing and filtering of program execution histories for answering the developers' questions. Those two techniques together provide a big picture of the execution, thereby facilitating the comprehension of program behavior. I motivate my proposal by two examples. The examples show how my technique can help in pinpointing the cause of the failure.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/5UA3BZXZ/Azadmanesh - Debugging by Filtering History Slices.pdf}
}

@inproceedings{azconaUser2code2vecEmbeddingsProfiling2019,
  title = {User2code2vec: {{Embeddings}} for {{Profiling Students Based}} on {{Distributional Representations}} of {{Source Code}}},
  shorttitle = {User2code2vec},
  booktitle = {Proceedings of the 9th {{International Conference}} on {{Learning Analytics}} \& {{Knowledge}}},
  author = {Azcona, David and Arora, Piyush and Hsiao, I-Han and Smeaton, Alan},
  year = {2019},
  month = mar,
  pages = {86--95},
  publisher = {{ACM}},
  address = {{Tempe AZ USA}},
  doi = {10.1145/3303772.3303813},
  urldate = {2021-07-30},
  abstract = {In this work, we propose a new methodology to profile individual students of computer science based on their programming design using a technique called embeddings. We investigate different approaches to analyze user source code submissions in the Python language. We compare the performances of different source code vectorization techniques to predict the correctness of a code submission. In addition, we propose a new mechanism to represent students based on their code submissions for a given set of laboratory tasks on a particular course. This way, we can make deeper recommendations for programming solutions and pathways to support student learning and progression in computer programming modules effectively at a Higher Education Institution. Recent work using Deep Learning tends to work better when more and more data is provided. However, in Learning Analytics, the number of students in a course is an unavoidable limit. Thus we cannot simply generate more data as is done in other domains such as FinTech or Social Network Analysis. Our findings indicate there is a need to learn and develop better mechanisms to extract and learn effective data features from students so as to analyze the students' progression and performance effectively.},
  isbn = {978-1-4503-6256-6},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/VP2HE2Y6/Azcona et al. - 2019 - user2code2vec Embeddings for Profiling Students B.pdf}
}

@book{baconArtCommunitySecond2012,
  title = {The {{Art}} of {{Community}}, {{Second Edition}}},
  author = {Bacon, Jono},
  year = {2012},
  month = may,
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/NMRWMB6V/Bacon - 2012 - The Art of Community, Second Edition.pdf}
}

@article{baiDoesGamificationImprove2020,
  title = {Does Gamification Improve Student Learning Outcome? {{Evidence}} from a Meta-Analysis and Synthesis of Qualitative Data in Educational Contexts},
  shorttitle = {Does Gamification Improve Student Learning Outcome?},
  author = {Bai, Shurui and Hew, Khe Foon and Huang, Biyun},
  year = {2020},
  month = jun,
  journal = {Educational Research Review},
  volume = {30},
  pages = {100322},
  issn = {1747938X},
  doi = {10.1016/j.edurev.2020.100322},
  urldate = {2023-06-27},
  abstract = {Despite the buzz around gamification as an exciting new method to engage students, evidence of its ability to enhance learning is mixed. In fact, gamification has attracted considerable controversy (``gamification is bullshit'') and some derogatory labels such as ``exploitationware.'' Therefore, in order to make the case for or against gamification in education, it is important to examine the effects (if any) of gamification on student learning achievements. This study is a meta-analysis of 30 independent interventions (3,202 participants) drawn from 24 quantitative studies that have examined the effects of gamification on student academic performance in various educational settings. The results show an overall significant medium effect size in favor of gamification over learning without gamification (Hedges' g = 0.504, 95\% CI [0.284\textendash 0.723], p {$<$} 0.001). No pub\- lication bias is detected. An analysis of 32 qualitative studies reveals four reasons for learners' enjoyment of gamification: (a) gamification can foster enthusiasm; (b) gamification can provide feedback on performance; (c) gamification can fulfill learners' needs for recognition; and (d) gamification can promote goal setting, and two reasons for their dislike of gamification: (a) gamification does not bring additional utility and (b) gamification can cause anxiety or jealousy. We conclude by highlighting two unresolved questions, and suggesting several future research directions concerning gamification in educational contexts.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/2526BY3A/Bai et al. - 2020 - Does gamification improve student learning outcome.pdf}
}

@inproceedings{bailesMakingSenseRecursion2012,
  title = {Making Sense of Recursion Patterns},
  booktitle = {Proceedings of the {{First International Workshop}} on {{Formal Methods}} in {{Software Engineering}}: {{Rigorous}} and {{Agile Approaches}}},
  author = {Bailes, Paul and Brough, Leighton},
  year = {2012},
  month = jun,
  series = {{{FormSERA}} '12},
  pages = {16--22},
  publisher = {{IEEE Press}},
  address = {{Zurich, Switzerland}},
  urldate = {2022-01-06},
  abstract = {Recursion patterns (such as "foldr" and elaborations thereof) have the potential to supplant explicit recursion in a viable subrecursive functional style of programming. Especially however in order to be able to eschew explicit recursion entirely, even in the definition of new recursion patterns, it's essential to identify and validate a minimal set of basic recursion patterns. The immediate plausibility of foldr is validated by its application to the implementation of functions and recursion patterns, and especially by an abstract characterization of the programming devices used in these applications used to overcome complementary information deficiencies in data and control.},
  isbn = {978-1-4673-1906-5},
  keywords = {foldr,functional programming,recursion},
  file = {/Users/igormoreno/Zotero/storage/UVGYARX4/Bailes and Brough - 2012 - Making sense of recursion patterns.pdf}
}

@article{bainomugishaSurveyReactiveProgramming2013,
  title = {A Survey on Reactive Programming},
  author = {Bainomugisha, Engineer and Carreton, Andoni Lombide and van Cutsem, Tom and Mostinckx, Stijn and de Meuter, Wolfgang},
  year = {2013},
  month = aug,
  journal = {ACM Computing Surveys},
  volume = {45},
  number = {4},
  pages = {52:1--52:34},
  issn = {0360-0300},
  doi = {10.1145/2501654.2501666},
  urldate = {2023-02-05},
  abstract = {Reactive programming has recently gained popularity as a paradigm that is well-suited for developing event-driven and interactive applications. It facilitates the development of such applications by providing abstractions to express time-varying values and automatically managing dependencies between such values. A number of approaches have been recently proposed embedded in various languages such as Haskell, Scheme, JavaScript, Java, .NET, etc. This survey describes and provides a taxonomy of existing reactive programming approaches along six axes: representation of time-varying values, evaluation model, lifting operations, multidirectionality, glitch avoidance, and support for distribution. From this taxonomy, we observe that there are still open challenges in the field of reactive programming. For instance, multidirectionality is supported only by a small number of languages, which do not automatically track dependencies between time-varying values. Similarly, glitch avoidance, which is subtle in reactive programs, cannot be ensured in distributed reactive programs using the current techniques.},
  keywords = {dataflow programming,event-driven applications,functional reactive programming,interactive applications,Reactive programming,reactive systems},
  file = {/Users/igormoreno/Zotero/storage/7VDJ69AY/Bainomugisha et al. - 2013 - A survey on reactive programming.pdf}
}

@article{baiTopBottomHow2021,
  title = {From Top to Bottom: {{How}} Positions on Different Types of Leaderboard May Affect Fully Online Student Learning Performance, Intrinsic Motivation, and Course Engagement},
  shorttitle = {From Top to Bottom},
  author = {Bai, Shurui and Hew, Khe Foon and Sailer, Michael and Jia, Chengyuan},
  year = {2021},
  month = nov,
  journal = {Computers \& Education},
  volume = {173},
  pages = {104297},
  issn = {03601315},
  doi = {10.1016/j.compedu.2021.104297},
  urldate = {2023-06-27},
  abstract = {Leaderboards, a key topic in the gamification literature, are often used to enhance student engagement and motivation through social comparison. Previous research has examined the overall effects of leaderboard versus a no leaderboard condition but paid less attention to how positions on different types of leaderboard may affect students' learning performance, intrinsic motivation, and course engagement. In the two studies, we exposed 50 postgraduate students from two fully online courses to two types of leaderboard (absolute and relative) and measured their learning performance, course engagement, intrinsic motivation, and perceptions. Results suggest that the absolute leaderboard helps intensify students' sense of comparison and competitiveness more than the relative leaderboard. In the absolute leaderboard class, students at different positions showed similar levels of learning performance and course engagement, but a higher position was associated with higher intrinsic motivation. Conversely, in the relative leaderboard class, students ranked in the top third tended to display better learning performance than their peers in the lower two thirds did. Students who ranked in different positions showed similar levels of course engagement and intrinsic motivation for learning. Qualitative analyses based on a survey suggested that the students ranked in the bottom third preferred anonymous (vs public) comparison on an absolute leaderboard but favoured public (vs anonymous) comparison on a relative leaderboard. Most students reported positive attitude toward the use of leaderboards for sustaining comparison and competitiveness.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/K4MTZXLE/Bai et al. - 2021 - From top to bottom How positions on different typ.pdf}
}

@article{bakarDevelopmentVisualOutput2019,
  title = {The {{Development}} of a {{Visual Output Approach}} for {{Programming}} via the {{Application}} of {{Cognitive Load Theory}} and {{Constructivism}}},
  author = {Bakar, Marini Abu and Mukhtar, Muriati and Khalid, Fariza},
  year = {2019},
  journal = {International Journal of Advanced Computer Science and Applications},
  volume = {10},
  number = {11},
  issn = {21565570, 2158107X},
  doi = {10.14569/IJACSA.2019.0101142},
  urldate = {2020-06-22},
  abstract = {Programming is a skill of the future. However, decades of experience and research had indicated that the teaching and learning of programming are full of problems and challenges. As such educators and researchers are always on the look-out for suitable approaches and paradigms that can be adopted for the teaching and learning of programming. In this article, it is proposed that a visual output approach is suitable based on the current millennials affinities for graphics and visuals. The proposed VJava Module is developed via the application of two main learning theories, which are, the cognitive load theory and constructivism. There are two submodules which consist of eight chapters that cover the topics Introduction to Programming and Java, Object Using Turtle Graphics, Input and Output, Repetition Structure, Selection Structure, More Repetition Structures, Nested Loops and Arrays. To enable Java programs to produce graphical and animated outputs, the MJava library was developed and integrated into this module. The module is validated by three Java programming experts and an instructional design expert on the module content, design and usability aspects.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/VU2K7TFU/Bakar et al - 2019 - The Development of a Visual Output Approach for Programming via the Application.pdf}
}

@book{bakemanObservingInteractionIntroduction1997,
  title = {Observing Interaction: {{An}} Introduction to Sequential Analysis, 2nd Ed},
  shorttitle = {Observing Interaction},
  author = {Bakeman, Roger and Gottman, John Mordechai},
  year = {1997},
  series = {Observing Interaction: {{An}} Introduction to Sequential Analysis, 2nd Ed},
  pages = {xiii, 207},
  publisher = {{Cambridge University Press}},
  address = {{New York, NY, US}},
  doi = {10.1017/CBO9780511527685},
  abstract = {The 2nd edition of this book clarifies and extends material from the first edition, especially with respect to data analysis of interactive social behavior. A common standard for sequential data is introduced, and sequential analysis is placed on a firmer, log-linear statistical footing. The 2nd edition is designed to work as a companion volume to Analyzing Interaction, (see record 1996-07077-001), which provides practical tools and computer programs for analyzing sequential observational data. (PsycINFO Database Record (c) 2016 APA, all rights reserved)},
  isbn = {978-0-521-45008-9 978-0-521-57427-3},
  keywords = {Linear Regression,Observation Methods,Social Interaction,Statistical Analysis},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/JRLRSG7F/Bakeman e Gottman - 1997 - Observing interaction An introduction to sequenti.pdf;/Users/igormoreno/Zotero/storage/NR4V3ZV3/1997-08402-000.html}
}

@book{bakerBasicsItemResponse2001,
  title = {The {{Basics}} of {{Item Response Theory}}. {{Second Edition}}},
  author = {Baker, Frank B.},
  year = {2001},
  publisher = {{For full text: http://ericae}},
  urldate = {2019-01-27},
  abstract = {This book is combined with a Web site to allow the reader to acquire the basic concepts of item response theory without becoming enmeshed in the underlying mathematical and computational complexities. The first edition, with its accompanying software, was designed to give the reader access to the basic concepts of item response theory without having to do the tedious mathematics. This edition contains an annotated list of recommended readings and Web resources and updated software for the Internet. The book is organized in a building block fashion, proceeding from the simple to the complex, with each new topic building on the previous topics. Within each chapter, a basic concept is presented, the corresponding computer sessions are explained, and a set of exploratory exercises is  defined. The chapters are: (1) "The Item Characteristic Curve"; (2) "Item Characteristic Curve Models"; (3) "Estimating Item Parameters"; (4) The Test Characteristic Curve"; (5) "Estimating an Examinee's Ability"; (6) "The Information Function"; (7) "Test Calibration"; and (8) "Specifying the Characteristics of a Test." (Contains 10 tables, and 21 figures.) (SLD)},
  isbn = {978-1-886047-03-7},
  langid = {english},
  keywords = {Computer Software,Item Response Theory,Mathematical Models,World Wide Web},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/4EVRSQF6/Baker - 2001 - The Basics of Item Response Theory.pdf;/Users/igormoreno/Zotero/storage/NHL6N8GZ/eric.ed.gov.html}
}

@article{balmanComputerAssistedTeaching1981,
  title = {Computer Assisted Teaching of {{FORTRAN}}},
  author = {Balman, T.},
  year = {1981},
  month = jan,
  journal = {Computers \& Education},
  volume = {5},
  number = {2},
  pages = {111--123},
  issn = {0360-1315},
  doi = {10.1016/0360-1315(81)90020-8},
  urldate = {2022-02-08},
  abstract = {An interactive programming system (FCN) which was developed to assist the teaching of FORTRAN is decribed. The educational advantages to be drawn from the incremental compilation of FORTRAN programs are discussed; specialized subsystems that can be used for intensive training during the early stages of an introductory course are presented. The intended role of this programming system and its contribution to the curriculum are discussed.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/VJI2BDTY/Balman - 1981 - Computer assisted teaching of FORTRAN.pdf;/Users/igormoreno/Zotero/storage/RLY4N8WJ/0360131581900208.html}
}

@article{balzerDevelopmentAlignmentUndergraduate2016,
  title = {Development and Alignment of Undergraduate Medical Curricula in a Web-Based, Dynamic {{Learning Opportunities}}, {{Objectives}} and {{Outcome Platform}} ({{LOOOP}})},
  author = {Balzer, Felix and Hautz, Wolf E. and Spies, Claudia and Bietenbeck, Andreas and Dittmar, Martin and Sugiharto, Firman and Lehmann, Lars and Eisenmann, Dorothea and Bubser, Florian and Stieg, Markus and Hanfler, Sven and Georg, Waltraud and Tekian, Ara and Ahlers, Olaf},
  year = {2016},
  month = apr,
  journal = {Medical Teacher},
  volume = {38},
  number = {4},
  pages = {369--377},
  issn = {0142-159X},
  doi = {10.3109/0142159X.2015.1035054},
  urldate = {2018-11-10},
  abstract = {Introduction: This study presents a web-based method and its interface ensuring alignment of all parts of a curriculum map including competencies, objectives, teaching and assessment methods, workload and patient availability. Needs, acceptance and effectiveness are shown through a nine-year study.Methods: After a comprehensive needs assessment, the curriculum map and a web-based interface ``Learning Opportunities, Objectives and Outcome Platform'' (LOOOP) were developed according to Harden's conceptual framework of 10-steps for curriculum mapping. The outcome was measured by surveys and results of interdisciplinary MCQ-assessments. The usage rates and functionalities were analysed.Results: The implementation of LOOOP was significantly associated with improved perception of the curriculum structure by teachers and students, quality of defined objectives and their alignment with teaching and assessment, usage by students to prepare examinations and their scores in interdisciplinary MCQ-assessment. Additionally, LOOOP improved the curriculum coordination by faculty, and assisted departments for identifying patient availability for clinical training.Conclusion: LOOOP is well accepted among students and teachers, has positive effect on curriculum development, facilitates effective utilisation of educational resources and improves student's outcomes. Currently, LOOOP is used in five undergraduate medical curricula including 85,000 mapped learning opportunities (lectures, seminars), 5000 registered users (students, teachers) and 380,000 yearly page-visits.},
  pmid = {25906266},
  keywords = {To Read},
  file = {/Users/igormoreno/Zotero/storage/98YIM8YE/Balzer et al - 2016 - Development and alignment of undergraduate medical curricula in a web-based,.pdf;/Users/igormoreno/Zotero/storage/96G2MYYQ/0142159X.2015.html}
}

@techreport{bambergerDevelopingMusicalEar1972,
  title = {Developing a {{Musical Ear}}: {{A New Experiment}}},
  shorttitle = {Developing a {{Musical Ear}}},
  author = {Bamberger, Jeanne},
  year = {1972},
  month = jul,
  number = {AIM-264 / LOGO Memo 6},
  institution = {{MIT}},
  urldate = {2022-01-12},
  abstract = {I would like to report on some ideas we have  been developing at M.I.T. for self-paced,  independent music study. The aim of our  approach is to nurture in students that  enigmatic quality called, "musical"-- be it a  "musical ear" or an individual's capacity to  give a "musical performance". While all of us  cherish these qualities, rarely do we come to  grips with them directly in teaching. More often  we rely on our magical or mystical faith in the  inspiration of music, itself, and its great  artists, to do the teaching. And for some  (maybe ultimately all) this is the best course.  But what about the others to whom we teach  only the techniques of playing instruments or  some "facts" about music--its forms, its  history and its apparent elements? How often  do we have or take the time to examine the  assumptions underlying these "facts" we  teach, or to question the relation between  what we teach and what we do as musicians?},
  langid = {american},
  annotation = {Accepted: 2004-10-01T20:47:06Z},
  file = {/Users/igormoreno/Zotero/storage/RWT927RM/Bamberger - 1972 - Developing a Musical Ear.pdf;/Users/igormoreno/Zotero/storage/LXNWR3DT/5832.html}
}

@article{banadosschwerterAbstractingGradualTyping2021,
  title = {Abstracting Gradual Typing Moving Forward: Precise and Space-Efficient},
  shorttitle = {Abstracting Gradual Typing Moving Forward},
  author = {Ba{\~n}ados Schwerter, Felipe and Clark, Alison M. and Jafery, Khurram A. and Garcia, Ronald},
  year = {2021},
  month = jan,
  journal = {Proceedings of the ACM on Programming Languages},
  volume = {5},
  number = {POPL},
  pages = {61:1--61:28},
  doi = {10.1145/3434342},
  urldate = {2022-11-21},
  abstract = {Abstracting Gradual Typing (AGT) is a systematic approach to designing gradually-typed languages. Languages developed using AGT automatically satisfy the formal semantic criteria for gradual languages identified by Siek et al. Nonetheless, vanilla AGT semantics can still have important shortcomings. First, a gradual language's runtime checks should preserve the space-efficiency guarantees inherent to the underlying static and dynamic languages. To the contrary, the default operational semantics of AGT break proper tail calls. Second, a gradual language's runtime checks should enforce basic modular type-based invariants expected from the static type discipline. To the contrary, the default operational semantics of AGT may fail to enforce some invariants in surprising ways. We demonstrate this in the GTFL{$\lessequivlnt$} language of Garcia et al. This paper addresses both problems at once by refining the theory underlying AGT's dynamic checks. Garcia et al. observe that AGT involves two abstractions of static types: one for the static semantics and one for the dynamic semantics. We recast the latter as an abstract interpretation of subtyping itself, while gradual types still abstract static types. Then we show how forward-completeness (Giacobazzi and Quintarelli) is key to supporting both space-efficient execution and reliable runtime type enforcement.},
  keywords = {abstract interpretation,cast calculi,gradual typing,subtyping},
  file = {/Users/igormoreno/Zotero/storage/MK7F3DC9/Bañados Schwerter et al. - 2021 - Abstracting gradual typing moving forward precise.pdf}
}

@inproceedings{banerjeeEmpoweringFamiliesFacing2018,
  title = {Empowering {{Families Facing English Literacy Challenges}} to {{Jointly Engage}} in {{Computer Programming}}},
  booktitle = {Proceedings of the 2018 {{CHI Conference}} on {{Human Factors}} in {{Computing Systems}}  - {{CHI}} '18},
  author = {Banerjee, Rahul and Ko, Andrew J. and Popovic, Zoran and Liu, Leanne and Sobel, Kiley and Pitt, Caroline and Lee, Kung Jin and Wang, Meng and Chen, Sijin and Davison, Lydia and Yip, Jason C.},
  year = {2018},
  pages = {1--13},
  publisher = {{ACM Press}},
  address = {{Montreal QC, Canada}},
  doi = {10.1145/3173574.3174196},
  urldate = {2020-06-22},
  abstract = {Research suggests that parental engagement through Joint Media Engagement (JME) is an important factor in children's learning for coding and programming. Unfortunately, parents with limited technology background may have difficulty supporting their children's access to programming. English-language learning (ELL) families from marginalized communities face particular challenges in understanding and supporting programming, as code is primarily authored using English text. We present BlockStudio, a programming tool for empowering ELL families to jointly engage in introductory coding, using an environment embodying two design principles, text-free and visually concrete. We share a case study involving three community centers serving immigrant and refugee populations. Our findings show ELL families can jointly engage in programming without text, via co-creation and flexible roles, and can create a range of artifacts, indicating understanding of aspects of programming within this environment. We conclude with implications for coding together in ELL families and design ideas for text-free programming research.},
  isbn = {978-1-4503-5620-6},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/9MSWCNTY/Banerjee et al - 2018 - Empowering Families Facing English Literacy Challenges to Jointly Engage in.pdf}
}

@article{baptistaGamificationSeriousGames2019,
  title = {Gamification and Serious Games: {{A}} Literature Meta-Analysis and Integrative Model},
  shorttitle = {Gamification and Serious Games},
  author = {Baptista, Gon{\c c}alo and Oliveira, Tiago},
  year = {2019},
  month = mar,
  journal = {Computers in Human Behavior},
  volume = {92},
  pages = {306--315},
  issn = {07475632},
  doi = {10.1016/j.chb.2018.11.030},
  urldate = {2023-06-27},
  abstract = {In recent years we have witnessed a growing number of companies and institutions embedding game mechanics and game design techniques in all types of information systems, applications, and services. Following this trend, it is possible to find an increasing number of publications studying these subjects. With this meta-analysis we synthesise and integrate all the earlier literature and information available on gamification and serious games, assessing the current state-of-the-art in the field, filling a literature gap on this subject. We calculated metaanalysis effects from a total of 54 studies and 59 datasets collected from the literature. Attitude, enjoyment, and usefulness are the most relevant predictors of intention to use gamification. Intention, enjoyment, and usefulness are the most relevant predictors of the brand attitude towards gamification. Our results allow us to present a theoretical model that will be of value to future gamification studies.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/SXJYVTN6/Baptista and Oliveira - 2019 - Gamification and serious games A literature meta-.pdf}
}

@article{barataStudyingStudentDifferentiation2017,
  title = {Studying Student Differentiation in Gamified Education: {{A}} Long-Term Study},
  shorttitle = {Studying Student Differentiation in Gamified Education},
  author = {Barata, Gabriel and Gama, Sandra and Jorge, Joaquim and Gon{\c c}alves, Daniel},
  year = {2017},
  month = jun,
  journal = {Computers in Human Behavior},
  volume = {71},
  pages = {550--585},
  issn = {07475632},
  doi = {10.1016/j.chb.2016.08.049},
  urldate = {2023-06-27},
  abstract = {Gamified learning is a novel concept that according to recent studies, can increase student activity and improve learning outcomes. However, little is known about how different students experience and are engaged by it. We present a long-term study which identified distinct behavioral and performance patterns in participants taking a gamified college course. Our study lasted for three years, during which we deployed three consecutive instances of the course, each featuring improvements based on student feedback from the previous instances. To understand how different students behaved in our gamified experience, according to their daily performance, we performed cluster analysis and assessed student engagement in the last year using a formal instrument. We then did a cluster-wise analysis using different performance and behavioral measures, to further assess and characterize every cluster. To wit, we identified six different student clusters, each featuring different behaviors and performance levels. However, only four were present in the last year, which differed in terms of engagement with the course. In this paper we carefully describe each student cluster, explain how they evolved, and derive meaningful design lessons.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/3NY74MK6/Barata et al. - 2017 - Studying student differentiation in gamified educa.pdf}
}

@inproceedings{barcelosTeachingComputationalThinking2012,
  title = {Teaching {{Computational Thinking}} in Initial Series {{An}} Analysis of the Confluence among Mathematics and {{Computer Sciences}} in Elementary Education and Its Implications for Higher Education},
  booktitle = {2012 {{XXXVIII Conferencia Latinoamericana En Informatica}} ({{CLEI}})},
  author = {Barcelos, Thiago Schumacher and Silveira, Ismar Frango},
  year = {2012},
  month = oct,
  pages = {1--8},
  publisher = {{IEEE}},
  address = {{Medellin, Colombia}},
  doi = {10.1109/CLEI.2012.6427135},
  urldate = {2020-06-22},
  abstract = {The pervasiveness of computer devices in everyday situations poses a fundamental question about Computer Sciences as being part of those known as basic sciences. However, it would be more beneficial not to consider computation only as a technique, but instead as a way of reasoning and problem solving. Under this perspective, there are inherent relationships among the knowledge, skills and attitudes that emanate from this field and those ones commonly related to Math. This paper discusses the relationship between the so-named Computational Thinking and the foundations of Math Education, based on a literature review. Three groups of skills that can be jointly developed by both areas are identified and some challenges and implications for education in Computer Sciences are discussed.},
  isbn = {978-1-4673-0793-2 978-1-4673-0794-9 978-1-4673-0792-5},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/B9QWLD3D/Barcelos and Silveira - 2012 - Teaching Computational Thinking in initial series An analysis of the confluence.pdf}
}

@inproceedings{barkminAnalysisProgrammingAssessments2020,
  ids = {barkminAnalysisProgrammingAssessments2020b},
  title = {Analysis of {{Programming Assessments}} \textemdash{} {{Building}} an {{Open Repository}} for {{Measuring Competencies}}},
  booktitle = {Koli {{Calling}} '20: {{Proceedings}} of the 20th {{Koli Calling International Conference}} on {{Computing Education Research}}},
  author = {Barkmin, Mike and Brinda, Torsten},
  year = {2020},
  month = nov,
  pages = {1--10},
  publisher = {{ACM}},
  address = {{Koli Finland}},
  doi = {10.1145/3428029.3428039},
  urldate = {2021-01-04},
  abstract = {Within different approaches and aims to teach programming, contextspecific languages are used which might support different paradigms. Therefore, we are developing a framework for modeling programming competencies regardless of the used language or paradigm. In this paper, we present an open repository for measuring competencies to support our theoretical model. Our goal is to make use of already existing assessments for programming by evaluating their quality and fit to our competency framework. We conducted a systematic literature review to find assessments present in the ACM DL, develop a scheme for evaluating the quality of the assessments following three criteria (objectivity, reliability, and validity) and a scheme for evaluating their fit to the competency framework. An in-depth analysis of 13 assessments showed that all fit to our competency framework with an average coverage of 39\% of all concepts. Regarding the quality of the assessments, three reported the reliability by evaluating Cronbach's alpha and five the validity by using different methods. To expand our open repository and to improve our framework we plan a five-step program: analyze more, develop a guide, fill gaps, specialize and replicate assessments. We hope that providing this framework will foster the development of competency models in the field of programming.},
  isbn = {978-1-4503-8921-1},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/APTRV9TN/Barkmin e Brinda - 2020 - Analysis of Programming Assessments — Building an .pdf;/Users/igormoreno/Zotero/storage/V3XLGDGX/Barkmin and Brinda - 2020 - Analysis of Programming Assessments — Building an .pdf}
}

@incollection{barkminAnalysisProgrammingAssessments2020a,
  title = {Analysis of {{Programming Assessments}} \&\#x2014; {{Building}} an {{Open Repository}} for {{Measuring Competencies}}},
  booktitle = {Koli {{Calling}} '20: {{Proceedings}} of the 20th {{Koli Calling International Conference}} on {{Computing Education Research}}},
  author = {Barkmin, Mike and Brinda, Torsten},
  year = {2020},
  month = nov,
  number = {31},
  pages = {1--10},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  urldate = {2021-02-19},
  abstract = {Within different approaches and aims to teach programming, context-specific languages are used which might support different paradigms. Therefore, we are developing a framework for modeling programming competencies regardless of the used language or paradigm. In this paper, we present an open repository for measuring competencies to support our theoretical model. Our goal is to make use of already existing assessments for programming by evaluating their quality and fit to our competency framework. We conducted a systematic literature review to find assessments present in the ACM DL, develop a scheme for evaluating the quality of the assessments following three criteria (objectivity, reliability, and validity) and a scheme for evaluating their fit to the competency framework. An in-depth analysis of 13 assessments showed that all fit to our competency framework with an average coverage of 39\% of all concepts. Regarding the quality of the assessments, three reported the reliability by evaluating Cronbach's alpha and five the validity by using different methods. To expand our open repository and to improve our framework we plan a five-step program: analyze more, develop a guide, fill gaps, specialize and replicate assessments. We hope that providing this framework will foster the development of competency models in the field of programming.},
  isbn = {978-1-4503-8921-1},
  keywords = {assessment,competency framework,higher education,programming,upper secondary education},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/PIZFFMXI/Barkmin and Brinda - 2020 - Analysis of Programming Assessments &#x2014; Build.pdf}
}

@inproceedings{barkminCompetencyStructureModel2020,
  title = {Competency Structure Model for Programming for the Transition from School to University},
  booktitle = {Proceedings of the 15th {{Workshop}} on {{Primary}} and {{Secondary Computing Education}}},
  author = {Barkmin, Mike},
  year = {2020},
  month = oct,
  series = {{{WiPSCE}} '20},
  pages = {1--4},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3421590.3421591},
  urldate = {2021-02-19},
  abstract = {The learning of programming can take manifold starting points, e.g. via friends or family, a school course, a compulsory requirement in vocational education (e.g. industrial robotics) or even in an academic setting (e.g. formalization and execution of mathematical algorithms in numerical mathematics). Within these approaches, context-specific programming languages are used, which might support different paradigms. In this paper, a proposal for a language and paradigm overarching competency structure model is developed from theoretical considerations. By analyzing different programming languages, textbooks and papers three content dimensions are derived. Principles and the application of high-Level paradigms build the first dimension. The second dimension elements represents paradigm and language independent concepts of program components, data types, basic data structures and algorithmic paradigms. The last content dimension language is defined by syntax, semantics, standard library and the build/compile and run process of programming languages.},
  isbn = {978-1-4503-8759-0},
  keywords = {competency model,higher education,paradigm,programming,upper secondary education},
  annotation = {00001},
  file = {/Users/igormoreno/Zotero/storage/NG3BHH7M/Barkmin - 2020 - Competency structure model for programming for the.pdf}
}

@article{barkminOpenPlatformAssessment,
  title = {An {{Open Platform}} for {{Assessment}} and {{Training}} of {{Competencies}}},
  author = {Barkmin, Mike},
  pages = {2},
  abstract = {This paper introduces an open platform for assessment and training of competencies, short OpenPatch. Its aim is to ease the creation and conduction of assessments in the field of computer science, in particular in programming. OpenPatch offers interactive tools for assessment development, means for conducting assessments with instantaneous evaluation and visualization as well as social network features like commenting, sharing, liking, following and remixing for exchanging ideas with fellow researchers and educators.},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/EF8D4R9V/Barkmin - An Open Platform for Assessment and Training of Co.pdf}
}

@inproceedings{barlandDesignFunctionalImage2010,
  title = {The Design of a Functional Image Library},
  booktitle = {Workshop on {{Scheme}} and {{Functional Programming}} ({{SFP}})},
  author = {Barland, Ian and Findler, Robert Bruce and Flatt, Matthew},
  year = {2010},
  file = {/Users/igormoreno/Zotero/storage/Q7H76K6C/Barland et al. - 2010 - The design of a functional image library.pdf}
}

@article{barnesGame2LearnStudyGames,
  title = {{{Game2Learn}}: {{A}} Study of Games as Tools for Learning Introductory Programming Concepts},
  author = {Barnes, Tiffany and Richter, Heather and Chaffin, Amanda and Godwin, Alex and Powell, Eve and Ralph, Tiffany and Matthews, Paige and Jordan, Hyun},
  pages = {6},
  abstract = {We introduce Game2Learn, an innovative way to teach introductory programming using games. Through an iterative development process, we are designing an educational framework that is more relevant and familiar to students' experiences, resulting in a game that will appeal to a broad audience and can improve student engagement, satisfaction, and skill transfer, particularly for women and other underrepresented minorities in computer science. In this paper, we discuss our first round of rapid prototyping, which explores different game and interface possibilities through two prototypes. Evaluations of these prototypes provide evidence that a game for learning programming can be fun, engaging and satisfying for students, and that a game can present programming concepts through a variety of formats and storylines.},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/L75VPL9H/Barnes et al. - Game2Learn A study of games as tools for learning.pdf}
}

@article{barrouilletTheoriesCognitiveDevelopment2015,
  title = {Theories of Cognitive Development: {{From Piaget}} to Today},
  shorttitle = {Theories of Cognitive Development},
  author = {Barrouillet, Pierre},
  year = {2015},
  month = dec,
  journal = {Developmental Review},
  volume = {38},
  pages = {1--12},
  issn = {02732297},
  doi = {10.1016/j.dr.2015.07.004},
  urldate = {2018-10-02},
  abstract = {At the occasion of their fortieth anniversary, the Archives Jean Piaget, a foundation created by B\"arbel Inhelder in 1974 for the preservation and promulgation of Piaget's oeuvre, invited in Geneva ten among the most prominent and influential developmental psychologists to the first Jean Piaget Conferences. Cognitive developmental psychology has undergone radical changes during these last four decades since the last formulations of Piaget's constructivism. In this double special issue, the invitees of the Jean Piaget Conferences elaborate on their own conception of developmental changes in a variety of domains and functions, offering a comprehensive overview of current theories of cognitive development.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/W4QJZMF5/Barrouillet - 2015 - Theories of cognitive development From Piaget to .pdf}
}

@inproceedings{bartConstructionValidationFormal1970,
  title = {A {{Construction}} and {{Validation}} of {{Formal Operational Reasoning Instruments}}},
  booktitle = {Annual {{Meeting}} of the {{AERA}}},
  author = {Bart, William M.},
  year = {1970},
  month = mar,
  pages = {33},
  address = {{Minneapolis, Minnesota, USA}},
  abstract = {In Piaget's developmental psychology the fourth and highest stage of human cognitive development is that of formal operations. The research on formal thought instruments is outlined. This study was designed to construct and validate paper-and-pencil instruments which could be used to select students capable of abstract conceptualization, hypothetico-deductive thought, and combinational reasoning.The retests in different content areas were developed using item specifications found in the Piagetian literature on formal operations. Items were six-choice login items with abstruse content. These tests, four Piagetian formal thought tasks, and a measure of verbal intelligence were administered to a sample of above-average teenagers. The formal operational reasoning tests were demonstrated to have substantial content validity, modest concurrent validity, and limited construct validity. Six item structures were found to have uniformly high first principal component factor loadings,validity indices, and reliability indices.The need for further research in this area is pointed out. (DG)},
  langid = {english},
  keywords = {Able Students,Abstract Reasoning,Abstraction Tests,Cognitive Measurement,Cognitive Tests,Content Analysis,Item Analysis,Logical Thinking,Measurement Instruments,Mental Tests,Piaget,Psychometrics,Teenagers,Test Construction,Test Reliability,Test Validity,Testing,Thought Proceses},
  file = {/Users/igormoreno/Zotero/storage/CPT4QLSJ/Bart - 1970 - A Construction and Validation of Formal Operational Reasoning Instruments.pdf}
}

@article{bartjacobsTutorialCoAlgebras1997,
  title = {A Tutorial on (Co)Algebras and (Co)Induction},
  author = {{Bart Jacobs} and {Jan Rutten}},
  year = {1997},
  journal = {EATCS Bulletin},
  volume = {62},
  pages = {222--259},
  abstract = {Algebraic structures which are generated by a collection of constructors--like natural numbers (generated by a zero and a succesor) or finite lists and trees--are of well-established importance in computer science...},
  file = {/Users/igormoreno/Zotero/storage/FSACM4DX/Bart Jacobs and Jan Rutten - 1997 - A tutorial on (co)algebras and (co)induction.pdf}
}

@article{bartramPosticonicVisualStorage1978,
  title = {Post-Iconic Visual Storage: {{Chunking}} in the Reproduction of Briefly Displayed Visual Patterns},
  shorttitle = {Post-Iconic Visual Storage},
  author = {Bartram, D. J},
  year = {1978},
  month = jul,
  journal = {Cognitive Psychology},
  volume = {10},
  number = {3},
  pages = {324--355},
  issn = {0010-0285},
  doi = {10.1016/0010-0285(78)90003-8},
  urldate = {2018-12-02},
  abstract = {Two experiments are reported which investigate the organization of visuospatial information in post-iconic storage. In both experiments, stimuli consisting of 10 disks randomly placed in a four-by-five array were tachistoscopically presented to subjects whose task was to recreate the pattern. In Experiment 2, reproduction was constrained (on a row-by-row basis) while in Experiment 1 it was unconstrained. The results of Experiment 1 showed that subjects recalled in terms of ``chunks'' of spatially adjacent disks, with most ``chunks'' consisting of about three of four disks. Within each sequence of 10 responses the probability of correctly recalling a chunk decreased with its serial position but was relatively independent of chunk size per se (for chunks containing seven or less disks). In addition, clear topographical variations in accuracy were found, which tended to covary strongly with order of recall. In Experiment 2, the order of reproduction was prespecified (either top row down to bottom row, or bottom row up to top row) in order to induce chunking by rows. The direction of reproduction was either pre- or post-cued. The results of this study showed that subjects encode the stimulus, wherever possible, in a form which is compatible with the constraints imposed on recall order. The results for the postcued conditions provide strong support for the argument that topographical variations in accuracy are a function of variations in accuracy of encoding, and not simply a function of order of report. The results are discussed in terms of an attentional model. It is proposed that a general ``anticipatory schema'' (cf. Neisser, Cognition and Reality 1976) presets the distribution of attention in the visual field, preselects a set of coding heuristics, and subsequently interacts with the present stimulus pattern. Spatial discontinuities in the distribution of attention resulting from this interaction are regarded as ``defining'' chunks of stimulus elements.},
  annotation = {00066},
  file = {/Users/igormoreno/Zotero/storage/JTRT92FS/Bartram - 1978 - Post-iconic visual storage Chunking in the reprod.pdf;/Users/igormoreno/Zotero/storage/YFGBH2E7/0010028578900038.html}
}

@inproceedings{basuPrincipledApproachDesigning2020,
  title = {A {{Principled Approach}} to {{Designing}} a {{Computational Thinking Practices Assessment}} for {{Early Grades}}},
  booktitle = {Proceedings of the 51st {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Basu, Satabdi and Rutstein, Daisy and Xu, Yuning and Shear, Linda},
  year = {2020},
  month = feb,
  pages = {912--918},
  publisher = {{ACM}},
  address = {{Portland OR USA}},
  doi = {10.1145/3328778.3366849},
  urldate = {2023-03-16},
  abstract = {In today's increasingly digital world, it is critical that all students learn to think computationally from an early age. Assessments of Computational Thinking (CT) are essential for capturing information about student learning and challenges. Several existing K-12 CT assessments focus on concepts like variables, iterations and conditionals without emphasizing practices like algorithmic thinking, reusing and remixing, and debugging. In this paper, we discuss the development of and results from a validated CT Practices assessment for 4th-6th grade students. The assessment tasks are multilingual, shifting the focus to CT practices, and making the assessment useful for students using different CS curricula and different programming languages. Results from an implementation of the assessment with about 15000 upper elementary students in Hong Kong indicate challenges with algorithm comparison given constraints, deciding when code can be reused, and choosing debugging test cases. These results point to the utility of our assessment as a curricular tool and the need for emphasizing CT practices in future curricular initiatives and teacher professional development.},
  isbn = {978-1-4503-6793-6},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/X5ZJJKAD/Basu et al. - 2020 - A Principled Approach to Designing a Computational.pdf}
}

@inproceedings{basuPrincipledApproachDesigning2020a,
  title = {A {{Principled Approach}} to {{Designing}} a {{Computational Thinking Practices Assessment}} for {{Early Grades}}},
  booktitle = {Proceedings of the 51st {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Basu, Satabdi and Rutstein, Daisy and Xu, Yuning and Shear, Linda},
  year = {2020},
  month = feb,
  pages = {912--918},
  publisher = {{ACM}},
  address = {{Portland OR USA}},
  doi = {10.1145/3328778.3366849},
  urldate = {2023-03-16},
  abstract = {In today's increasingly digital world, it is critical that all students learn to think computationally from an early age. Assessments of Computational Thinking (CT) are essential for capturing information about student learning and challenges. Several existing K-12 CT assessments focus on concepts like variables, iterations and conditionals without emphasizing practices like algorithmic thinking, reusing and remixing, and debugging. In this paper, we discuss the development of and results from a validated CT Practices assessment for 4th-6th grade students. The assessment tasks are multilingual, shifting the focus to CT practices, and making the assessment useful for students using different CS curricula and different programming languages. Results from an implementation of the assessment with about 15000 upper elementary students in Hong Kong indicate challenges with algorithm comparison given constraints, deciding when code can be reused, and choosing debugging test cases. These results point to the utility of our assessment as a curricular tool and the need for emphasizing CT practices in future curricular initiatives and teacher professional development.},
  isbn = {978-1-4503-6793-6},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/4GB6GQNQ/Basu et al. - 2020 - A Principled Approach to Designing a Computational.pdf}
}

@article{basuPrincipledApproachDesigning2021,
  title = {A Principled Approach to Designing Computational Thinking Concepts and Practices Assessments for Upper Elementary Grades},
  author = {Basu, Satabdi and Rutstein, Daisy W. and Xu, Yuning and Wang, Haiwen and Shear, Linda},
  year = {2021},
  month = apr,
  journal = {Computer Science Education},
  volume = {31},
  number = {2},
  pages = {169--198},
  issn = {0899-3408, 1744-5175},
  doi = {10.1080/08993408.2020.1866939},
  urldate = {2023-03-16},
  abstract = {Background and Context: In today's increasingly digital world, it is critical that all students learn to think computationally from an early age. Assessments of Computational Thinking (CT) are essential for capturing information about student learning and challenges. When programming is used as a vehicle to foster CT skills, assess\- ment of CT skills needs to measure understanding of programming concepts alongside general problem-solving practices applicable in contexts beyond programming.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/M8GESZXV/Basu et al. - 2021 - A principled approach to designing computational t.pdf}
}

@article{basuPrincipledApproachDesigning2021a,
  title = {A Principled Approach to Designing Computational Thinking Concepts and Practices Assessments for Upper Elementary Grades},
  author = {Basu, Satabdi and Rutstein, Daisy W. and Xu, Yuning and Wang, Haiwen and Shear, Linda},
  year = {2021},
  month = apr,
  journal = {Computer Science Education},
  volume = {31},
  number = {2},
  pages = {169--198},
  issn = {0899-3408, 1744-5175},
  doi = {10.1080/08993408.2020.1866939},
  urldate = {2023-03-16},
  abstract = {Background and Context: In today's increasingly digital world, it is critical that all students learn to think computationally from an early age. Assessments of Computational Thinking (CT) are essential for capturing information about student learning and challenges. When programming is used as a vehicle to foster CT skills, assess\- ment of CT skills needs to measure understanding of programming concepts alongside general problem-solving practices applicable in contexts beyond programming.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/DH3CTJU5/Basu et al. - 2021 - A principled approach to designing computational t.pdf}
}

@article{baxterPuttingAllStops2018,
  title = {Putting in All the Stops: Execution Control for {{JavaScript}}},
  shorttitle = {Putting in All the Stops},
  author = {Baxter, Samuel and Nigam, Rachit and Politz, Joe Gibbs and Krishnamurthi, Shriram and Guha, Arjun},
  year = {2018},
  month = jun,
  journal = {ACM SIGPLAN Notices},
  volume = {53},
  number = {4},
  pages = {30--45},
  issn = {0362-1340},
  doi = {10.1145/3296979.3192370},
  urldate = {2020-09-04},
  abstract = {Scores of compilers produce JavaScript, enabling programmers to use many languages on the Web, reuse existing code, and even use Web IDEs. Unfortunately, most compilers inherit the browser's compromised execution model, so long-running programs freeze the browser tab, infinite loops crash IDEs, and so on. The few compilers that avoid these problems suffer poor performance and are difficult to engineer. This paper presents Stopify, a source-to-source compiler that extends JavaScript with debugging abstractions and blocking operations, and easily integrates with existing compilers. We apply Stopify to ten programming languages and develop a Web IDE that supports stopping, single-stepping, breakpointing, and long-running computations. For nine languages, Stopify requires no or trivial compiler changes. For eight, our IDE is the first that provides these features. Two of our subject languages have compilers with similar features. Stopify's performance is competitive with these compilers and it makes them dramatically simpler. Stopify's abstractions rely on first-class continuations, which it provides by compiling JavaScript to JavaScript. We also identify sub-languages of JavaScript that compilers implicitly use, and exploit these to improve performance. Finally, Stopify needs to repeatedly interrupt and resume program execution. We use a sampling-based technique to estimate program speed that outperforms other systems.},
  keywords = {continuations,IDEs,JavaScript},
  annotation = {00009},
  file = {/Users/igormoreno/Zotero/storage/VZ9J26PX/Baxter et al - 2018 - Putting in all the stops.pdf}
}

@article{baymanDiagnosisBeginningProgrammers1983,
  title = {A Diagnosis of Beginning Programmers' Misconceptions of {{BASIC}} Programming Statements},
  author = {Bayman, Piraye and Mayer, Richard E.},
  year = {1983},
  month = sep,
  journal = {Communications of the ACM},
  volume = {26},
  number = {9},
  pages = {677--679},
  issn = {0001-0782, 1557-7317},
  doi = {10.1145/358172.358408},
  urldate = {2021-01-07},
  abstract = {In the process of learning a computer language, beginning programmers may develop mental models for the language. A mental model refers to the user's conception of the "invisible" information processing that occurs inside the computer between input and output. In this study, 30 undergraduate students learned BASIC through a selfpaced, mastery manual and simultaneously had hands-on access to an Apple II computer. After instruction, the students were tested on their mental models for the execution of each of nine BASIC statements. The results show that beginning programmers---althoagh able to perform adequately on mastery tests in program generation--possessed a wide range of misconceptions concerning the statements they had learned. This paper catalogs beginning programmers' conceptions of "what goes on inside the computer" for each of nine BASIC statements.},
  langid = {english},
  annotation = {00191},
  file = {/Users/igormoreno/Zotero/storage/RS2WA9QY/Bayman e Mayer - 1983 - A diagnosis of beginning programmers' misconceptio.pdf}
}

@article{beaubouefWhyHighAttrition2005,
  title = {Why the High Attrition Rate for Computer Science Students: Some Thoughts and Observations},
  shorttitle = {Why the High Attrition Rate for Computer Science Students},
  author = {Beaubouef, Theresa and Mason, John},
  year = {2005},
  month = jun,
  journal = {ACM SIGCSE Bulletin},
  volume = {37},
  number = {2},
  pages = {103--106},
  issn = {0097-8418},
  doi = {10.1145/1083431.1083474},
  urldate = {2021-10-26},
  abstract = {This paper investigates the possible causes for high attrition rates for Computer Science students. It is a serious problem in universities that must be addressed if the need for technologically competent professionals is to be met.},
  keywords = {attrition,computer science education,retention},
  file = {/Users/igormoreno/Zotero/storage/SBAEEFYN/Beaubouef e Mason - 2005 - Why the high attrition rate for computer science s.pdf}
}

@inproceedings{beckerCompilerErrorMessages2019,
  title = {Compiler {{Error Messages Considered Unhelpful}}: {{The Landscape}} of {{Text-Based Programming Error Message Research}}},
  shorttitle = {Compiler {{Error Messages Considered Unhelpful}}},
  booktitle = {Proceedings of the {{Working Group Reports}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Becker, Brett A. and Denny, Paul and Pettit, Raymond and Bouchard, Durell and Bouvier, Dennis J. and Harrington, Brian and Kamil, Amir and Karkare, Amey and McDonald, Chris and Osera, Peter-Michael and Pearce, Janice L. and Prather, James},
  year = {2019},
  month = dec,
  series = {{{ITiCSE-WGR}} '19},
  pages = {177--210},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3344429.3372508},
  urldate = {2022-02-18},
  abstract = {Diagnostic messages generated by compilers and interpreters such as syntax error messages have been researched for over half of a century. Unfortunately, these messages which include error, warning, and run-time messages, present substantial difficulty and could be more effective, particularly for novices. Recent years have seen an increased number of papers in the area including studies on the effectiveness of these messages, improving or enhancing them, and their usefulness as a part of programming process data that can be used to predict student performance, track student progress, and tailor learning plans. Despite this increased interest, the long history of literature is quite scattered and has not been brought together in any digestible form. In order to help the computing education community (and related communities) to further advance work on programming error messages, we present a comprehensive, historical and state-of-the-art report on research in the area. In addition, we synthesise and present the existing evidence for these messages including the difficulties they present and their effectiveness. We finally present a set of guidelines, curated from the literature, classified on the type of evidence supporting each one (historical, anecdotal, and empirical). This work can serve as a starting point for those who wish to conduct research on compiler error messages, runtime errors, and warnings. We also make the bibtex file of our 300+ reference corpus publicly available. Collectively this report and the bibliography will be useful to those who wish to design better messages or those that aim to measure their effectiveness, more effectively.},
  isbn = {978-1-4503-7567-2},
  keywords = {compiler error messages,considered harmful,cs-1,cs1,design guidelines,diagnostic error messages,error messages,hci,human computer interaction,introduction to programming,novice programmers,programming error messages,programming errors,review,run-time errors,survey,syntax errors,warnings},
  file = {/Users/igormoreno/Zotero/storage/M2NCVYCR/Becker et al. - 2019 - Compiler Error Messages Considered Unhelpful The .pdf}
}

@article{beckerPedagogiesCS1Survey2002,
  title = {Pedagogies for {{CS1}}: {{A}} Survey of {{Java}} Textbooks},
  shorttitle = {Pedagogies for {{CS1}}},
  author = {Becker, Byron Weber},
  year = {2002},
  journal = {manuscript, http://www. math. uwaterloo. ca/{$\sim$} bwbecker/papers/javaPedagogies. pdf, last visited},
  pages = {03--01},
  file = {/Users/igormoreno/Zotero/storage/AA2LJICJ/javaTextbooks.html}
}

@inproceedings{beckerSurveyIntroductoryProgramming2019,
  title = {A {{Survey}} of {{Introductory Programming Courses}} in {{Ireland}}},
  booktitle = {Proceedings of the 2019 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}  - {{ITiCSE}} '19},
  author = {Becker, Brett A.},
  year = {2019},
  pages = {58--64},
  publisher = {{ACM Press}},
  address = {{Aberdeen, Scotland Uk}},
  doi = {10.1145/3304221.3319752},
  urldate = {2020-01-01},
  abstract = {Between January and April of 2018, a comprehensive survey of introductory programming courses was undertaken across all sectors of Irish third-level institutions (universities, institutes of technology, and private colleges). The survey instrument was based on \textendash and nearly identical to \textendash{} recent surveys in the UK and Australasia. In total we report on 39 introductory programming courses at 25 third-level institutions. This includes 6 of 7 universities and 13 of 14 institutes of technology, representing 90\% of all publicly funded institutions. We also report on 4 private colleges representing 80\% of colleges in the Irish Higher Education Colleges Association that offer computing degrees.},
  isbn = {978-1-4503-6895-7},
  langid = {english},
  keywords = {Curriculus},
  file = {/Users/igormoreno/Zotero/storage/HTGZ5PCB/Becker - 2019 - A Survey of Introductory Programming Courses in Ireland.pdf}
}

@article{beckerWhatDoesSaying2021,
  title = {What Does Saying That 'programming Is Hard' Really Say, and about Whom?},
  author = {Becker, Brett A.},
  year = {2021},
  month = jul,
  journal = {Communications of the ACM},
  volume = {64},
  number = {8},
  pages = {27--29},
  issn = {0001-0782},
  doi = {10.1145/3469115},
  urldate = {2023-10-13},
  abstract = {Shifting the focus from the perceived difficulty of learning programming to making programming more universally accessible.},
  file = {/Users/igormoreno/Zotero/storage/U5YGMW8A/Becker - 2021 - What does saying that 'programming is hard' really.pdf}
}

@inproceedings{beheshtiLetDiveIt2015,
  title = {"{{Let}}'s Dive into It!": {{Learning}} Electricity with Multiple Representations},
  shorttitle = {"{{Let}}'s Dive into It!"},
  booktitle = {Proceedings of the 14th {{International Conference}} on {{Interaction Design}} and {{Children}}},
  author = {Beheshti, Elham and Obiorah, Mmachi and Horn, Michael S.},
  year = {2015},
  month = jun,
  series = {{{IDC}} '15},
  pages = {263--266},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2771839.2771892},
  urldate = {2020-10-13},
  abstract = {Electrical circuits are difficult to understand. In this paper, we introduce Spark, a museum exhibit that enables learners to interact with multiple representations of electrical circuits at the same time. The goal is to familiarize children with fundamental concepts of electricity such as current and resistance. We tested our design with 6 parent-child dyads at a major science museum. Our study investigates how families make sense of representations at the level of circuits and at the level of electrons and ions. Our findings show a wide variety of visitor interactions with the exhibit, in particular when connecting the two representations of a circuit.},
  isbn = {978-1-4503-3590-4},
  keywords = {agent-based modeling,electrical circuits,iterative design,multiple representations,museums learning},
  annotation = {00005},
  file = {/Users/igormoreno/Zotero/storage/S2GJXSZJ/Beheshti et al - 2015 - Let's dive into it.pdf}
}

@article{belleselenexiaPedagogicalReviewProgramming2017,
  title = {A {{Pedagogical Review}} of {{Programming Education Research}}: {{What Have We Learned}}},
  author = {{Belle Selene Xia}},
  year = {2017},
  journal = {International Journal of Online Pedagogy and Course Design},
  volume = {7},
  number = {1},
  pages = {10},
  issn = {2155-6873, 2155-6881},
  abstract = {Previous research has shown that especially novice students may find learning programming to be difficult in terms of programming concepts and program design. Many students fail to write correct program codes after the course and achieve the level of skills set by the learning goals of the course. In order to overcome the challenges of learning programming, we are interested in the pedagogical techniques of learning and teaching programming as well as some of the learning tools used to support programming education. This knowledge would help us to better align the design of programming courses with the teaching goal of these courses. New research opportunities are opened in the field of contributing student pedagogy in programming education.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/Z8WFNATI/Belle Selene Xia - 2017 - A Pedagogical Review of Programming Education Research.pdf}
}

@techreport{bellUnderstandingWhatEnables2013,
  title = {Understanding {{What Enables High Quality Professional Learning}}: {{A}} Report on the Research Evidence},
  author = {Bell, Miranda and Cordingley, Philippa},
  year = {2013},
  institution = {{Centre for the Use of Research Evidence in Education (CUREE)}},
  urldate = {2021-01-30},
  annotation = {00013},
  file = {/Users/igormoreno/Zotero/storage/EB6DKXWF/Bell and Cordingley - 2013 - Understanding What Enables High Quality Professional Learning.pdf}
}

@article{ben-ariConstructivismComputerScience2001,
  ids = {ben-ariConstructivismComputerScience1998},
  title = {Constructivism in {{Computer Science Education}}},
  author = {{Ben-Ari}, Mordechai},
  year = {2001},
  journal = {Journal of Computers in Mathematics and Science Teaching},
  volume = {20},
  number = {1},
  pages = {45--73},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/X9EEWS8T/Ben-Ari - 2001 - Constructivism in Computer Science Education.pdf}
}

@techreport{ben-ariManyGuisesInduction2020,
  title = {The {{Many Guises}} of {{Induction}}},
  author = {{Ben-Ari}, Moti},
  year = {2020},
  pages = {52},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/BJS9RZZ2/Ben-Ari - 2020 - The Many Guises of Induction.pdf}
}

@inproceedings{benayaUnderstandingObjectOriented2008,
  title = {Understanding {{Object Oriented Programming Concepts}} in an {{Advanced Programming Course}}},
  booktitle = {Informatics {{Education}} - {{Supporting Computational Thinking}}},
  author = {Benaya, Tamar and Zur, Ela},
  editor = {Mittermeir, Roland T. and Sys{\l}o, Maciej M.},
  year = {2008},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {161--170},
  publisher = {{Springer Berlin Heidelberg}},
  abstract = {Teaching Object Oriented Programming (OOP) is a difficult task, both for teachers who have to find the best way to illustrate the concepts and for students who have to understand them. Although the OOP paradigm and its concepts reflect the "real world", it has been shown that students find hard to understand and internalize the OOP concepts such as encapsulation, inheritance and polymorphism. This paper describes difficulties in understanding OOP in an Advanced Java course given at the Computer Science Department of the Open University of Israel. We present a typical question which focuses on several aspects of OOP. We discuss the students' answers and point out typical hardships in grasping the topic.},
  isbn = {978-3-540-69924-8},
  langid = {english},
  keywords = {Encapsulation,Inheritance,Object Oriented Programming,Polymorphism},
  file = {/Users/igormoreno/Zotero/storage/BNQ3I9TB/Benaya and Zur - 2008 - Understanding Object Oriented Programming Concepts in an Advanced Programming.pdf}
}

@misc{benedictduboulayNotionalMachinesShort2019,
  title = {Notional {{Machines}}: {{A}} Short Introduction},
  author = {{Benedict du Boulay}},
  year = {2019},
  month = sep,
  file = {/Users/igormoreno/Zotero/storage/VREV7LID/Benedict du Boulay - 2019 - Notional Machines.pdf}
}

@article{bengioNeuralProbabilisticLanguage2003,
  title = {A Neural Probabilistic Language Model},
  author = {Bengio, Yoshua and Ducharme, R{\'e}jean and Vincent, Pascal and Janvin, Christian},
  year = {2003},
  month = mar,
  journal = {The Journal of Machine Learning Research},
  volume = {3},
  number = {null},
  pages = {1137--1155},
  issn = {1532-4435},
  abstract = {A goal of statistical language modeling is to learn the joint probability function of sequences of words in a language. This is intrinsically difficult because of the curse of dimensionality: a word sequence on which the model will be tested is likely to be different from all the word sequences seen during training. Traditional but very successful approaches based on n-grams obtain generalization by concatenating very short overlapping sequences seen in the training set. We propose to fight the curse of dimensionality by learning a distributed representation for words which allows each training sentence to inform the model about an exponential number of semantically neighboring sentences. The model learns simultaneously (1) a distributed representation for each word along with (2) the probability function for word sequences, expressed in terms of these representations. Generalization is obtained because a sequence of words that has never been seen before gets high probability if it is made of words that are similar (in the sense of having a nearby representation) to words forming an already seen sentence. Training such large models (with millions of parameters) within a reasonable time is itself a significant challenge. We report on experiments using neural networks for the probability function, showing on two text corpora that the proposed approach significantly improves on state-of-the-art n-gram models, and that the proposed approach allows to take advantage of longer contexts.},
  file = {/Users/igormoreno/Zotero/storage/R22X8JT6/Bengio et al. - 2003 - A neural probabilistic language model.pdf}
}

@article{bennedsenAbstractionAbilityIndicator2006,
  title = {Abstraction Ability as an Indicator of Success for Learning Object-Oriented Programming?},
  author = {Bennedsen, Jens and Caspersen, Michael E.},
  year = {2006},
  month = jun,
  journal = {ACM SIGCSE Bulletin},
  volume = {38},
  pages = {39},
  doi = {10.1145/1138403.1138430},
  urldate = {2018-10-02},
  langid = {english},
  keywords = {abstraction,CS1,model-based programming,objects-first,success factors},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/QUB5GDPK/Bennedsen and Caspersen - 2006 - Abstraction ability as an indicator of success for learning object-oriented.pdf}
}

@article{bennedsenBlueJVisualDebugger2010,
  title = {{{BlueJ Visual Debugger}} for {{Learning}} the {{Execution}} of {{Object-Oriented Programs}}?},
  author = {Bennedsen, Jens and Schulte, Carsten},
  year = {2010},
  month = jun,
  journal = {ACM Transactions on Computing Education},
  volume = {10},
  number = {2},
  pages = {1--22},
  issn = {1946-6226, 1946-6226},
  doi = {10.1145/1789934.1789938},
  urldate = {2020-06-22},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/LZ7SBHYA/Bennedsen and Schulte - 2010 - BlueJ Visual Debugger for Learning the Execution of Object-Oriented Programs.pdf}
}

@article{bennedsenCompetenceModelObjectInteraction2006,
  title = {A {{Competence Model}} for {{Object-Interaction}} in {{Introductory Programming}}},
  author = {Bennedsen, Jens and Schulte, Carsten},
  year = {2006},
  pages = {15},
  abstract = {Assuming that understanding object-oriented programming requires the understanding of object-interaction, this article outlines the development of a theoretical model that provides a framework to assess a hierarchy of competences related to object-interaction. A newly developed test allows for an in-depth analysis of this hierarchy, including its relationship with other (e.g. more `traditional') factors that impact students' understanding of objectoriented programming. Based on a study at two learning institutions, we conclude that the proposed model is an effective tool for describing different competence levels. The analysis of how different factors influence students' object-interaction skills shows a correlation between object-interaction and imperative programming, as well as self-efficacy; the correlation between object-interaction and math, however, was weak. We found that the degree of visibility of object-interaction in the program text is the most critical factor for understanding object-interaction. The analysis is followed by a discussion of the implications of the findings for teaching.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/J8WIKGNB/Bennedsen and Schulte - 2006 - A Competence Model for Object-Interaction in Introductory Programming.pdf}
}

@inproceedings{bennedsenObjectInteractionCompetence2013,
  title = {Object {{Interaction Competence Model}} v. 2.0},
  booktitle = {2013 {{Learning}} and {{Teaching}} in {{Computing}} and {{Engineering}}},
  author = {Bennedsen, J. and Schulte, C.},
  year = {2013},
  month = mar,
  pages = {9--16},
  publisher = {{IEEE}},
  address = {{Macau}},
  doi = {10.1109/LaTiCE.2013.43},
  urldate = {2020-06-22},
  abstract = {Teaching and learning object oriented programming has to take into account the specific object oriented characteristics of program execution, namely the interaction of objects during runtime. Prior to the research reported in this article, we have developed a competence model for object interaction and a test instrument for that model. This article assesses the problems involved in the first version of the instrument and associated empirical results. Based on the discussion and analysis of the prior results, we describe the rationale behind refining the hierarchy, and present a refined test instrument. We then describe a first evaluative study with third semester students and present its results as well as an discussion of the validity of the refined instrument. The empirical results show that the hierarchy is taxonomic (i.e. to understand level n one needs to understand all lower levels) but there where problems with the test used.},
  isbn = {978-1-4673-5627-5 978-0-7695-4960-6},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/ZXTS8R94/Bennedsen and Schulte - 2013 - Object Interaction Competence Model v.pdf}
}

@inproceedings{bennedssenAbstractionAbilityIndicator2008,
  title = {Abstraction Ability as an Indicator of Success for Learning Computing Science?},
  booktitle = {Proceeding of the Fourth International Workshop on {{Computing}} Education Research - {{ICER}} '08},
  author = {Bennedssen, Jens and Caspersen, Michael E.},
  year = {2008},
  pages = {15--26},
  publisher = {{ACM Press}},
  address = {{Sydney, Australia}},
  doi = {10.1145/1404520.1404523},
  urldate = {2018-10-02},
  abstract = {Computing scientists generally agree that abstract thinking is a crucial component for practicing computer science. We report on a three-year longitudinal study to confirm the hypothesis that general abstraction ability has a positive impact on performance in computing science.},
  isbn = {978-1-60558-216-0},
  langid = {english},
  keywords = {Abstraction,computing science,CS,indicator,learning,success},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/UNKMB89U/Bennedssen and Caspersen - 2008 - Abstraction ability as an indicator of success for learning computing science.pdf}
}

@article{bennettFormativeAssessmentCritical2011,
  title = {Formative Assessment: A Critical Review},
  shorttitle = {Formative Assessment},
  author = {Bennett, Randy Elliot},
  year = {2011},
  month = feb,
  journal = {Assessment in Education: Principles, Policy \& Practice},
  volume = {18},
  number = {1},
  pages = {5--25},
  issn = {0969-594X, 1465-329X},
  doi = {10.1080/0969594X.2010.513678},
  urldate = {2020-06-22},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/96FNSMBP/Bennett - 2011 - Formative assessment a critical review.pdf}
}

@techreport{bentonChallengingMisconceptionsStudent2016,
  title = {Challenging {{Misconceptions About Student Ratings}} of {{Instruction}}},
  author = {Benton, Stephen L and Ryalls, Kenneth R},
  year = {2016},
  month = apr,
  number = {58},
  pages = {22},
  institution = {{The IDEA Center}},
  abstract = {Data from student ratings of instruction (SRI) are used ubiquitously as a key element in providing instructors with valuable feedback and evaluators with critical student input. Nonetheless, calls for the elimination of SRI continue to appear in academic journals and higher education periodicals. This paper brings to bear the huge body of research on SRI to which so many academics and institutions have contributed. Some of the most egregiously erroneous statements about SRI are rebutted with brief reviews of the readily available compelling evidence. Although some faculty frustrations about misuse of SRI are valid, we argue that inclusion of student voice is critical. Students can provide useful feedback because they have firsthand experience over multiple occasions of what actually occurred in the classroom. Recommendations are made for best practices in using SRI as one of many sources for improving and evaluating teaching.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/8DEPTZES/Benton and Ryalls - 2016 - Challenging Misconceptions About Student Ratings of Instruction.pdf}
}

@inproceedings{bergesEvaluationSourceCode2015,
  title = {Evaluation of {{Source Code}} with {{Item Response Theory}}},
  booktitle = {Proceedings of the 2015 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}} - {{ITiCSE}} '15},
  author = {Berges, Marc and Hubwieser, Peter},
  year = {2015},
  pages = {51--56},
  publisher = {{ACM Press}},
  address = {{Vilnius, Lithuania}},
  doi = {10.1145/2729094.2742619},
  urldate = {2020-10-13},
  abstract = {The analysis of source code produced by novice programmers could provide interesting insights into their learning progress, particularly in introductory programming courses. Yet, as the programming ability of a person is assumed to be quite complex, it is not likely that it would be observable directly in its total. Instead, we regard those abilities as latent psychometric constructs and apply the methodology of item response theory (IRT) to assess their manifestations. In preparatory work, we had identified a list of items that represent the central concepts of object-oriented programming. In this paper we propose a methodology that allows the evaluation of coding abilities by analyzing the application of those concepts. We demonstrate this methodology by exemplarily analyzing source code that was produced during programming projects. The results provide interesting information about the difficulty of the concepts' application and the distribution of the respective coding abilities among the students.},
  isbn = {978-1-4503-3440-2},
  langid = {english},
  annotation = {00014},
  file = {/Users/igormoreno/Zotero/storage/ZD27PFSA/Berges e Hubwieser - 2015 - Evaluation of Source Code with Item Response Theor.pdf}
}

@article{berkSurvey12Strategies2005,
  title = {Survey of 12 {{Strategies}} to {{Measure Teaching Effectiveness}}},
  author = {Berk, Ronald},
  year = {2005},
  journal = {International Journal of Teaching and Learning in Higher Education},
  volume = {17},
  number = {1},
  pages = {48--62},
  issn = {ISSN 1812-9129},
  urldate = {2018-10-06},
  abstract = {Twelve potential sources of evidence to measure teaching effectiveness are critically reviewed: (a) student ratings, (b) peer ratings, (c) self-evaluation, (d) videos, (e) student interviews, (f) alumni ratings, (g) employer ratings, (h) administrator ratings, (i) teaching scholarship, (j) teaching awards, (k) learning outcome measures, and (l) teaching portfolios. National standards are presented to guide the definition and measurement of effective teaching. A unified conceptualization of teaching effectiveness is proposed to use multiple sources of evidence, such as student ratings, peer ratings, and self-evaluation, to provide an accurate and reliable base for formative and summative decisions. Multiple sources build on the strengths of all sources, while compensating for the weaknesses in any single source. This triangulation of sources is recommended in view of the complexity of measuring the act of teaching and the variety of direct and indirect sources and tools used to produce the evidence.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/QVLC7S8P/Berk - 2005 - Survey of 12 Strategies to Measure Teaching Effectiveness.pdf}
}

@article{berryChemicalAbstractMachine1992,
  title = {The Chemical Abstract Machine},
  author = {Berry, G{\'e}rard and Boudol, G{\'e}rard},
  year = {1992},
  month = apr,
  journal = {Theoretical Computer Science},
  volume = {96},
  number = {1},
  pages = {217--248},
  issn = {0304-3975},
  doi = {10.1016/0304-3975(92)90185-I},
  urldate = {2018-12-02},
  abstract = {We introduce a new kind of abstract machine based on the chemical metaphor used in the {$\Gamma$} language of Ban\^atre and Le M\'etayer. States of a machine are chemical solutions where floating molecules can interact according to reaction rules. Solutions can be stratified by encapsulating subsolutions within membranes that force reactions to occur locally. We illustrate the use of this model by describing the operational semantics of the TCCS and CCS process calculi and of the fragment of Milner, Parrow and Walker's Calculus of Mobile Processes used by Milner to encode the lambda-calculus. We also give ideas on how to extract a higher-order concurrent {$\lambda$}-calculus out of the basic concepts of the chemical abstract machine.},
  file = {/Users/igormoreno/Zotero/storage/T4NAI7EL/Berry and Boudol - 1992 - The chemical abstract machine.pdf;/Users/igormoreno/Zotero/storage/7QSZ6S3I/030439759290185I.html}
}

@inproceedings{berryDesignImplementationNotional2013,
  title = {The Design and Implementation of a Notional Machine for Teaching Introductory Programming},
  booktitle = {Proceedings of the 8th {{Workshop}} in {{Primary}} and {{Secondary Computing Education}} on - {{WiPSE}} '13},
  author = {Berry, Michael and K{\"o}lling, Michael},
  year = {2013},
  pages = {25--28},
  publisher = {{ACM Press}},
  address = {{Aarhus, Denmark}},
  doi = {10.1145/2532748.2532765},
  urldate = {2020-06-22},
  abstract = {Comprehension of programming and programs is known to be a difficult task for many beginning students, with many computing courses showing significant drop out and failure rates. In this paper, we present a new notional machine design and implementation to help with understanding of programming and its dynamics for beginning learners. The notional machine offers an abstraction of the physical machine designed for comprehension and learning purposes. We introduce the notional machine and describe an implementation in BlueJ.},
  isbn = {978-1-4503-2455-7},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/EMWSFYZA/Berry and Kölling - 2013 - The design and implementation of a notional machine for teaching introductory.pdf}
}

@inproceedings{berryNovisNotionalMachine2016,
  ids = {berryNovisNotionalMachine2016a},
  title = {Novis: {{A Notional Machine Implementation}} for {{Teaching Introductory Programming}}},
  shorttitle = {Novis},
  booktitle = {2016 {{International Conference}} on {{Learning}} and {{Teaching}} in {{Computing}} and {{Engineering}} ({{LaTICE}})},
  author = {Berry, Michael and Kolling, Michael},
  year = {2016},
  month = mar,
  pages = {54--59},
  publisher = {{IEEE}},
  address = {{Mumbai, India}},
  doi = {10.1109/LaTiCE.2016.5},
  urldate = {2020-06-22},
  abstract = {Comprehension of programming and programs is known to be a difficult task for many beginning students, with many computing courses showing significant drop out and failure rates. In this paper, we present a notional machine implementation, Novis, to help with understanding of programming and its dynamics for beginning learners. The notional machine offers an abstraction of the physical machine designed for comprehension and learning purposes. Novis provides a real-time visualisation of this notional machine, and is integrated into BlueJ.},
  isbn = {978-1-5090-2504-6},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/GC4Z4U7Q/Berry and Kolling - 2016 - Novis A Notional Machine Implementation for Teach.pdf;/Users/igormoreno/Zotero/storage/K4S2HXHK/Berry and Kolling - 2016 - Novis A Notional Machine Implementation for Teach.pdf}
}

@inproceedings{berryStatePlayNotional2014,
  title = {The State of Play: A Notional Machine for Learning Programming},
  shorttitle = {The State of Play},
  booktitle = {Proceedings of the 2014 Conference on {{Innovation}} \& Technology in Computer Science Education - {{ITiCSE}} '14},
  author = {Berry, Michael and K{\"o}lling, Michael},
  year = {2014},
  pages = {21--26},
  publisher = {{ACM Press}},
  address = {{Uppsala, Sweden}},
  doi = {10.1145/2591708.2591721},
  urldate = {2020-06-22},
  abstract = {Comprehension of programming and programs is known to be a difficult task for many beginning students, with many computing courses showing significant drop out and failure rates. In this paper, we present a new notional machine design and implementation to help with understanding of programming and its dynamics for beginning learners. The notional machine offers an abstraction of the physical machine designed for comprehension and learning purposes. We introduce the notional machine and a graphical notation for its representation. We also present Novis, an implementation of a dynamic real-time visualiser of this notional machine, integrated into BlueJ.},
  isbn = {978-1-4503-2833-3},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/B24MPTLZ/Berry and Kölling - 2014 - The state of play a notional machine for learning.pdf}
}

@article{bertholdDoubleedgedEffectsExplanation2011,
  title = {The Double-Edged Effects of Explanation Prompts},
  author = {Berthold, Kirsten and R{\"o}der, Heidi and Kn{\"o}rzer, Daniel and Kessler, Wolfgang and Renkl, Alexander},
  year = {2011},
  month = jan,
  journal = {Computers in Human Behavior},
  series = {Current {{Research Topics}} in {{Cognitive Load Theory}}},
  volume = {27},
  number = {1},
  pages = {69--75},
  issn = {0747-5632},
  doi = {10.1016/j.chb.2010.05.025},
  urldate = {2018-11-06},
  abstract = {Explanation prompts usually foster conceptual understanding. However, it has been claimed within cognitive load theory that prompts can take cognitive load to the upper limit when learning complex contents. Under such circumstances, prompts focusing the learners' attention on specific aspects (e.g., conceptual aspects such as elaborations on domain principles) might have some costs: Other important aspects (e.g., procedural aspects such as how to calculate) cannot be processed deeply. Thus, we expected that conceptually-oriented explanation prompts would foster the detailedness of explanations, the number of elaborations on domain principles, and conceptual knowledge. In addition, we tested the influence of such prompts on the number of calculations performed during learning and procedural knowledge. We conducted an experiment in which we employed conceptually-oriented explanation prompts in a complex e-learning module on tax law. Tax law university students (N=40) worked on this e-learning module under two conditions: (a) conceptually-oriented explanation prompts, (b) no prompts. The prompts led to double-edged effects: positive effects on the detailedness of explanations and on the number of elaborations on domain principles, as well as on conceptual knowledge and simultaneously negative effects on the number of calculations performed during learning as well as on procedural knowledge.},
  keywords = {Cognitive load theory,Conceptual knowledge,E-learning,Explanation prompts,Procedural knowledge},
  file = {/Users/igormoreno/Zotero/storage/5LGL2NXE/Berthold et al - 2011 - The double-edged effects of explanation prompts.pdf;/Users/igormoreno/Zotero/storage/7FNGFBE7/S0747563210001652.html}
}

@inproceedings{bertholdFosteringUnderstandingMultiRepresentational2005,
  title = {Fostering the {{Understanding}} of {{Multi-Representational Examples}} by {{Self-Explanation Prompts}}},
  booktitle = {Proceedings of the {{Annual Meeting}} of the {{Cognitive Science Society}}},
  author = {Berthold, Kirsten},
  year = {2005},
  volume = {27},
  abstract = {Multiple representations in learning materials are usually employed in order to foster understanding. However, they also impose high demands on the learners (e.g., need for integration). By embedding multi-representations in workedout examples, cognitive capacity is released that can be used for self-explanations on the integration and understanding of multiple representations. The effects of two types of selfexplanation prompts were investigated by conducting an experiment comprising three conditions (domain: mathematics). The learners (N = 62) received either (1) selfexplanation prompts, (2) self-explanation prompts in a scaffolding-fading procedure, or (3) no prompts. Both types of self-explanation prompts fostered procedural and conceptual knowledge. With respect to procedural knowledge, the different self-explanations prompts did not differ in their effectiveness. However, conceptual knowledge and especially knowledge indicating the integration of multiple representations was particularly fostered by scaffolded selfexplanation prompts. Thus, for enhancing conceptual understanding, such self-explanation prompts should be provided because they scaffold the learners to reach their zone of proximal development.},
  keywords = {Behavior,Command-line interface,Embedding,explanation,Numerous,Procedural programming,Representation (action)},
  file = {/Users/igormoreno/Zotero/storage/BUFKEMNQ/Berthold - 2005 - Fostering the Understanding of Multi-Representational Examples by.pdf}
}

@inproceedings{bettinUnderstandingEnhancingNovice2019,
  title = {Toward {{Understanding}} and {{Enhancing Novice Students}}' {{Mental Models}} in {{Computer Science}}},
  booktitle = {Proceedings of the 2019 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Bettin, Briana},
  year = {2019},
  series = {{{ICER}} '19},
  pages = {323--324},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3291279.3339434},
  urldate = {2019-10-07},
  abstract = {The CS1 classroom is filled with ideas that may be difficult for novice students. Flawed transfer and knowledge gaps appear in mistakes such as incorrect syntax. Students may recognize core ideas while details confuse them. Students must work through these problems to grow, but instructor intervention can assist appropriate restructuring of their mental models. Student inquiries and submissions may exhibit misconceptions. We can use this insight into student mental model inconsistencies to better understand these models and to specifically explore analogies as a tool for intervention. Novice students have no background, so analogies relying on the "real world" may make implementation details more memorable and thus programming more approachable. The use of analogies may help to improve an incorrect mental model. Analogy usage is not new to computer science, but use for basic constructs or with "smaller" errors is largely unexplored. I aim to develop a detailed, viable collection of CS1 analogies. A subset will be studied in the classroom, particularly focused on how delivery time affects value and concept retention. This can offer insight into the intervention's impact on a student's mental model long term. My goal is to illustrate a multifaceted view of understanding students' mental model development.},
  isbn = {978-1-4503-6185-9},
  keywords = {analogy,computer science education,cs1,curriculum design,mental models,metaphor,teaching tools},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/TEABEBZM/Bettin - 2019 - Toward Understanding and Enhancing Novice Students' Mental Models in Computer.pdf}
}

@article{beurer-kellnerPromptingProgrammingQuery2023,
  title = {Prompting {{Is Programming}}: {{A Query Language}} for {{Large Language Models}}},
  shorttitle = {Prompting {{Is Programming}}},
  author = {{Beurer-Kellner}, Luca and Fischer, Marc and Vechev, Martin},
  year = {2023},
  month = jun,
  journal = {Proceedings of the ACM on Programming Languages},
  volume = {7},
  number = {PLDI},
  pages = {1946--1969},
  issn = {2475-1421},
  doi = {10.1145/3591300},
  urldate = {2023-11-08},
  abstract = {Large language models have demonstrated outstanding performance on a wide range of tasks such as question answering and code generation.   On a high level, given an input, a language model can be used to automatically complete the sequence in a statistically-likely way. Based on this, users prompt these models with language instructions or examples, to implement a variety of downstream tasks. Advanced prompting methods can even imply interaction between the language model, a user, and external tools such as calculators. However, to obtain state-of-the-art performance or adapt language models for specific tasks, complex task- and model-specific programs have to be implemented, which may still require ad-hoc interaction.             Based on this, we present the novel idea of Language Model Programming (LMP). LMP generalizes language model prompting from pure text prompts to an intuitive combination of text prompting and scripting. Additionally, LMP allows constraints to be specified over the language model output. This enables easy adaption to many tasks while abstracting language model internals and providing high-level semantics.             To enable LMP, we implement LMQL (short for Language Model Query Language), which leverages the constraints and control flow from an LMP prompt to generate an efficient inference procedure that minimizes the number of expensive calls to the underlying language model.             We show that LMQL can capture a wide range of state-of-the-art prompting methods in an intuitive way, especially facilitating interactive flows that are challenging to implement with existing high-level APIs. Our evaluation shows that we retain or increase the accuracy on several downstream tasks, while also significantly reducing the required amount of computation or cost in the case of pay-to-use APIs (26-85\% cost savings).},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/QKWVD6ZZ/Beurer-Kellner et al - 2023 - Prompting Is Programming.pdf}
}

@inproceedings{bhuiyanMentalModelsRecursion1990,
  title = {Mental Models of Recursion and Their Use in the {{SCENT}} Programming Advisor},
  booktitle = {Knowledge {{Based Computer Systems}}},
  author = {Bhuiyan, {\relax SH} and Greer, {\relax JE} and McCalla, {\relax GI}},
  editor = {Ramani, S. and Chandrasekar, R. and Anjaneyulu, K. S. R.},
  year = {1990},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {133--144},
  publisher = {{Springer}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/BFb0018374},
  abstract = {Mental modeling techniques are used to describe human understanding of the world, and to derive cognitive explanations of problem-solving behaviour. This paper identifies mental models of recursion through an investigation conducted among novice programmers. The necessity of using these mental models in diagnosis, pedagogy, and student modeling in an intelligent tutoring system is illustrated with the aid of a case study. The evolutionary and possible revolutionary development of mental models, coexistence of multiple models, and representation of these models are also discussed.},
  isbn = {978-3-540-47168-4},
  langid = {english},
  annotation = {00018},
  file = {/Users/igormoreno/Zotero/storage/6EITCUJA/Bhuiyan et al. - 1990 - Mental models of recursion and their use in the SC.pdf}
}

@book{biancuzziMastermindsProgramming2009,
  title = {Masterminds of Programming},
  editor = {Biancuzzi, Federico and Warden, Shane},
  year = {2009},
  edition = {1st ed},
  publisher = {{O'Reilly}},
  address = {{Sebastopol, CA}},
  abstract = {"Masterminds of Programming features exclusive interviews with the creators of several historic and highly influential programming languages. In this interview collection, you'll learn about the processes that led to specific design decisions, including the goals these pioneers had in mind, the trade-offs they had to make, and how their experiences have made an impact on programming today."--P. [4] of cover},
  isbn = {978-0-596-51517-1},
  langid = {english},
  lccn = {QA76.6 .M3195 2009},
  keywords = {Computer algorithms,Computer programmers,Computer programming,Informatici,Interviews,Ontwerpers,Programmeertalen,Programming languages (Electronic computers)},
  annotation = {00042  OCLC: ocn156831755},
  file = {/Users/igormoreno/Zotero/storage/BRJIGVJM/Biancuzzi and Warden - 2009 - Masterminds of programming.pdf}
}

@techreport{biermanMJImperativeCore2003,
  title = {{{MJ}}: {{An}} Imperative Core Calculus for {{Java}} and {{Java}} with Effects},
  shorttitle = {{{MJ}}},
  author = {Bierman, G. M. and Parkinson, M. J. and Pitts, A. M.},
  year = {2003},
  number = {UCAM-CL-TR-563},
  institution = {{University of Cambridge, Computer Laboratory}},
  doi = {10.48456/tr-563},
  urldate = {2022-08-02},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/MF7XAPT5/Bierman et al. - 2003 - MJ An imperative core calculus for Java and Java .pdf;/Users/igormoreno/Zotero/storage/P4QI9G45/UCAM-CL-TR-563.html}
}

@article{bigelowAPPLICATIONSMETHODOLOGY,
  title = {{{AN APPLICATIONS METHODOLOGY}}},
  author = {Bigelow, Richard H and Greenfield, Norton R and Szolovits, Peter and Thompson, Frederick B},
  pages = {5},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/LCD5CJN8/Bigelow et al - AN APPLICATIONS METHODOLOGY.pdf}
}

@article{billeSurveyTreeEdit2005,
  title = {A Survey on Tree Edit Distance and Related Problems},
  author = {Bille, Philip},
  year = {2005},
  month = jun,
  journal = {Theoretical Computer Science},
  volume = {337},
  number = {1},
  pages = {217--239},
  issn = {0304-3975},
  doi = {10.1016/j.tcs.2004.12.030},
  urldate = {2022-07-26},
  abstract = {We survey the problem of comparing labeled trees based on simple local operations of deleting, inserting, and relabeling nodes. These operations lead to the tree edit distance, alignment distance, and inclusion problem. For each problem we review the results available and present, in detail, one or more of the central algorithms for solving the problem.},
  langid = {english},
  keywords = {Tree alignment,Tree edit distance,Tree inclusion,Tree matching},
  file = {/Users/igormoreno/Zotero/storage/TUAFTIG7/Bille - 2005 - A survey on tree edit distance and related problem.pdf;/Users/igormoreno/Zotero/storage/GADK8RVG/S0304397505000174.html}
}

@inproceedings{binkleyCamelcaseScore2009,
  title = {To Camelcase or Under\_score},
  booktitle = {2009 {{IEEE}} 17th {{International Conference}} on {{Program Comprehension}}},
  author = {Binkley, D. and Davis, M. and Lawrie, D. and Morrell, C.},
  year = {2009},
  month = may,
  pages = {158--167},
  issn = {1092-8138},
  doi = {10.1109/ICPC.2009.5090039},
  abstract = {Naming conventions are generally adopted in an effort to improve program comprehension. Two of the most popular conventions are alternatives for composing multi-word identifiers: the use of underscores and the use of camel casing. While most programmers have a personal opinion as to which style is better, empirical study forms a more appropriate basis for choosing between them. The central hypothesis considered herein is that identifier style affects the speed and accuracy of manipulating programs. An empirical study of 135 programmers and non-programmers was conducted to better understand the impact of identifier style on code readability. The experiment builds on past work of others who study how readers of natural language perform such tasks. Results indicate that camel casing leads to higher accuracy among all subjects regardless of training, and those trained in camel casing are able to recognize identifiers in the camel case style faster than identifiers in the underscore style.},
  keywords = {camel case style,code readability,Computer languages,Educational institutions,empirical study,Java,multiword identifier,naming convention,naming services,natural language reader,Natural languages,program comprehension,program manipulation,programming,Programming profession,programming style,Psychology,reverse engineering,statistical analysis,underscore style},
  file = {/Users/igormoreno/Zotero/storage/LZVAEJIM/Binkley et al - 2009 - To camelcase or under_score.pdf;/Users/igormoreno/Zotero/storage/5TTHDXFT/5090039.html}
}

@article{birdAlgebraicIdentitiesProgram1989,
  title = {Algebraic Identities for Program Calculation},
  author = {Bird, R. S.},
  year = {1989},
  month = apr,
  journal = {The Computer Journal},
  volume = {32},
  number = {2},
  pages = {122--126},
  issn = {0010-4620},
  doi = {10.1093/comjnl/32.2.122},
  urldate = {2023-07-06},
  file = {/Users/igormoreno/Zotero/storage/4WVTQUY6/Bird - 1989 - Algebraic identities for program calculation.pdf}
}

@book{birdAlgebraProgramming1997,
  title = {Algebra of Programming},
  author = {Bird, Richard and de Moor, Oege},
  year = {1997},
  series = {Prentice-{{Hall}} International Series in Computer Science},
  publisher = {{Prentice Hall}},
  address = {{London ; New York}},
  isbn = {978-0-13-507245-5},
  langid = {english},
  lccn = {QA76.6 .B567 1997},
  keywords = {Computer algorithms,Computer programming,Programming (Mathematics)},
  annotation = {00968},
  file = {/Users/igormoreno/Zotero/storage/TVJ5TXSB/Bird and Moor - 1997 - Algebra of programming.pdf}
}

@book{birdAlgorithmDesignHaskell2020,
  title = {Algorithm {{Design}} with {{Haskell}}},
  author = {Bird, Richard and Gibbons, Jeremy},
  year = {2020},
  month = jul,
  edition = {1st edition},
  publisher = {{Cambridge University Press}},
  abstract = {This book is devoted to five main principles of algorithm design: divide and conquer, greedy algorithms, thinning, dynamic programming, and exhaustive search. These principles are presented using Haskell, a purely functional language, leading to simpler explanations and shorter programs than would be obtained with imperative languages. Carefully selected examples, both new and standard, reveal the commonalities and highlight the differences between algorithms. The algorithm developments use equational reasoning where applicable, clarifying the applicability conditions and correctness arguments. Every chapter concludes with exercises (nearly 300 in total), each with complete answers, allowing the reader to consolidate their understanding and apply the techniques to a range of problems. The book serves students (both undergraduate and postgraduate), researchers, teachers, and professionals who want to know more about what goes into a good algorithm and how such algorithms can be expressed in purely functional terms.},
  langid = {english}
}

@inproceedings{birdFifteenYearsFunctional2006,
  title = {Fifteen Years of Functional Pearls},
  booktitle = {Proceedings of the Eleventh {{ACM SIGPLAN}} International Conference on {{Functional}} Programming},
  author = {Bird, Richard S.},
  year = {2006},
  month = sep,
  series = {{{ICFP}} '06},
  pages = {215},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1159803.1159832},
  urldate = {2021-12-30},
  abstract = {In 1991, when the Journal of Functional Programming was inaugurated, the editors, Simon Peyton Jones and Philip Wadler, asked me to contribute a regular column to be called Functional Pearls. The idea was to emulate the very successful series of essays that Jon Bentley had written under the title Programming Pearls in the Communications of the ACM. A possible alternative model for the column was Martin Rem's Small Programming Exercises that appeared regularly in the Science of Computer Programming in the 1980s. In Rem's articles, various programming tasks were posed in one issue, and solved in the subsequent one. It was felt that similar material could be adapted to a functional style, using equational reasoning rather than the Dijkstra-Hoare framework to derive the final product. After all, one reason that functional programming stimulated the interest of many at that time was that it was good for equational reasoning, a slogan captured in Mark Jone's GOFER system (Good For Equational Reasoning).I agreed to the suggestion, but only under the proviso that other contributors to the column should be sought. Counting to the end of the present year, 2006, about 64 pearls will have appeared in JFP, of which I have written 14. There are also various pearls that have been presented at ICFP and at MPC (Mathematics of Program Construction). The pearls range in content, from (hopefully) instructive exercises in program calculation - my own area of interest, to attractive presentations of new functional data structures - of which Ralf Hinze and Chris Okasaki were the main contributors, as well as interesting algorithms in their own right, such as Runciman's Lazy wheel sieves, and Huet's Zipper.This talk will review a little of the history of Functional Pearls, and tentatively try to suggest what ingredients make a good pearl and how pearls differ from normal research papers. Indeed, my brief from the Program Chair for this talk was expressed as follows: "Well done Functional Pearls are often the highlight of an ICFP conference, but many of the submitted ones somehow miss the mark, by being too trivial, too complicated, or somehow not quite the elegant solution one hopes for. So it would be interesting to hear about your experiences as to what makes a good one and how to go about creating it.Having accepted this daunting commission, and being mindful of Horace's remark that good advice should be short, I am now busily engaged in finding a pearl that is not too trivial, nor too complicated, and is sufficiently elegant to serve as a decent example, both to illustrate the talk and to provide some technical content.},
  isbn = {978-1-59593-309-6},
  file = {/Users/igormoreno/Zotero/storage/S2FCW9KH/Bird - 2006 - Fifteen years of functional pearls.pdf}
}

@article{birdFUNCTIONALPEARLProgram2006,
  title = {{{FUNCTIONAL PEARL}}: {{A}} Program to Solve {{Sudoku}}},
  shorttitle = {{{FUNCTIONAL PEARL}}},
  author = {Bird, Richard},
  year = {2006},
  month = nov,
  journal = {Journal of Functional Programming},
  volume = {16},
  number = {6},
  pages = {671--679},
  publisher = {{Cambridge University Press}},
  issn = {1469-7653, 0956-7968},
  doi = {10.1017/S0956796806006058},
  urldate = {2020-04-23},
  abstract = {There's no maths involved. You solve the puzzle with reasoning and logic. Advice on how to play Sudoku, The Independent Newspaper},
  langid = {english},
  keywords = {Constraint Programming},
  annotation = {00012},
  file = {/Users/igormoreno/Zotero/storage/SHLYV4BA/Bird - 2006 - FUNCTIONAL PEARL A program to solve Sudoku.pdf;/Users/igormoreno/Zotero/storage/3329WM87/2A2C12F0CAA9A48C1D6697CBFC6A559C.html}
}

@misc{birdHowWriteFunctional2006,
  title = {How to {{Write}} a {{Functional Pearl}}},
  author = {Bird, Richard},
  year = {2006},
  address = {{Portland OR USA}},
  file = {/Users/igormoreno/Zotero/storage/A459IP2F/Bird - 2006 - How to Write a Functional Pearl.pdf}
}

@book{birdIntroductionFunctionalProgramming1988,
  title = {Introduction to Functional Programming},
  author = {Bird, Richard and Wadler, Philip},
  year = {1988},
  series = {Prentice {{Hall}} International Series in Computer Science},
  publisher = {{Prentice Hall}},
  address = {{New York}},
  isbn = {978-0-13-484189-2 978-0-13-484197-7},
  langid = {english},
  lccn = {QA76.6 .B568 1988},
  keywords = {Functional programming (Computer science)},
  file = {/Users/igormoreno/Zotero/storage/BJYH9446/Bird and Wadler - 1988 - Introduction to functional programming.pdf}
}

@article{birdIntroductionTheoryLists1987,
  title = {An {{Introduction}} to the {{Theory}} of {{Lists}}},
  author = {Bird, Richard},
  year = {1987},
  urldate = {2020-08-18},
  langid = {british},
  annotation = {00606},
  file = {/Users/igormoreno/Zotero/storage/VQRQTU8G/publication2610-abstract.html}
}

@incollection{birdLecturesConstructiveFunctional1989,
  ids = {birdLecturesConstructiveFunctional1988},
  title = {Lectures on {{Constructive Functional Programming}}},
  booktitle = {Constructive {{Methods}} in {{Computing Science}}},
  author = {Bird, Richard S.},
  editor = {Broy, Manfred},
  year = {1989},
  pages = {151--217},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-74884-4_5},
  urldate = {2023-10-17},
  abstract = {The subject of these lectures is a calculus of functions for deriving programs from their specifications. This calculus consists of a range of concepts aIld notations for defining functious over various data types (including lists, trees and arrays), together with their algebraic and other properties. Each lecture begins with a specific problem, and the theory necessary to solve it is theu developed. In this way we hope to show that a functional approach to the problem of systematically cal\- culating programs from their specifications can take its place alongside other methodologies.},
  isbn = {978-3-642-74886-8 978-3-642-74884-4},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/ES2K88W3/Bird - 1989 - Lectures on Constructive Functional Programming.pdf;/Users/igormoreno/Zotero/storage/BKWLD979/publication2614-abstract.html}
}

@mastersthesis{birdLinkingEpistemologicalBeliefs2005,
  title = {Linking Epistemological Beliefs to Cognitive Development and Academic Performance.},
  author = {Bird, Mary},
  year = {2005},
  month = dec,
  address = {{Wichita, KS, USA}},
  langid = {english},
  school = {Wichita State University},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/RPLWG76K/Bird - 2005 - Linking epistemological beliefs to cognitive development and academic.pdf}
}

@article{birdPearlsFunctionalAlgorithm,
  title = {Pearls of {{Functional Algorithm Design}}},
  author = {Bird, Richard},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/3WBN4Q3L/Bird - Pearls of Functional Algorithm Design.pdf}
}

@article{birdPromotionAccumulationStrategies1984,
  title = {The Promotion and Accumulation Strategies in Transformational Programming},
  author = {Bird, R. S.},
  year = {1984},
  month = oct,
  journal = {ACM Transactions on Programming Languages and Systems},
  volume = {6},
  number = {4},
  pages = {487--504},
  issn = {0164-0925},
  doi = {10.1145/1780.1781},
  urldate = {2020-10-07},
  file = {/Users/igormoreno/Zotero/storage/3ERXBVDN/Bird - 1984 - The promotion and accumulation strategies in trans.pdf}
}

@book{birdThinkingFunctionallyHaskell2014,
  title = {Thinking {{Functionally}} with {{Haskell}}},
  author = {Bird, Richard},
  year = {2014},
  month = oct,
  edition = {1st edition},
  publisher = {{Cambridge University Press}},
  abstract = {Richard Bird is famed for the clarity and rigour of his writing. His new textbook, which introduces functional programming to students, emphasises fundamental techniques for reasoning mathematically about functional programs. By studying the underlying equational laws, the book enables students to apply calculational reasoning to their programs, both to understand their properties and to make them more efficient. The book has been designed to fit a first- or second-year undergraduate course and is a thorough overhaul and replacement of his earlier textbooks. It features case studies in Sudoku and pretty-printing, and over 100 carefully selected exercises with solutions. This engaging text will be welcomed by students and teachers alike.},
  langid = {english}
}

@article{bisraInducingSelfExplanationMetaAnalysis2018,
  title = {Inducing {{Self-Explanation}}: A {{Meta-Analysis}}},
  shorttitle = {Inducing {{Self-Explanation}}},
  author = {Bisra, Kiran and Liu, Qing and Nesbit, John C. and Salimi, Farimah and Winne, Philip H.},
  year = {2018},
  month = sep,
  journal = {Educational Psychology Review},
  volume = {30},
  number = {3},
  pages = {703--725},
  issn = {1573-336X},
  doi = {10.1007/s10648-018-9434-x},
  urldate = {2018-11-09},
  abstract = {Self-explanation is a process by which learners generate inferences about causal connections or conceptual relationships. A meta-analysis was conducted on research that investigated learning outcomes for participants who received self-explanation prompts while studying or solving problems. Our systematic search of relevant bibliographic databases identified 69 effect sizes (from 64 research reports) which met certain inclusion criteria. The overall weighted mean effect size using a random effects model was g = .55. We coded and analyzed 20 moderator variables including type of learning task (e.g., solving problems, studying worked problems, and studying text), subject area, level of education, type of inducement, and treatment duration. We found that self-explanation prompts are a potentially powerful intervention across a range of instructional conditions. Due to the limitations of relying on instructor-scripted prompts, we recommend that future research explore computer-generation of self-explanation prompts.},
  langid = {english},
  keywords = {Instructional explanation,Meta-analysis,Prompts,Self-explanation,Strong},
  file = {/Users/igormoreno/Zotero/storage/JCF67V3P/Bisra et al - 2018 - Inducing Self-Explanation.pdf}
}

@inproceedings{blackExpressionProblemGracefully2007,
  title = {The {{Expression Problem}}, {{Gracefully}}},
  booktitle = {Proceedings of the {{MechAnisms}} on {{SPEcialization}}, {{Generalization}} and {{inHerItance}}},
  author = {Black, Andrew P.},
  year = {2007},
  series = {{{MASPEGHI}}'15},
  pages = {1--7},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2786555.2786556},
  urldate = {2018-11-25},
  abstract = {The "Expression Problem" was brought to prominence by Wadler in 1998. It is widely regarded as illustrating that the two mainstream approaches to data abstraction---procedural abstraction and type abstraction---are complementary, with the strengths of one being the weaknesses of the other. Despite an extensive literature, the origin of the problem remains ill-understood. I show that the core problem is in fact the use of global constants, and demonstrate that an important aspect of the problem goes away when Java is replaced by a language like Grace, which eliminates them.},
  isbn = {978-1-4503-3659-8},
  keywords = {algebraic data types,data abstraction,expression problem,extensibility,objects,procedural abstraction,rows and columns},
  annotation = {00001},
  file = {/Users/igormoreno/Zotero/storage/54ZUEFYS/Black - 2007 - The Expression Problem, Gracefully.pdf}
}

@inproceedings{blackGraceAbsenceInessential2012,
  title = {Grace: The Absence of (Inessential) Difficulty},
  shorttitle = {Grace},
  booktitle = {Proceedings of the {{ACM}} International Symposium on {{New}} Ideas, New Paradigms, and Reflections on Programming and Software},
  author = {Black, Andrew P. and Bruce, Kim B. and Homer, Michael and Noble, James},
  year = {2012},
  month = oct,
  series = {Onward! 2012},
  pages = {85--98},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2384592.2384601},
  urldate = {2022-02-08},
  abstract = {We are engaged in the design of a small, simple programming language for teaching novices object-oriented programming. This turns out to be far from a small, simple task. We focus on three of the problems that we encountered, and how we believe we have solved them. The problems are (1) gracefully combining object initialization, inheritance, and immutable objects, (2) reconciling apparently irreconcilable views on type-checking, and (3) providing a family of languages, each suitable for students at different levels of mastery, while ensuring conceptual integrity of their designs. In each case our solutions are based on existing research; our contribution is, by design, consolidation rather than innovation.},
  isbn = {978-1-4503-1562-3},
  keywords = {grace},
  file = {/Users/igormoreno/Zotero/storage/5AAHDZAZ/Black et al. - 2012 - Grace the absence of (inessential) difficulty.pdf}
}

@article{blackTeachingProgrammingGrace2018,
  ids = {blackTeachingProgrammingGrace2018a},
  title = {Teaching Programming with {{Grace}} at {{Portland}} State},
  author = {Black, Andrew P. and Bruce, Kim B.},
  year = {2018},
  month = oct,
  journal = {Journal of Computing Sciences in Colleges},
  volume = {34},
  number = {1},
  pages = {223--230},
  issn = {1937-4771},
  abstract = {The Grace programming language has been a work-in-progress since 2010, when a group of educators who were also programming language researchers committed to designing a new object-oriented programming language targeted at teaching. The design of Grace is largely complete, and has been described elsewhere; implementation is sufficiently advanced for Grace to have been used for teaching ten classes - mostly of novices. This article offers an impression of how Grace works in the classroom.},
  file = {/Users/igormoreno/Zotero/storage/6Q2CSFK6/Black e Bruce - 2018 - Teaching programming with Grace at Portland state.pdf}
}

@inproceedings{blochSchemeJavaFirst2000,
  title = {Scheme and {{Java}} in the {{First Year}}},
  booktitle = {Proceedings of the {{Fifth Annual CCSC Northeastern Conference}} on {{The Journal}} of {{Computing}} in {{Small Colleges}}},
  author = {Bloch, Stephen A.},
  year = {2000},
  series = {{{CCSC}} '00},
  pages = {157--165},
  publisher = {{Consortium for Computing Sciences in Colleges}},
  address = {{USA}},
  urldate = {2019-07-09},
  annotation = {00024},
  file = {/Users/igormoreno/Zotero/storage/9N27HWQZ/Bloch - 2000 - Scheme and Java in the First Year.pdf;/Users/igormoreno/Zotero/storage/H52BGT4A/Bloch - 2000 - Scheme and Java in the First Year.pdf}
}

@inproceedings{blonskisAnalysisStudentsDeveloped2008,
  title = {Analysis of {{Students}}' {{Developed Programs}} at the {{Maturity Exams}} in {{Information Technologies}}},
  booktitle = {Informatics {{Education}} - {{Supporting Computational Thinking}}},
  author = {Blonskis, Jonas and Dagien{\.e}, Valentina},
  editor = {Mittermeir, Roland T. and Sys{\l}o, Maciej M.},
  year = {2008},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {204--215},
  publisher = {{Springer Berlin Heidelberg}},
  abstract = {Two models of the maturity exams in information technologies have been developed in Lithuania. The first one is intended to evaluate the students' skills for using information and communication technologies (ICT). Another is focused on programming skills and is intended to promote the professional studies (informatics) in higher education. The first national exam in information technologies (programming) was launched in 2006. The exam consists of a set of tests (questions of IT and questions of programming) and two practical programming tasks. The goal of practical tasks is to create programs for given tasks. Developing programs is one of the most important parts of the exam and also one of the most difficult tasks for students. The paper deals with solutions of practical tasks \textendash{} students' developed programs during the national exams in information technologies (programming) in 2006 and 2007.},
  isbn = {978-3-540-69924-8},
  langid = {english},
  keywords = {algorithms,data structures,programming,teaching informatics,writing programs},
  annotation = {00010},
  file = {/Users/igormoreno/Zotero/storage/MEIL8JZ8/Blonskis and Dagienė - 2008 - Analysis of Students’ Developed Programs at the Maturity Exams in Information.pdf}
}

@article{bloomLearningMasteryInstruction1968,
  title = {Learning for {{Mastery}}. {{Instruction}} and {{Curriculum}}. {{Regional Education Laboratory}} for the {{Carolinas}} and {{Virginia}}, {{Topical Papers}} and {{Reprints}}, {{Number}} 1.},
  author = {Bloom, Benjamin S.},
  year = {1968},
  month = may,
  journal = {Evaluation Comment},
  volume = {1},
  number = {2},
  publisher = {{Regional Education Laboratory for the Carolinas and Virginia, Mutual Plaza (Chapel Hill and Duke Sts.), Durham, N.C. 27701}},
  urldate = {2023-07-03},
  abstract = {Most students, perhaps over 90 percent, can master what teachers have to teach them, and it is the task of instruction to find the means which will enable students to master the subject under consideration. A basic task is to determine what is meant by mastery of the subject and to search for methods and materials which will enable the largest proportion of students to attain such mastery. That is, the basic task in education is to find strategies which will take individual differences into consideration but in such a way as to promote the fullest development of the individual. The thesis of this paper is that, to promote mastery learning, 5 variables must be dealt with effectively: (1) aptitude for kinds of learning, viewed as the amount of time required by the learner to attain mastery of the task; (2) quality of instruction, viewed in terms of its approaching the optimum for a given learner; (3) ability to understand instruction, i.e., to understand the nature of the task and the},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/W4LPHRWF/Bloom - 1968 - Learning for Mastery. Instruction and Curriculum. .pdf}
}

@article{bodemerActiveIntegrationInformation2004,
  title = {The Active Integration of Information during Learning with Dynamic and Interactive Visualisations},
  author = {Bodemer, Daniel and Ploetzner, Rolf and Feuerlein, Inge and Spada, Hans},
  year = {2004},
  month = jun,
  journal = {Learning and Instruction},
  series = {Dynamic {{Visualisations}} and {{Learning}}},
  volume = {14},
  number = {3},
  pages = {325--341},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2004.06.006},
  urldate = {2018-11-06},
  abstract = {Computer-based learning environments commonly comprise symbolic as well as static and dynamic pictorial representations, frequently combined with the possibility of modifying them interactively. While multiple, dynamic and interactive external representations have the potential to improve learning in various ways, they also place specific demands on learners, such as the need to process and relate different representations, to control and evaluate interactions with these representations, and to construct coherent mental representations. Because learners frequently are not able to meet these demands, the presentation of multiple, dynamic and interactive representations might not only not improve but might even impede learning. Starting from cognitive load theory as well as from structure mapping theory, we developed support measures that encouraged learners to actively integrate symbolic and pictorial representations and to interact with dynamic pictorial representations in a structured and reflective way. In two experimental studies, the learning effects of the encouraged activities were evaluated. Analyses of variance revealed (1) that the active integration of different representations improved learning significantly and (2) that the structured interaction with different representations specifically increased verbal understanding.},
  keywords = {Cognitive load,Dynamic visualisations,Multimedia,Multiple external representations,Simulations,Structure mapping},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/86AXFB7D/Bodemer et al - 2004 - The active integration of information during learning with dynamic and.pdf;/Users/igormoreno/Zotero/storage/Y5CZXZV4/S0959475204000350.html}
}

@article{bodilyReviewResearchStudentFacing2017,
  title = {Review of {{Research}} on {{Student-Facing Learning Analytics Dashboards}} and {{Educational Recommender Systems}}},
  author = {Bodily, R. and Verbert, K.},
  year = {Oct.-Dec. 2017},
  journal = {IEEE Transactions on Learning Technologies},
  volume = {10},
  number = {4},
  pages = {405--418},
  issn = {1939-1382},
  doi = {10.1109/TLT.2017.2740172},
  urldate = {2018-10-06},
  abstract = {This article is a comprehensive literature review of student-facing learning analytics reporting systems that track learning analytics data and report it directly to students. This literature review builds on four previously conducted literature reviews in similar domains. Out of the 945 articles retrieved from databases and journals, 93 articles were included in the analysis. Articles were coded based on the following five categories: functionality, data sources, design analysis, student perceptions, and measured effects. Based on this review, we need research on learning analytics reporting systems that targets the design and development process of reporting systems, not only the final products. This design and development process includes needs analyses, visual design analyses, information selection justifications, and student perception surveys. In addition, experiments to determine the effect of these systems on student behavior, achievement, and skills are needed to add to the small existing body of evidence. Furthermore, experimental studies should include usability tests and methodologies to examine student use of these systems, as these factors may affect experimental findings. Finally, observational study methods, such as propensity score matching, should be used to increase student access to these systems but still rigorously measure experimental effects.},
  keywords = {Bibliographies,Computer science,Conferences,Data mining,Databases,Recommender systems,To Read,Visualization},
  file = {/Users/igormoreno/Zotero/storage/4C4SRUJF/Bodily and Verbert - 2017 - Review of Research on Student-Facing Learning Analytics Dashboards and.pdf;/Users/igormoreno/Zotero/storage/IGBD9DLG/08010828-abs.html}
}

@article{boehmPracticesPLDI2014,
  title = {Practices of {{PLDI}}},
  author = {Boehm, Hans and Davidson, Jack and Fisher, Kathleen and Flanagan, Cormac and Gibbons, Jeremy and Hall, Mary and Hutton, Graham and Padua, David and Tip, Frank and Vitek, Jan and Wadler, Philip},
  year = {2014},
  month = jul,
  journal = {ACM SIGPLAN Notices},
  volume = {49},
  number = {4S},
  pages = {33--38},
  issn = {0362-1340},
  doi = {10.1145/2641638.2641649},
  urldate = {2020-05-10},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/DDRD9NWA/Boehm et al. - 2014 - Practices of PLDI.pdf}
}

@article{boekaertsCognitiveLoadSelfregulation2017,
  title = {Cognitive Load and Self-Regulation: {{Attempts}} to Build a Bridge},
  shorttitle = {Cognitive Load and Self-Regulation},
  author = {Boekaerts, Monique},
  year = {2017},
  month = oct,
  journal = {Learning and Instruction},
  series = {Bridging {{Cognitive Load}} and {{Self-Regulated Learning Research}}},
  volume = {51},
  pages = {90--97},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2017.07.001},
  urldate = {2018-11-06},
  abstract = {The editors of the Special Issue called for a more integrative approach to the study of cognitive load and self-regulation. The goal formulated for the Special Issue is ambitious. In my role as a constructive critic, I first summarized the findings in the 6 papers, identifying important questions and concerns that emerged while reading the papers. I also identified some general issues that need further clarification and elaboration: I argued that there is a strong need to reach consensus on the conceptualization and measurement of cognitive load and that new methodologies should be developed to capture cognitive load in real time and link it to strategy use.},
  keywords = {Cognitive load,Multiple measurement points,New methodologies to capture cognitive load,Self-regulation},
  file = {/Users/igormoreno/Zotero/storage/9RUNX5E3/Boekaerts - 2017 - Cognitive load and self-regulation Attempts to bu.pdf;/Users/igormoreno/Zotero/storage/865P2SSQ/S0959475217304103.html}
}

@phdthesis{bogdanasCompleteSemanticsJava2015,
  title = {A {{Complete Semantics}} for {{Java}}},
  author = {Bogd{\u a}na{\c s}, Denis},
  year = {2015},
  abstract = {This thesis presents K-Java, the first complete formal semantics of Java 1.4, defined in K Framework. The semantics yields an interpreter and a model- checker for multithreaded programs. To test the completeness of K-Java, we developed our own suite of more than 840 tests that exercise every Java 1.4 feature, corner case or feature interaction. The tests were developed alongside K-Java, following Test Driven Development. In order to maintain clarity while handling the great size of Java, the semantics was split into two separate definitions \textendash{} a static semantics and a dynamic semantics. The output of the static semantics is a preprocessed Java program, which is passed as input to the dynamic semantics for execution. The preprocessed program is a valid Java program, which uses a subset of the features of Java. The test suite and the static semantics may be regarded as side contributions, they are generic and ready to be used in other Java-related projects.},
  langid = {english},
  school = {Alexandru Ioan Cuza University of Ia\c{s}i},
  keywords = {To Read},
  file = {/Users/igormoreno/Zotero/storage/PMLBQBFM/Bogdănaş - 2015 - A Complete Semantics for Java.pdf}
}

@book{bonateAnalysisPretestPosttestDesigns2000,
  title = {Analysis of {{Pretest-Posttest Designs}}},
  author = {Bonate, Peter L.},
  year = {2000},
  month = may,
  publisher = {{CRC Press}},
  abstract = {How do you analyze pretest-posttest data? Difference scores? Percent change scores? ANOVA? In medical, psychological, sociological, and educational studies, researchers often design experiments in which they collect baseline (pretest) data prior to randomization. However, they often find it difficult to decide which method of statistical analysis i},
  googlebooks = {I3fLBQAAQBAJ},
  isbn = {978-1-4200-3592-6},
  langid = {english},
  keywords = {Mathematics / Probability \& Statistics / General},
  file = {/Users/igormoreno/Zotero/storage/YEU95VHE/Bonate - 2000 - Analysis of Pretest-Posttest Designs.pdf}
}

@article{bondComparingDecalageDevelopment2010,
  title = {Comparing Decalage and Development with Cognitive Developmental Tests},
  author = {Bond, Trevor},
  year = {2010},
  journal = {Journal of Applied Measurement},
  volume = {11},
  number = {2},
  pages = {158--171},
  issn = {1529-7713},
  abstract = {The use of Rasch measurement techniques with data from developmental psychology has provided important insights into human development (e.g., Bond, 1997, 2003; Dawson, 2002 a, b;). In particular, Rasch methods support investigations into what has been, up until now, intractable theoretical and empirical problems. Research into the development of formal operational thinking using the Rasch model (Bond 1995 a, b; Bond and Bunting, 1995; Bond and Fox, 2001) substantiates important aspects of the original theorizing of Piaget (Inhelder and Piaget, 1955/1958), which was based wholly on qualitative structural analyses of children's problem-solving responses. Common-person equating of student performances has been used across different formal operational thinking tasks to estimate the relative difficulties of tasks measuring the same underlying developmental construct (Bond, 1995b; Bond and Fox, 2001). Repeated person performance measures on the same task have been used in order to estimate cognitive development over time. Rasch measurement estimates of cognitive development do not exceed 0.5 logits per annum (Bond, 1996; Endler, 1998; Stanbridge, 2001); a result that has been estimated independently in two large research projects in the United Kingdom (Shayer, 1999) and in Papua-New Guinea (Lake, 1996). Interestingly, difficulty differences (decalage) between tests of formal thought are as large as 2.0 logits (Bond, 1995a; Bond, 1996; Bond and Fox, 2001), confounding attempts to differentiate development from decalage. Given the problems and possibilities raised by the Rasch measurement quantification of cognitive development, this article canvasses the promise of using Rasch modelling techniques to investigate systematically these fundamental aspects of human cognitive performance.},
  langid = {english},
  pmid = {20693700},
  keywords = {Adolescent,Adolescent Development,Biostatistics,Child,Child Development,Cognition,Humans,{Models, Statistical},Papua New Guinea,Problem Solving,Psychometrics,United Kingdom},
  file = {/Users/igormoreno/Zotero/storage/S6BBFYDW/Bond - 2010 - Comparing decalage and development with cognitive developmental tests.pdf}
}

@article{bondPiagetPendulum2004,
  title = {Piaget and the {{Pendulum}}},
  author = {Bond, Trevor G.},
  year = {2004},
  month = jul,
  journal = {Science \& Education},
  volume = {13},
  number = {4/5},
  pages = {389--399},
  issn = {0926-7220},
  doi = {10.1023/B:SCED.0000041836.15673.75},
  urldate = {2018-10-02},
  abstract = {Piaget's investigations into children's understanding of the laws governing the movement of a simple pendulum were first reported in 1955 as part of a report into how children's knowledge of the physical world changes during development. Chapter 4 of Inhelder \& Piaget (1955/1958) entitled `The Oscillation of a Pendulum and the Operations of Exclusion' demonstrated how adolescents could construct the experimental strategies necessary to isolate each of the variables, exclude the irrelevant factors and conclude concerning the causal role of length. This became one of the most easily replicable tasks from the Genevan school and was used in a number of important investigations to detect the onset of formal operational thinking. While it seems that the pendulum investigation fits nicely into Piaget's sequence of studies of concepts such as time, distance and speed suggested to him by Einstein, more recent research (Bond 2001) shows Inhelder to be directly responsible for the investigations into children's induction of physical laws. The inter-relationship between the pendulum problem, developing thought and scientific method is revealed in a number of Genevan and post-Piagetian investigations.},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/YR44IZ4M/Bond - 2004 - Piaget and the Pendulum.pdf}
}

@article{boomRelationshipsComputationalThinking2022,
  title = {Relationships between Computational Thinking and the Quality of Computer Programs},
  author = {Boom, Kay-Dennis and Bower, Matt and Siemon, Jens and Arguel, Ama{\"e}l},
  year = {2022},
  month = jul,
  journal = {Education and Information Technologies},
  volume = {27},
  number = {6},
  pages = {8289--8310},
  issn = {1360-2357, 1573-7608},
  doi = {10.1007/s10639-022-10921-z},
  urldate = {2023-03-16},
  abstract = {Computational thinking \textendash{} the ability to reformulate and solve problems in ways that can be undertaken by computers \textendash{} has been heralded as a foundational capability for the 21st Century. However, there are potentially different ways to conceptualise and measure computational thinking, for instance, as generalized problem solving capabilities or as applied practice during computer programming tasks, and there is little evidence to substantiate whether higher computational thinking capabilities using either of these measures result in better quality computer programs. This study examines the relationship between different forms of computational thinking and two different measures of programming quality for a group of 37 pairs of preservice teachers. General computational thinking capabilities were measured using Bebras tests, while applied computational thinking processes were measured using a Computational Thinking Behavioural Scheme. The quality of computer programs was measured using a qualitative rubric, and programs were also assessed using the Dr Scratch auto-grading platform. The Test of Nonverbal Intelligence (3rd edition, TONI-3) was used to test for confounding effects. While significant correlations between both measures of computational thinking and program quality were detected, regression analysis revealed that only applied computational thinking processes significantly predicted program quality (general computational thinking capability and non-verbal intelligence were not significant predictors). The results highlight the importance of students developing applied computational thinking procedural capabilities more than generalized computational thinking capabilities in order to improve the quality of their computer programs.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/4CI2SDIJ/Boom et al. - 2022 - Relationships between computational thinking and t.pdf}
}

@article{boomRelationshipsComputationalThinking2022a,
  title = {Relationships between Computational Thinking and the Quality of Computer Programs},
  author = {Boom, Kay-Dennis and Bower, Matt and Siemon, Jens and Arguel, Ama{\"e}l},
  year = {2022},
  month = jul,
  journal = {Education and Information Technologies},
  volume = {27},
  number = {6},
  pages = {8289--8310},
  issn = {1360-2357, 1573-7608},
  doi = {10.1007/s10639-022-10921-z},
  urldate = {2023-03-16},
  abstract = {Computational thinking \textendash{} the ability to reformulate and solve problems in ways that can be undertaken by computers \textendash{} has been heralded as a foundational capability for the 21st Century. However, there are potentially different ways to conceptualise and measure computational thinking, for instance, as generalized problem solving capabilities or as applied practice during computer programming tasks, and there is little evidence to substantiate whether higher computational thinking capabilities using either of these measures result in better quality computer programs. This study examines the relationship between different forms of computational thinking and two different measures of programming quality for a group of 37 pairs of preservice teachers. General computational thinking capabilities were measured using Bebras tests, while applied computational thinking processes were measured using a Computational Thinking Behavioural Scheme. The quality of computer programs was measured using a qualitative rubric, and programs were also assessed using the Dr Scratch auto-grading platform. The Test of Nonverbal Intelligence (3rd edition, TONI-3) was used to test for confounding effects. While significant correlations between both measures of computational thinking and program quality were detected, regression analysis revealed that only applied computational thinking processes significantly predicted program quality (general computational thinking capability and non-verbal intelligence were not significant predictors). The results highlight the importance of students developing applied computational thinking procedural capabilities more than generalized computational thinking capabilities in order to improve the quality of their computer programs.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/3Z7CQBGY/Boom et al. - 2022 - Relationships between computational thinking and t.pdf}
}

@inproceedings{boonliangchuaEffectDifferentPattern2012,
  title = {Effect of {{Different Pattern Formats}} on {{Secondary Two Students}}' {{Ability}} to {{Generalise}}},
  booktitle = {36th {{Conference}} of the {{International Group}} for the {{Psychology}} of {{Mathematics Education}}},
  author = {{Boon Liang Chua} and {Celia Hoyles}},
  year = {2012},
  month = jul,
  address = {{Taipei, Taiwan}},
  abstract = {This paper reports on the test performance of 105 Singapore secondary school students in pattern generalising tasks to determine whether the format of pattern display hinders students' pattern recognition and ability to generalise. Data were collected through administering a written test comprising four figural generalising tasks involving both linear and quadratic patterns, presented in two different formats. The students, assigned to work on tasks in only one of the formats, had to establish the functional rule underpinning each pattern. The findings revealed that the students could generate the functional rule regardless of the given pattern format. Further, there was no gender difference in student performance for each task.},
  keywords = {LearnToAbstract,To Read},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/9GSACTWY/Boon Liang Chua and Celia Hoyles - 2012 - Effect of Different Pattern Formats on Secondary Two Students' Ability to.pdf}
}

@article{boonliangchuaGeneralisationLinearFigural2014,
  title = {Generalisation of {{Linear Figural Patterns}} in {{Secondary School Mathematics}}},
  author = {{Boon Liang Chua} and {Celia Hoyles}},
  year = {2014},
  journal = {The Mathematics Educator},
  volume = {15},
  number = {2},
  pages = {1--30},
  abstract = {This paper reports on the performance of 104 Grade 8 Singapore students in pattern generalising tasks to determine the success rates, the rules formulated and the ways the rules were represented. A written test comprising four linear figural generalising tasks was used and the students had to answer all the four tasks in 45 min. About 70\% of the students were successful in rule construction in each task, producing a variety of functional rules expressed prevalently in symbolic notations. Suggestions for practice based on these findings are suggested.},
  keywords = {LearnToAbstract,To Read},
  file = {/Users/igormoreno/Zotero/storage/9KS5Q4KK/Boon Liang Chua and Celia Hoyles - 2014 - Generalisation of Linear Figural Patterns in Secondary School Mathematics.pdf}
}

@article{boonliangchuaGeneralisationPerceptualAgility2009,
  title = {Generalisation and Perceptual Agility: {{How}} Did Teachers Fare in a Quadratic Generalising Problem?},
  shorttitle = {({{PDF}}) {{Generalisation}} and Perceptual Agility},
  author = {{Boon Liang Chua} and {Celia Hoyles}},
  year = {2009},
  month = jun,
  journal = {Proceedings of the British Society for Research into Learning Mathematics},
  volume = {29},
  number = {2},
  pages = {13--18},
  doi = {http://dx.doi.org/10.1080/14794800903569915},
  urldate = {2019-01-28},
  abstract = {This study examines the perceptual agility and strategy use of 27 prospective secondary school teachers in Singapore when solving a quadratic generalising problem. The data showed that the teachers were very capable of employing a variety of strategies to visualise the same pattern in different ways, resulting in not only a diverse range of equivalent rules but also some creative visual representations of the pattern structure.},
  langid = {english},
  keywords = {LearnToAbstract,To Read},
  file = {/Users/igormoreno/Zotero/storage/P9YB67U6/Boon Liang Chua and Celia Hoyles - 2009 - Generalisation and perceptual agility.pdf;/Users/igormoreno/Zotero/storage/4KPKAC28/250895954_Generalisation_and_perceptual_agility_How_did_teachers_fare_in_a_quadratic_generalisi.html}
}

@inproceedings{boonliangchuaModalitiesRulesGeneralizing2014,
  title = {Modalities of {{Rules}} and {{Generalizing Strategies}} of {{Year}} 8 {{Students}} for a {{Quadratic Pattern}}},
  booktitle = {{{PME}} 38 / {{PME-NA}} 36},
  author = {{Boon Liang Chua} and {Celia Hoyles}},
  year = {2014},
  month = jul,
  publisher = {{International Group for the Psychology of Mathematics Education}},
  address = {{Vancouver, BC, Canada}},
  abstract = {This paper reports on the performance of 167 eighth graders in Singapore making generalisations for a quadratic figural pattern presented in a non-successive format. Data were collected through administering a written test in which the students had to establish the functional rule underpinning the pattern. The findings revealed that the students constructed a variety of functional rules, expressed prevalently in symbols using a range of generalising strategies, some of which were novel in the literature.},
  isbn = {978-0-86491-362-3},
  langid = {english},
  keywords = {LearnToAbstract,To Read},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/XSK3DWXJ/Boon Liang Chua and Celia Hoyles - 2014 - Modalities of Rules and Generalizing Strategies of Year 8 Students for a.pdf}
}

@inproceedings{boonliangchuaRethinkingResearchingTask2013,
  title = {Rethinking and {{Researching Task Design}} in {{Pattern Generalisation}}},
  shorttitle = {Mathematics Learning across the Life Span},
  booktitle = {37th {{Conference}} of the {{International Group}} for the {{Psychology}} of {{Mathematics Education}}},
  author = {{Boon Liang Chua} and {Celia Hoyles}},
  year = {2013},
  month = jul,
  volume = {2},
  pages = {193--200},
  publisher = {{IPN, Leibniz Inst. for Science and Mathematics Education}},
  address = {{Kiel, Germany}},
  abstract = {This paper describes the design principles behind a test instrument, called the JuStraGen test, that had been specially developed to assess students' ability to generalise figural pattern generalising tasks, as well as to measure the effects of two task features on their rule construction. A discussion of some student responses then follows to shed light on how students dealt with some tasks in the test.},
  isbn = {978-3-89088-288-8},
  langid = {english},
  keywords = {LearnToAbstract,To Read},
  annotation = {OCLC: 931276198},
  file = {/Users/igormoreno/Zotero/storage/GB97NBNH/Boon Liang Chua and Celia Hoyles - 2013 - Rethinking and Researching Task Design in Pattern Generalisation.pdf}
}

@article{boothKeyMisconceptionsAlgebraic2008,
  title = {Key {{Misconceptions}} in {{Algebraic Problem Solving}}},
  author = {Booth, Julie L. and Koedinger, Kenneth R.},
  year = {2008},
  journal = {Proceedings of the Annual Meeting of the Cognitive Science Society},
  volume = {30},
  number = {30},
  issn = {1069-7977},
  urldate = {2018-10-22},
  abstract = {Author(s): Booth, Julie L.; Koedinger, Kenneth R.},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/IJIIQ9XU/Booth and Koedinger - 2008 - Key Misconceptions in Algebraic Problem Solving.pdf;/Users/igormoreno/Zotero/storage/CA5PCHHQ/5n28t12n.html}
}

@book{boothLearningProgramPhenomenographic1992,
  title = {{Learning to program : a phenomenographic perspective}},
  shorttitle = {{Learning to program}},
  author = {Booth, Shirley},
  year = {1992},
  urldate = {2021-01-08},
  isbn = {978-91-7346-256-3},
  langid = {italian},
  annotation = {00000  Accepted: 2008-08-11T10:23:18Z},
  file = {/Users/igormoreno/Zotero/storage/69KKSYYT/16224.html}
}

@techreport{borningThingLabConstraintorientedSimulation1979,
  title = {{{ThingLab}} -- {{A}} Constraint-Oriented Simulation Laboratory},
  author = {Borning, Alan},
  year = {1979},
  month = jul,
  number = {SSL-79-3},
  urldate = {2022-03-09},
  file = {/Users/igormoreno/Zotero/storage/JWD3WYZK/Borning - 1979 - ThingLab -- A constraint-oriented simulation laboratory.pdf}
}

@article{borstlerEvaluationObjectOriented2010,
  title = {An Evaluation of Object Oriented Example Programs in Introductory Programming Textbooks},
  author = {B{\"o}rstler, J{\"u}rgen and Hall, Mark S. and Nordstr{\"o}m, Marie and Paterson, James H. and Sanders, Kate and Schulte, Carsten and Thomas, Lynda},
  year = {2010},
  month = jan,
  journal = {ACM SIGCSE Bulletin},
  volume = {41},
  number = {4},
  pages = {126--143},
  issn = {0097-8418},
  doi = {10.1145/1709424.1709458},
  urldate = {2022-07-05},
  abstract = {Research shows that examples play an important role for cognitive skill acquisition. Students as well as teachers rank examples as important resources for learning to program. Therefore examples must be consistent with the principles and rules of the topics we are teaching. However, educators often struggle to find or develop objectoriented example programs of high quality. Common examples are often perceived as not fully faithful to all principles and guidelines of the object-oriented paradigm, or as not following general pedagogical principles and practices. Unless students are able to engage with good examples, they will not be able to tell desirable from undesirable properties in their own and others' programs. In this paper we report on a study in which experienced educators reviewed a wide range of object-oriented examples for novices from popular textbooks. This review was accomplished using an on-line checklist that elicited responses on 10 quality factors. Results show that the evaluation instrument provides a sufficiently consistent set of responses to distinguish examples. The paper then goes on to examine some of the characteristics of good and bad examples and how this study will influence the evolution of the evaluating instrument.},
  keywords = {assessment,check list,courseware,example programs,examples,guidelines,principles,textbooks},
  file = {/Users/igormoreno/Zotero/storage/LD7LQWU8/Börstler et al. - 2010 - An evaluation of object oriented example programs .pdf}
}

@inproceedings{bottuQuantifiedClassConstraints2017,
  title = {Quantified {{Class Constraints}}},
  booktitle = {Proceedings of the 10th {{ACM SIGPLAN International Symposium}} on {{Haskell}}},
  author = {Bottu, Gert-Jan and Karachalias, Georgios and Schrijvers, Tom and Oliveira, Bruno C. d. S. and Wadler, Philip},
  year = {2017},
  series = {Haskell 2017},
  pages = {148--161},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3122955.3122967},
  urldate = {2019-06-28},
  abstract = {Quantified class constraints have been proposed many years ago to raise the expressive power of type classes from Horn clauses to the universal fragment of Hereditiary Harrop logic. Yet, while it has been much asked for over the years, the feature was never implemented or studied in depth. Instead, several workarounds have been proposed, all of which are ultimately stopgap measures. This paper revisits the idea of quantified class constraints and elaborates it into a practical language design. We show the merit of quantified class constraints in terms of more expressive modeling and in terms of terminating type class resolution. In addition, we provide a declarative specification of the type system as well as a type inference algorithm that elaborates into System F. Moreover, we discuss termination conditions of our system and also provide a prototype implementation.},
  isbn = {978-1-4503-5182-9},
  keywords = {Haskell,type classes,type inference},
  annotation = {00013},
  file = {/Users/igormoreno/Zotero/storage/S3XTUB3T/Bottu et al. - 2017 - Quantified Class Constraints.pdf}
}

@article{boulayBlackBoxGlass1981,
  title = {The Black Box inside the Glass Box: Presenting Computing Concepts to Novices},
  shorttitle = {The Black Box inside the Glass Box},
  author = {du Boulay, Benedict and O'Shea, Tim and Monk, John},
  year = {1981},
  month = apr,
  journal = {International Journal of Man-Machine Studies},
  volume = {14},
  number = {3},
  pages = {237--249},
  issn = {0020-7373},
  doi = {10.1016/S0020-7373(81)80056-9},
  urldate = {2019-02-20},
  abstract = {Simplicity and visibility are two important characteristics of programming languages for novices. Novices start programming with very little idea of the properties of the notional machine implied by the language they are learning. To help them learn these properties, the notional machine should be simple. That is, it should consist of a small number of parts that interact in ways that can be easily understood, possibly by analogy to other mechanisms with which the novice is more familiar. A notional machine is the idealized model of the computer implied by the constructs of the programming language. Visibility is concerned with methods for viewing selected parts and processes of this notional machine in action. We introduce the term ``commentary'' which is the system's dynamic characterization of the notional machine, expressed in either text or pictures on the user's terminal. We examine the simplicity and visibility of three systems, each designed to provide programming experience to different populations of novices.},
  file = {/Users/igormoreno/Zotero/storage/63NLI4QF/Boulay et al - 1981 - The black box inside the glass box.pdf;/Users/igormoreno/Zotero/storage/UCFTCQXF/S0020737381800569.html}
}

@book{boutellHeraldryHistoricalPopular1864,
  title = {Heraldry, {{Historical}} and {{Popular}}},
  author = {Boutell, Charles},
  year = {1864},
  edition = {Third Edition, Revised and Enlarged},
  publisher = {{Richard Bentley}},
  address = {{London}}
}

@inproceedings{bouvierNoviceProgrammersProblem2016,
  title = {Novice {{Programmers}} and the {{Problem Description Effect}}},
  booktitle = {Proceedings of the 2016 {{ITiCSE Working Group Reports}}},
  author = {Bouvier, Dennis and Lovellette, Ellie and Matta, John and Alshaigy, Bedour and Becker, Brett A. and Craig, Michelle and Jackova, Jana and McCartney, Robert and Sanders, Kate and Zarb, Mark},
  year = {2016},
  month = jul,
  pages = {103--118},
  publisher = {{ACM}},
  address = {{Arequipa Peru}},
  doi = {10.1145/3024906.3024912},
  urldate = {2021-01-12},
  abstract = {It is often debated whether a problem presented in a straightforward minimalist fashion is better, or worse, for learning than the same problem presented with a ``real-life'' or ``concrete'' context. The presentation, contextualization, or ``problem description'' has been well studied over several decades in disciplines such as mathematics education and psychology; however, little has been published in the field of computing education. In psychology it has been found that not only the presence of context, but the type of context can have dramatic results on problem success. In mathematics education it has been demonstrated that there are non-mathematical factors in problem presentation that can a{$\carriagereturn$}ect success in solving the problem and learning. The contextual background of a problem can also impact cognitive load, which should be considered when evaluating the e{$\carriagereturn$}ects of context. Further, it has been found that regarding cognitive load, computer science has unique characteristics compared to other disciplines, with the consequence that results from other disciplines may not apply to computer science, thus requiring investigation within computer science.},
  isbn = {978-1-4503-4882-9},
  langid = {english},
  annotation = {00023},
  file = {/Users/igormoreno/Zotero/storage/9C45S2XI/Bouvier et al. - 2016 - Novice Programmers and the Problem Description Eff.pdf}
}

@article{bowerImageryRelationalOrganizer1970,
  title = {Imagery as a Relational Organizer in Associative Learning},
  author = {Bower, Gordon H.},
  year = {1970},
  month = oct,
  journal = {Journal of Verbal Learning and Verbal Behavior},
  volume = {9},
  number = {5},
  pages = {529--533},
  issn = {0022-5371},
  doi = {10.1016/S0022-5371(70)80096-2},
  urldate = {2018-12-02},
  abstract = {Mental imagery improves paired-associate (PA) learning relative to overt rehearsal. The effect might be due to increased reliability of stimulus encoding or to increased relational association produced by imagery. These hypotheses expect different outcomes when imagery and rote-rehearsal Ss are compared on memory tests of stimulus recognition and on recall of the response term conditional upon stimulus recognition. The Ss learned PAs using one of three methods\textemdash rote repetition, interactive imagery, or separation imagery. Associative recall was highest for interactive-imagery Ss and lower and equal for rote- and separation-imagery Ss. No differences in stimulus recognition appeared. Such evidence supports the relational-organizing interpretation of the PA effect of imagery in opposition to the stimulus-distinctiveness or reliable-encoding explanations.},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/HD9T3UVP/Bower - 1970 - Imagery as a relational organizer in associative learning.pdf;/Users/igormoreno/Zotero/storage/BAXJFL9H/S0022537170800962.html}
}

@article{bowerTaxonomyTaskTypes,
  title = {A {{Taxonomy}} of {{Task Types}} in {{Computing}}},
  author = {Bower, Matt},
  pages = {5},
  abstract = {Based on the systematic development of a curriculum for our undergraduate computer science units, an analysis of general education and CSE literature and consultation with other computer science educators, a taxonomy of task types in computing is proposed. These task types are related to one another in a hierarchical fashion based on their cognitive interdependencies. The taxonomy can be applied by academics to guide the development of curriculum that meets student process based learning needs rather than just content needs, the latter being the current norm.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/SQCR8R6W/Bower - A Taxonomy of Task Types in Computing.pdf}
}

@book{boxStatisticsExperimentersDesign2005,
  title = {Statistics for {{Experimenters}}: {{Design}}, {{Innovation}}, and {{Discovery}}, 2nd {{Edition}}},
  shorttitle = {Statistics for {{Experimenters}}},
  author = {Box, George E. P. and Hunter, J. Stuart and Hunter, William G.},
  year = {2005},
  month = may,
  edition = {2nd edition},
  publisher = {{Wiley-Interscience}},
  address = {{Hoboken, N.J}},
  abstract = {A Classic adapted to modern times Rewritten and updated, this new edition of Statistics forExperimenters adopts the same approaches as the landmark FirstEdition by teaching with examples, readily understood graphics, andthe appropriate use of computers. Catalyzing innovation, problemsolving, and discovery, the Second Edition provides experimenterswith the scientific and statistical tools needed to maximize theknowledge gained from research data, illustrating how these toolsmay best be utilized during all stages of the investigativeprocess. The authors' practical approach starts with aproblem that needs to be solved and then examines the appropriatestatistical methods of design and analysis.Providing even greater accessibility for its users, the SecondEdition is thoroughly revised and updated to reflect the changes intechniques and technologies since the publication of the classicFirst Edition.Among the new topics included are:Graphical Analysis of VarianceComputer Analysis of Complex DesignsSimplification by transformationHands-on experimentation using Response Service MethodsFurther development of robust product and process design usingsplit plot arrangements and minimization of error transmissionIntroduction to Process Control, Forecasting and TimeSeriesIllustrations demonstrating how multi-response problems can besolved using the concepts of active and inert factor spaces andcanonical spacesBayesian approaches to model selection and sequentialexperimentationAn appendix featuring Quaquaversal quotes from a variety ofsources including noted statisticians and scientists to famousphilosophers is provided to illustrate key concepts and enliven thelearning process.All the computations in the Second Edition can be done utilizingthe statistical language R. Functions for displaying ANOVA andlamba plots, Bayesian screening, and model building are allincluded and R packages are available online. All theses topics canalso be applied utilizing easy-to-use commercial softwarepackages.Complete with applications covering the physical, engineering,biological, and social sciences, Statistics for Experimenters isdesigned for individuals who must use statistical approaches toconduct an experiment, but do not necessarily have formal trainingin statistics. Experimenters need only a basic understanding ofmathematics to master all the statistical methods presented. Thistext is an essential reference for all researchers and is a highlyrecommended course book for undergraduate and graduatestudents.},
  isbn = {978-0-471-71813-0},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/2QEJLLI5/Box et al - 2005 - Statistics for Experimenters.pdf}
}

@misc{brachthauserHitchhikerGuideMorphisms2016,
  title = {The {{Hitchhiker}}'s {{Guide}} to {{Morphisms}}},
  author = {Brachth{\"a}user, Jonathan},
  year = {2016},
  month = feb,
  urldate = {2022-01-07},
  file = {/Users/igormoreno/Zotero/storage/3M7HVUC4/Brachthäuser - 2016 - The Hitchhiker's Guide to Morphisms.pdf}
}

@techreport{bradnerKeyWordsUse1997,
  type = {Request for {{Comments}}},
  title = {Key Words for Use in {{RFCs}} to {{Indicate Requirement Levels}}},
  author = {Bradner, Scott O.},
  year = {1997},
  month = mar,
  number = {RFC 2119},
  institution = {{Internet Engineering Task Force}},
  doi = {10.17487/RFC2119},
  urldate = {2023-05-24},
  abstract = {In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.},
  file = {/Users/igormoreno/Zotero/storage/AECUQ7V7/Bradner - 1997 - Key words for use in RFCs to Indicate Requirement .pdf}
}

@inproceedings{bradshawComputingSchoolEmergent2012,
  title = {Computing at School: An Emergent Community of Practice for a Re-Emergent Subject},
  shorttitle = {Computing at School},
  booktitle = {International {{Conference}} on {{ICT}} in {{Education}}},
  author = {Bradshaw, Pete and Woollard, John},
  year = {2012},
  month = jul,
  address = {{Rhodes, Greece}},
  urldate = {2021-01-30},
  abstract = {The Computing at School (CAS) working group was formed in 2009 as a grassroots organisation with members drawn from schools, higher education and the computing industry. Their concern was the drop in applications for undergraduate computing courses and a dearth of specialists entering related professions. This paper studies the development of the organisation with respect to models of communities of practice. The methodology is a retrospective reflexive study based analysis of e-mail transactions to review the association's activities and relationships with other stakeholders in computing education. Through this, the formation of a new professional community of practice is tracked and its characteristics established.},
  langid = {english},
  annotation = {00018},
  file = {/Users/igormoreno/Zotero/storage/TG3L775B/Bradshaw and Woollard - 2012 - Computing at school.pdf;/Users/igormoreno/Zotero/storage/J2SETJRN/34002.html}
}

@inproceedings{brandesUsingActionResearch2019,
  title = {Using {{Action Research}} to {{Distill Research-Based Segments}} of {{Pedagogical Content Knowledge}} of {{K-12 Computer Science Teachers}}},
  booktitle = {Proceedings of the 2019 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Brandes, Ofra and Armoni, Michal},
  year = {2019},
  month = jul,
  series = {{{ITiCSE}} '19},
  pages = {485--491},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3304221.3319773},
  urldate = {2021-01-30},
  abstract = {Teachers' pedagogical content knowledge (PCK) is an important factor in all that concerns teaching and learning processes. As such, it plays an important role in pre-service teachers' training and in-service teachers' professional development. In line with this, the pedagogical content knowledge of computer science teachers (CS-PCK) receives considerable attention in current computing education research. However, very little is known about effective ways of extracting valid and reliable CS-PCK segments from the practical work of CS in-service teachers, and hence, only a limited reservoir of such segments is available for CS educators. Here we report on research in which we developed and investigated a new strategy for extracting research-based CS-PCK segments from the practical work of experienced high-school teachers. This strategy incorporated action research, conducted by the CS teachers in their classes, as part of a long and extensive workshop for professional development of CS teachers. Our findings show that the use of action research within the unique platform provided by the workshop yielded a rich variety of research-based CS-PCK segments. Furthermore, our findings emphasize the important role of the social context of the workshop in teachers' success in conducting reliable and valid action research. In addition, teachers' attitudes regarding the use of action research as a tool for improving their practice were positive, as well as their tendency to adopt and use this tool in their practice.},
  isbn = {978-1-4503-6895-7},
  keywords = {action research,cs-pck,k-12,pck,teachers},
  annotation = {00005},
  file = {/Users/igormoreno/Zotero/storage/KQIT962L/Brandes and Armoni - 2019 - Using Action Research to Distill Research-Based Se.pdf}
}

@article{brandlSphinxDocumentation2010,
  title = {Sphinx Documentation},
  author = {Brandl, Georg},
  year = {2010},
  journal = {URL http://sphinx-doc. org/sphinx. pdf},
  file = {/Users/igormoreno/Zotero/storage/GQM8ST27/Brandl - 2010 - Sphinx documentation.pdf}
}

@article{bransfordAbstractionLinguisticIdeas1971,
  title = {The Abstraction of Linguistic Ideas},
  author = {Bransford, John D and Franks, Jeffery J},
  year = {1971},
  month = oct,
  journal = {Cognitive Psychology},
  volume = {2},
  number = {4},
  pages = {331--350},
  issn = {0010-0285},
  doi = {10.1016/0010-0285(71)90019-3},
  urldate = {2018-12-02},
  abstract = {The phenomenon of ``idea acquisition and retention'' is demonstrated experimentally and contrasted with an ``individual sentence memory'' point of view. Results indicate that during an acquisition phase of the experiments, Ss spontaneously integrate the information expressed by a number of non-consecutively experienced (but semantically related) sentences into wholistic, semantic ideas, where these ideas encompass more information than any acquisition sentence contained. Ss' subsequent attempts to recognize those exact sentences heard during acquisition are shown to be a function of the complete ideas acquired. Thus, Ss' are most confident of ``recognizing'' sentences expressing all the semantic relations characteristic of a complete idea, in spite of the fact that such sentences expressed more information than was communicated by any single sentence on the acquisition list. Ss' become less confident of having heard particular sentences as a function of the degree to which a sentence fails to exhaust all the semantic relations characteristic of a complete idea.},
  file = {/Users/igormoreno/Zotero/storage/WJ9BWHHD/Bransford and Franks - 1971 - The abstraction of linguistic ideas.pdf;/Users/igormoreno/Zotero/storage/96EG7M22/0010028571900193.html}
}

@misc{bransfordNewApproachesInstruction1989,
  title = {New Approaches to Instruction: Because Wisdom Can't Be Told},
  shorttitle = {New Approaches to Instruction},
  author = {Bransford, John D. and Franks, Jeffery J. and Vye, Nancy J. and Sherwood, Robert D.},
  year = {1989},
  month = jul,
  journal = {Similarity and Analogical Reasoning},
  pages = {470--497},
  publisher = {{Cambridge University Press}},
  doi = {10.1017/CBO9780511529863.022},
  urldate = {2022-08-26},
  abstract = {Similarity and Analogical Reasoning - July 1989},
  howpublished = {https://www.cambridge.org/core/books/similarity-and-analogical-reasoning/new-approaches-to-instruction-because-wisdom-cant-be-told/68CB06A6DF42CF9EA9060E751E5F2AEC},
  langid = {english}
}

@article{bransfordRethinkingTransferSimple1999,
  title = {Rethinking {{Transfer}}: {{A Simple Proposal}} with {{Multiple Implications}}},
  shorttitle = {Rethinking {{Transfer}}},
  author = {Bransford, John D. and Schwartz, Daniel L.},
  year = {1999},
  journal = {Review of Research in Education},
  volume = {24},
  pages = {61},
  issn = {0091732X},
  doi = {10.2307/1167267},
  urldate = {2022-01-18},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/ZYH3FL8D/Bransford and Schwartz - 1999 - Rethinking Transfer A Simple Proposal with Multip.pdf}
}

@article{branwenSpacedRepetitionEfficient2009,
  title = {Spaced {{Repetition}} for {{Efficient Learning}}},
  author = {Branwen, Gwern},
  year = {2009},
  month = mar,
  urldate = {2020-02-11},
  abstract = {Efficient memorization using the spacing effect: literature review of widespread applicability, tips on use \& what it's good for.},
  copyright = {https://creativecommons.org/publicdomain/zero/1.0/},
  langid = {english},
  keywords = {Strong},
  file = {/Users/igormoreno/Zotero/storage/8GUY29MZ/Spaced-repetition.html}
}

@article{brauerInformaticsEducationWest1991,
  title = {Informatics Education at {{West German}} Universities},
  author = {Brauer, Wilfried},
  year = {1991},
  month = jan,
  journal = {Education and Computing},
  volume = {7},
  number = {1-2},
  pages = {125--131},
  issn = {01679287},
  doi = {10.1016/S0167-9287(05)80089-5},
  urldate = {2018-11-06},
  abstract = {Abstract. lnformatics in West Germany is now accepted as one of the most important fields of engineering, as well as of fundamental research. The discipline, as well as the curriculum, developed evolutionarily from mathematics and electrical engineering, but has assimilated ideas from many other fields and has an interdisciplinary tendency, covering a wide spectrum from mathematical theory and philosophical background to hardware construction and concrete applications. The historical development of informatics curricula at West German universities is briefly sketched by describing the two recommendations given in 1969 and 1985 by scientific societies. In addition, some personal remarks on courses given for beginners and for students in the second phase are made. Also, some comments on job opportunities for informaticians in West Germany are given.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/PJ2C5BKV/Brauer - 1991 - Informatics education at West German universities.pdf}
}

@article{braunUsingThematicAnalysis2006,
  title = {Using Thematic Analysis in Psychology},
  author = {Braun, Virginia and Clarke, Victoria},
  year = {2006},
  month = jan,
  journal = {Qualitative Research in Psychology},
  volume = {3},
  number = {2},
  pages = {77--101},
  issn = {1478-0887, 1478-0895},
  doi = {10.1191/1478088706qp063oa},
  urldate = {2023-03-28},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/MSDAMI86/Braun and Clarke - 2006 - Using thematic analysis in psychology.pdf}
}

@book{bravacoJavaProgrammingGround2010,
  title = {Java Programming: From the Ground Up},
  shorttitle = {Java Programming},
  author = {Bravaco, Ralph and Simonson, Shai},
  year = {2010},
  edition = {1st ed},
  publisher = {{McGraw-Hill}},
  address = {{Dubuque, IA}},
  isbn = {978-0-07-352335-4},
  langid = {english},
  lccn = {QA76.73.J38 B68 2010},
  keywords = {Java (Computer program language)},
  file = {/Users/igormoreno/Zotero/storage/65INVCMU/Bravaco and Simonson - 2010 - Java programming from the ground up.pdf}
}

@article{breitnerLockstepSimulationChild2017,
  title = {Lock-Step Simulation Is Child's Play (Experience Report)},
  author = {Breitner, Joachim and Smith, Chris},
  year = {2017},
  month = aug,
  journal = {Proceedings of the ACM on Programming Languages},
  volume = {1},
  number = {ICFP},
  pages = {3:1--3:15},
  doi = {10.1145/3110247},
  urldate = {2021-12-17},
  abstract = {Implementing multi-player networked games by broadcasting the player's input and letting each client calculate the game state -- a scheme known as *lock-step simulation* \textendash{} is an established technique. However, ensuring that every client in this scheme obtains a consistent state is infamously hard and in general requires great discipline from the game programmer. The thesis of this pearl is that in the realm of functional programming \textendash{} in particular with Haskell's purity and static pointers \textendash{} this hard problem becomes almost trivially easy. We support this thesis by implementing lock-step simulation under very adverse conditions. We extended the educational programming environment CodeWorld, which is used to teach math and programming to middle school students, with the ability to create and run interactive, networked multi-user games. Despite providing a very abstract and high-level interface, and without requiring any discipline from the programmer, we can provide consistent lock-step simulation with client prediction.},
  keywords = {distributed computation,lock-step simulation,teaching},
  file = {/Users/igormoreno/Zotero/storage/C646WESV/Breitner and Smith - 2017 - Lock-step simulation is child's play (experience report).pdf}
}

@inproceedings{brennanNewFrameworksStudying2012,
  title = {New Frameworks for Studying and Assessing the Development of Computational Thinking},
  booktitle = {Proceedings of the 2012 Annual Meeting of the {{American}} Educational Research Association, {{Vancouver}}, {{Canada}}},
  author = {Brennan, Karen and Resnick, Mitchel},
  year = {2012},
  volume = {1},
  pages = {25},
  file = {/Users/igormoreno/Zotero/storage/4MPGHBPC/Brennan and Resnick - 2012 - New frameworks for studying and assessing the deve.pdf}
}

@misc{brennanUnderstandingAlgebra2002,
  title = {Understanding {{Algebra}}},
  author = {Brennan, James W},
  year = {2002},
  month = dec,
  langid = {english},
  annotation = {00005},
  file = {/Users/igormoreno/Zotero/storage/NYIW7MXZ/Brennan - 2002 - Understanding Algebra.pdf}
}

@article{briandPropertybasedSoftwareEngineering1996,
  title = {Property-Based Software Engineering Measurement},
  author = {Briand, L.C. and Morasca, S. and Basili, V.R.},
  year = {1996},
  month = jan,
  journal = {IEEE Transactions on Software Engineering},
  volume = {22},
  number = {1},
  pages = {68--86},
  issn = {1939-3520},
  doi = {10.1109/32.481535},
  abstract = {Little theory exists in the field of software system measurement. Concepts such as complexity, coupling, cohesion or even size are very often subject to interpretation and appear to have inconsistent definitions in the literature. As a consequence, there is little guidance provided to the analyst attempting to define proper measures for specific problems. Many controversies in the literature are simply misunderstandings and stem from the fact that some people talk about different measurement concepts under the same label (complexity is the most common case). There is a need to define unambiguously the most important measurement concepts used in the measurement of software products. One way of doing so is to define precisely what mathematical properties characterize these concepts, regardless of the specific software artifacts to which these concepts are applied. Such a mathematical framework could generate a consensus in the software engineering community and provide a means for better communication among researchers, better guidelines for analysts, and better evaluation methods for commercial static analyzers for practitioners. We propose a mathematical framework which is generic, because it is not specific to any particular software artifact, and rigorous, because it is based on precise mathematical concepts. We use this framework to propose definitions of several important measurement concepts (size, length, complexity, cohesion, coupling). It does not intend to be complete or fully objective; other frameworks could have been proposed and different choices could have been made. However, we believe that the formalisms and properties we introduce are convenient and intuitive. This framework contributes constructively to a firmer theoretical ground of software measurement.},
  keywords = {Computer science,Costs,Job shop scheduling,Proposals,Size measurement,Software design,Software engineering,Software measurement,Software quality,Virtual reality},
  file = {/Users/igormoreno/Zotero/storage/SBEGKHFZ/Briand et al. - 1996 - Property-based software engineering measurement.pdf;/Users/igormoreno/Zotero/storage/SII567X4/stamp.html}
}

@inproceedings{brindaWhichComputingRelatedConceptions2017,
  title = {Which {{Computing-Related Conceptions Do Learners Have About}} the {{Design}} and {{Operation}} of {{Smartphones}}?: {{Results}} of an {{Interview Study}}},
  shorttitle = {Which {{Computing-Related Conceptions Do Learners Have About}} the {{Design}} and {{Operation}} of {{Smartphones}}?},
  booktitle = {Proceedings of the 12th {{Workshop}} on {{Primary}} and {{Secondary Computing Education}}},
  author = {Brinda, Torsten and Braun, Friederike},
  year = {2017},
  month = nov,
  pages = {73--81},
  publisher = {{ACM}},
  address = {{Nijmegen Netherlands}},
  doi = {10.1145/3137065.3137075},
  urldate = {2020-06-22},
  abstract = {Smartphones have had a rapid rise. From the first affordable mobile phones to modern high-tech devices, they have become ever more complex and increasingly popular. In 2016, almost 100\% of the 12 to 19 years-old youths in Germany owned a smartphone and used it regularly. Considering their large impact on adolescents' lives, smartphones are uniquely suited to be analyzed as examples of socio-technical computing systems in secondary computing education. Moreover, they play an increasing role in digital media education in all school subjects. There is however, among other things, a lack of scientific work covering learners' conceptions of smartphones needed for learner-centered computing education with and about smartphones. This article describes an explorative study that investigated secondary school learners' conceptions in the context of smartphones. A first overview of existing conceptions regarding selected aspects of smartphones was derived from eight semi-structured interviews.},
  isbn = {978-1-4503-5428-8},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/UAR8PJVK/Brinda and Braun - 2017 - Which Computing-Related Conceptions Do Learners Have About the Design and.pdf}
}

@article{brockApplicationMicrogeneticMethod2017,
  title = {The Application of the Microgenetic Method to Studies of Learning in Science Education: Characteristics of Published Studies, Methodological Issues and Recommendations for Future Research},
  shorttitle = {The Application of the Microgenetic Method to Studies of Learning in Science Education},
  author = {Brock, Richard and Taber, Keith S.},
  year = {2017},
  month = jan,
  journal = {Studies in Science Education},
  volume = {53},
  number = {1},
  pages = {45--73},
  issn = {0305-7267, 1940-8412},
  doi = {10.1080/03057267.2016.1262046},
  urldate = {2018-10-22},
  abstract = {The microgenetic method is an approach to sampling data that has been used in developmental psychology to construct models of change, particularly of children's strategy use in various contexts. Recently, the method has been applied to studies related to science education. This presentation examines the manner in which the microgenetic method has been used in science education and considers five significant issues arising from its application. Firstly, the fit of the method with studies that collect qualitative and/or quantitative data is considered. Secondly, the manner in which researchers define intervals over which change is and is not constructed to occur leads to the proposition of the concept of a static interval, a period over which, for methodological purposes, no change is assumed to occur. Thirdly, the fit between researchers' assumptions about the rate of change of phenomena they are studying and the rates at which they sample data are considered. Fourthly, strategies for distinguishing conceptual change from the existence of multiple co-existing concepts are proposed. Finally, the appropriateness of different kinds of sequences of probes for answering different types of research questions is discussed. The presentation concludes with the introduction of a set of recommendations for researchers using the microgenetic method to construct qualitative data in science education.},
  langid = {english},
  annotation = {00012},
  file = {/Users/igormoreno/Zotero/storage/EAIJ6CUM/Brock and Taber - 2017 - The application of the microgenetic method to stud.pdf;/Users/igormoreno/Zotero/storage/H4FMLGJ9/ESERA 2017 Summary.pdf;/Users/igormoreno/Zotero/storage/VKUCTHZG/03057267.2016.html}
}

@article{brooksCognitiveLevelsMatching1983,
  title = {Cognitive {{Levels Matching}}},
  author = {Brooks, Martin and Fusco, Esther and Grennon, Jacqueline},
  year = {1983},
  month = may,
  journal = {Educational Leadership},
  pages = {6},
  langid = {english},
  keywords = {Piaget},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/S3NKA83M/Brooks et al - 1983 - Cognitive Levels Matching.pdf}
}

@article{brooksTheoryComprehensionComputer1983,
  title = {Towards a Theory of the Comprehension of Computer Programs},
  author = {Brooks, Ruven},
  year = {1983},
  month = jun,
  journal = {International Journal of Man-Machine Studies},
  volume = {18},
  number = {6},
  pages = {543--554},
  issn = {0020-7373},
  doi = {10.1016/S0020-7373(83)80031-5},
  urldate = {2018-12-02},
  abstract = {A sufficiency theory is presented of the process by which a computer programmer attempts to comprehend a program. The theory is intended to explain four sources of variation in behavior on this task: the kind of computation the program performs, the intrinsic properties of the program text, such as language and documentation, the reason for which the documentation is needed, and differences among the individuals performing the task. The starting point for the theory is an analysis of the structure of the knowledge required when a program is comprehended which views the knowledge as being organized into distinct domains which bridge between the original problem and the final program. The program comprehension process is one of reconstructing knowledge about these domains and the relationship among them. This reconstruction process is theorized to be a top-down, hypothesis driven one in which an initially vague and general hypothesis is refined and elaborated based on inf ormation extracted from the program text and other documentation.},
  file = {/Users/igormoreno/Zotero/storage/WRSNY3QI/Brooks - 1983 - Towards a theory of the comprehension of computer programs.pdf;/Users/igormoreno/Zotero/storage/QCA4JULI/S0020737383800315.html}
}

@inproceedings{brownBlackboxLargeScale2014,
  title = {Blackbox: A Large Scale Repository of Novice Programmers' Activity},
  shorttitle = {Blackbox},
  booktitle = {Proceedings of the 45th {{ACM}} Technical Symposium on {{Computer}} Science Education},
  author = {Brown, Neil Christopher Charles and K{\"o}lling, Michael and McCall, Davin and Utting, Ian},
  year = {2014},
  month = mar,
  series = {{{SIGCSE}} '14},
  pages = {223--228},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2538862.2538924},
  urldate = {2022-08-02},
  abstract = {Automatically observing and recording the programming behaviour of novices is an established computing education research technique. However, prior studies have been conducted at a single institution on a small or medium scale, without the possibility of data re-use. Now, the widespread availability of always-on Internet access allows for data collection at a much larger, global scale. In this paper we report on the Blackbox project, begun in June 2013. Blackbox is a perpetual data collection project that collects data from worldwide users of the BlueJ IDE -- a programming environment designed for novice programmers. Over one hundred thousand users have already opted-in to Blackbox. The collected data is anonymous and is available to other researchers for use in their own studies, thus benefitting the larger research community. In this paper, we describe the data available via Blackbox, show some examples of analyses that can be performed using the collected data, and discuss some of the analysis challenges that lie ahead.},
  isbn = {978-1-4503-2605-6},
  keywords = {blackbox,BlueJ,data collection,programming education},
  file = {/Users/igormoreno/Zotero/storage/XTQHSMBX/Brown et al. - 2014 - Blackbox a large scale repository of novice progr.pdf}
}

@misc{brownLanguageModelsAre2020,
  title = {Language {{Models}} Are {{Few-Shot Learners}}},
  author = {Brown, Tom B. and Mann, Benjamin and Ryder, Nick and Subbiah, Melanie and Kaplan, Jared and Dhariwal, Prafulla and Neelakantan, Arvind and Shyam, Pranav and Sastry, Girish and Askell, Amanda and Agarwal, Sandhini and {Herbert-Voss}, Ariel and Krueger, Gretchen and Henighan, Tom and Child, Rewon and Ramesh, Aditya and Ziegler, Daniel M. and Wu, Jeffrey and Winter, Clemens and Hesse, Christopher and Chen, Mark and Sigler, Eric and Litwin, Mateusz and Gray, Scott and Chess, Benjamin and Clark, Jack and Berner, Christopher and McCandlish, Sam and Radford, Alec and Sutskever, Ilya and Amodei, Dario},
  year = {2020},
  month = jul,
  number = {arXiv:2005.14165},
  eprint = {2005.14165},
  primaryclass = {cs},
  publisher = {{arXiv}},
  doi = {10.48550/arXiv.2005.14165},
  urldate = {2022-11-02},
  abstract = {Recent work has demonstrated substantial gains on many NLP tasks and benchmarks by pre-training on a large corpus of text followed by fine-tuning on a specific task. While typically task-agnostic in architecture, this method still requires task-specific fine-tuning datasets of thousands or tens of thousands of examples. By contrast, humans can generally perform a new language task from only a few examples or from simple instructions - something which current NLP systems still largely struggle to do. Here we show that scaling up language models greatly improves task-agnostic, few-shot performance, sometimes even reaching competitiveness with prior state-of-the-art fine-tuning approaches. Specifically, we train GPT-3, an autoregressive language model with 175 billion parameters, 10x more than any previous non-sparse language model, and test its performance in the few-shot setting. For all tasks, GPT-3 is applied without any gradient updates or fine-tuning, with tasks and few-shot demonstrations specified purely via text interaction with the model. GPT-3 achieves strong performance on many NLP datasets, including translation, question-answering, and cloze tasks, as well as several tasks that require on-the-fly reasoning or domain adaptation, such as unscrambling words, using a novel word in a sentence, or performing 3-digit arithmetic. At the same time, we also identify some datasets where GPT-3's few-shot learning still struggles, as well as some datasets where GPT-3 faces methodological issues related to training on large web corpora. Finally, we find that GPT-3 can generate samples of news articles which human evaluators have difficulty distinguishing from articles written by humans. We discuss broader societal impacts of this finding and of GPT-3 in general.},
  archiveprefix = {arxiv},
  keywords = {Computer Science - Computation and Language},
  file = {/Users/igormoreno/Zotero/storage/A5Z5ETWS/Brown et al. - 2020 - Language Models are Few-Shot Learners.pdf;/Users/igormoreno/Zotero/storage/QZWK78L2/Brown et al. - 2020 - Language Models are Few-Shot Learners.pdf;/Users/igormoreno/Zotero/storage/M5CD54LA/2005.html}
}

@article{brownNoviceUseJava2022,
  title = {Novice Use of the {{Java}} Programming Language},
  author = {Brown, Neil C. C. and {Weill-Tessier}, Pierre and Sekula, Maksymilian and Costache, Alexandra-Lucia and K{\"o}lling, Michael},
  year = {2022},
  month = jul,
  journal = {ACM Transactions on Computing Education},
  doi = {10.1145/3551393},
  urldate = {2022-08-12},
  abstract = {Objectives Java is a popular programming language for use in computing education, but it is difficult to get a wide picture of the issues that it presents for novices, and most studies look only at the types or frequency of errors. In this observational study we aim to learn how novices use different features of the Java language. Participants Users of the BlueJ development environment have been invited to opt-in to anonymously record their activity data for the past eight years. This dataset is called Blackbox, which was used as the basis for this study. BlueJ users are mostly novice programmers, predominantly male, with a median age of 16. Our data subset featured approximately 225,000 participants from around the world. Study Methods We performed a secondary data analysis that used data from the Blackbox dataset. We examined over 320,000 Java projects collected over the course of eight years, and used source code analysis to investigate the prevalence of various specifically-selected Java programming usage patterns. As this was an observational study without specific hypotheses, we did not use significance tests; instead we present the results themselves with commentary, having applied seasonal trend decomposition to the data. Findings We found many long-term trends in the data over the course of the eight years, most of which were monotonic. There was a notable reduction in the use of the main method (common in Java but unnecessary in BlueJ), and a general reduction in the complexity of the projects. We find that there are only a small number of frequently used types: int, String, double and boolean, but also a wide range of other infrequently used types. Conclusions We find that programming usage patterns gradually change over a long period of time (a period where the Java language was not seeing major changes), once seasonal patterns are accounted for. Any changes are likely driven by instructors and the changing demographics of programming novices. The novices use a relatively restricted subset of Java, which implies that designers of languages specifically targeted at novices can satisfy their needs with a smaller set of language constructs and features. We provide detailed recommendations for the designers of educational programming languages and supporting development tools.},
  keywords = {Blackbox,BlueJ,Novice programmers,Programming language usage},
  annotation = {Just Accepted},
  file = {/Users/igormoreno/Zotero/storage/XFA2B2XG/Brown et al. - 2022 - Novice use of the Java programming language.pdf}
}

@inproceedings{bruce-lockhartDevelopingMentalModels2007,
  title = {Developing {{Mental Models}} of {{Computer Programming Interactively Via}} the {{Web}}},
  booktitle = {2007 37th {{Annual Frontiers In Education Conference}} - {{Global Engineering}}: {{Knowledge Without Borders}}, {{Opportunities Without Passports}}},
  author = {{Bruce-Lockhart}, Michael P. and Norvell, Theodore S.},
  year = {2007},
  month = oct,
  pages = {S3H-3-S3H-8},
  publisher = {{IEEE}},
  address = {{Milwaukee, WI}},
  doi = {10.1109/FIE.2007.4418051},
  urldate = {2020-06-22},
  abstract = {A website featuring interactive examples used to teach introductory programming to both on-campus and, recently, distance students is described. On-line notes are created using a pair of tools, Web-Writer++, an authoring system for programming instructors, and the Teaching Machine, a program animator which is used to interactively display the examples. The tools allow the instructor in the classroom or the student on their own to step through computer programs written in C++ or Java. The animations that unfold are designed to build a deep understanding of how computers process programs, consonant with the kind of mental models we believe professional programmers hold. In-class versus distance experience will be discussed.},
  isbn = {978-1-4244-1083-5},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/PEAG674E/Bruce-Lockhart and Norvell - 2007 - Developing Mental Models of Computer Programming Interactively Via the Web.pdf}
}

@article{bruce-lockhartLiftingHoodComputer2000,
  title = {Lifting the Hood of the Computer: {{Program}} Animation with the {{Teaching Machine}}},
  shorttitle = {Lifting the Hood of the Computer},
  author = {{Bruce-lockhart}, M. and Norvell, Theodore},
  year = {2000},
  month = jan,
  file = {/Users/igormoreno/Zotero/storage/6WPAIJTH/Bruce-lockhart and Norvell - 2000 - Lifting the hood of the computer Program animatio.pdf}
}

@article{bruceCreatingNewModel1991,
  title = {Creating a New Model Curriculum: {{A}} Rationale for {{Computing}} Curricula 1990},
  shorttitle = {Creating a New Model Curriculum},
  author = {Bruce, Kim B.},
  year = {1991},
  month = jan,
  journal = {Education and Computing},
  volume = {7},
  number = {1-2},
  pages = {23--42},
  issn = {01679287},
  doi = {10.1016/S0167-9287(05)80080-9},
  urldate = {2018-11-06},
  abstract = {The Joint Curriculum Task Force of the ACMand the IEEEComputer Society has proposed a new flexible collection of curricula which provides the basis for broad-based undergraduate computing programs. In order to have the curricula applicable to as many t)qaes of undergraduate institutions as possible, the curricula have been designed around a collection of "knowledge units" which can be put together in a variety of ways to form a coherent set of courses leading to a major in computing. In order to help provide connections between these knowledge units, the task force has also identified a number of "'recurring concepts" which tie together seemingly disparate parts of the curriculum. The purpose of this article is to provide an informal discussion of the considerations that went into the creation of these curricular guidelines, and provide insight into the reasons behind many of the decisions that were made.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/TALHRCIP/Bruce - 1991 - Creating a new model curriculum A rationale for C.pdf}
}

@inproceedings{brudyCrossDeviceTaxonomySurvey2019,
  title = {Cross-{{Device Taxonomy}}: {{Survey}}, {{Opportunities}} and {{Challenges}} of {{Interactions Spanning Across Multiple Devices}}},
  shorttitle = {Cross-{{Device Taxonomy}}},
  booktitle = {Proceedings of the 2019 {{CHI Conference}} on {{Human Factors}} in {{Computing Systems}}},
  author = {Brudy, Frederik and Holz, Christian and R{\"a}dle, Roman and Wu, Chi-Jui and Houben, Steven and Klokmose, Clemens Nylandsted and Marquardt, Nicolai},
  year = {2019},
  month = may,
  series = {{{CHI}} '19},
  pages = {1--28},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3290605.3300792},
  urldate = {2020-10-01},
  abstract = {Designing interfaces or applications that move beyond the bounds of a single device screen enables new ways to engage with digital content. Research addressing the opportunities and challenges of interactions with multiple devices in concert is of continued focus in HCI research. To inform the future research agenda of this field, we contribute an analysis and taxonomy of a corpus of 510 papers in the cross-device computing domain. For both new and experienced researchers in the field we provide: an overview, historic trends and unified terminology of cross-device research; discussion of major and under-explored application areas; mapping of enabling technologies; synthesis of key interaction techniques spanning across multiple devices; and review of common evaluation strategies. We close with a discussion of open issues. Our taxonomy aims to create a unified terminology and common understanding for researchers in order to facilitate and stimulate future cross-device research.},
  isbn = {978-1-4503-5970-2},
  keywords = {cross-device computing,cross-device interaction,cross-surface,distributed user interfaces,multi-device,survey,taxonomy},
  annotation = {00033},
  file = {/Users/igormoreno/Zotero/storage/XIGWJVUH/Brudy et al. - 2019 - Cross-Device Taxonomy Survey, Opportunities and C.pdf}
}

@book{brunerProcessEducation1960,
  title = {The {{Process}} of {{Education}}},
  author = {Bruner, Jerome},
  year = {1960},
  publisher = {{Harvard Univesity Press}},
  urldate = {2022-08-12},
  abstract = {Jerome Bruner shows that the basic concepts of science and the humanities can be grasped intuitively at a very early age. Bruner's foundational case for the spiral curriculum has influenced a generation of educators and will continue to be a source of insight into the goals and methods of the educational process.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/BL5NUTYS/Bruner - The Process of Education — Jerome Bruner.pdf}
}

@article{brusilovskyMinilanguagesWayLearn1997,
  title = {Mini-Languages: A Way to Learn Programming Principles},
  shorttitle = {Mini-Languages},
  author = {Brusilovsky, Peter and Calabrese, Eduardo and Hvorecky, Jozef and Kouchnirenko, Anatoly and Miller, Philip},
  year = {1997},
  month = mar,
  journal = {Education and Information Technologies},
  volume = {2},
  number = {1},
  pages = {65--83},
  issn = {1573-7608},
  doi = {10.1023/A:1018636507883},
  urldate = {2022-02-16},
  abstract = {Mini-languages are a visually intuitive, simple and powerful way to introduce students to programming. They are a good foundation for general computer science instruction, provide insight into programming for the general population, and teach algorithmic thinking. The goal of the paper is to provide an extensive review of the mini-language approach to teaching programming. For different audiences and in different countries, the authors have extensive experience in design and application of mini-languages. We outline the problems that motivate the application of this approach, present a brief history, review several existing mini-languages, and provide discussion of lessons learned. In particular, we discuss how to choose a mini-language for a particular group of students and list some requirements for a successful application of a mini- language. We conclude with a discussion of possible future directions of the mini-language approach development},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/H2R2MB4Q/Brusilovsky et al. - 1997 - Mini-languages a way to learn programming princip.pdf}
}

@article{brusilovskyTeachingProgrammingNovices1994,
  title = {Teaching {{Programming}} to {{Novices}}: {{A Review}} of {{Approaches}} and {{Tools}}},
  shorttitle = {Teaching {{Programming}} to {{Novices}}},
  author = {Brusilovsky, P. and Kouchnirenko, A. and Miller, P. and Tomek, I.},
  year = {1994},
  urldate = {2022-02-16},
  abstract = {Three different approaches to teaching introductory programming are reviewed: the incremental approach, the sub-language approach, and the mini-language approach. The paper analyzes all three approaches, providing a brief history of each and describing an example of a programming environment supporting this approach. In the incremental approach, the language being taught is presented as a sequence of language subsets. Each subset introduces new programming language constructs while retaining all the constructs of the preceding subsets. One of the most developed applications of the incremental approach is the PMS (Pascal Made Simple) system. The idea of the mini-language approach is to design a small and simple language to support the first steps in learning programming. A student  learns what programming is by studying how to control an actor, which can be a turtle, robot, or any other active entity, acting in a microworld. Karel Genie is an example of a novice programming environment. The idea of the sub-language approach is to design a special starting subset of the full language containing several easily visualizable operations. This subset can support the first steps of learning programming and helps later in introducing more complex programming concepts. An example is Ku-Mir, a text editor with a zero-response-time incremental compiler system distributed widely in Soviet schools and universities. Analysis of the similarities of the environments provides some ideas about how to teach programming to novices and how a novice programming environment should be  constructed. These lessons learned are examined in detail. (Contains 23 references.) (MAS)},
  langid = {english},
  keywords = {Computer Science Education,Foreign Countries,Introductory Courses,Programming,Programming Languages,Teaching Methods},
  file = {/Users/igormoreno/Zotero/storage/CY23WKB3/Brusilovsky e Others - 1994 - Teaching Programming to Novices A Review of Appro.pdf;/Users/igormoreno/Zotero/storage/RR3Y3Q5V/eric.ed.gov.html}
}

@techreport{bryceb.reeveIntroductionModernMeasurement2002,
  title = {An {{Introduction}} to {{Modern Measurement Theory}}},
  author = {{Bryce B. Reeve}},
  year = {2002},
  pages = {67},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/23R5VH4G/Bryce B. Reeve - 2002 - An Introduction to Modern Measurement Theory.pdf}
}

@inproceedings{bucciWeReallyTeach2001,
  title = {Do {{We Really Teach Abstraction}}?},
  booktitle = {Proceedings of the {{Thirty-second SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  author = {Bucci, Paolo and Long, Timothy J. and Weide, Bruce W.},
  year = {2001},
  series = {{{SIGCSE}} '01},
  pages = {26--30},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/364447.364531},
  urldate = {2018-10-02},
  abstract = {Abstraction is one of the cornerstones of software development and is recognized as a fundamental and essential principle to be taught as early as CS1/CS2. Abstraction supposedly can enhance students' ability to reason and think. Yet we often hear complaints about the inability of CS undergraduates to do that. Do we supply students with the tools they need to reach their potential to think carefully and to reason rigorously about software behavior? Typically we do not, but as educators there are techniques we can use to help our students develop such skills starting in CS1/CS2.},
  isbn = {978-1-58113-329-5},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/55M5HXXI/Bucci et al - 2001 - Do We Really Teach Abstraction.pdf}
}

@article{buchholzCrowdsourcingPreferenceTests,
  title = {Crowdsourcing {{Preference Tests}}, and {{How}} to {{Detect Cheating}}},
  author = {Buchholz, Sabine and Latorre, Javier},
  pages = {4},
  abstract = {We describe an approach to crowdsource the evaluation of TTS systems by preference tests and report on lessons learnt from running 127 real-life crowdsourced tests. We show that at least one type of cheating becomes more prevalent over time if left unchecked and develop metrics to exclude cheaters. We demonstrate that their exclusion improves test outcomes.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/PGY4A4Q2/Buchholz e Latorre - Crowdsourcing Preference Tests, and How to Detect .pdf}
}

@article{buckinghamImportanceInformationSystem1991,
  title = {The Importance of Information System Studies in the University Curriculum},
  author = {Buckingham, Richard A.},
  year = {1991},
  month = jan,
  journal = {Education and Computing},
  volume = {7},
  number = {1-2},
  pages = {133--135},
  issn = {01679287},
  doi = {10.1016/S0167-9287(05)80090-1},
  urldate = {2018-11-06},
  abstract = {Emphasis is placed on the failure to devote sufficient resources to the study of information systems and the engineering of information systems, bringing computer technology to bear on the organization and management of modern society. Universities and like institutions have a growing responsibility to train information system engineers (and their academic counterparts), training which is at least as urgent as that of computer scientists. A brief account is included of progress in the uK.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/8TM8IU39/Buckingham - 1991 - The importance of information system studies in the university curriculum.pdf}
}

@inproceedings{buffaCorporateSemanticWeb2005,
  title = {Towards a {{Corporate Semantic Web Approach}} in {{Designing Learning Systems}}. {{Review}} of the {{TRIAL SOLUTION Project}}},
  booktitle = {International {{Workshop}} on {{Applications}} of {{Semantic Web Technologies}} for {{E-Learning}}},
  author = {Buffa, Michel and Dehors, Sylvain and {Faron-Zucker}, Catherine and Sander, Peter},
  year = {2005},
  pages = {73--76},
  address = {{Amsterdam, Holland}},
  abstract = {The TRIAL SOLUTION EU project focused on the publication of personalized electronic documents based on existing scientific books. Its general approach consists in slicing electronic books into elementary learning resources and annotating them with metadata enabling the retrieval of resources by a semantic search. The annotated resources are published into a repository available for teachers or students to produce personalised teaching or learning materials with delivery tools. In this paper we give an overview of the project, emphasizing the authoring tool we have developed to annotate the learning resources, and we review it by the light of the Semantic Web.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/TW4ZDI83/Buffa et al - 2005 - Towards a Corporate Semantic Web Approach in Designing Learning Systems.pdf}
}

@article{buligaGraphicLambdaCalculus2013,
  title = {Graphic {{Lambda Calculus}}},
  author = {Buliga, Marius},
  year = {2013},
  month = dec,
  journal = {Complex Systems},
  volume = {22},
  number = {4},
  pages = {311--360},
  issn = {08912513},
  doi = {10.25088/ComplexSystems.22.4.311},
  urldate = {2021-04-17},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/FXVIYA37/arXiv - 2013 - Graphic lambda calculus.pdf;/Users/igormoreno/Zotero/storage/TYD7N65C/Buliga - 2013 - Graphic Lambda Calculus.pdf;/Users/igormoreno/Zotero/storage/BIS4HHJX/1305.html}
}

@inproceedings{burgInteractiveRecordReplay2013,
  title = {Interactive Record/Replay for Web Application Debugging},
  booktitle = {Proceedings of the 26th Annual {{ACM}} Symposium on {{User}} Interface Software and Technology},
  author = {Burg, Brian and Bailey, Richard and Ko, Andrew J. and Ernst, Michael D.},
  year = {2013},
  month = oct,
  series = {{{UIST}} '13},
  pages = {473--484},
  publisher = {{Association for Computing Machinery}},
  address = {{St. Andrews, Scotland, United Kingdom}},
  doi = {10.1145/2501988.2502050},
  urldate = {2020-07-23},
  abstract = {During debugging, a developer must repeatedly and manually reproduce faulty behavior in order to inspect different facets of the program's execution. Existing tools for reproducing such behaviors prevent the use of debugging aids such as breakpoints and logging, and are not designed for interactive, random-access exploration of recorded behavior. This paper presents Timelapse, a tool for quickly recording, reproducing, and debugging interactive behaviors in web applications. Developers can use Timelapse to browse, visualize, and seek within recorded program executions while simultaneously using familiar debugging tools such as breakpoints and logging. Testers and end-users can use Timelapse to demonstrate failures in situ and share recorded behaviors with developers, improving bug report quality by obviating the need for detailed reproduction steps. Timelapse is built on Dolos, a novel record/replay infrastructure that ensures deterministic execution by capturing and reusing program inputs both from the user and from external sources such as the network. Dolos introduces negligible overhead and does not interfere with breakpoints and logging. In a small user evaluation, participants used Timelapse to accelerate existing reproduction activities, but were not significantly faster or more successful in completing the larger tasks at hand. Together, the Dolos infrastructure and Timelapse developer tool support systematic bug reporting and debugging practices.},
  isbn = {978-1-4503-2268-3},
  keywords = {debugging,deterministic replay,web applications},
  file = {/Users/igormoreno/Zotero/storage/4C3ZLTEW/Burg et al. - 2013 - Interactive recordreplay for web application debu.pdf}
}

@inproceedings{busjahnEyeMovementsCode2015,
  title = {Eye {{Movements}} in {{Code Reading}}: {{Relaxing}} the {{Linear Order}}},
  shorttitle = {Eye {{Movements}} in {{Code Reading}}},
  booktitle = {2015 {{IEEE}} 23rd {{International Conference}} on {{Program Comprehension}}},
  author = {Busjahn, Teresa and Bednarik, Roman and Begel, Andrew and Crosby, Martha and Paterson, James H. and Schulte, Carsten and Sharif, Bonita and Tamm, Sascha},
  year = {2015},
  month = may,
  pages = {255--265},
  publisher = {{IEEE}},
  address = {{Florence, Italy}},
  doi = {10.1109/ICPC.2015.36},
  urldate = {2020-06-22},
  abstract = {Code reading is an important skill in programming. Inspired by the linearity that people exhibit while natural language text reading, we designed local and global gaze-based measures to characterize linearity (left-to-right and top-to-bottom) in reading source code. Unlike natural language text, source code is executable and requires a specific reading approach. To validate these measures, we compared the eye movements of novice and expert programmers who were asked to read and comprehend short snippets of natural language text and Java programs.},
  isbn = {978-1-4673-8159-8},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/A3PMB86R/Busjahn et al - 2015 - Eye Movements in Code Reading.pdf}
}

@article{butlerMultipleChoiceTestingEducation2018,
  title = {Multiple-{{Choice Testing}} in {{Education}}: {{Are}} the {{Best Practices}} for {{Assessment Also Good}} for {{Learning}}?},
  shorttitle = {Multiple-{{Choice Testing}} in {{Education}}},
  author = {Butler, Andrew C.},
  year = {2018},
  month = sep,
  journal = {Journal of Applied Research in Memory and Cognition},
  volume = {7},
  number = {3},
  pages = {323--331},
  issn = {22113681},
  doi = {10.1016/j.jarmac.2018.07.002},
  urldate = {2021-05-05},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/TDYGJIIY/Butler - 2018 - Multiple-Choice Testing in Education Are the Best.pdf}
}

@inproceedings{butlerStudentExperiencesMaking2011,
  title = {Student Experiences of Making and Using Cheat Sheets in Mathematical Exams},
  author = {Butler, David and Crouch, Nicholas},
  year = {2011},
  publisher = {{The Australian Association of Mathematics Teachers}},
  urldate = {2018-11-09},
  abstract = {In many mathematics courses at school and university\textemdash including in all South Australian Year 12 mathematics subjects\textemdash students are allowed to make a "cheat sheet" to take into their exams. However, despite their widespread use, there is little research on the effect of making and using cheat sheets\textemdash whether on the students' performance, learning or learning experience. As a preliminary stage in researching this issue, students in several first-year statistics courses at the University of Adelaide were surveyed on their experiences of making and using cheat sheets. The results and implications of this survey are discussed in this paper.},
  copyright = {\textcopyright{} The Australian Association of Mathematics Teachers and The Mathematics Education Research Group of Australasia 2011},
  isbn = {978-1-875900-70-1},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/UL7FJKK3/Butler and Crouch - 2011 - Student experiences of making and using cheat sheets in mathematical exams.pdf;/Users/igormoreno/Zotero/storage/BJPTEYUZ/71007.html}
}

@inproceedings{byrdMiniKanrenLiveUntagged2012,
  title = {{{miniKanren}}, {{Live}} and {{Untagged}}: {{Quine Generation}} via {{Relational Interpreters}} ({{Programming Pearl}})},
  shorttitle = {{{miniKanren}}, {{Live}} and {{Untagged}}},
  booktitle = {Proceedings of the 2012 {{Annual Workshop}} on {{Scheme}} and {{Functional Programming}}},
  author = {Byrd, William E. and Holk, Eric and Friedman, Daniel P.},
  year = {2012},
  series = {Scheme '12},
  pages = {8--29},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2661103.2661105},
  urldate = {2018-10-19},
  abstract = {We present relational interpreters for several subsets of Scheme, written in the pure logic programming language miniKanren. We demonstrate these interpreters running "backwards"---that is, generating programs that evaluate to a specified value---and show how the interpreters can trivially generate quines (programs that evaluate to themselves). We demonstrate how to transform environment-passing interpreters written in Scheme into relational interpreters written in miniKanren. We show how constraint extensions to core miniKanren can be used to allow shadowing of the interpreter's primitive forms (using the absent\textdegree{} tree constraint), and to avoid having to tag expressions in the languages being interpreted (using disequality constraints and symbol/number type-constraints), simplifying the interpreters and eliminating the need for parsers/unparsers. We provide four appendices to make the code in the paper completely self-contained. Three of these appendices contain new code: the complete implementation of core miniKanren extended with the new constraints; an extended relational interpreter capable of running factorial and doing list processing; and a simple pattern matcher that uses Dijkstra guards. The other appendix presents our preferred version of code that has been presented elsewhere: the miniKanren relational arithmetic system used in the extended interpreter.},
  isbn = {978-1-4503-1895-2},
  keywords = {interpreters,logic programming,miniKanren,prospectus,quines,relational programming,Relational Programming,scheme,tagging,To Read},
  annotation = {00016},
  file = {/Users/igormoreno/Zotero/storage/MUC6UYW7/Byrd et al. - 2012 - miniKanren, Live and Untagged Quine Generation vi.pdf;/Users/igormoreno/Zotero/storage/2UCBUB62/citation.html}
}

@article{byrdUnifiedApproachSolving2017,
  title = {A {{Unified Approach}} to {{Solving Seven Programming Problems}} ({{Functional Pearl}})},
  author = {Byrd, William E. and Ballantyne, Michael and Rosenblatt, Gregory and Might, Matthew},
  year = {2017},
  month = aug,
  journal = {Proc. ACM Program. Lang.},
  series = {{{PACMPL}}},
  volume = {1},
  number = {ICFP},
  pages = {8:1--8:26},
  issn = {2475-1421},
  doi = {10.1145/3110252},
  urldate = {2018-10-19},
  abstract = {We present seven programming challenges in Racket, and an elegant, unified approach to solving them using constraint logic programming in miniKanren.},
  keywords = {miniKanren,program synthesis,prospectus,Racket,relational programming,Relational Programming,Scheme,To Read},
  annotation = {00007},
  file = {/Users/igormoreno/Zotero/storage/BUI38YH2/Byrd et al. - 2017 - A Unified Approach to Solving Seven Programming Pr.pdf;/Users/igormoreno/Zotero/storage/ZDENGBIX/Byrd et al. - 2017 - A unified approach to solving seven programming pr.pdf;/Users/igormoreno/Zotero/storage/MWI9PQW8/citation.html}
}

@article{byrneWorkedExampleBraun2022,
  title = {A Worked Example of {{Braun}} and {{Clarke}}'s Approach to Reflexive Thematic Analysis},
  author = {Byrne, David},
  year = {2022},
  month = jun,
  journal = {Quality \& Quantity},
  volume = {56},
  number = {3},
  pages = {1391--1412},
  issn = {0033-5177, 1573-7845},
  doi = {10.1007/s11135-021-01182-y},
  urldate = {2023-03-28},
  abstract = {Since the publication of their inaugural paper on the topic in 2006, Braun and Clarke's approach has arguably become one of the most thoroughly delineated methods of conducting thematic analysis (TA). However, confusion persists as to how to implement this specific approach to TA appropriately. The authors themselves have identified that many researchers who purport to adhere to this approach\textemdash and who reference their work as such\textemdash fail to adhere fully to the principles of `reflexive thematic analysis' (RTA). Over the course of numerous publications, Braun and Clarke have elaborated significantly upon the constitution of RTA and attempted to clarify numerous misconceptions that they have found in the literature. This paper will offer a worked example of Braun and Clarke's contemporary approach to reflexive thematic analysis with the aim of helping to dispel some of the confusion regarding the position of RTA among the numerous existing typologies of TA. While the data used in the worked example has been garnered from health and wellbeing education research and was examined to ascertain educators' attitudes regarding such, the example offered of how to implement the RTA would be easily transferable to many other contexts and research topics.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/WE633DXK/Byrne - 2022 - A worked example of Braun and Clarke’s approach to.pdf}
}

@inproceedings{caboSynergiesWritingStories2014,
  title = {Synergies between Writing Stories and Writing Programs in Problem-Solving Courses},
  booktitle = {2014 {{IEEE Frontiers}} in {{Education Conference}} ({{FIE}}) {{Proceedings}}},
  author = {Cabo, Candido and Lansiquot, Reneta D.},
  year = {2014},
  month = oct,
  pages = {1--9},
  publisher = {{IEEE}},
  address = {{Madrid, Spain}},
  doi = {10.1109/FIE.2014.7044133},
  urldate = {2020-06-22},
  abstract = {First-year problem-solving and computer programming courses are gateway courses with low passing rates, resulting in student attrition and transfers out of computer science degrees. Our urban institution serves mostly underrepresented minority students, typically an at-risk population given their minimal previous programming experience and weak mathematical background. We offer a computer problem-solving course (PS) to prepare students in computing and engineering majors for a rigorous first programming course (CS1). Given a change in programming learning context from a programming language to the 3D programming environment Alice, the pass rate increased by 8\% points (from 70\% to 78\%). The higher pass rate in the Alice PS course does not result in a weaker preparation of students for the subsequent CS1 course. Moreover, teaching the Alice PS course as part of an interdisciplinary learning community linked to a first course in English composition with strong narrative components further increases student performance and retention. This intentional interdisciplinary approach to problem solving allows students to purposefully connect and integrate knowledge and skills from across the disciplines, developing synergies between writing stories and writing computer programs.},
  isbn = {978-1-4799-3922-0},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/6I2H5FFB/Cabo and Lansiquot - 2014 - Synergies between writing stories and writing programs in problem-solving.pdf}
}

@phdthesis{cacciarimiraldoTypeSafeGenericDifferencing2020,
  title = {{Type-Safe Generic Differencing of Mutually Recursive Families:}},
  shorttitle = {{Type-Safe Generic Differencing of Mutually Recursive Families}},
  author = {Cacciari Miraldo, Victor},
  year = {2020},
  month = sep,
  doi = {10.33540/237},
  urldate = {2022-03-11},
  langid = {dutch},
  school = {Utrecht University},
  file = {/Users/igormoreno/Zotero/storage/R4Q48P7M/Cacciari Miraldo - 2020 - Type-Safe Generic Differencing of Mutually Recursi.pdf}
}

@inproceedings{caceffoDevelopingComputerScience2016,
  ids = {caceffoDevelopingComputerScience2016a},
  title = {Developing a {{Computer Science Concept Inventory}} for {{Introductory Programming}}},
  booktitle = {Proceedings of the 47th {{ACM Technical Symposium}} on {{Computing Science Education}}  - {{SIGCSE}} '16},
  author = {Caceffo, Ricardo and Wolfman, Steve and Booth, Kellogg S. and Azevedo, Rodolfo},
  year = {2016},
  pages = {364--369},
  publisher = {{ACM Press}},
  address = {{Memphis, Tennessee, USA}},
  doi = {10.1145/2839509.2844559},
  urldate = {2018-10-22},
  abstract = {A Concept Inventory (CI) is a set of multiple choice questions used to reveal student's misconceptions related to some topic. Each available choice (besides the correct choice) is a distractor that is carefully developed to address a specific misunderstanding, a student wrong thought. In computer science introductory programming courses, the development of CIs is still beginning, with many topics requiring further study and analysis. We identify, through analysis of open-ended exams and instructor interviews, introductory programming course misconceptions related to function parameter use and scope, variables, recursion, iteration, structures, pointers and boolean expressions. We categorize these misconceptions and define high-quality distractors founded in words used by students in their responses to exam questions. We discuss the di culty of assessing introductory programming misconceptions independent of the syntax of a language and we present a detailed discussion of two pilot CIs related to parameters: an open-ended question (to help identify new misunderstandings) and a multiple choice question with suggested distractors that we identified.},
  isbn = {978-1-4503-3685-7},
  langid = {english},
  keywords = {computer science,concept inventory,cs1,data structure,introductory,misconception,programming},
  file = {/Users/igormoreno/Zotero/storage/6F7QXA32/Caceffo et al - 2016 - Developing a Computer Science Concept Inventory for Introductory Programming.pdf;/Users/igormoreno/Zotero/storage/CATXVFFB/Caceffo et al. - 2016 - Developing a Computer Science Concept Inventory fo.pdf}
}

@inproceedings{caceffoIdentifyingValidatingJava2019,
  title = {Identifying and {{Validating Java Misconceptions Toward}} a {{CS1 Concept Inventory}}},
  booktitle = {Proceedings of the 2019 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Caceffo, Ricardo and {Frank-Bolton}, Pablo and Souza, Renan and Azevedo, Rodolfo},
  year = {2019},
  month = jul,
  pages = {23--29},
  publisher = {{ACM}},
  address = {{Aberdeen Scotland Uk}},
  doi = {10.1145/3304221.3319771},
  urldate = {2021-01-12},
  abstract = {A misconception is a common misunderstanding that students may have about a specific topic. The identification, documentation, and validation of misconceptions is a long and time-consuming work, usually carried out using iterative cycles of students answering open-ended questionnaires, interviews with instructors and students, exam analysis, and discussion with experts. A comprehensive list of validated misconceptions in some subject can be used to build formal evaluation methods like the Concept Inventory (CI), a multiple-choice questionnaire that is usually performed as pre-post tests in order to assess any change in student understanding. In CS1, validated misconceptions were identified and documented in C and Python programming languages. Although there are studies related to misconceptions in the Java language, these misconceptions lack the formality, comprehensiveness, and robustness of their C and Python counterparts. On this work, we propose a methodology to adapt the validated misconceptions in C and Python to Java. Initially, through the analysis of an initial list of 33 misconceptions in C and 28 in Python, we identified and documented in an antipattern format 31 possible misconceptions in Java. We then developed a final term exam, composed of 7 open-ended questions, in which each question was designed to address some of the misconceptions covered in the course (N = 27). Through the analysis of the exams answers (N = 69 students), it was possible to validate 22 of the misconceptions (81\%). Also, 6 new misconceptions were identified, leading to a total of 28 valid misconceptions in Java.},
  isbn = {978-1-4503-6895-7},
  langid = {english},
  annotation = {00005},
  file = {/Users/igormoreno/Zotero/storage/K3ET794T/Caceffo et al. - 2019 - Identifying and Validating Java Misconceptions Tow.pdf;/Users/igormoreno/Zotero/storage/ZDCR4FUA/ComplementaryMaterial.pdf}
}

@inproceedings{cainFactorsInfluencingStudent2014,
  title = {Factors Influencing Student Learning in Portfolio Assessed Introductory Programming},
  booktitle = {2014 {{IEEE International Conference}} on {{Teaching}}, {{Assessment}} and {{Learning}} for {{Engineering}} ({{TALE}})},
  author = {Cain, Andrew},
  year = {2014},
  month = dec,
  pages = {55--62},
  publisher = {{IEEE}},
  address = {{Wellington, New Zealand}},
  doi = {10.1109/TALE.2014.7062585},
  urldate = {2020-06-22},
  abstract = {Constructive alignment combines constructive learning theories with aligned curriculum to promote deep learning. Using an action research methodology, this work reflects upon twelve iterations, over 6-years, of a project that aimed to implement constructive alignment using portfolio assessment for teaching introductory programming. Student results and staff reflections are used to highlight factors and principles that influenced the teaching and learning environment created. The paper advocates for the use of pragmatic constructive learning theories, aligned curriculum, formative feedback, and a positive view of student motivation. These insights can be used to help guide the development of studentcentered teaching and learning environments.},
  isbn = {978-1-4799-7672-0},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/A3BQE876/Cain - 2014 - Factors influencing student learning in portfolio assessed introductory.pdf}
}

@article{callauHowWhyDevelopers2013,
  title = {How (and Why) Developers Use the Dynamic Features of Programming Languages: The Case of Smalltalk},
  shorttitle = {How (and Why) Developers Use the Dynamic Features of Programming Languages},
  author = {Calla{\'u}, Oscar and Robbes, Romain and Tanter, {\'E}ric and R{\"o}thlisberger, David},
  year = {2013},
  month = dec,
  journal = {Empirical Software Engineering},
  volume = {18},
  number = {6},
  pages = {1156--1194},
  issn = {1573-7616},
  doi = {10.1007/s10664-012-9203-2},
  urldate = {2018-09-25},
  abstract = {The dynamic and reflective features of programming languages are powerful constructs that programmers often mention as extremely useful. However, the ability to modify a program at runtime can be both a boon\textemdash in terms of flexibility\textemdash, and a curse\textemdash in terms of tool support. For instance, usage of these features hampers the design of type systems, the accuracy of static analysis techniques, or the introduction of optimizations by compilers. In this paper, we perform an empirical study of a large Smalltalk codebase\textemdash often regarded as the poster-child in terms of availability of these features\textemdash, in order to assess how much these features are actually used in practice, whether some are used more than others, and in which kinds of projects. In addition, we performed a qualitative analysis of a representative sample of usages of dynamic features in order to uncover (1) the principal reasons that drive people to use dynamic features, and (2) whether and how these dynamic feature usages can be removed or converted to safer usages. These results are useful to make informed decisions about which features to consider when designing language extensions or tool support.},
  langid = {english},
  keywords = {Dynamic languages,Reflection,Smalltalk,Static analysis},
  annotation = {00074},
  file = {/Users/igormoreno/Zotero/storage/87DGJ87U/Callaú et al. - 2013 - How (and why) developers use the dynamic features .pdf}
}

@inproceedings{camilloniUsingGSwE2009Evaluation2015,
  title = {Using {{GSwE2009}} for the Evaluation of a Master Degree in Software Engineering in the Universidad de La Rep\&\#xfa;Blica},
  booktitle = {Proceedings of the 37th {{International Conference}} on {{Software Engineering}} - {{Volume}} 2},
  author = {Camilloni, Luc{\'i}a and Vallespir, Diego and Ardis, Mark},
  year = {2015},
  month = may,
  series = {{{ICSE}} '15},
  pages = {323--332},
  publisher = {{IEEE Press}},
  address = {{Florence, Italy}},
  urldate = {2020-09-22},
  abstract = {This paper presents an adoption and adaptation of the Curriculum Guidelines for Graduate Degree Programs in Software Engineering (GSwE2009) proposed by the IEEE-CS and the ACM for the creation of a curriculum for a Master's degree in software engineering at the Universidad de la Rep\'ublica (Uruguay). A method for evaluating contents and its application is also presented. This evaluation allows us to know the obtained thematic coverage, effort and balance. It also provides information that enables the detection of numerous opportunities for the improvement in the implementation of the program.},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/T8GADDHD/Camilloni et al - 2015 - Using GSwE2009 for the evaluation of a master degree in software engineering in.pdf}
}

@book{campbellExperimentalQuasiexperimentalDesigns1967,
  title = {Experimental and Quasi-Experimental Designs for Research},
  author = {Campbell, Donald Thomas and Stanley, Julian Cecil},
  year = {1967},
  edition = {2. print},
  publisher = {{Houghton Mifflin Comp}},
  address = {{Boston}},
  isbn = {978-0-395-30787-8},
  langid = {english},
  keywords = {Strong},
  annotation = {00000  OCLC: 247359300},
  file = {/Users/igormoreno/Zotero/storage/CC2DR6WP/Campbell and Stanley - 1967 - Experimental and quasi-experimental designs for research.pdf}
}

@inproceedings{canasCmapToolsKnowledgeModeling2004,
  title = {{{CmapTools A Knowledge Modeling}} and {{Sharing Environment}}},
  booktitle = {Proc. of the {{First Int}}. {{Conference}} on {{Concept Mapping}}},
  author = {Ca{\~n}as, Alberto J and Hill, Greg and Carff, Roger and Suri, Niranjan and Lott, James and G{\'o}mez, Gloria and Eskridge, Thomas C and Arroyo, Mario and Carvajal, Rodrigo},
  year = {2004},
  pages = {9},
  address = {{Pamplona, Spain}},
  abstract = {Concept maps are an effective way of representing a person's understanding of a domain of knowledge. Technology can further help by making it easy to construct and modify that representation, to manage large representations for complex domains, and to allow groups of people to share in the construction of the concept maps. CmapTools is a software environment developed at the Institute for Human and Machine Cognition (IHMC) that empowers users, individually or collaboratively, to represent their knowledge using concept maps, to share them with peers and colleagues, and to publish them. It is available for free for educational and not-for-profit organizations, and public servers have been established to promote the sharing of knowledge. The client-server architecture of CmapTools allows easy publishing of the knowledge models in concept map servers (CmapServers), and enables concept maps to be linked to related concept maps and to other types of media (e.g., images, videos, web pages, etc.) in other servers. The collaboration features enable remote users to asynchronously and/or synchronously collaborate in the construction of concept maps, and promote comments, criticism, and peer review. Public CmapServers have resulted in a large collection of knowledge models publicly available, constructed by users of all ages in a variety of domains of knowledge and from a large number of countries.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/AYAXKJMX/Cañas et al - 2004 - CmapTools A Knowledge Modeling and Sharing Environment.pdf}
}

@article{canasMentalModelsComputer1994,
  title = {Mental Models and Computer Programming},
  author = {Ca{\~n}as, Jos{\'e} Juan and Bajo, Maria Teresa and Gonzalvo, Pilar},
  year = {1994},
  month = may,
  journal = {International Journal of Human-Computer Studies},
  volume = {40},
  number = {5},
  pages = {795--811},
  issn = {1071-5819},
  doi = {10.1006/ijhc.1994.1038},
  urldate = {2021-01-08},
  abstract = {Programming is a cognitive activity that requires the learning of new reasoning skills and the understanding of new technical information. Since novices lack domain-specific knowledge, many instructional techniques attempt to provide them with a framework or mental model that can be used for incorporating new information. A major research question concerns how to encourage the acquisition of good mental models and how these models influence the learning process. One possible technique for providing an effective mental model is to use dynamic cues that make transparent to the user all the changes in the variable values, source codes, output, etc., as the program runs. Two groups of novice programmers were used in the experiment. All subjects learned some programming notions in the C language (MIXC). The MIXC version of the programming language provides a debugging facility (C trace) designed to show through a system window all the program components. Subjects were either allowed to use this facility or not allowed to do so. Performance measures of programming and debugging were taken as well as measures directed to assess subjects' mental models. Results showed differences in the way in which the two groups represented and organized programming concepts, although the performance tasks did not show parallel effects.},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/PEXLT64K/Mental_models_and_computer_programming20160927-3361-1r4wxq1.pdf;/Users/igormoreno/Zotero/storage/27QICVKT/S107158198471038X.html}
}

@article{canouScalingFunctionalProgramming2017,
  title = {Scaling up Functional Programming Education: Under the Hood of the {{OCaml MOOC}}},
  shorttitle = {Scaling up Functional Programming Education},
  author = {Canou, Benjamin and Di Cosmo, Roberto and Henry, Gr{\'e}goire},
  year = {2017},
  month = aug,
  journal = {Proceedings of the ACM on Programming Languages},
  volume = {1},
  number = {ICFP},
  pages = {4:1--4:25},
  doi = {10.1145/3110248},
  urldate = {2021-12-17},
  abstract = {This article describes the key innovations used in the massive open online course ``Introduction to Functional Programming using OCaml'' that has run since the fall semester of 2015. A fully in-browser development environment with an integrated grader provides an exceptional level of feedback to the learners. A functional library of grading combinators greatly simplifies the notoriously complex task of writing test suites for the exercises, and provides static type-safety guarantees on the tested user code. Even the error-prone manual process of importing the course content in the learning platform has been replaced by a functional program that describes the course and statically checks its contents. A detailed statistical analysis of the data collected during and after the course assesses the effectiveness of these innovations.},
  keywords = {automated grading,browser based education platform,functional programming,MOOC,programming education,safe program introspection},
  file = {/Users/igormoreno/Zotero/storage/8LLR6NI3/Canou et al - 2017 - Scaling up functional programming education.pdf}
}

@inproceedings{caoImpactPerformanceLevel2017,
  title = {Impact of {{Performance Level}} and {{Group Composition}} on {{Student Learning}} during {{Collaborative Exams}}},
  booktitle = {Proceedings of the 2017 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Cao, Yingjun and Porter, Leo},
  year = {2017},
  month = jun,
  pages = {152--157},
  publisher = {{ACM}},
  address = {{Bologna Italy}},
  doi = {10.1145/3059009.3059024},
  urldate = {2021-06-15},
  abstract = {Collaborative exams have shown promise for improving student learning in computing. Prior studies have focused on benefits for all students, whereas this study seeks to refine our understanding of which students benefit and how group composition impacts that benefit. Using a crossover experimental design, the study first investigates whether students from differing performance levels (low, medium, or high) benefit from the collaborative exam. We find that students in the middle of the class (neither high nor low performers) tend to benefit strongly from the collaborative exam. Second, we explore whether group composition based on performance levels impacts the performance of members of the group. The results suggest more homogeneous groups (i.e., students in the group are at similar performance levels) are beneficial whereas students in groups with high heterogeneity do not experience significant performance differences between the pre-test and post-test.},
  isbn = {978-1-4503-4704-4},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/V4CU7Q2F/Cao e Porter - 2017 - Impact of Performance Level and Group Composition .pdf}
}

@article{cardelliUnderstandingTypesData1985,
  title = {On Understanding Types, Data Abstraction, and Polymorphism},
  author = {Cardelli, Luca and Wegner, Peter},
  year = {1985},
  month = dec,
  journal = {ACM Computing Surveys (CSUR)},
  volume = {17},
  number = {4},
  pages = {471--523},
  issn = {0360-0300, 1557-7341},
  doi = {10.1145/6041.6042},
  urldate = {2020-07-25},
  abstract = {Our objective is to understand the notion of type in programming languages, present a model of typed, polymorphic programming languages that reflects recent research in type theory, and examine the relevance of recent research to the design of practical programming languages.},
  langid = {english},
  annotation = {02758},
  file = {/Users/igormoreno/Zotero/storage/VTTT667A/Cardelli and Wegner - 1985 - On understanding types, data abstraction, and poly.pdf}
}

@book{careyBeginnerGuideScientific2004,
  title = {A {{Beginner}}'s {{Guide}} to {{Scientific Method}}},
  author = {Carey, Stephen S.},
  year = {2004},
  edition = {3},
  publisher = {{Wadsworth/Thomson Learning}},
  address = {{Belmont. CA, USA}},
  isbn = {0-534-58450{$\cdot$}0},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/M2DRCRPP/Carey - 2004 - A Beginner's Guide to Scientific Method.pdf}
}

@book{carterDesigningSciencePresentations2013,
  title = {Designing {{Science Presentations}}: {{A Visual Guide}} to {{Figures}}, {{Papers}}, {{Slides}}, {{Posters}}, and {{More}}},
  shorttitle = {Designing {{Science Presentations}}},
  author = {Carter, Matt},
  year = {2013},
  edition = {1},
  publisher = {{Academic Press}},
  urldate = {2021-12-17},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/H6UC22XH/Carter - 2013 - Designing Science Presentations.pdf}
}

@article{caseStructuresStricturesFunctional1974,
  title = {Structures and Strictures: {{Some}} Functional Limitations on the Course of Cognitive Growth},
  shorttitle = {Structures and Strictures},
  author = {Case, Robbie},
  year = {1974},
  month = oct,
  journal = {Cognitive Psychology},
  volume = {6},
  number = {4},
  pages = {544--574},
  issn = {0010-0285},
  doi = {10.1016/0010-0285(74)90025-5},
  urldate = {2018-12-02},
  abstract = {A functional (as opposed to structural) theory of intellectual development is presented, and used to generate specific performance models for Piagetian tasks involving the control of variables. On the basis of these models, it is concluded that intelligent, field independent 7- and 8-year-olds should be able to acquire the control of variables scheme, even though they have not yet acquired either conservation of weight or the combinatorial system. Preliminary data (n = 52) are presented to support this conclusion. They are discussed with regard to Piaget's formal theory of intellectual development, and the functional limitations of development on learning.},
  file = {/Users/igormoreno/Zotero/storage/ZDFJLVJQ/Case - 1974 - Structures and strictures Some functional limitat.pdf;/Users/igormoreno/Zotero/storage/NSQLDIFH/0010028574900255.html}
}

@phdthesis{caspersenEducatingNovicesSkills2007,
  title = {Educating {{Novices}} in the {{Skills}} of {{Programming}}},
  author = {Caspersen, Michael E},
  year = {2007},
  month = feb,
  abstract = {Programming is recognised as one of seven grand challenges in computing education. Decades of research has shown that the major problems novices experience are composition-based {$\harrowextender$}they do not know what the pieces are and do not know how to put them together. Despite this fact, textbooks, edu- cational practice, and programming education research hardly address the issue of teaching the skills needed for systematic development of programs. We provide a conceptual framework for incremental program development, called stepwise improvement, which unifies best practice in modern software development such as test-driven development and refactoring with the pre- vailing perspective of programming methodology, stepwise refinement. The conceptual framework enables well-defined characterizations of incremental program development; in particular, it enables a notion of degree of correct- ness, which plays a key role in stepwise improvement. We utilize the conceptual framework to provide a derived programming methodology for novices and an instructional design for an introductory pro- gramming course in which stepwise improvement is supported explicitly by the programming process and a model-driven approach to object-oriented programming and implicitly through cautious design of the teaching mate- rial. Our approach is founded in cognitive science and educational psychology, primarily cognitive load theory, cognitive skill acquisition, and cognitive apprenticeship, as well as research in programming methodology.},
  langid = {english},
  school = {University of Aarhus},
  file = {/Users/igormoreno/Zotero/storage/3FHXIDTS/Caspersen - Educating Novices in the Skills of Programming.pdf}
}

@inproceedings{caspersenInstructionalDesignProgramming2007,
  title = {Instructional Design of a Programming Course: A Learning Theoretic Approach},
  shorttitle = {Instructional Design of a Programming Course},
  booktitle = {Proceedings of the Third International Workshop on {{Computing}} Education Research},
  author = {Caspersen, Michael E. and Bennedsen, Jens},
  year = {2007},
  month = sep,
  pages = {111--122},
  publisher = {{ACM}},
  address = {{Atlanta Georgia USA}},
  doi = {10.1145/1288580.1288595},
  urldate = {2023-05-11},
  isbn = {978-1-59593-841-1},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/YM4X99IA/Caspersen and Bennedsen - 2007 - Instructional design of a programming course a le.pdf}
}

@misc{castagnaDesignPrinciplesElixir,
  title = {The {{Design Principles}} of the {{Elixir Type System}}},
  author = {Castagna, Giuseppe}
}

@misc{castagnaDesignPrinciplesElixir2023,
  title = {The {{Design Principles}} of the {{Elixir Type System}}},
  author = {Castagna, Giuseppe and Duboc, Guillaume and Valim, Jos{\'e}},
  year = {2023},
  month = sep,
  number = {arXiv:2306.06391},
  eprint = {2306.06391},
  primaryclass = {cs},
  publisher = {{arXiv}},
  urldate = {2023-11-12},
  abstract = {Elixir is a dynamically-typed functional language running on the Erlang Virtual Machine, designed for building scalable and maintainable applications. Its characteristics have earned it a surging adoption by hundreds of industrial actors and tens of thousands of developers. Static typing seems nowadays to be the most important request coming from the Elixir community. We present a gradual type system we plan to include in the Elixir compiler, outline its characteristics and design principles, and show by some short examples how to use it in practice. Developing a static type system suitable for Erlang's family of languages has been an open research problem for almost two decades. Our system transposes to this family of languages a polymorphic type system with set-theoretic types and semantic subtyping. To do that, we had to improve and extend both semantic subtyping and the typing techniques thereof, to account for several characteristics of these languages\textemdash and of Elixir in particular\textemdash such as the arity of functions, the use of guards, a uniform treatment of records and dictionaries, the need for a new sound gradual typing discipline that does not rely on the insertion at compile time of specific run-time type-tests but, rather, takes into account both the type tests performed by the virtual machine and those explicitly added by the programmer.},
  archiveprefix = {arxiv},
  langid = {english},
  keywords = {Computer Science - Programming Languages},
  file = {/Users/igormoreno/Zotero/storage/7YW7SM7M/Castagna et al. - 2023 - The Design Principles of the Elixir Type System.pdf}
}

@inproceedings{castroBalancingActTheory2019,
  title = {Balancing {{Act}}: {{A Theory}} on the {{Interactions Between High-Level Task-thinking}} and {{Low-Level Implementation-thinking}} of {{Novice Programmers}}},
  shorttitle = {Balancing {{Act}}},
  booktitle = {Proceedings of the 2019 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Castro, Francisco Enrique Vicente and Fisler, Kathi},
  year = {2019},
  month = jul,
  pages = {295--295},
  publisher = {{ACM}},
  doi = {10.1145/3291279.3341204},
  urldate = {2019-10-07},
  isbn = {978-1-4503-6185-9},
  file = {/Users/igormoreno/Zotero/storage/4GDA3NX7/Castro and Fisler - 2019 - Balancing Act.pdf;/Users/igormoreno/Zotero/storage/NLQ55RY6/citation.html}
}

@inproceedings{castroDesigningMultifacetedSOLO2017,
  title = {Designing a {{Multi-faceted SOLO Taxonomy}} to {{Track Program Design Skills Through}} an {{Entire Course}}},
  booktitle = {Proceedings of the 17th {{Koli Calling International Conference}} on {{Computing Education Research}}},
  author = {Castro, Francisco Enrique Vicente and Fisler, Kathi},
  year = {2017},
  series = {Koli {{Calling}} '17},
  pages = {10--19},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3141880.3141891},
  urldate = {2019-09-25},
  abstract = {This paper explores how to assess students' skills in program design and how those skills evolve across an entire CS1 course. We gathered various data from students, including programming samples and transcripts from interview and think-aloud sessions. As we coded the data, a progression resembling a SOLO taxonomy appeared to emerge bottom-up. As we refined this with top-down perspective from our curricular goals, we ended up with a novel multi-faceted SOLO taxonomy to track students' progress. We also identified data that don't fit a SOLO progression, yet reflect relevant traits and habits about design. In applying our framework, we learned several lessons about defining SOLO taxonomies and study protocols that leverage them. The major contributions of this work are (1) a taxonomy with separate but inter-related progressions for different design skills (that is applied to an entire course rather than a single assignment), along with (2) various methodological lessons about applying and designing assessments around SOLO taxonomies in this context.},
  isbn = {978-1-4503-5301-4},
  keywords = {CS1,program design,qualitative methods,SOLO taxonomy,Strong,To Read},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/3XJ8YIA4/Castro and Fisler - 2017 - Designing a Multi-faceted SOLO Taxonomy to Track Program Design Skills Through.pdf}
}

@article{catramboneAcquisitionProceduresEffects2006,
  title = {Acquisition of Procedures: {{The}} Effects of Example Elaborations and Active Learning Exercises},
  shorttitle = {Acquisition of Procedures},
  author = {Catrambone, Richard and Yuasa, Mashiho},
  year = {2006},
  month = apr,
  journal = {Learning and Instruction},
  series = {Recent {{Worked Examples Research}}: {{Managing Cognitive Load}} to {{Foster Learning}} and {{Transfer}}},
  volume = {16},
  number = {2},
  pages = {139--153},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2006.02.002},
  urldate = {2018-11-06},
  abstract = {This study explored the effects of active learning and types of elaboration on procedure acquisition (writing database queries). Training materials emphasized elaborations of conditions for executing actions versus elaborations of the connection between conditions and actions. In the ``active'' conditions, participants performed structured exercises designed to encourage active processing. In the ``passive'' conditions, participants studied examples that contained instructional elaborations. Although excessive instructional information for more knowledgeable learners can hurt performance, our results indicate that condition\textendash action elaborations improved procedural performance the most, in both the active and passive conditions. Active learning required longer training time but was offset by reduced test time.},
  keywords = {Instruction design,Procedure learning,SQL},
  file = {/Users/igormoreno/Zotero/storage/2EYF87J5/Catrambone and Yuasa - 2006 - Acquisition of procedures The effects of example .pdf;/Users/igormoreno/Zotero/storage/JYNZV5AM/S0959475206000168.html}
}

@article{catramboneSubgoalLearningModel1998,
  title = {The Subgoal Learning Model: {{Creating}} Better Examples so That Students Can Solve Novel Problems.},
  shorttitle = {The Subgoal Learning Model},
  author = {Catrambone, Richard},
  year = {1998},
  journal = {Journal of experimental psychology: General},
  volume = {127},
  number = {4},
  pages = {355},
  publisher = {{American Psychological Association}},
  file = {/Users/igormoreno/Zotero/storage/6CU96B4H/Catrambone - 1998 - The subgoal learning model Creating better exampl.pdf;/Users/igormoreno/Zotero/storage/Q67IIQYB/1998-11111-002.html}
}

@article{cazzolaGraduallyLearningProgramming2016,
  ids = {cazzolaGraduallyLearningProgramming2016a},
  title = {Gradually {{Learning Programming Supported}} by a {{Growable Programming Language}}},
  author = {Cazzola, Walter and Olivares, Diego Mathias},
  year = {2016},
  month = jul,
  journal = {IEEE Transactions on Emerging Topics in Computing},
  volume = {4},
  number = {3},
  pages = {404--415},
  issn = {2168-6750},
  doi = {10.1109/TETC.2015.2446192},
  abstract = {Learning programming is a difficult task. The learning process is particularly disorienting when you are approaching programming for the first time. As a student you are exposed to several new concepts (control flow, variable, etc. but also coding, compiling, etc.) and new ways to think (algorithms). Teachers try to expose the students gradually to the new concepts by presenting them one-by-one but the tools at student's disposal do not help: they provide support, suggestion, and documentation for the full programming language of choice hampering the teacher's efforts. On the other side, students need to learn real languages and not didactic languages. In this paper, we propose an approach to gradually teach programming supported by a programming language that grows-together with its implementation-along with the number of concepts presented to the students. The proposed approach can be applied to the teaching of any programming language, and some experiments with Javascript are reported.},
  keywords = {computer science education,Education,gradual learning,Java,Javascript,learning programming,modular development of programming languages,modularity,Problem-solving,programming,programming language,programming languages,Programming profession,programming teaching,Syntactics,teaching,Teaching of programming},
  annotation = {00032},
  file = {/Users/igormoreno/Zotero/storage/MQJN8YMW/Cazzola e Olivares - 2016 - Gradually Learning Programming Supported by a Grow.pdf;/Users/igormoreno/Zotero/storage/V6M7BFJM/Cazzola e Olivares - 2016 - Gradually Learning Programming Supported by a Grow.pdf;/Users/igormoreno/Zotero/storage/68JGFFI9/7132770.html;/Users/igormoreno/Zotero/storage/MTP3Y3UZ/7132770.html}
}

@inproceedings{ceuppensRepresentationalFluencyLinear2017,
  title = {Representational {{Fluency}} of {{Linear Relationships}} in {{Physics}} and {{Mathematics}}},
  booktitle = {European {{Science Education Research Association}} 2017 {{Conference}}},
  author = {Ceuppens, Stijn and Deprez, Johan and Dehaene, Wim and Cock, Mieke De},
  year = {2017},
  month = aug,
  pages = {3},
  address = {{Dublin}},
  abstract = {Representational fluency is the ability to interpret, construct and translate between external representations; it is considered essential to achieve conceptual understanding in mathematics and is hypothesised to be important in conceptual understanding in physics as well. We present a study with 15 \textendash{} 16 year old students on their representational fluency in problems on linear relationships in the contexts of physics and mathematics. A highly structured multiple-choice test was developed and validated with 148 students, with a focus on the six possible transitions between graphical, tabular and algebraic external representations, as well as on four selected combinations of slope and y-intercept sign. Analysis was done by means of Generalised Estimating Equations (GEE) to account for the repeated measurements in each series of individual measurements. Comparing contexts, results show that accuracy in mathematics exceeds accuracy in physics by 10\% overall. Furthermore, we found that a negative sign for slope and/or y-intercept are the most difficult hurdles to overcome in linear relationships. Comparing representations shows that an algebraic representation as either the initial or the target representation in the transition, results in a significantly lower accuracy, and that, on average, the difficulty of the transition between any two of the representations under study is near symmetrical in both directions. More in depth analysis of the interaction effects though, shows that there is a range of significant interactions between representation transition, context and slope and y-intercept sign. These findings can be used to support teachers' practices and the design of student activities with a particular focus on contextual differences.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/EBCQ3HI3/Ceuppens et al - 2017 - Representational Fluency of Linear Relationships in Physics and Mathematics.pdf}
}

@inproceedings{chaffinExperimentalEvaluationTeaching2009,
  title = {Experimental Evaluation of Teaching Recursion in a Video Game},
  booktitle = {Proceedings of the 2009 {{ACM SIGGRAPH Symposium}} on {{Video Games}} - {{Sandbox}} '09},
  author = {Chaffin, Amanda and Doran, Katelyn and Hicks, Drew and Barnes, Tiffany},
  year = {2009},
  pages = {79},
  publisher = {{ACM Press}},
  address = {{New Orleans, Louisiana}},
  doi = {10.1145/1581073.1581086},
  urldate = {2018-11-30},
  abstract = {We present EleMental: The Recurrence, a novel game that provides computer science students the opportunity to write code and perform interactive visualizations to learn about recursion through depth-first search of a binary tree. We designed the game to facilitate maximum transfer of learning to writing real programs, while also providing for interactive visualizations. We conducted a study with computer science majors to measure the impact of the game on learning and on attitudes toward educational games. Our results demonstrate the enthusiasm students have for learning games and provide insight into how such games should be constructed.},
  isbn = {978-1-60558-514-7},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/KI5G7C2H/Chaffin et al - 2009 - Experimental evaluation of teaching recursion in a video game.pdf}
}

@inproceedings{chakravartyAssociatedTypesClass2005,
  title = {Associated {{Types}} with {{Class}}},
  booktitle = {Proceedings of the {{32Nd ACM SIGPLAN-SIGACT Symposium}} on {{Principles}} of {{Programming Languages}}},
  author = {Chakravarty, Manuel M. T. and Keller, Gabriele and Jones, Simon Peyton and Marlow, Simon},
  year = {2005},
  series = {{{POPL}} '05},
  pages = {1--13},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1040305.1040306},
  urldate = {2019-06-28},
  abstract = {Haskell's type classes allow ad-hoc overloading, or type-indexing, of functions. A natural generalisation is to allow type-indexing of data types as well. It turns out that this idea directly supports a powerful form of abstraction called associated types, which are available in C++ using traits classes. Associated types are useful in many applications, especially for self-optimising libraries that adapt their data representations and algorithms in a type-directed manner.In this paper, we introduce and motivate associated types as a rather natural generalisation of Haskell's existing type classes. Formally, we present a type system that includes a type-directed translation into an explicitly typed target language akin to System F; the existence of this translation ensures that the addition of associated data types to an existing Haskell compiler only requires changes to the front end.},
  isbn = {978-1-58113-830-6},
  keywords = {associated types,self-optimising libraries,type classes,type-directed translation,type-indexed types},
  annotation = {00209},
  file = {/Users/igormoreno/Zotero/storage/K8R8BFMK/Chakravarty et al. - 2005 - Associated Types with Class.pdf}
}

@inproceedings{chakravartyAssociatedTypeSynonyms2005,
  title = {Associated {{Type Synonyms}}},
  booktitle = {Proceedings of the {{Tenth ACM SIGPLAN International Conference}} on {{Functional Programming}}},
  author = {Chakravarty, Manuel M. T. and Keller, Gabriele and Jones, Simon Peyton},
  year = {2005},
  series = {{{ICFP}} '05},
  pages = {241--253},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1086365.1086397},
  urldate = {2019-06-27},
  abstract = {Haskell programmers often use a multi-parameter type class in which one or more type parameters are functionally dependent on the first. Although such functional dependencies have proved quite popular in practice, they express the programmer's intent somewhat indirectly. Developing earlier work on associated data types, we propose to add functionally dependent types as type synonyms to type-class bodies. These associated type synonyms constitute an interesting new alternative to explicit functional dependencies.},
  isbn = {978-1-59593-064-4},
  keywords = {associated types,generic programming,type classes,type functions,type inference},
  annotation = {00219},
  file = {/Users/igormoreno/Zotero/storage/K3X7ZUHF/Chakravarty et al. - 2005 - Associated Type Synonyms.pdf;/Users/igormoreno/Zotero/storage/L53UQ6N7/Chakravarty et al. - 2005 - Associated Type Synonyms.pdf}
}

@article{chakravartyAssociatedTypeSynonyms2005a,
  title = {Associated Type Synonyms},
  author = {Chakravarty, Manuel M. T. and Keller, Gabriele and Jones, Simon Peyton},
  year = {2005},
  month = sep,
  journal = {ACM SIGPLAN Notices},
  volume = {40},
  number = {9},
  pages = {241--253},
  issn = {0362-1340},
  doi = {10.1145/1090189.1086397},
  urldate = {2020-02-19},
  abstract = {Haskell programmers often use a multi-parameter type class in which one or more type parameters are functionally dependent on the first. Although such functional dependencies have proved quite popular in practice, they express the programmer's intent somewhat indirectly. Developing earlier work on associated data types, we propose to add functionally dependent types as type synonyms to type-class bodies. These associated type synonyms constitute an interesting new alternative to explicit functional dependencies.},
  keywords = {associated types,generic programming,type classes,type functions,type inference},
  annotation = {00240},
  file = {/Users/igormoreno/Zotero/storage/3C3XG3PK/Chakravarty et al. - 2005 - Associated type synonyms.pdf}
}

@article{chakravartyRisksBenefitsTeaching2004,
  title = {The {{Risks}} and {{Benefits}} of {{Teaching Purely Functional Programming}} in {{First Year}}},
  author = {Chakravarty, Manuel M. T. and Keller, Gabriele},
  year = {2004},
  month = jan,
  journal = {J. Funct. Program.},
  volume = {14},
  number = {1},
  pages = {113--123},
  issn = {0956-7968},
  doi = {10.1017/S0956796803004805},
  urldate = {2019-07-09},
  abstract = {We argue that teaching purely functional programming as such in freshman courses is detrimental to both the curriculum as well as to promoting the paradigm. Instead, we need to focus on the more general aims of teaching elementary techniques of programming and essential concepts of computing. We support this viewpoint with experience gained during several semesters of teaching large first-year classes (up to 600 students) in Haskell. These classes consisted of computer science students as well as students from other disciplines. We have systematically gathered student feedback by conducting surveys after each semester. This article contributes an approach to the use of modern functional languages in first year courses and, based on this, advocates the use of functional languages in this setting.},
  annotation = {00039},
  file = {/Users/igormoreno/Zotero/storage/N2PVPLF9/Chakravarty and Keller - 2004 - The risks and benefits of teaching purely function.pdf;/Users/igormoreno/Zotero/storage/VQP38ZJX/39F929A1793B67BCEF316DBDB717F273.html}
}

@article{chakravartyRisksBenefitsTeaching2004a,
  title = {The Risks and Benefits of Teaching Purely Functional Programming in First Year},
  author = {Chakravarty, Manuel M. T. and Keller, Gabriele},
  year = {2004},
  month = jan,
  journal = {Journal of Functional Programming},
  volume = {14},
  number = {1},
  pages = {113--123},
  publisher = {{Cambridge University Press}},
  issn = {1469-7653, 0956-7968},
  doi = {10.1017/S0956796803004805},
  urldate = {2022-04-11},
  abstract = {We argue that teaching purely functional programming as such in freshman courses is detrimental to both the curriculum as well as to promoting the paradigm. Instead, we need to focus on the more general aims of teaching elementary techniques of programming and essential concepts of computing. We support this viewpoint with experience gained during several semesters of teaching large first-year classes (up to 600 students) in Haskell. These classes consisted of computer science students as well as students from other disciplines. We have systematically gathered student feedback by conducting surveys after each semester. This article contributes an approach to the use of modern functional languages in first year courses and, based on this, advocates the use of functional languages in this setting.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/PSNEG6HB/Chakravarty and Keller - 2004 - The risks and benefits of teaching purely function.pdf;/Users/igormoreno/Zotero/storage/96DD2IBL/39F929A1793B67BCEF316DBDB717F273.html}
}

@misc{Chalkdiagrams,
  title = {Chalk-Diagrams},
  urldate = {2023-02-05},
  howpublished = {https://chalk-diagrams.github.io/},
  file = {/Users/igormoreno/Zotero/storage/6CC7STRK/chalk-diagrams.github.io.html}
}

@article{chamberlandSelfExplanationInstructionalStrategy2015,
  title = {Self-{{Explanation}}, {{An Instructional Strategy}} to {{Foster Clinical Reasoning}} in {{Medical Students}}},
  author = {Chamberland, Martine and Mamede, S{\'i}lvia},
  year = {2015},
  month = dec,
  journal = {Health Professions Education},
  volume = {1},
  number = {1},
  pages = {24--33},
  issn = {2452-3011},
  doi = {10.1016/j.hpe.2015.11.005},
  urldate = {2018-11-06},
  abstract = {Clinical reasoning is a critical and complex skill that medical students have to develop in the course of their training. Although research on medical expertise has successfully examined the different components of that skill, designing educational interventions that support the development of clinical reasoning in students remains a challenge for medical educators. The theory of medical expertise describes how students׳ medical knowledge develops and is progressively restructured during their training and in particular through clinical exposure to patient problems. Instructional strategies to foster students' learning from practice with clinical cases are scarce. This article describes the use of self-explanation as such a strategy. Self-explanation is an active learning technique of proven effectiveness in other domains which consists of having students explaining to themselves information on to-be-learned materials. The mechanisms through which self-explanation fosters learning are described. Self-explanation promotes knowledge development and revision of mental representations through elaboration on new information, organisation and integration of new knowledge into existing cognitive structures and monitoring of the learning process. Subsequently, the article shows how self-explanation has recently been investigated in medicine as an instructional strategy to support students׳ clinical reasoning. Available studies have demonstrated that students׳ diagnostic performance improves when they use self-explanation while solving clinical problems of a less familiar clinical topic. Unfamiliarity seems to trigger more self-explanations and to stimulate students to reactivate relevant biomedical knowledge, which could lead to the development of more coherent representations of diseases. The benefit of students׳ self-explanation is increased when it is combined with listening to residents׳ self-explanation examples and with prompts. The positive effect of self-explanation gets stronger when students׳ diagnostic performance is tested on far-transfer clinical cases, suggesting that deeper understanding and meaningful learning do occur. Self-explanation is a practical and inexpensive technique which could be incorporated into learning activities using clinical problems to promote diagnostic reasoning of medical students. Even though self-explanation is a promising learning technique, further studies are needed to explore other conditions that could maximise its benefit on learning clinical reasoning.},
  keywords = {Clinical education,Clinical reasoning,Learning activity,Medical education,Self-explanation},
  file = {/Users/igormoreno/Zotero/storage/R8FAGYVB/Chamberland and Mamede - 2015 - Self-Explanation, An Instructional Strategy to Foster Clinical Reasoning in.pdf;/Users/igormoreno/Zotero/storage/NRLX2ZWC/S2452301115000061.html}
}

@article{chambersGenderPriorKnowledge1997,
  title = {Gender, Prior Knowledge, Interest, and Experience in Electricity and Conceptual Change Text Manipulations in Learning about Direct Current},
  author = {Chambers, Sharon K. and Andre, Thomas},
  year = {1997},
  journal = {Journal of Research in Science Teaching},
  volume = {34},
  number = {2},
  pages = {107--123},
  issn = {1098-2736},
  doi = {10.1002/(SICI)1098-2736(199702)34:2<107::AID-TEA2>3.0.CO;2-X},
  urldate = {2021-03-21},
  abstract = {The present study investigated relationships between gender, interest and experience in electricity, and conceptual change text manipulations on learning fundamental direct current concepts. Conceptual change text has been shown to lead to better conceptual understanding of electrical concepts than traditional didactic text, but previous research suggested that the effect interacted with the gender of the participants. We hypothesized that interest moderated this interaction. In this study, men and women who had higher or lower interest in electricity and greater or lessor experience with electricity read conceptual change or traditional text. When interest level, experience, and prior knowledge were not included in the analysis, both gender and text type produced significant main effects. When interest level, experience, and prior knowledge were included in the analysis, conceptual change text led to better understanding of electricity concepts than did the traditional text, and the effect of gender was eliminated. This finding supports the hypothesis that prior interest level, experience, and knowledge mediate apparent gender differences in learning about electricity. It suggests that conceptual change text manipulations are likely to be effective for both men and women. \textcopyright{} 1997 John Wiley \& Sons, Inc. J Res Sci Teach 34: 107\textendash 123, 1997.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/UCKTNW5L/Chambers e Andre - 1997 - Gender, prior knowledge, interest, and experience .pdf;/Users/igormoreno/Zotero/storage/U9PBJD4B/(SICI)1098-2736(199702)342107AID-TEA23.0.html}
}

@article{champagnequelozDiagnosticStudentsMisconceptions2017,
  title = {Diagnostic of Students' Misconceptions Using the {{Biological Concepts Instrument}} ({{BCI}}): {{A}} Method for Conducting an Educational Needs Assessment},
  shorttitle = {Diagnostic of Students' Misconceptions Using the {{Biological Concepts Instrument}} ({{BCI}})},
  author = {Champagne Queloz, Annie and Klymkowsky, Michael W. and Stern, Elsbeth and Hafen, Ernst and K{\"o}hler, Katja},
  editor = {{Hermes-Lima}, Marcelo},
  year = {2017},
  month = may,
  journal = {PLOS ONE},
  volume = {12},
  number = {5},
  pages = {e0176906},
  issn = {1932-6203},
  doi = {10.1371/journal.pone.0176906},
  urldate = {2018-10-22},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/CETMHVX6/Champagne Queloz et al - 2017 - Diagnostic of students' misconceptions using the Biological Concepts Instrument.pdf}
}

@article{chandlerCrucialRoleCognitive2004,
  title = {The Crucial Role of Cognitive Processes in the Design of Dynamic Visualizations},
  author = {Chandler, Paul},
  year = {2004},
  month = jun,
  journal = {Learning and Instruction},
  series = {Dynamic {{Visualisations}} and {{Learning}}},
  volume = {14},
  number = {3},
  pages = {353--357},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2004.06.009},
  urldate = {2018-11-06},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/SDPNEBGK/Chandler - 2004 - The crucial role of cognitive processes in the design of dynamic visualizations.pdf;/Users/igormoreno/Zotero/storage/HVGGNCDB/S0959475204000374.html}
}

@article{chaoDynamicMentalModel2018,
  ids = {chaoDynamicMentalModel2018b},
  title = {Dynamic {{Mental Model Construction}}: {{A Knowledge}} in {{Pieces-Based Explanation}} for {{Computing Students}}' {{Erratic Performance}} on {{Recursion}}},
  shorttitle = {Dynamic {{Mental Model Construction}}},
  author = {Chao, Jie and Feldon, David F. and Cohoon, James P.},
  year = {2018},
  month = jul,
  journal = {Journal of the Learning Sciences},
  volume = {27},
  number = {3},
  pages = {431--473},
  issn = {1050-8406, 1532-7809},
  doi = {10.1080/10508406.2017.1392309},
  urldate = {2020-08-30},
  langid = {english},
  keywords = {RecommendedByMarkGuzdial,To Read},
  annotation = {00004},
  file = {/Users/igormoreno/Zotero/storage/6NPBG5DU/Chao et al - 2018 - Dynamic Mental Model Construction.pdf;/Users/igormoreno/Zotero/storage/IHRQI5Q9/Gallidabino.pdf;/Users/igormoreno/Zotero/storage/RW4AEMPT/Chao et al. - 2018 - Dynamic Mental Model Construction A Knowledge in .pdf;/Users/igormoreno/Zotero/storage/UCG22KQ7/Igors-copy.pdf;/Users/igormoreno/Zotero/storage/XHKPFUM6/Original.pdf;/Users/igormoreno/Zotero/storage/YNNML3TP/Chao et al. - 2018 - Dynamic Mental Model Construction A Knowledge in .pdf;/Users/igormoreno/Zotero/storage/4ZDI5FPH/10508406.2017.html}
}

@article{chaoExploringStudentsComputational2016,
  title = {Exploring Students' Computational Practice, Design and Performance of Problem-Solving through a Visual Programming Environment},
  author = {Chao, Po-Yao},
  year = {2016},
  month = apr,
  journal = {Computers \& Education},
  volume = {95},
  pages = {202--215},
  issn = {0360-1315},
  doi = {10.1016/j.compedu.2016.01.010},
  urldate = {2018-12-02},
  abstract = {This study aims to advocate that a visual programming environment offering graphical items and states of a computational problem could be helpful in supporting programming learning with computational problem-solving. A visual problem-solving environment for programming learning was developed, and 158 college students were conducted in a computational problem-solving activity. The students' activities of designing, composing, and testing solutions were recorded by log data for later analysis. To initially unveil the students' practice and strategies exhibited in the visual problem-solving environment, this study proposed several indicators to quantitatively represent students' computational practice (Sequence, Selection, Simple iteration, Nested iteration, and Testing), computational design (Problem decomposition, Abutment composition, and Nesting composition), and computational performance (Goal attainment and Program size). By the method of cluster analysis, some empirical patterns regarding the students' programming learning with computational problem-solving were identified. Furthermore, comparisons of computational design and computational performance among the different patterns of computational practice were conducted. Considering the relations of students' computational practice to computational design and performance, evidence-based suggestions on the design of supportive programming environments for novice programmers are discussed.},
  keywords = {Computer programming,Students programming patterns,Visual problem solving},
  annotation = {00081},
  file = {/Users/igormoreno/Zotero/storage/5TWGBV4P/Chao - 2016 - Exploring students' computational practice, design.pdf;/Users/igormoreno/Zotero/storage/8CSNGNPR/Chao - 2016 - Exploring students' computational practice, design and performance of.pdf;/Users/igormoreno/Zotero/storage/BKDAQL6Q/S0360131516300161.html}
}

@phdthesis{chaoPhenomenologicalPrimitivesIntroductory2012,
  title = {Phenomenological Primitives in Introductory Computer Science Students' Understanding of Recursion},
  author = {Chao, Jie},
  year = {2012},
  month = aug,
  urldate = {2020-10-04},
  abstract = {Recursion is a difficult concept to learn in introductory computer science courses. Students frequently construct maladaptive mental models of recursion that interfere with their performance and subsequent skill development. Common explanations assume that these mental models are not decomposable mental structures. However, such an assumption fails to account for the inconsistent manifestation of these mental models across similar tasks. This study applies the knowledge-in-pieces perspective (diSessa, 1993) to explain students' inconsistent performance on evaluation of recursive function. According to this perspective, phenomenological primitives (p-prims), experientially acquired tacit elemental knowledge structures, play dominant roles in na\"ive knowledge systems. Various task features may differentially constrain their influence, which renders them productive in some instances and problematic in others. This subtle mechanism gives rise to the inconsistent performance across tasks that target the same concept. Reanalysis of data from previous studies suggests a potential p-prim that plausibly accounts for students' inconsistent performance within and across similar tasks. This p-prim reflects intuitive understandings of agentive causality (i.e. agent takes an action on a patient to generate certain effect) that commonly account for misunderstandings in physics concepts (diSessa, 1993). To evaluate this general hypothesis of a computer-as-agent p-prim, participants completed four tasks representing varying levels of constraint on their reasoning and participated in clinical interviews to report and explain their thought processes. It was expected that more participants would demonstrate the normative mental models of recursion in the high-constraint tasks than in the low-constraint tasks, because the computer-as-agent p-prim would be more likely to interfere with appropriate analysis under lower constraint. Further, participants' interpretations of the recursive functions were expected to demonstrate characteristics associated with p-prim-generated interpretations. Results largely support the hypothesized p-prim. Participants' inconsistent performances were successfully explained by various modes of coordination between the computer-as-agent p-prim and relevant programming schemas. This finding advanced our understanding of students' difficulties in learning recursive programming and pointed to ways to improve instructional practices.},
  langid = {english},
  school = {University of Virginia},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/2WUYMAL6/Phenomenological primitives in introductory comput.pdf;/Users/igormoreno/Zotero/storage/IYMBB2BM/313599207_Phenomenological_primitives_in_introductory_computer_science_students'_understanding_.html}
}

@article{chapinNewFormatFlowcharts1974,
  title = {New Format for Flowcharts},
  author = {Chapin, Ned},
  year = {1974},
  journal = {Software: Practice and Experience},
  volume = {4},
  number = {4},
  pages = {341--357},
  issn = {1097-024X},
  doi = {10.1002/spe.4380040404},
  urldate = {2021-06-06},
  abstract = {This paper proposes a new chart format as an alternative for the flow diagram variety of flowchart. This new chart format is more informative, more compact and easier to use and draw than the ANS format, and facilitates modularization in design and programming. The new chart format supports restrictions on control transfers, and clearly identifies the control structures used in structured programming. The new chart format also permits showing multiple levels of detail unambiguously in a single flowchart, and enables HIPO charts and system charts to be usefully augmented.},
  copyright = {Copyright \textcopyright{} 1974 John Wiley \& Sons, Ltd},
  langid = {english},
  keywords = {ANS flowchart standard,Flow diagram,Flowchart,Structured programming,System chart},
  file = {/Users/igormoreno/Zotero/storage/KQT6AWXF/spe.html}
}

@inproceedings{charitsisDetectingReasonsProgram2023,
  title = {Detecting the {{Reasons}} for {{Program Decomposition}} in {{CS1}} and {{Evaluating Their Impact}}},
  booktitle = {Proceedings of the 54th {{ACM Technical Symposium}} on {{Computer Science Education V}}. 1},
  author = {Charitsis, Charis and Piech, Chris and Mitchell, John C.},
  year = {2023},
  month = mar,
  pages = {1014--1020},
  publisher = {{ACM}},
  address = {{Toronto ON Canada}},
  doi = {10.1145/3545945.3569763},
  urldate = {2023-03-16},
  abstract = {Decomposition is considered one of the four cornerstones of computational thinking, which is essential to software development [36]. It requires the ability to assess a problem at a high level, develop a strategy to combat it, and then design a solution. Our study focuses on the metacognitive aspect of decomposition. We try to understand the learner's thought process and, specifically, what makes the novice programmer decide to break down a function.},
  isbn = {978-1-4503-9431-4},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/PSVWDVJB/Charitsis et al. - 2023 - Detecting the Reasons for Program Decomposition in.pdf}
}

@inproceedings{charitsisDetectingReasonsProgram2023a,
  title = {Detecting the {{Reasons}} for {{Program Decomposition}} in {{CS1}} and {{Evaluating Their Impact}}},
  booktitle = {Proceedings of the 54th {{ACM Technical Symposium}} on {{Computer Science Education V}}. 1},
  author = {Charitsis, Charis and Piech, Chris and Mitchell, John C.},
  year = {2023},
  month = mar,
  pages = {1014--1020},
  publisher = {{ACM}},
  address = {{Toronto ON Canada}},
  doi = {10.1145/3545945.3569763},
  urldate = {2023-03-16},
  abstract = {Decomposition is considered one of the four cornerstones of computational thinking, which is essential to software development [36]. It requires the ability to assess a problem at a high level, develop a strategy to combat it, and then design a solution. Our study focuses on the metacognitive aspect of decomposition. We try to understand the learner's thought process and, specifically, what makes the novice programmer decide to break down a function.},
  isbn = {978-1-4503-9431-4},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/WHUNKMBQ/Charitsis et al. - 2023 - Detecting the Reasons for Program Decomposition in.pdf}
}

@inproceedings{charitsisUsingNLPQuantify2022,
  title = {Using {{NLP}} to {{Quantify Program Decomposition}} in {{CS1}}},
  booktitle = {Proceedings of the {{Ninth ACM Conference}} on {{Learning}} @ {{Scale}}},
  author = {Charitsis, Charis and Piech, Chris and Mitchell, John C.},
  year = {2022},
  month = jun,
  pages = {113--120},
  publisher = {{ACM}},
  address = {{New York City NY USA}},
  doi = {10.1145/3491140.3528272},
  urldate = {2023-03-16},
  abstract = {Decomposition is a problem-solving technique that is essential to software development. Nonetheless, it is perceived as the most challenging programming skill for learners to master [31]. Researchers have studied decomposition in introductory programming courses through guided experiments, case studies, and surveys. We believe that the rapid advancements in scientific fields such as machine learning and natural language processing (NLP) opened up opportunities for more scalable approaches. We study the relationship between problem-related entities and functional decomposition. We use an automated system to collect 78,500 code snapshots from two CS1 programming assignments of 250 students and then apply NLP techniques to quantify the learner's ability to break down a problem into a series of smaller, more straightforward tasks. We compare different behaviors and evaluate at scale the impact of decomposition on the time it takes to deliver the solution, its complexity, and the student's performance in the assignment and the course exams. Finally, we discuss the implications of our results for teaching and future research.},
  isbn = {978-1-4503-9158-0},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/IVVY4EPQ/Charitsis et al. - 2022 - Using NLP to Quantify Program Decomposition in CS1.pdf}
}

@inproceedings{charitsisUsingNLPQuantify2022a,
  title = {Using {{NLP}} to {{Quantify Program Decomposition}} in {{CS1}}},
  booktitle = {Proceedings of the {{Ninth ACM Conference}} on {{Learning}} @ {{Scale}}},
  author = {Charitsis, Charis and Piech, Chris and Mitchell, John C.},
  year = {2022},
  month = jun,
  pages = {113--120},
  publisher = {{ACM}},
  address = {{New York City NY USA}},
  doi = {10.1145/3491140.3528272},
  urldate = {2023-03-16},
  abstract = {Decomposition is a problem-solving technique that is essential to software development. Nonetheless, it is perceived as the most challenging programming skill for learners to master [31]. Researchers have studied decomposition in introductory programming courses through guided experiments, case studies, and surveys. We believe that the rapid advancements in scientific fields such as machine learning and natural language processing (NLP) opened up opportunities for more scalable approaches. We study the relationship between problem-related entities and functional decomposition. We use an automated system to collect 78,500 code snapshots from two CS1 programming assignments of 250 students and then apply NLP techniques to quantify the learner's ability to break down a problem into a series of smaller, more straightforward tasks. We compare different behaviors and evaluate at scale the impact of decomposition on the time it takes to deliver the solution, its complexity, and the student's performance in the assignment and the course exams. Finally, we discuss the implications of our results for teaching and future research.},
  isbn = {978-1-4503-9158-0},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/9JNH737H/Charitsis et al. - 2022 - Using NLP to Quantify Program Decomposition in CS1.pdf}
}

@article{chenAnalyzingProductiveLearning2018,
  title = {Analyzing Productive Learning Behaviors for Students Using Immediate Corrective Feedback in a Blended Learning Environment},
  author = {Chen, Xin and Breslow, Lori and DeBoer, Jennifer},
  year = {2018},
  month = feb,
  journal = {Computers \& Education},
  volume = {117},
  pages = {59--74},
  issn = {03601315},
  doi = {10.1016/j.compedu.2017.09.013},
  urldate = {2018-11-06},
  abstract = {Undergraduate classes in many science and engineering courses are utilizing asynchronous computer platforms to host educational materials such as lecture videos or discussion forums. These platforms also have the ability to provide immediate feedback to students on formative assessment tasks such as homework problems, reading questions, or weekly quizzes. Although there have been a number of studies on computer-based feedback, there is more we need to know about how students interact with immediate feedback, and how those interactions influence their learning. In this study, we characterize introductory physics students' interactions with one computer-based immediate simple corrective feedback tool, the ``checkable answer feature'' (CAF), powered by the institutional version of the edX platform. We investigate how much students interact with the CAF, the patterns of interaction, and, ultimately, how these patterns are associated with course performance. We utilize rich quantitative data, including a large volume of server tracking logs that show students' use the CAF, as well as performance metrics. Our findings show certain patterns of engagement with feedback reflect productive study strategies and significantly predict higher performance. The findings provide guidance for instructional practice and the continued development of online feedback tools in introductory STEM courses.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/BT97Y8ZQ/Chen et al - 2018 - Analyzing productive learning behaviors for students using immediate corrective.pdf}
}

@misc{chenEvaluatingLargeLanguage2021,
  title = {Evaluating {{Large Language Models Trained}} on {{Code}}},
  author = {Chen, Mark and Tworek, Jerry and Jun, Heewoo and Yuan, Qiming and Pinto, Henrique Ponde de Oliveira and Kaplan, Jared and Edwards, Harri and Burda, Yuri and Joseph, Nicholas and Brockman, Greg and Ray, Alex and Puri, Raul and Krueger, Gretchen and Petrov, Michael and Khlaaf, Heidy and Sastry, Girish and Mishkin, Pamela and Chan, Brooke and Gray, Scott and Ryder, Nick and Pavlov, Mikhail and Power, Alethea and Kaiser, Lukasz and Bavarian, Mohammad and Winter, Clemens and Tillet, Philippe and Such, Felipe Petroski and Cummings, Dave and Plappert, Matthias and Chantzis, Fotios and Barnes, Elizabeth and {Herbert-Voss}, Ariel and Guss, William Hebgen and Nichol, Alex and Paino, Alex and Tezak, Nikolas and Tang, Jie and Babuschkin, Igor and Balaji, Suchir and Jain, Shantanu and Saunders, William and Hesse, Christopher and Carr, Andrew N. and Leike, Jan and Achiam, Josh and Misra, Vedant and Morikawa, Evan and Radford, Alec and Knight, Matthew and Brundage, Miles and Murati, Mira and Mayer, Katie and Welinder, Peter and McGrew, Bob and Amodei, Dario and McCandlish, Sam and Sutskever, Ilya and Zaremba, Wojciech},
  year = {2021},
  month = jul,
  number = {arXiv:2107.03374},
  eprint = {2107.03374},
  primaryclass = {cs},
  publisher = {{arXiv}},
  urldate = {2022-10-18},
  abstract = {We introduce Codex, a GPT language model fine-tuned on publicly available code from GitHub, and study its Python code-writing capabilities. A distinct production version of Codex powers GitHub Copilot. On HumanEval, a new evaluation set we release to measure functional correctness for synthesizing programs from docstrings, our model solves 28.8\% of the problems, while GPT-3 solves 0\% and GPT-J solves 11.4\%. Furthermore, we find that repeated sampling from the model is a surprisingly effective strategy for producing working solutions to difficult prompts. Using this method, we solve 70.2\% of our problems with 100 samples per problem. Careful investigation of our model reveals its limitations, including difficulty with docstrings describing long chains of operations and with binding operations to variables. Finally, we discuss the potential broader impacts of deploying powerful code generation technologies, covering safety, security, and economics.},
  archiveprefix = {arxiv},
  keywords = {Computer Science - Machine Learning},
  file = {/Users/igormoreno/Zotero/storage/MSZACQ76/Chen et al. - 2021 - Evaluating Large Language Models Trained on Code.pdf;/Users/igormoreno/Zotero/storage/FZVFJTGN/2107.html}
}

@inproceedings{cheneyPracticalTheoryLanguageintegrated2013,
  title = {A Practical Theory of Language-Integrated Query},
  booktitle = {Proceedings of the 18th {{ACM SIGPLAN}} International Conference on {{Functional}} Programming},
  author = {Cheney, James and Lindley, Sam and Wadler, Philip},
  year = {2013},
  month = sep,
  series = {{{ICFP}} '13},
  pages = {403--416},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2500365.2500586},
  urldate = {2022-09-13},
  abstract = {Language-integrated query is receiving renewed attention, in part because of its support through Microsoft's LINQ framework. We present a practical theory of language-integrated query based on quotation and normalisation of quoted terms. Our technique supports join queries, abstraction over values and predicates, composition of queries, dynamic generation of queries, and queries with nested intermediate data. Higher-order features prove useful even for constructing first-order queries. We prove a theorem characterising when a host query is guaranteed to generate a single SQL query. We present experimental results confirming our technique works, even in situations where Microsoft's LINQ framework either fails to produce an SQL query or, in one case, produces an avalanche of SQL queries.},
  isbn = {978-1-4503-2326-0},
  keywords = {antiquotation,f\#,lambda calculus,linq,quotation,sql},
  file = {/Users/igormoreno/Zotero/storage/VRB9CIVF/Cheney et al. - 2013 - A practical theory of language-integrated query.pdf}
}

@article{chengPragmaticReasoningSchemas1985,
  title = {Pragmatic Reasoning Schemas},
  author = {Cheng, Patricia W and Holyoak, Keith J},
  year = {1985},
  month = oct,
  journal = {Cognitive Psychology},
  volume = {17},
  number = {4},
  pages = {391--416},
  issn = {0010-0285},
  doi = {10.1016/0010-0285(85)90014-3},
  urldate = {2018-12-02},
  abstract = {We propose that people typically reason about realistic situations using neither content-free syntactic inference rules nor representations of specific experiences. Rather, people reason using knowledge structures that we term pragmatic reasoning schemas, which are generalized sets of rules defined in relation to classes of goals. Three experiments examined the impact of a ``permission schema'' on deductive reasoning. Experiment 1 demonstrated that by evoking the permission schema it is possible to facilitate performance in Wason's selection paradigm for subjects who have had no experience with the specific content of the problems. Experiment 2 showed that a selection problem worded in terms of an abstract permission elicited better performance than one worded in terms of a concrete but arbitrary situation, providing evidence for an abstract permission schema that is free of domain-specific content. Experiment 3 provided evidence that evocation of a permission schema affects not only tasks requiring procedural knowledge, but also a linguistic rephrasing task requiring declarative knowledge. In particular, statements in the form if p then q were rephrased into the form p only if q with greater frequency for permission than for arbitrary statements, and rephrasings of permission statements produced a pattern of introduction of modals (must, can) totally unlike that observed for arbitrary conditional statements. Other pragmatic schemas, such as ``causal'' and ``evidence'' schemas can account for both linguistic and reasoning phenomena that alternative hypotheses fail to explain.},
  file = {/Users/igormoreno/Zotero/storage/IA7UL2C3/Cheng and Holyoak - 1985 - Pragmatic reasoning schemas.pdf;/Users/igormoreno/Zotero/storage/KHS2VNEF/0010028585900143.html}
}

@incollection{chettyCombattingWarMachines2017,
  title = {Combatting the {{War Against Machines}}: {{An Innovative Hands-on Approach}} to {{Coding}}},
  shorttitle = {Combatting the {{War Against Machines}}},
  booktitle = {Robotics in {{STEM Education}}},
  author = {Chetty, Jacqui},
  editor = {Khine, Myint Swe},
  year = {2017},
  pages = {59--83},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-57786-9_3},
  urldate = {2020-06-22},
  abstract = {The twenty-first century has been an era of technological advances that has surpassed previous decades. This is largely due to the level of innovation in the fields of artificial intelligence, robotics and automation. However, learners are often reluctant to choose computer programming (coding) as a subject due to its perceived difficulty. Nevertheless, it is also well known that learners who are introduced to computer programming at a young age become the computer science university graduates of tomorrow. Learners' hesitancy towards computer programming is due to the complex, abstract nature of the discipline. To this end, innovative tools are proving useful for learners to overcome such barriers. This chapter provides effective strategies to teach the fundamental concepts of computer programming using robotics, specifically Lego Mindstorms robots. The approach taken is hands-on, student-centred and visual. Learners develop coding solutions through designing and coding real-world problems, visually correcting their imprecisions. This chapter includes learning activities and practical examples from case studies. The inequality of women in the workplace, especially women in IT, is also addressed. A discussion around effective approaches to teaching girls' coding is included as research indicates that girls' learning requirements for coding are different to those of boys.},
  isbn = {978-3-319-57785-2 978-3-319-57786-9},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/GSRFWR5G/Chetty - 2017 - Combatting the War Against Machines An Innovative.pdf}
}

@inproceedings{chettyPedagogicalDesignTeaching2015,
  title = {Towards a Pedagogical Design for Teaching Novice Programmers: Design-Based Research as an Empirical Determinant for Success},
  shorttitle = {Towards a Pedagogical Design for Teaching Novice Programmers},
  booktitle = {Proceedings of the 15th {{Koli Calling Conference}} on {{Computing Education Research}} - {{Koli Calling}} '15},
  author = {Chetty, Jacqui and {van der Westhuizen}, Duan},
  year = {2015},
  pages = {5--12},
  publisher = {{ACM Press}},
  address = {{Koli, Finland}},
  doi = {10.1145/2828959.2828976},
  urldate = {2020-06-22},
  abstract = {Research and experience indicates that students enrolled for CS1 often perform poorly. On this basis we propose a pedagogical design for CS1 within the context of South Africa, where students are often under-prepared for the challenges of higher education. The pedagogy was designed and implemented using a designbased research (DBR) approach over a period of two iterative cycles. The outcome of the design research is a set of eight design principles that have been implemented within the local context. Although further research is needed to test the design more rigorously, results to date are promising. Overwhelmingly, students perceived the design to be beneficial to their learning. Further, success rates in the course improved dramatically.},
  isbn = {978-1-4503-4020-5},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/JS9XVEFL/Chetty and van der Westhuizen - 2015 - Towards a pedagogical design for teaching novice programmers.pdf}
}

@article{chiElicitingSelfexplanationsImproves1994,
  title = {Eliciting Self-Explanations Improves Understanding},
  author = {Chi, Michelene T. H. and De Leeuw, Nicholas and Chiu, Mei-Hung and Lavancher, Christian},
  year = {1994},
  month = jul,
  journal = {Cognitive Science},
  volume = {18},
  number = {3},
  pages = {439--477},
  issn = {0364-0213},
  doi = {10.1016/0364-0213(94)90016-7},
  urldate = {2018-11-06},
  abstract = {Learning involves the integration of new information into existing knowledge. Generating explanations to oneself (self-explaining) facilitates that integration process. Previously, self-explanation has been shown to improve the acquisition of problem-solving skills when studying worked-out examples. This study extends that finding, showing that self-explanation can also be facilitative when it is explicitly promoted, in the context of learning declarative knowledge from an expository text. Without any extensive training, 14 eighth-grade students were merely asked to self-explain after reading each line of a passage on the human circulatory system. Ten students in the control group read the same text twice, but were not prompted to self-explain. All of the students were tested for their circulatory system knowledge before and after reading the text. The prompted group had a greater gain from the pretest to the posttest. Moreover, prompted students who generated a large number of self-explanations (the high explainers) learned with greater understanding than low explainers. Understanding was assessed by answering very complex questions and inducing the function of a component when it was only implicitly stated. Understanding was further captured by a mental model analysis of the self-explanation protocols. High explainers all achieved the correct mental model of the circulatory system, whereas many of the unprompted students as well as the low explainers did not. Three processing characteristics of self-explaining are considered as reasons for the gains in deeper understanding.},
  file = {/Users/igormoreno/Zotero/storage/D4PG79I8/Chi et al - 1994 - Eliciting self-explanations improves understanding.pdf;/Users/igormoreno/Zotero/storage/AH3PIMG9/0364021394900167.html}
}

@inproceedings{chienVisualLambdaCalculatorUsing2008,
  title = {A {{Visual Lambda-Calculator Using Typed Mind-Maps}}},
  booktitle = {2008 {{International Conference}} on {{Computer}} and {{Electrical Engineering}}},
  author = {Chien, L. and Buehre, D. J.},
  year = {2008},
  month = dec,
  pages = {250--255},
  doi = {10.1109/ICCEE.2008.124},
  abstract = {Lambda calculus is an influential and extensively-used notation for describing computable functions, and mind-mapping is widely used as an expression of radiant thinking via a powerful graphical technique. In this paper, we introduce a completely visual representation based on typed mind maps to represent steps of calculation for a pure untyped lambda calculator, VLM. This visual representation has several advantages over traditional textual and visual calculators. VLM uses typed mind maps for both the lambda calculator input and ouput. Although VLM is designed as a computable typed mind maps node of our Typed Mind Maps API project, it can also be applied to learning and teaching the concepts of lambda calculus as a visualization of traditional textual rewrite steps. Moreover, the lambda calculus queries and the results of queries are both represented as FreeMind files, and that allows them to be organized and deployed easily. However, the Mind-Mapping of lambda calculus is interesting and elegant in its own right.},
  keywords = {Automatic testing,Calculus,Computer science,Data models,Education,Java,Power engineering and energy,Power engineering computing,System testing,Visualization},
  file = {/Users/igormoreno/Zotero/storage/QVPX43DL/Chien and Buehre - 2008 - A Visual Lambda-Calculator Using Typed Mind-Maps.pdf;/Users/igormoreno/Zotero/storage/36CPUZLV/4740985.html}
}

@article{chinComparisonTwoMethods2016,
  title = {A Comparison of Two Methods of Active Learning in Physics: Inventing a General Solution versus Compare and Contrast},
  shorttitle = {A Comparison of Two Methods of Active Learning in Physics},
  author = {Chin, Doris B. and Chi, Min and Schwartz, Daniel L.},
  year = {2016},
  month = apr,
  journal = {Instructional Science},
  volume = {44},
  number = {2},
  pages = {177--195},
  issn = {0020-4277, 1573-1952},
  doi = {10.1007/s11251-016-9374-0},
  urldate = {2022-08-26},
  abstract = {A common approach for introducing students to a new science concept is to present them with multiple cases of the phenomenon and ask them to explore. The expectation is that students will naturally take advantage of the multiple cases to support their learning and seek an underlying principle for the phenomenon. However, the success of such tasks depends not only on the structure of the cases, but also the task that students receive for working with the examples.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/QMIWXGY6/Chin et al. - 2016 - A comparison of two methods of active learning in .pdf}
}

@incollection{chiodiniConceptualChecksProgramming2021,
  title = {Conceptual {{Checks}} for {{Programming Teachers}}},
  booktitle = {Technology-{{Enhanced Learning}} for a {{Free}}, {{Safe}}, and {{Sustainable World}}},
  author = {Chiodini, Luca and Hauswirth, Matthias and Gallidabino, Andrea},
  editor = {De Laet, Tinne and Klemke, Roland and {Alario-Hoyos}, Carlos and Hilliger, Isabel and {Ortega-Arranz}, Alejandro},
  year = {2021},
  volume = {12884},
  pages = {399--403},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-030-86436-1_43},
  urldate = {2023-10-02},
  abstract = {Learning to program and learning a new programming language is difficult because it requires learners to undergo conceptual change. Research on conceptual change has shown that instructors' awareness of their students' misconceptions can significantly affect learning outcomes. In this demo we present ``conceptual checks'', a webbased tool that allows instructors and teaching assistants of programming courses to quickly get an overview of the misconceptions that might come up at a given point in their course. Based on the idea of refutation texts, it asks users to assess the correctness of statements about programming language concepts. We implemented conceptual checks on top of progmiscon.org, an educational repository of programming language misconceptions observed in students learning to program. The inventory currently catalogues more than 200 misconceptions. This demonstration illustrates conceptual checks as an efficient and effective means for instructors to access the relevant information in the large body of misconceptions.},
  isbn = {978-3-030-86435-4 978-3-030-86436-1},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/D4ZU5SFA/Chiodini et al. - 2021 - Conceptual Checks for Programming Teachers.pdf}
}

@inproceedings{chiodiniCuratedInventoryProgramming2021,
  title = {A {{Curated Inventory}} of {{Programming Language Misconceptions}}},
  booktitle = {Proceedings of the 26th {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education V}}. 1},
  author = {Chiodini, Luca and Moreno Santos, Igor and Gallidabino, Andrea and Tafliovich, Anya and Santos, Andr{\'e} L. and Hauswirth, Matthias},
  year = {2021},
  month = jun,
  series = {{{ITiCSE}} '21},
  pages = {380--386},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3430665.3456343},
  urldate = {2021-06-29},
  abstract = {Knowledge about misconceptions is an important element of pedagogical content knowledge. The computing education research community collected a large body of research on misconceptions, using a diverse set of definitions and approaches. Inspired by this prior work, we present an actionable definition of misconceptions, focused on the area most commonly studied: programming and programming languages. We then introduce an organizational structure for collections of programming language misconceptions. We study how existing collections fit our organization, and we present a curated inventory of programming language misconceptions that aims to follow our definition and structure. Our inventory goes beyond traditional programming misconception collections. It connects misconceptions to the authoritative specifications of languages, to places they may be triggered in textbooks, to research papers that discuss them, and it provides support for integrating programming language misconceptions into educational platforms.},
  isbn = {978-1-4503-8214-4},
  keywords = {misconceptions,pedagogy,programming,programming languages},
  file = {/Users/igormoreno/Zotero/storage/ZPCFHGPI/Chiodini et al. - 2021 - A Curated Inventory of Programming Language Miscon.pdf}
}

@inproceedings{chiodiniExpressionsJavaEssential2022,
  title = {Expressions in {{Java}}: {{Essential}}, {{Prevalent}}, {{Neglected}}?},
  shorttitle = {Expressions in {{Java}}},
  booktitle = {Proceedings of the 2022 {{ACM SIGPLAN International Symposium}} on {{SPLASH-E}}},
  author = {Chiodini, Luca and Moreno Santos, Igor and Hauswirth, Matthias},
  year = {2022},
  month = dec,
  series = {{{SPLASH-E}} 2022},
  pages = {41--51},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3563767.3568131},
  urldate = {2023-04-18},
  abstract = {Expressions are the building blocks of formal languages such as lambda calculus as well as of programming languages that are closely modeled after it. Although expressions are also an important part of programs in languages like Java, that are not primarily functional, teaching practices typically don't focus as much on expressions. We conduct both a theoretical analysis of the Java language, as well as an empirical analysis of the use of expressions in Java programs by novices, to understand the role expressions play in writing programs. We then proceed by systematically analyzing teaching materials for Java to characterize how they present expressions. Our findings show that expressions are an essential construct in Java, that they are prevalent in student code, but that current textbooks do not introduce expressions as the central, general, and compositional concept they are.},
  isbn = {978-1-4503-9900-5},
  keywords = {Abstract Syntax Tree,Blackbox,education,expressions,grammar,Java,textbooks,trees},
  file = {/Users/igormoreno/Zotero/storage/P7VU9JVZ/Chiodini et al. - 2022 - Expressions in Java Essential, Prevalent, Neglect.pdf}
}

@inproceedings{chiodiniTeachingProgrammingGraphics2023,
  title = {Teaching {{Programming}} with {{Graphics}}: {{Pitfalls}} and a {{Solution}}},
  shorttitle = {Teaching {{Programming}} with {{Graphics}}},
  booktitle = {Proceedings of the 2023 {{ACM SIGPLAN International Symposium}} on {{SPLASH-E}}},
  author = {Chiodini, Luca and Sorva, Juha and Hauswirth, Matthias},
  year = {2023},
  month = oct,
  series = {{{SPLASH-E}} 2023},
  pages = {1--12},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3622780.3623644},
  urldate = {2023-10-20},
  abstract = {Many introductory programming courses employ graphics libraries that promote engagement and enable fun visuals. However, student excitement over graphical outputs is not a guarantee of conceptual understanding of programming, and graphics may even distract from intended learning outcomes. Our contribution is twofold. First, we analyze a selection of existing graphics libraries designed for novice programmers. We consider how these libraries foster clean decomposition, direct students' attention to key content, and manage complexity; we find shortcomings in these respects. These shortcomings involve the libraries' support for global coordinates and external graphics, as well as their rich APIs; we argue that these features, although powerful, are also potential pitfalls in student learning. Second, we present the design of a new graphics library, PyTamaro, which avoids the pitfalls with a minimalist design that eschews coordinates; we also outline a pedagogical approach that builds on PyTamaro's strengths and deliberate limitations. We briefly discuss PyTamaro's trade-offs in comparison to coordinate-based libraries. The work reported here paves the way for future empirical evaluations of PyTamaro and associated teaching practices.},
  isbn = {9798400703904},
  keywords = {decomposition,education,graphics,library,novices,programming,visual},
  file = {/Users/igormoreno/Zotero/storage/2XCUP9JA/Chiodini et al. - 2023 - Teaching Programming with Graphics Pitfalls and a.pdf}
}

@inproceedings{chiodiniWrongAnswersWrong2021,
  title = {Wrong {{Answers}} for {{Wrong Reasons}}: {{The Risks}} of {{Ad Hoc Instruments}}},
  shorttitle = {Wrong {{Answers}} for {{Wrong Reasons}}},
  booktitle = {21st {{Koli Calling International Conference}} on {{Computing Education Research}}},
  author = {Chiodini, Luca and Hauswirth, Matthias},
  year = {2021},
  month = nov,
  pages = {1--11},
  publisher = {{ACM}},
  address = {{Joensuu Finland}},
  doi = {10.1145/3488042.3488045},
  urldate = {2023-03-21},
  isbn = {978-1-4503-8488-9},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/2DUNKKPS/Chiodini and Hauswirth - 2021 - Wrong Answers for Wrong Reasons The Risks of Ad H.pdf}
}

@article{chiSelfexplanationsHowStudents1989,
  title = {Self-Explanations: {{How}} Students Study and Use Examples in Learning to Solve Problems},
  shorttitle = {Self-Explanations},
  author = {Chi, Michelene T. H. and Bassok, Miriam and Lewis, Matthew W. and Reimann, Peter and Glaser, Robert},
  year = {1989},
  month = apr,
  journal = {Cognitive Science},
  volume = {13},
  number = {2},
  pages = {145--182},
  issn = {0364-0213},
  doi = {10.1016/0364-0213(89)90002-5},
  urldate = {2018-11-06},
  abstract = {The present paper analyzes the self-generated explanations (from talk-aloud protocols) that ``Good'' and ``Poor'' students produce while studying worked-out examples of mechanics problems, and their subsequent reliance on examples during problem solving. We find that ``Good'' students learn with understanding: They generate many explanations which refine and expand the conditions for the action parts of the example solutions, and relate these actions to principles in the text. These self-explanations are guided by accurate monitoring of their own understanding and misunderstanding. Such learning results in example-independent knowledge and in a better understanding of the principles presented in the text. ``Poor'' students do not generate sufficient self-explanations, monitor their learning inaccurately, and subsequently rely heavily on examples. We then discuss the role of self-explanations in facilitating problem solving, as well as the adequacy of current AI models of explanation-based learning to account for these psychological findings.},
  keywords = {To Read},
  file = {/Users/igormoreno/Zotero/storage/KDTS7HMJ/Chi et al - 1989 - Self-explanations.pdf;/Users/igormoreno/Zotero/storage/WAM4ULDV/0364021389900025.html}
}

@article{chiSpanRateApprehension1975,
  title = {Span and Rate of Apprehension in Children and Adults},
  author = {Chi, Michelene T. H and Klahr, David},
  year = {1975},
  month = jun,
  journal = {Journal of Experimental Child Psychology},
  volume = {19},
  number = {3},
  pages = {434--439},
  issn = {0022-0965},
  doi = {10.1016/0022-0965(75)90072-7},
  urldate = {2018-12-02},
  abstract = {Children and adults quantified random patterns of dots, under unlimited exposure duration. For adults and children two distinct processes appear to operate. For adults the quantification of collections of from one to three dots is essentially errorless, and proceeds at the rate of 46 msec per item, while the quantification rate for from 4 to 10 dots is 307 msec per dot. For children the same operating ranges appear to hold, however children are much slower. The lower slope is 195 msec per dot, while the upper is 1049. Although the results for adults and children are similar except for the overall rates, the nature of the isomorphism between children and adults is unclear.},
  file = {/Users/igormoreno/Zotero/storage/6QZKUM7N/Chi and Klahr - 1975 - Span and rate of apprehension in children and adults.pdf;/Users/igormoreno/Zotero/storage/84VBSDY2/0022096575900727.html}
}

@incollection{chiThreeTypesConceptual2008,
  title = {Three {{Types}} of {{Conceptual Change}}: {{Belief Revision}}, {{Mental Model Transformation}}, and {{Categorical Shift}}},
  booktitle = {Handbook of Research on Conceptual Change},
  author = {Chi, Michelene T H},
  year = {2008},
  pages = {61--82},
  publisher = {{Erlbaum}},
  address = {{Hillsdale, NJ}},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/QIPMAKNZ/Chi - 2008 - Three Types of Conceptual Change.pdf}
}

@incollection{chiTwoKindsFour2013,
  title = {Two {{Kinds}} and {{Four Sub-Types}} of {{Misconceived Knowledge}}, {{Ways}} to {{Change}} It, and the {{Learning Outcomes}}},
  booktitle = {International {{Handbook}} of {{Research}} on {{Conceptual Change}}},
  author = {Chi, Michelene T. H.},
  year = {2013},
  month = jul,
  publisher = {{Routledge}},
  doi = {10.4324/9780203154472.ch3},
  urldate = {2018-10-22},
  isbn = {978-0-203-15447-2 978-1-136-57821-2 978-0-415-89882-9},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/P36IVVU6/Chi - 2013 - Two Kinds and Four Sub-Types of Misconceived Knowledge, Ways to Change it, and.pdf}
}

@article{chlipalaSkippingBinderBureaucracy2021,
  title = {Skipping the Binder Bureaucracy with Mixed Embeddings in a Semantics Course (Functional Pearl)},
  author = {Chlipala, Adam},
  year = {2021},
  month = aug,
  journal = {Proceedings of the ACM on Programming Languages},
  volume = {5},
  number = {ICFP},
  pages = {94:1--94:28},
  doi = {10.1145/3473599},
  urldate = {2021-12-17},
  abstract = {Rigorous reasoning about programs calls for some amount of bureaucracy in managing details like variable binding, but, in guiding students through big ideas in semantics, we might hope to minimize the overhead. We describe our experiment introducing a range of such ideas, using the Coq proof assistant, without any explicit representation of variables, instead using a higher-order syntax encoding that we dub "mixed embedding": it is neither the fully explicit syntax of deep embeddings nor the syntax-free programming of shallow embeddings. Marquee examples include different takes on concurrency reasoning, including in the traditions of model checking (partial-order reduction), program logics (concurrent separation logic), and type checking (session types) -- all presented without any side conditions on variables.},
  keywords = {binder encoding,formal verification,mechanized semantics,proof assistants},
  file = {/Users/igormoreno/Zotero/storage/UTHLW55L/Chlipala - 2021 - Skipping the binder bureaucracy with mixed embeddings in a semantics course.pdf}
}

@inproceedings{choudhuryAutoStyleCodingStyle2016,
  title = {{{AutoStyle}}: {{Toward Coding Style Feedback At Scale}}},
  shorttitle = {{{AutoStyle}}},
  booktitle = {Proceedings of the 19th {{ACM Conference}} on {{Computer Supported Cooperative Work}} and {{Social Computing Companion}}},
  author = {Choudhury, Rohan Roy and Yin, HeZheng and Moghadam, Joseph and Fox, Armando},
  year = {2016},
  month = feb,
  series = {{{CSCW}} '16 {{Companion}}},
  pages = {21--24},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2818052.2874315},
  urldate = {2022-11-27},
  abstract = {While large-scale automatic grading of student programs for correctness is widespread, less effort has focused on au-tomating feedback for good programming style: the tasteful use of language features and idioms to produce code that is not only correct, but also concise, elegant, and revealing of design intent. We hypothesize that with a large enough (MOOC-sized) corpus of submissions to a given program-ming problem, we can observe a range of stylistic mastery from naive to expert, and many points in between, and that we can exploit this continuum to automatically provide hints to learners to improve their code style based on the key stylistic differences between a given learner's submission and one that is stylistically slightly better. We present a sys-tem with two key interfaces. The first is an instructor-facing GUI that allows an instructor to browse student submis-sions clustered by stylistic patterns and view chains from a particular submission to a canonical one. The second is a student-facing GUI that allows a student to submit a solu-tion and receive instantaneous style feedback.},
  isbn = {978-1-4503-3950-6},
  keywords = {autograding,coding style,MOOCs}
}

@article{christiaenNoviceProgrammingErrors1988,
  title = {Novice {{Programming Errors}}: {{Misconceptions}} or {{Misrepresentations}}?},
  author = {Christiaen, H.},
  year = {1988},
  month = sep,
  journal = {SIGCSE Bulletin},
  volume = {20},
  number = {3},
  annotation = {00007},
  file = {/Users/igormoreno/Zotero/storage/CR2GTRJD/Christiaen - 1988 - Novice Programming Errors.pdf}
}

@article{christyLeaderboardsVirtualClassroom2014,
  title = {Leaderboards in a Virtual Classroom: {{A}} Test of Stereotype Threat and Social Comparison Explanations for Women's Math Performance},
  shorttitle = {Leaderboards in a Virtual Classroom},
  author = {Christy, Katheryn R. and Fox, Jesse},
  year = {2014},
  month = sep,
  journal = {Computers \& Education},
  volume = {78},
  pages = {66--77},
  issn = {03601315},
  doi = {10.1016/j.compedu.2014.05.005},
  urldate = {2023-06-27},
  abstract = {Gamification includes the use of gaming features, such as points or leaderboards, in non-gaming contexts, and is a frequently-discussed trend in education. One way of gamifying the classroom is to introduce leaderboards. Leaderboards allow students to see how they are performing relative to others in the same class. Little empirical research has investigated the impact of leaderboards on academic performance. In this study, 80 female undergraduates took a math test in a virtual representation of a classroom after being exposed to one of three leaderboard conditions: a leaderboard where men held the majority of the top positions, a leaderboard where women held the majority of top positions, and a no leaderboard condition. Participants in the female majority leaderboard condition performed more poorly on the math test than those in the male leaderboard condition, yet demonstrated a higher level of academic identification than those in the male and control conditions. The authors conclude with a discussion of the implications that this study's findings may have for the use of leaderboards within educational environments.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/ZK4UIUDI/Christy and Fox - 2014 - Leaderboards in a virtual classroom A test of ste.pdf}
}

@article{chuaFeaturesGeneralisingTasks2009,
  title = {Features of {{Generalising Tasks}}: {{Help}} or Hurdle {{To}} Expressing Generality?},
  author = {Chua, Boon Liang},
  year = {2009},
  journal = {Australian Mathematics Teacher},
  volume = {65},
  number = {2},
  pages = {18--24},
  issn = {0045-0685},
  abstract = {Pattern generalising problems offer a very rich context for exploring relationships among quantities, expressing generality and representing the same relationship in different ways. Selecting appropriate tasks for students to work on in class is by no means a straightforward process, but there are ways to handle it. This article aims to explore and discuss the features of generalising problems. This article sets out with two objectives: (1) to offer teachers a framework for considering the difficulty level of generalising problems in terms of task features, and (2) to raise issues for discussion on the possible influence the task features have on students' generalisation and reasoning. (Contains 6 figures and 1 table.)},
  langid = {english},
  keywords = {LearnToAbstract,To Read},
  file = {/Users/igormoreno/Zotero/storage/VVWLUAY2/Chua - 2009 - Features of Generalising Tasks.pdf}
}

@phdthesis{chuaPatternGeneralisationSecondary2013,
  title = {Pattern {{Generalisation}} in {{Secondary School Mathematics}}: {{Students}}' {{Strategies}}, {{Justifications}} and {{Beliefs}} and the {{Influence}} of {{Task Features}}},
  author = {Chua, Boon Liang},
  year = {2013},
  month = jan,
  address = {{London, UK}},
  langid = {english},
  school = {University of London},
  keywords = {LearnToAbstract,To Read},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/RMQU4LNI/Chua - 2013 - Pattern Generalisation in Secondary School Mathematics.pdf}
}

@inproceedings{chughProdirectManipulationBidirectional2016,
  title = {Prodirect {{Manipulation}}: {{Bidirectional Programming}} for the {{Masses}}},
  shorttitle = {Prodirect {{Manipulation}}},
  booktitle = {Proceedings of the 38th {{International Conference}} on {{Software Engineering Companion}}},
  author = {Chugh, Ravi},
  year = {2016},
  month = may,
  eprint = {1510.06788},
  primaryclass = {cs},
  pages = {781--784},
  doi = {10.1145/2889160.2889210},
  urldate = {2023-01-21},
  abstract = {Software interfaces today generally fall at either end of a spectrum. On one end are programmable systems, which allow expert users (i.e. programmers) to write software artifacts that describe complex abstractions, but programs are disconnected from their eventual output. On the other end are domain-specific graphical user interfaces (GUIs), which allow end users (i.e. non-programmers) to easily create varied content but present insurmountable walls when a desired feature is not built-in. Both programmatic and direct manipulation have distinct strengths, but users must typically choose one over the other or use some ad-hoc combination of systems. Our goal, put simply, is to bridge this divide. We envision novel software systems that tightly couple programmatic and direct manipulation --- a combination we dub prodirect manipulation --- for a variety of use cases. This will require advances in a broad range of software engineering disciplines, from program analysis and program synthesis technology to user interface design and evaluation. In this extended abstract, we propose two general strategies --- real-time program synthesis and domain-specific synthesis of general-purpose programs --- that may prove fruitful for overcoming the technical challenges. We also discuss metrics that will be important in evaluating the usability and utility of prodirect manipulation systems.},
  archiveprefix = {arxiv},
  keywords = {Computer Science - Software Engineering,D.2.6,D.3.3,F.3.2,H.5.2},
  file = {/Users/igormoreno/Zotero/storage/HKZDGLKX/Chugh - 2016 - Prodirect Manipulation Bidirectional Programming .pdf;/Users/igormoreno/Zotero/storage/TNFF3JFZ/1510.html}
}

@inproceedings{chughProgrammaticDirectManipulation2016,
  title = {Programmatic and {{Direct Manipulation}}, {{Together}} at {{Last}}},
  booktitle = {Proceedings of the 37th {{ACM SIGPLAN Conference}} on {{Programming Language Design}} and {{Implementation}}},
  author = {Chugh, Ravi and Hempel, Brian and Spradlin, Mitchell and Albers, Jacob},
  year = {2016},
  month = jun,
  eprint = {1507.02988},
  primaryclass = {cs},
  pages = {341--354},
  doi = {10.1145/2908080.2908103},
  urldate = {2023-01-21},
  abstract = {Direct manipulation interfaces and programmatic systems have distinct and complementary strengths. The former provide intuitive, immediate visual feedback and enable rapid prototyping, whereas the latter enable complex, reusable abstractions. Unfortunately, existing systems typically force users into just one of these two interaction modes. We present a system called Sketch-n-Sketch that integrates programmatic and direct manipulation for the particular domain of Scalable Vector Graphics (SVG). In Sketch-n-Sketch, the user writes a program to generate an output SVG canvas. Then the user may directly manipulate the canvas while the system immediately infers a program update in order to match the changes to the output, a workflow we call live synchronization. To achieve this, we propose (i) a technique called trace-based program synthesis that takes program execution history into account in order to constrain the search space and (ii) heuristics for dealing with ambiguities. Based on our experience with examples spanning 2,000 lines of code and from the results of a preliminary user study, we believe that Sketch-n-Sketch provides a novel workflow that can augment traditional programming systems. Our approach may serve as the basis for live synchronization in other application domains, as well as a starting point for yet more ambitious ways of combining programmatic and direct manipulation.},
  archiveprefix = {arxiv},
  keywords = {Computer Science - Programming Languages,D.3.3,F.3.2,H.5.2},
  file = {/Users/igormoreno/Zotero/storage/DD4XNID9/Chugh et al - 2016 - Programmatic and Direct Manipulation, Together at Last.pdf;/Users/igormoreno/Zotero/storage/XWYJ62ZE/1507.html}
}

@article{chungStudentsMisconceptionsTypes2017,
  title = {Students' {{Misconceptions About}} the {{Types}} of {{Values Data Structures Can Store}}},
  author = {Chung, Anna and Shao, Patrick and Vasquez, Alejandro},
  year = {2017},
  month = apr,
  journal = {J. Comput. Sci. Coll.},
  volume = {32},
  number = {4},
  pages = {72--78},
  issn = {1937-4771},
  urldate = {2019-10-29},
  abstract = {Given the importance of data structures in undergraduate computer science education, we are interested in how students learn to apply data structures. In order to identify points of difficulty in applying data structures, we conducted an exploratory study that involved one-on-one interviews with six undergraduate students. Each student had taken a data structures course within the past year and, therefore, had previously encountered several data structures. The interview participants were primarily given questions that ask them to select a suitable data structure for a particular task. Using qualitative methods, we found that students appeared to hold a misconception regarding what kinds of values can be stored in a data structure. We hypothesize that this misconception limits a student's understanding of how to apply data structures in different situations. Our analysis focuses on interviews with two students who appeared to have this misconception when working with stacks and hash tables. Through identifying instances of this misconception, we hope to provide insight to computer science educators on the difficulties that students face when applying data structures.},
  keywords = {Misconceptions Proposal},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/4AWHZULM/Chung et al - 2017 - Students' Misconceptions About the Types of Values Data Structures Can Store.pdf}
}

@article{churchBenefitsQualitativeData2019,
  title = {Benefits to {{Qualitative Data Quality}} with {{Multiple Coders}}: {{Two Case Studies}} in {{Multi-coder Data Analysis}}},
  author = {Church, Sarah P and Dunn, Michael and Prokopy, Linda S},
  year = {2019},
  abstract = {Qualitative research methods contend with debates surrounding subjectivity and bias. Researchers use a variety of techniques to help ensure data trustworthiness. One such technique is to involve multiple coders in data analysis. The deliberative nature of codebook development among multiple coders produces rich data analysis that may not otherwise be achieved with a single (or even two) researcher(s). In this manuscript, we make a plea for researchers and journals to include data analysis procedures and descriptions in published literature. In addition, we illustrate minimal reporting of qualitative data analysis processes through a synthesis of 21 years of agricultural best management practice adoption literature. We present two rural agricultural case studies on multi-coder team codebook development and intercoder reliability processes specific to interviews, focus groups, and content analysis. Overall, we argue that multi-coder teams can improve data quality, and reporting data analysis procedures can mitigate implications of subjectivity in qualitative methods.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/WP6TT6ER/Church et al. - 2019 - Benefits to Qualitative Data Quality with Multiple.pdf}
}

@book{churchCalculiLambdaconversion1941,
  title = {The Calculi of Lambda-Conversion},
  author = {Church, Alonzo},
  year = {1941},
  number = {6},
  publisher = {{Princeton University Press}},
  keywords = {Functional Programming},
  annotation = {01851}
}

@article{churchUnsolvableProblemElementary1936,
  title = {An {{Unsolvable Problem}} of {{Elementary Number Theory}}},
  author = {Church, Alonzo},
  year = {1936},
  journal = {American Journal of Mathematics},
  volume = {58},
  number = {2},
  eprint = {2371045},
  eprinttype = {jstor},
  pages = {345--363},
  publisher = {{Johns Hopkins University Press}},
  issn = {0002-9327},
  doi = {10.2307/2371045},
  urldate = {2020-12-01},
  annotation = {02535},
  file = {/Users/igormoreno/Zotero/storage/5SE6GCCA/Church - 1936 - An Unsolvable Problem of Elementary Number Theory.pdf}
}

@article{churchUnsolvableProblemElementary1936a,
  title = {An {{Unsolvable Problem}} of {{Elementary Number Theory}}},
  author = {Church, Alonzo},
  year = {1936},
  journal = {American Journal of Mathematics},
  volume = {58},
  number = {2},
  eprint = {2371045},
  eprinttype = {jstor},
  pages = {345--363},
  publisher = {{Johns Hopkins University Press}},
  issn = {0002-9327},
  doi = {10.2307/2371045},
  urldate = {2023-07-13},
  file = {/Users/igormoreno/Zotero/storage/ID6HWPNQ/Church - 1936 - An Unsolvable Problem of Elementary Number Theory.pdf}
}

@inproceedings{ciniselliWhatExtentDeep2022,
  title = {To What Extent Do Deep Learning-Based Code Recommenders Generate Predictions by Cloning Code from the Training Set?},
  booktitle = {Proceedings of the 19th {{International Conference}} on {{Mining Software Repositories}}},
  author = {Ciniselli, Matteo and Pascarella, Luca and Bavota, Gabriele},
  year = {2022},
  month = oct,
  series = {{{MSR}} '22},
  pages = {167--178},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3524842.3528440},
  urldate = {2022-10-25},
  abstract = {Deep Learning (DL) models have been widely used to support code completion. These models, once properly trained, can take as input an incomplete code component (e.g., an incomplete function) and predict the missing tokens to finalize it. GitHub Copilot is an example of code recommender built by training a DL model on millions of open source repositories: The source code of these repositories acts as training data, allowing the model to learn "how to program". The usage of such a code is usually regulated by Free and Open Source Software (FOSS) licenses, that establish under which conditions the licensed code can be redistributed or modified. As of Today, it is unclear whether the code generated by DL models trained on open source code should be considered as "new" or as "derivative" work, with possible implications on license infringements. In this work, we run a large-scale study investigating the extent to which DL models tend to clone code from their training set when recommending code completions. Such an exploratory study can help in assessing the magnitude of the potential licensing issues mentioned before: If these models tend to generate new code that is unseen in the training set, then licensing issues are unlikely to occur. Otherwise, a revision of these licenses urges to regulate how the code generated by these models should be treated when used, for example, in a commercial setting. Highlights from our results show that \textasciitilde 10\% to \textasciitilde 0.1\% of the predictions generated by a state-of-the-art DL-based code completion tool are Type-1 clones of instances in the training set, depending on the size of the predicted code. Long predictions are unlikely to be cloned.},
  isbn = {978-1-4503-9303-4},
  keywords = {code clones,code completion,deep learning},
  file = {/Users/igormoreno/Zotero/storage/IZ5U6DJC/Ciniselli et al. - 2022 - To what extent do deep learning-based code recomme.pdf}
}

@inproceedings{citrinProgrammingVisualExpressions1995,
  title = {Programming with Visual Expressions},
  booktitle = {Proceedings of {{Symposium}} on {{Visual Languages}}},
  author = {Citrin, Wayne and Hall, Richard and Zorn, Benjamin},
  year = {1995},
  month = sep,
  pages = {294--301},
  issn = {1049-2615},
  doi = {10.1109/VL.1995.520822},
  abstract = {The lambda calculus is a formal symbolic term rewriting system that has been used for many years both as a mechanism for defining the semantics of programming languages and as the basis for functional programming languages. In this paper, we describe a completely visual representation for lambda expressions, VEX (Visual EXpressions), that has several advantages over traditional textual lambda calculus. Although VEX is designed as an expression-oriented component of VIPR (VIsual PRogramming language), it can also be used in teaching the concepts of the lambda calculus as a replacement for or augmentation to the teaching of traditional textual rewrite rules. Many semantic issues in the lambda calculus that are confusing to students, including substitution, free variables and binding, become apparent and explicit in VEX.},
  keywords = {Calculus,Computer languages,Computer science,Education,Functional programming,Scalability},
  file = {/Users/igormoreno/Zotero/storage/MRG4JH4B/Citrin et al - 1995 - Programming with visual expressions.pdf;/Users/igormoreno/Zotero/storage/UDLUUNAG/520822.html}
}

@incollection{clancyMisconceptionsAttitudesThat2005,
  title = {Misconceptions and {{Attitudes}} That {{Interfere}} with {{Learning}} to {{Program}}},
  booktitle = {Computer {{Science Education Research}}},
  author = {Clancy, Michael},
  editor = {Fincher, Sally and Petre, Marian},
  year = {2005},
  month = sep,
  pages = {85--100},
  publisher = {{Taylor \& Francis}},
  doi = {10.1201/9781482287325-18},
  urldate = {2021-01-08},
  isbn = {978-0-429-07888-0},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/5KQFKJ5N/Clancy 85 - 2005 - Misconceptions and Attitudes that Interfere with L.pdf}
}

@inproceedings{clancyUsingValidatedAssessments2020,
  title = {Using {{Validated Assessments}} to {{Learn About Your Students}}},
  booktitle = {Proceedings of the 51st {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Clancy, Michael and Lee, Cynthia and Nam Liao, Soohyun and Porter, Leo and Taylor, Cynthia and Webb, Kevin C.},
  year = {2020},
  month = feb,
  series = {{{SIGCSE}} '20},
  pages = {1401},
  publisher = {{Association for Computing Machinery}},
  address = {{Portland, OR, USA}},
  doi = {10.1145/3328778.3372520},
  urldate = {2020-05-18},
  abstract = {Computer Science now has a number of validated instruments available for measuring student knowledge or interest in computing (SCS1, BDSI, CAS, Digital Logic CI, etc.). But when and how should instructors and researchers use these instruments? In this BOF, we will begin by discussing the available instruments, their purpose, and how to obtain them. Then we will open the discussion to the group on what they would like to measure, how these instruments might work for them, and how to best employ them with their students.},
  isbn = {978-1-4503-6793-6},
  keywords = {assessment,concept-inventory,data-structures},
  annotation = {00000}
}

@book{clarkEfficiencyLearningEvidenceBased2011,
  title = {Efficiency in {{Learning}}: {{Evidence-Based Guidelines}} to {{Manage Cognitive Load}}},
  shorttitle = {Efficiency in {{Learning}}},
  author = {Clark, Ruth C. and Nguyen, Frank and Sweller, John},
  year = {2011},
  month = jan,
  publisher = {{John Wiley \& Sons}},
  abstract = {Efficiency in Learning offers a road map of the most effective ways to use the three fundamental communication of training: visuals, written text, and audio. Regardless of how you are delivering your training materials\textemdash in the classroom, in print, by synchronous or asynchronous media\textemdash the book's methods are easily applied to your lesson presentations, handouts, reference guides, or e-learning screens. Designed to be a down-to-earth resource for all instructional professionals, Efficiency in Learning's guidelines are clearly illustrated with real-world examples.},
  googlebooks = {9nwESAIRzxoC},
  isbn = {978-1-118-04674-6},
  langid = {english},
  keywords = {Business \& Economics / General,Education / General},
  annotation = {01208},
  file = {/Users/igormoreno/Zotero/storage/BEUQ7NUR/Clark et al. - 2011 - Efficiency in Learning Evidence-Based Guidelines .pdf;/Users/igormoreno/Zotero/storage/IZ4VZKKY/Book-Review.pdf}
}

@article{clarkPillowPilFork2015,
  title = {Pillow (Pil Fork) Documentation},
  author = {Clark, Alex},
  year = {2015},
  journal = {Readthedocs. https://buildmedia. readthedocs. org/media/pdf/pillow/latest/pillow. pdf},
  file = {/Users/igormoreno/Zotero/storage/E6RL2SRR/Clark - 2015 - Pillow (pil fork) documentation.pdf}
}

@article{clarkProcessComparingSentences1972,
  title = {On the Process of Comparing Sentences against Pictures},
  author = {Clark, Herbert H. and Chase, William G.},
  year = {1972},
  month = jul,
  journal = {Cognitive Psychology},
  volume = {3},
  number = {3},
  pages = {472--517},
  issn = {0010-0285},
  doi = {10.1016/0010-0285(72)90019-9},
  urldate = {2018-12-02},
  abstract = {The present study outlines a theory of how people compare sentences against pictures. This theory was tested in four experiments in which Ss were timed as they judged whether a sentence (e.g., Star isn't above plus) was true or false of a picture (e.g., +{${_\ast}$}). The latencies in these tasks were consistent with the thesis that: (1) sentences are represented in terms of elementary propositions; (2) pictures are encoded in the same interpretive format; (3) these two codes are compared in an algorithmic series of mental operations, each of which contributes additively to the response latency; and (4) sentence encoding, picture encoding, comparing, and responding are four serially ordered stages, and their component latencies are additive. From these results, it was also possible to rule out certain explanations based on visual imagery, conversion (e.g., converting isn't above into is below), reading time, normative word frequencies, and other factors. Finally, it was shown that this theory is consistent with previous studies on sentence comprehension, sentence verification, concept verification, and other related phenomena.},
  file = {/Users/igormoreno/Zotero/storage/LQW88I2H/Clark and Chase - 1972 - On the process of comparing sentences against pictures.pdf;/Users/igormoreno/Zotero/storage/PYWZCJ76/0010028572900199.html}
}

@book{claysonVisualModelingLogo1988,
  title = {Visual Modeling with {{Logo}}},
  author = {Clayson, James},
  year = {1988},
  publisher = {{MIT Press}},
  address = {{Cambridge, MA, USA}},
  isbn = {978-0-262-53069-9},
  file = {/Users/igormoreno/Zotero/storage/WFSMZG3I/Clayson - 1988 - Visual modeling with Logo.pdf}
}

@inproceedings{clearCC2020VisualizationTool2020,
  title = {{{CC2020}} -- {{Visualization Tool Preview}} and {{Review}}},
  booktitle = {Proceedings of the 51st {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Clear, Alison and Takada, Shingo and Cuadros Vargas, Ernesto},
  year = {2020},
  month = feb,
  series = {{{SIGCSE}} '20},
  pages = {169--170},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3328778.3366998},
  urldate = {2020-09-22},
  abstract = {The CC2020 project was charged with two main objectives, to produce a comprehensive report and a visualization tool to provide global guidance in an evolving computing environment as it affects computing baccalaureate degree programs worldwide. The report is now in draft form and has undergone four rounds of review. The other goal of the CC2020 project is to develop a set of visualization-based tools that will help users to explore questions they may have concerning curricular guidelines, as well as local computing curricula. A visualization tool has been scoped and a prototype built. This special session will unveil the prototype for the SIGCSE community who will have the opportunity to view and review the tool.},
  isbn = {978-1-4503-6793-6},
  keywords = {cc2020,CC2020-Authors,computing curricula,curricula visualization tools},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/FAIQBFZS/Clear et al - 2020 - CC2020 -- Visualization Tool Preview and Review.pdf}
}

@inproceedings{clearComputingCurricula20202019,
  title = {Computing {{Curricula}} 2020: {{Introduction}} and {{Community Engagement}}},
  shorttitle = {Computing {{Curricula}} 2020},
  booktitle = {Proceedings of the 50th {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Clear, Alison and Parrish, Allen S. and Impagliazzo, John and Zhang, Ming},
  year = {2019},
  month = feb,
  series = {{{SIGCSE}} '19},
  pages = {653--654},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3287324.3287517},
  urldate = {2020-09-22},
  abstract = {This session presents an overview of the Computing Curricula 2020 (CC2020) project and provides a status report for the project. CC2020 seeks to generate a modern revision of the well-known CC2005 document by reflecting a more current view of computing, including the addition of new and emerging sub-disciplines like cybersecurity and data science. Further, CC2020 proposes a competency-based characterization of computing, as well as a bottom-up organization of computing into its sub-disciplines based on an analysis of competencies. This session imparts the results of the project to date and provides an opportunity for participants to infuse new ideas on the current computing disciplinary landscape, as well as input for the competency model it proposes.},
  isbn = {978-1-4503-5890-3},
  keywords = {cc2005.,cc2020,CC2020-Authors,competencies,computing model curricula,disciplinary taxonomy},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/T2A8Y64X/Clear et al - 2019 - Computing Curricula 2020.pdf}
}

@misc{ClearingHouseUnterricht2021,
  title = {{Clearing House Unterricht | TUM School of Education}},
  year = {2021},
  month = mar,
  urldate = {2021-03-16},
  langid = {ngerman},
  file = {/Users/igormoreno/Zotero/storage/QKQ82KRC/www.clearinghouse.edu.tum.de.html}
}

@inproceedings{cleggSimulatingStudentMistakes2019,
  title = {Simulating {{Student Mistakes}} to {{Evaluate}} the {{Fairness}} of {{Automated Grading}}},
  booktitle = {2019 {{IEEE}}/{{ACM}} 41st {{International Conference}} on {{Software Engineering}}: {{Software Engineering Education}} and {{Training}} ({{ICSE-SEET}})},
  author = {Clegg, Benjamin and North, Siobh{\'a}n and McMinn, Phil and Fraser, Gordon},
  year = {2019},
  month = may,
  pages = {121--125},
  doi = {10.1109/ICSE-SEET.2019.00021},
  abstract = {The use of autograding to assess programming students may lead to unfairness if an autograder is incorrectly configured. Mutation analysis offers a potential solution to this problem. By simulating student coding mistakes, an automated technique can evaluate the fairness and completeness of an autograding configuration. In this paper, we introduce a set of mutation operators to be used in such a technique, derived from a mistake classification of real student solutions for two introductory programming tasks.},
  keywords = {autograding configuration,automated grading,automated technique,computer aided instruction,computer science education,introductory programming tasks,mistake classification,mutation analysis,mutation operators,pattern classification,programming,programming mistakes,programming student assessment,source code (software),student coding mistakes,student mistake simulation,student solutions},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/D8C6EWIK/Clegg et al. - 2019 - Simulating Student Mistakes to Evaluate the Fairne.pdf;/Users/igormoreno/Zotero/storage/TSFJNEE9/8802098.html}
}

@article{clementsFutureEducationalComputing1999,
  title = {The {{Future}} of {{Educational Computing Research}}:{{The Case}} of {{Computer Programming}}},
  author = {Clements, Douglas H},
  year = {1999},
  journal = {Information Technology in Childhood Education},
  pages = {33},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/UJ2RQ6WJ/Clements - The Future of Educational Computing ResearchThe C.pdf}
}

@article{clementsLearningGeometricConcepts1989,
  title = {Learning of {{Geometric Concepts}} in a {{Logo Environment}}},
  author = {Clements, Douglas H. and Battista, Michael T.},
  year = {1989},
  month = nov,
  journal = {Journal for Research in Mathematics Education},
  volume = {20},
  number = {5},
  eprint = {749420},
  eprinttype = {jstor},
  pages = {450},
  issn = {00218251},
  doi = {10.2307/749420},
  urldate = {2022-01-17},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/VLV4AXC7/Clements and Battista - 1989 - Learning of Geometric Concepts in a Logo Environme.pdf}
}

@inproceedings{clementsModelingAlgebraicStepper2001,
  title = {Modeling an {{Algebraic Stepper}}},
  booktitle = {Proceedings of the 10th {{European Symposium}} on {{Programming Languages}} and {{Systems}}},
  author = {Clements, John and Flatt, Matthew and Felleisen, Matthias},
  year = {2001},
  month = apr,
  series = {{{ESOP}} '01},
  pages = {320--334},
  publisher = {{Springer-Verlag}},
  address = {{Berlin, Heidelberg}},
  urldate = {2022-03-01},
  abstract = {Programmers rely on the correctness of the tools in their programming environments. In the past, semanticists have studied the correctness of compilers and compiler analyses, which are the most important tools. In this paper, we make the case that other tools, such as debuggers and steppers, deserve semantic models, too, and that using these models can help in developing these tools. Our concrete starting point is the algebraic stepper in DrScheme, our Scheme programming environment. The algebraic stepper explains a Scheme computation in terms of an algebraic rewriting of the program text. A program is rewritten until it is in a canonical form (if it has one). The canonical form is the final result. The stepper operates within the existing evaluator, by placing breakpoints and by reconstructing source expressions from source information placed on the stack. This approach raises two questions. First, do the run-time breakpoints correspond to the steps of the reduction semantics? Second, does the debugging mechanism insert enough information to reconstruct source expressions? To answer these questions, we develop a high-level semantic model of the extended compiler and run-time machinery. Rather than modeling the evaluation as a low-level machine, we model the relevant low-level features of the stepper's implementation in a high-level reduction semantics. We expect the approach to apply to other semantics-based tools.},
  isbn = {978-3-540-41862-7},
  file = {/Users/igormoreno/Zotero/storage/BAIW8JGP/Clements et al. - 2001 - Modeling an Algebraic Stepper.pdf}
}

@inproceedings{clementsNotionalMachineRuntime2022a,
  title = {Towards a {{Notional Machine}} for {{Runtime Stacks}} and {{Scope}}: {{When Stacks Don}}'t {{Stack Up}}},
  shorttitle = {Towards a {{Notional Machine}} for {{Runtime Stacks}} and {{Scope}}},
  booktitle = {Proceedings of the 2022 {{ACM Conference}} on {{International Computing Education Research}} - {{Volume}} 1},
  author = {Clements, John and Krishnamurthi, Shriram},
  year = {2022},
  month = aug,
  series = {{{ICER}} '22},
  volume = {1},
  pages = {206--222},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3501385.3543961},
  urldate = {2023-10-31},
  abstract = {Background and Context. Modern programming is replete with features like closures, callbacks, generators, asynchronous functions, and so on. These features can be subtle in their behavior and interaction with the rest of the language, so students need notional machines that are both accurate and manageable. We specifically focus on stacks and their associated environments, which are key to understanding these features. Objectives. What conceptions do students have of stacks and environments on entry to a tertiary, upper-level programming languages course? What impact does coursework around an interpreter-based approach to programming languages education have on their understanding? What is the value of the tooling we create for students to express notional machine states? Method. Our studies were conducted at two different institutions in a tertiary, upper-level course on programming languages. The intermediate interventions were different, but both used a pre-/post-test format conducted at the beginning and near the end of the semester. We also created a Snap!-based tool to assist in notional machine description. Findings. We found that students have a relatively weak understanding of stacks and environments at entry, and exhibited various misconceptions. At one institution, which primarily relied on interpreters, we found numerous problems persisted at the end of the semester. At the other, which in addition to interpreters also used direct instruction and the Snap!-based tool, students did much better\textemdash but still not on aspects that we would have liked to have transferred from interpreters. Implications. Our findings suggest that it is important for other educators to also assess their students' understanding of stacks and environments, especially in light of modern programming concepts. Assuming similar misconceptions are widespread, we believe the community needs to invest much more effort into notional machines, so that students can better understand the features and programs they are working with. In particular, the ``standard'' stack presentation is insufficient and in some cases even ``harmful'' (since it reinforces some misconceptions), and hence must be revised. Finally, our study forces a reconsideration of the learning objectives met by interpreters in programming languages education.},
  isbn = {978-1-4503-9194-8},
  keywords = {control,environments,misconceptions,scope,stacks},
  file = {/Users/igormoreno/Zotero/storage/D9AXGV5U/Clements and Krishnamurthi - 2022 - Towards a Notional Machine for Runtime Stacks and .pdf}
}

@inproceedings{closeMisconceptionsRecursionDiagnostic1997,
  title = {Misconceptions in {{Recursion}}: {{Diagnostic Teaching}}},
  booktitle = {Eurologo'97},
  author = {Close, John and Dicheva, Darina},
  year = {1997},
  pages = {10},
  abstract = {The paper describes a diagnostic teaching approach to recursion in Logo. The approach involves a general strategy for teaching recursion and specific teaching tactics for alleviating the misconceptions which underly flawed mental models of the recursive process possessed by particular learners. The erroneous mental models and underlying misconceptions had been identified and described in an earlier study by the two authors. Further research to test the approach is recommended.},
  langid = {english},
  annotation = {00008},
  file = {/Users/igormoreno/Zotero/storage/9QX47WY7/Close and Dicheva - 1997 - Misconceptions in Recursion.pdf}
}

@article{coceaDesignEvaluationCaseBased2017,
  title = {Design and {{Evaluation}} of a {{Case-Based System}} for {{Modelling Exploratory Learning Behavior}} of {{Math Generalization}}},
  author = {Cocea, M. and Magoulas, G. D.},
  year = {Oct.-Dec. 2017},
  journal = {IEEE Transactions on Learning Technologies},
  volume = {10},
  number = {4},
  pages = {436--449},
  issn = {1939-1382},
  doi = {10.1109/TLT.2017.2661310},
  urldate = {2018-10-06},
  abstract = {Exploratory learning environments (ELEs) promote a view of learning that encourages students to construct and/or explore models and observe the effects of modifying their parameters. The freedom given to learners in this exploration context leads to a variety of learner approaches for constructing models and makes modelling of learner behavior a challenging task. To address this issue, we propose a learner modelling mechanism for monitoring learners' actions when constructing/exploring models by modelling sequences of actions reflecting different strategies in solving a task. This is based on a modified version of case-based reasoning for problems with multiple solutions. In our formulation, approaches to explore the task are represented as sequences of simple cases linked by temporal and dependency relations, which are mapped to the learners' behavior in the system by means of appropriate similarity metrics. This paper presents the development and validation of the modelling mechanism. The model was validated in the context of an ELE for mathematical generalisation using data from classroom sessions and pedagogically-driven learning scenarios.},
  keywords = {Adaptation models,Analytical models,Context,Context modeling,Data models,Integrated circuit modeling,Mathematical model},
  file = {/Users/igormoreno/Zotero/storage/VEQ8AMKQ/Cocea and Magoulas - 2017 - Design and Evaluation of a Case-Based System for Modelling Exploratory Learning.pdf;/Users/igormoreno/Zotero/storage/XERW6B94/07839926-abs.html}
}

@inproceedings{cockxReasonableAgdaCorrect2022,
  title = {Reasonable {{Agda}} Is Correct {{Haskell}}: Writing Verified {{Haskell}} Using Agda2hs},
  shorttitle = {Reasonable {{Agda}} Is Correct {{Haskell}}},
  booktitle = {Proceedings of the 15th {{ACM SIGPLAN International Haskell Symposium}}},
  author = {Cockx, Jesper and Melkonian, Orestis and Escot, Lucas and Chapman, James and Norell, Ulf},
  year = {2022},
  month = sep,
  series = {Haskell 2022},
  pages = {108--122},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3546189.3549920},
  urldate = {2023-07-10},
  abstract = {Modern dependently typed languages such as Agda can be used to statically enforce the correctness of programs. However, they still lack the large ecosystem of a more popular language like Haskell. To combine the strength of both approaches, we present agda2hs, a tool that translates an expressive subset of Agda to readable Haskell, erasing dependent types and proofs in the process. Thanks to Agda's support for erasure annotations, this process is both safe and transparent to the user. Compared to other tools for program extraction, agda2hs uses a syntax that is already familiar to functional programmers, allows for both intrinsic and extrinsic approaches to verification, and produces Haskell code that is easy to read and audit by programmers with no knowledge of Agda. We present a practical use case of agda2hs at IOG to verify properties of a program generator. While both agda2hs and its ecosystem are still young, our experiences so far show that this is a viable approach to make verified functional programming available to a broader audience. This paper is a literate Agda script, hence all rendered (Agda) code has been typechecked.},
  isbn = {978-1-4503-9438-3},
  keywords = {Agda,Dependent types,Formal verification,Program extraction},
  file = {/Users/igormoreno/Zotero/storage/8BSCKC7C/Cockx et al. - 2022 - Reasonable Agda is correct Haskell writing verifi.pdf}
}

@techreport{coeWhatMakesGreat2014,
  title = {What Makes Great Teaching? {{Review}} of the Underpinning Research},
  author = {Coe, Robert and Aloisi, Cesare and Higgins, Steve and Major, Lee Elliot},
  year = {2014},
  month = oct,
  institution = {{Centre for Evaluation \& Monitoring, Durham University}},
  file = {/Users/igormoreno/Zotero/storage/E28GRKIN/Coe et al - 2014 - What makes great teaching.pdf}
}

@article{cohenSomeornoneCharacteristicsCoding1966,
  title = {Some-or-None Characteristics of Coding Behavior},
  author = {Cohen, Burton H.},
  year = {1966},
  month = apr,
  journal = {Journal of Verbal Learning and Verbal Behavior},
  volume = {5},
  number = {2},
  pages = {182--187},
  issn = {0022-5371},
  doi = {10.1016/S0022-5371(66)80014-2},
  urldate = {2018-12-02},
  abstract = {Evidence derived from a variety of experiments dealing with the free recall of categorized word-lists is presented in support of a some-or-none rationale. As discussed here, some-or-none represents the ability of Ss to either recall a high proportion of the words of a given category or fail to recall any of the words of the category. When Ss do recall the words of a category, the mean word-recall per category appears to be invariant with respect to list length, rate of presentation, serial position effects, sex of S, and size of category.},
  annotation = {00163},
  file = {/Users/igormoreno/Zotero/storage/V7V95YLZ/Cohen - 1966 - Some-or-none characteristics of coding behavior.pdf;/Users/igormoreno/Zotero/storage/USMZC9L9/S0022537166800142.html}
}

@inproceedings{colakEducationalToolVisualising2019,
  title = {An Educational Tool for Visualising Actor Programs},
  booktitle = {2019 42nd {{International Convention}} on {{Information}} and {{Communication Technology}}, {{Electronics}} and {{Microelectronics}} ({{MIPRO}})},
  author = {Colak, Andela and Cuvic, Marin Aglic},
  year = {2019},
  month = may,
  pages = {605--610},
  publisher = {{IEEE}},
  address = {{Opatija, Croatia}},
  doi = {10.23919/MIPRO.2019.8756918},
  urldate = {2020-06-22},
  abstract = {Object-oriented programming (OOP) is probably the most popular programming paradigm today. Because of this, it is often taught at faculties associated with computer science. The general idea of OOP is to break a complex problem into abstractions called objects which interact with each other via method invocation.},
  isbn = {978-953-233-098-4},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/NKRM4AJS/Colak and Cuvic - 2019 - An educational tool for visualising actor programs.pdf}
}

@book{colemanHelloWorldBig2021,
  title = {Hello {{World}}: {{The Big Book}} of {{Computing Pedagogy}}},
  editor = {Coleman, Gemma},
  year = {2021},
  month = sep,
  publisher = {{Raspberry Pi Foundation}},
  file = {/Users/igormoreno/Zotero/storage/VBES6I4E/Hello_World_The_Big_Book_of_Pedagogy.pdf}
}

@inproceedings{collardSrcMLExploreAnalyze2016,
  title = {{{srcML}} 1.0: {{Explore}}, {{Analyze}}, and {{Manipulate Source Code}}},
  shorttitle = {{{srcML}} 1.0},
  booktitle = {2016 {{IEEE International Conference}} on {{Software Maintenance}} and {{Evolution}} ({{ICSME}})},
  author = {Collard, Michael L. and Maletic, Jonathan I.},
  year = {2016},
  month = oct,
  pages = {649--649},
  doi = {10.1109/ICSME.2016.36},
  abstract = {Summary form only given. This technology briefing is intended for those interested in constructing custom software analysis and manipulation tools to support research or commercial applications. srcML (srcML.org) is an infrastructure consisting of an XML representation for C/C++/C\#/Java source code along with efficient parsing technology to convert source code to-and-from the srcML format. The briefing describes srcML, the toolkit, and the application of XPath and XSLT to query and modify source code. Additionally, a short tutorial of how to use srcML and XML tools to construct custom analysis and manipulation tools will be conducted.},
  keywords = {Conferences,program transformation,Software maintenance,srcML,static program analysis,Tutorials,XML},
  file = {/Users/igormoreno/Zotero/storage/9BL989ED/Collard and Maletic - 2016 - srcML 1.0 Explore, Analyze, and Manipulate Source.pdf;/Users/igormoreno/Zotero/storage/LJ4RENF6/7816536.html}
}

@unpublished{collinsDesignExperiments2010,
  title = {Design {{Experiments}}},
  author = {Collins, Allan},
  year = {2010},
  urldate = {2020-10-14},
  abstract = {The term design experiments was introduced in papers by Brown (1992) and Collins (1992). Design experiments were developed as a way to carry out formative research to test and refine educational designs based on principles derived from prior research. Then, based on an analysis of the learning environment, modifications and additions are made to the learning environment and, in some cases, to the underlying learning principles themselves. The article provides guidelines for how design research can best be carried out. In recent years, the terms design research and designbased research have been applied to this kind of work.},
  annotation = {00292},
  file = {/Users/igormoreno/Zotero/storage/KLYZAM3A/Collins - 2010 - Design Experiments.pdf}
}

@article{colliotDoesSelfgeneratingGraphic2018,
  title = {Does Self-Generating a Graphic Organizer While Reading Improve Students' Learning?},
  author = {Colliot, Tiphaine and Jamet, {\'E}ric},
  year = {2018},
  month = nov,
  journal = {Computers \& Education},
  volume = {126},
  pages = {13--22},
  issn = {03601315},
  doi = {10.1016/j.compedu.2018.06.028},
  urldate = {2018-11-06},
  abstract = {To understand a document, learners must select the relevant information, organize this information into a coherent representation, and integrate it with their prior knowledge. One way of facilitating these cognitive processes is to display a graphic organizer alongside the document, showing the main items of information contained in the text and the links between them. To ensure students' active engagement in these processes, they can also be asked to self-generate an organizer (generative processing). However, this kind of task can be too demanding and overload their cognitive capacity (extraneous processing). We therefore compared the learning of students who were instructed to study an illustrated text either on its own or accompanied by a readymade graphic organizer (displayed statically or step-by-step). In another group, students had to selfgenerate the organizer while reading. As predicted, providing a graphic organizer improved students' recall compared with that of the control group. Contrary to the generative hypothesis and consistent with the cognitive load hypothesis, the self-generated organizer group 1) performed more poorly on the recall test than the readymade organizer groups, and 2) achieved lower transfer scores.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/2D6H2PT4/Colliot and Jamet - 2018 - Does self-generating a graphic organizer while reading improve students'.pdf}
}

@article{colliotFautilRendreApprenant2017,
  title = {{Faut-il rendre l'apprenant actif dans son apprentissage ? Le cas des graphiques organisateurs}},
  shorttitle = {{Faut-il rendre l'apprenant actif dans son apprentissage ?}},
  author = {Colliot, Tiphaine and Jamet, {\'E}ric},
  year = {2017},
  month = jul,
  urldate = {2019-09-26},
  langid = {french},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/M5WPMQCB/Colliot and Jamet - 2017 - Faut-il rendre l’apprenant actif dans son apprentissage.pdf;/Users/igormoreno/Zotero/storage/RLTHND4A/hal-01710900.html}
}

@article{colliotHowDoesAdding2018,
  title = {How Does Adding versus Self-Generating a Hierarchical Outline While Learning from a Multimedia Document Influence Students' Performances?},
  author = {Colliot, Tiphaine and Jamet, {\'E}ric},
  year = {2018},
  month = mar,
  journal = {Computers in Human Behavior},
  volume = {80},
  pages = {354--361},
  issn = {0747-5632},
  doi = {10.1016/j.chb.2017.11.037},
  urldate = {2018-11-06},
  abstract = {The present study investigated the effects of a visual aid (i.e., hierarchical outline) on students' multimedia learning. We expected the presence of this aid to improve students' learning from a multimedia document, by making the relevant information more salient and explicitly highlighting the text's structure. We postulated that asking students to self-generate an outline during learning would involve them in generative processing (selection and organization), thereby promoting effective learning (generative hypothesis). However, the generation activity might prove too demanding and overload students' cognitive capacity, thus impairing their learning (cognitive load hypothesis). When we compared the learning of students who viewed a readymade outline, generated one themselves, or studied a text with no outline at all, we found that providing an outline enhanced students' retention and transfer performances compared with the control group. Contrary to the generative hypothesis and consistent with the cognitive load hypothesis, the group who self-generated a hierarchical outline performed more poorly on the retention and transfer tests than those who viewed a readymade one.},
  keywords = {Advance organizer,Cognitive load,Cognitive processes,Generative learning activity,Hierarchical outline,multimedia learning},
  file = {/Users/igormoreno/Zotero/storage/8F3WMIHN/Colliot and Jamet - 2018 - How does adding versus self-generating a hierarchical outline while learning.pdf;/Users/igormoreno/Zotero/storage/AVN4TQL4/S0747563217306751.html}
}

@misc{CommandmentsPh,
  title = {The 5+5 {{Commandments}} of a {{Ph}}.{{D}}.},
  urldate = {2020-06-06},
  howpublished = {http://matt.might.net/articles/phd-commandments/},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/2LLYHQD4/phd-commandments.html}
}

@misc{ConciseTypesafeEfficient,
  title = {Concise, Type-Safe, and Efficient Structural Diffing - {{PLMZ}} / Truediff},
  journal = {GitLab},
  urldate = {2022-03-11},
  abstract = {Fast and precise tree diffing for concise and safe tree changesets.},
  howpublished = {https://gitlab.rlp.net/plmz/truediff},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/SPR86EVH/truediff.html}
}

@article{confreyChapterReviewResearch1990,
  title = {Chapter 1: {{A Review}} of the {{Research}} on {{Student Conceptions}} in {{Mathematics}}, {{Science}}, and {{Programming}}},
  shorttitle = {Chapter 1},
  author = {Confrey, Jere},
  year = {1990},
  month = jan,
  journal = {Review of Research in Education},
  volume = {16},
  number = {1},
  pages = {3--56},
  issn = {0091-732X},
  doi = {10.3102/0091732X016001003},
  urldate = {2019-03-11},
  langid = {english},
  keywords = {Misconceptions Proposal},
  annotation = {00624},
  file = {/Users/igormoreno/Zotero/storage/KD6ZMRFP/Confrey - 1990 - Chapter 1.pdf}
}

@inproceedings{cookUnderstandingDataAbstraction2009,
  title = {On Understanding Data Abstraction, Revisited},
  booktitle = {Proceedings of the 24th {{ACM SIGPLAN}} Conference on {{Object}} Oriented Programming Systems Languages and Applications},
  author = {Cook, William R.},
  year = {2009},
  month = oct,
  series = {{{OOPSLA}} '09},
  pages = {557--572},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1640089.1640133},
  urldate = {2022-03-10},
  abstract = {In 1985 Luca Cardelli and Peter Wegner, my advisor, published an ACM Computing Surveys paper called "On understanding types, data abstraction, and polymorphism". Their work kicked off a flood of research on semantics and type theory for object-oriented programming, which continues to this day. Despite 25 years of research, there is still widespread confusion about the two forms of data abstraction, abstract data types and objects. This essay attempts to explain the differences and also why the differences matter.},
  isbn = {978-1-60558-766-0},
  keywords = {abstract data type,Abstraction,ADT,class,object},
  file = {/Users/igormoreno/Zotero/storage/FEJZMTMK/Cook - 2009 - On understanding data abstraction, revisited.pdf}
}

@article{cooperALICE3DTOOL,
  title = {{{ALICE}}: {{A}} 3-{{D TOOL FOR INTRODUCTORY PROGRAMMING CONCEPTS}}},
  author = {Cooper, Stephen and Dann, Wanda and Pausch, Randy},
  pages = {8},
  abstract = {In learning to program, many students struggle with developing algorithms, figuring out how to apply problem solving techniques in their programs, and with how to use common programming constructs. In this paper, we present a new tool that provides a possible approach to actively engage students in increasing their knowledge and skills in these areas. The tool is Alice, a 3-D interactive animation environment.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/9VFMSKAG/Cooper et al - ALICE.PDF}
}

@book{cooperEngineeringCompiler2004,
  title = {Engineering a {{Compiler}}},
  author = {Cooper, Keith D. and Torczon, Linda},
  year = {2004},
  publisher = {{Morgan Kaufman Publishers}},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/ZJ3KEW7V/Cooper and Torczon - 2004 - Engineering a Compiler.pdf}
}

@inproceedings{cooperSpatialSkillsTraining2015,
  title = {Spatial {{Skills Training}} in {{Introductory Computing}}},
  booktitle = {Proceedings of the Eleventh Annual {{International Conference}} on {{International Computing Education Research}}},
  author = {Cooper, Stephen and Wang, Karen and Israni, Maya and Sorby, Sheryl},
  year = {2015},
  month = aug,
  series = {{{ICER}} '15},
  pages = {13--20},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2787622.2787728},
  urldate = {2020-10-13},
  abstract = {This paper explores the question as to whether there is a relationship between a student's spatial abilities and her achievement in learning to program. After noting that there does seem to be a correlation, the paper explores the impact of trying to improve a student's spatial abilities. The paper reports on a preliminary study involving high school students. The study results suggest a correlation exists between receiving training in spatial skills and improved student performance in introductory computing. While the sample size in the study is small, this improvement appears to occur for students of different races/ethnicities and across different socio-economic statuses.},
  isbn = {978-1-4503-3630-7},
  keywords = {introductory computer science,spatial skills,training},
  annotation = {00037},
  file = {/Users/igormoreno/Zotero/storage/XX5JIHD7/Cooper et al - 2015 - Spatial Skills Training in Introductory Computing.pdf}
}

@misc{copelandPMD2002,
  title = {{{PMD}}},
  author = {Copeland, Tom},
  year = {2002},
  month = nov,
  journal = {PMD},
  urldate = {2022-11-17},
  howpublished = {https://pmd.github.io/\#about},
  file = {/Users/igormoreno/Zotero/storage/Y3LTB4TF/pmd.github.io.html}
}

@article{copelandWhatTuringDid,
  title = {What {{Turing Did}} after {{He Invented}} the {{Universal Turing Machine}}},
  author = {Copeland, B Jack and Proudfoot, Diane},
  pages = {19},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/Y8XG5MHE/Copeland and Proudfoot - What Turing Did after He Invented the Universal Turing Machine.pdf}
}

@article{corbalanLearnercontrolledSelectionTasks2011,
  title = {Learner-Controlled Selection of Tasks with Different Surface and Structural Features: {{Effects}} on Transfer and Efficiency},
  shorttitle = {Learner-Controlled Selection of Tasks with Different Surface and Structural Features},
  author = {Corbalan, Gemma and Kester, Liesbeth and {van Merri{\"e}nboer}, Jeroen J. G.},
  year = {2011},
  month = jan,
  journal = {Computers in Human Behavior},
  series = {Current {{Research Topics}} in {{Cognitive Load Theory}}},
  volume = {27},
  number = {1},
  pages = {76--81},
  issn = {0747-5632},
  doi = {10.1016/j.chb.2010.05.026},
  urldate = {2018-11-06},
  abstract = {Surface task features are more salient than structural task features and thus easier to recognize for novices. It is predicted that the more salient the task features the better learners can choose personally relevant and varied tasks, which enhances learning transfer. To investigate this prediction, a 2\texttimes 2 factorial experiment with 72 participants studied the effects of control over tasks that differ in their surface features (learner, program) and in their structural features (learner, program). Learner control over the selection of tasks with salient surface features enables learners to select personally relevant and varied tasks. This is believed to yield higher effectiveness (i.e., higher near and far transfer test performance) as well as higher efficiency (i.e., higher transfer test performance combined with lower associated mental effort). Learner control over the selection of tasks with non-salient structural features does not enable learners to select personally relevant and varied tasks and is therefore not expected to yield beneficial effects on learning. The results show positive effects of learner control over the selection of tasks with salient surface features for efficiency on the far transfer test but not for effectiveness. Theoretical and practical implications are discussed.},
  keywords = {Cognitive load,Learner control,Program control,Structural task features,Surface task features},
  file = {/Users/igormoreno/Zotero/storage/UN5D7948/Corbalan et al - 2011 - Learner-controlled selection of tasks with different surface and structural.pdf;/Users/igormoreno/Zotero/storage/M9FLDFTA/S0747563210001664.html}
}

@techreport{cordingleyp.DevelopingGreatTeaching2015,
  title = {Developing {{Great Teaching}}: {{Lessons}} from the International Reviews into Effective Professional Development},
  author = {{Cordingley, P.} and {Higgins, S.} and {Greany, T.} and {Buckler, N.} and {Coles-Jordan, D.} and {Crisp, B.} and {Saunders, L.} and {Coe, R.}},
  year = {2015},
  institution = {{Teacher Development Trust}},
  urldate = {2021-01-30},
  annotation = {00207},
  file = {/Users/igormoreno/Zotero/storage/QLNGNMXQ/Cordingley, P. et al - 2015 - Developing Great Teaching.pdf}
}

@book{cormenIntroductionAlgorithms2009,
  title = {Introduction to Algorithms},
  editor = {Cormen, Thomas H.},
  year = {2009},
  edition = {3rd ed},
  publisher = {{MIT Press}},
  address = {{Cambridge, Mass}},
  isbn = {978-0-262-03384-8 978-0-262-53305-8},
  langid = {english},
  lccn = {QA76.6 .C662 2009},
  keywords = {Computer algorithms,Computer programming},
  annotation = {OCLC: ocn311310321},
  file = {/Users/igormoreno/Zotero/storage/Q2BVHC2P/Cormen - 2009 - Introduction to algorithms.pdf}
}

@inproceedings{corradiniConceptionsMisconceptionsComputational2017,
  title = {Conceptions and {{Misconceptions}} about {{Computational Thinking}} among {{Italian Primary School Teachers}}},
  booktitle = {Proceedings of the 2017 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Corradini, Isabella and Lodi, Michael and Nardelli, Enrico},
  year = {2017},
  month = aug,
  pages = {136--144},
  publisher = {{ACM}},
  address = {{Tacoma Washington USA}},
  doi = {10.1145/3105726.3106194},
  urldate = {2020-06-22},
  abstract = {Many advanced countries are recognizing more and more the importance of teaching computing, in some cases even as early as in primary school. ``Computational thinking" is the term often used to denote the conceptual core of computer science or ``the way a computer scientist thinks", as Wing put it. Such term - given also the lack of a widely accepted definition - has become a ``buzzword" meaning different things to different people. We investigated the Italian primary school teachers' conceptions about computational thinking by analyzing the results of a survey (N=972) conducted in the context of ``Programma il Futuro" project. Teachers have been asked to provide a definition of computational thinking and to answer three additional related closed-ended questions. The analysis shows that, while almost half of teachers (43.4\%) have included in their definitions some fundamental elements of computational thinking, very few (10.8\%) have been able to provide an acceptably complete definition. On a more positive note, the majority is aware that computational thinking is not characterized by coding or by the use of information technology.},
  isbn = {978-1-4503-4968-0},
  langid = {english},
  annotation = {00033},
  file = {/Users/igormoreno/Zotero/storage/2VECDI82/Corradini et al - 2017 - Conceptions and Misconceptions about Computational Thinking among Italian.pdf}
}

@inproceedings{costantiniHowPlansOccur2020,
  title = {How {{Plans Occur}} in {{Novices}}' {{Programs}}: {{A Method}} to {{Evaluate Program-Writing Skills}}},
  shorttitle = {How {{Plans Occur}} in {{Novices}}' {{Programs}}},
  booktitle = {Proceedings of the 51st {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Costantini, Umberto and Lonati, Violetta and Morpurgo, Anna},
  year = {2020},
  month = feb,
  pages = {852--858},
  publisher = {{ACM}},
  address = {{Portland OR USA}},
  doi = {10.1145/3328778.3366870},
  urldate = {2020-06-22},
  abstract = {Program-writing skills are often assessed with computer-based practical exams where students are required to design, write and test small programs according to specifications written in natural language. The evaluation of such tasks is usually based on the correctness of outputs (possibly with the support of automatic tools) and the quality of code. In this paper, we propose to evaluate program-writing assignments by using Soloway's notion of plans [34]. We illustrate this idea by defining a marking scheme for some typical program-writing tasks and apply this approach to evaluate the programs written during the final examination of an introductory programming course. We then compare the resulting marks with the marks originally assigned by the instructors of the course. Findings show that the use of plans in the marking process is feasible and requires an effort similar to the one required by a traditional evaluation process, and the focus on plans when examining the source code of students gives useful insights about their difficulties.},
  isbn = {978-1-4503-6793-6},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/3YVT7CBK/Costantini et al - 2020 - How Plans Occur in Novices' Programs.pdf}
}

@book{courtneyMismeasurementLearning2016,
  title = {The {{Mismeasurement}} of {{Learning}}},
  author = {Courtney, Kevin},
  year = {2016},
  publisher = {{National Union of Teachers}},
  abstract = {How tests are damaging children and primary education},
  file = {/Users/igormoreno/Zotero/storage/PIHCH328/Courtney - 2016 - The Mismeasurement of Learning.pdf}
}

@inproceedings{cousotAbstractInterpretationUnified1977,
  title = {Abstract Interpretation: A Unified Lattice Model for Static Analysis of Programs by Construction or Approximation of Fixpoints},
  shorttitle = {Abstract Interpretation},
  booktitle = {Proceedings of the 4th {{ACM SIGACT-SIGPLAN}} Symposium on {{Principles}} of Programming Languages},
  author = {Cousot, Patrick and Cousot, Radhia},
  year = {1977},
  month = jan,
  series = {{{POPL}} '77},
  pages = {238--252},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/512950.512973},
  urldate = {2021-06-28},
  abstract = {A program denotes computations in some universe of objects. Abstract interpretation of programs consists in using that denotation to describe computations in another universe of abstract objects, so that the results of abstract execution give some information on the actual computations. An intuitive example (which we borrow from Sintzoff [72]) is the rule of signs. The text -1515 * 17 may be understood to denote computations on the abstract universe \{(+), (-), ({$\pm$})\} where the semantics of arithmetic operators is defined by the rule of signs. The abstract execution -1515 * 17 \textrightarrow{} -(+) * (+) \textrightarrow{} (-) * (+) \textrightarrow{} (-), proves that -1515 * 17 is a negative number. Abstract interpretation is concerned by a particular underlying structure of the usual universe of computations (the sign, in our example). It gives a summary of some facets of the actual executions of a program. In general this summary is simple to obtain but inaccurate (e.g. -1515 + 17 \textrightarrow{} -(+) + (+) \textrightarrow{} (-) + (+) \textrightarrow{} ({$\pm$})). Despite its fundamentally incomplete results abstract interpretation allows the programmer or the compiler to answer questions which do not need full knowledge of program executions or which tolerate an imprecise answer, (e.g. partial correctness proofs of programs ignoring the termination problems, type checking, program optimizations which are not carried in the absence of certainty about their feasibility, \ldots ).},
  isbn = {978-1-4503-7350-0},
  file = {/Users/igormoreno/Zotero/storage/RFPP3FV6/Cousot and Cousot - 1977 - Abstract interpretation a unified lattice model f.pdf}
}

@inproceedings{craigStudentDifficultiesPointer2016,
  title = {Student Difficulties with Pointer Concepts in {{C}}},
  booktitle = {Proceedings of the {{Australasian Computer Science Week Multiconference}} on - {{ACSW}} '16},
  author = {Craig, Michelle and Petersen, Andrew},
  year = {2016},
  pages = {1--10},
  publisher = {{ACM Press}},
  address = {{Canberra, Australia}},
  doi = {10.1145/2843043.2843348},
  urldate = {2020-06-22},
  abstract = {C has long been a popular language of instruction, partly because of the interface to memory exposed by pointers. However, pointers are difficult to use correctly, even for students who already have experience with basic control structures and a memory model. In this study, we define a set of key pointer concepts, presented as a taxonomy, and then evaluate their difficulty by mining submissions to a set of online lab exercises that focus on the concepts in our taxonomy.},
  isbn = {978-1-4503-4042-7},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/73JUDIV4/Craig and Petersen - 2016 - Student difficulties with pointer concepts in C.pdf}
}

@book{crandallWorkingMindsPractitioner2006,
  title = {Working Minds: A Practitioner's Guide to Cognitive Task Analysis},
  shorttitle = {Working Minds},
  author = {Crandall, Beth and Klein, Gary A. and Hoffman, Robert R.},
  year = {2006},
  publisher = {{MIT Press}},
  address = {{Cambridge, Mass}},
  isbn = {978-0-262-03351-0 978-0-262-53281-5},
  langid = {english},
  lccn = {BF311 .C732 2006},
  keywords = {Cognition,Strong,Task analysis,Task Performance and Analysis,To Read},
  annotation = {OCLC: ocm62393256},
  file = {/Users/igormoreno/Zotero/storage/8DXMBYJH/Crandall et al - 2006 - Working minds.pdf}
}

@book{creswellEducationalResearchPlanning2020,
  title = {Educational {{Research}}: {{Planning}}, {{Conducting}}, and {{Evaluating Quantitative}} and {{Qualitative Research}}, 6th {{Edition}}},
  shorttitle = {Educational {{Research}}},
  author = {Creswell, John W. and Guetterman, Timothy C.},
  year = {2020},
  edition = {6},
  publisher = {{Pearson}},
  urldate = {2020-10-12},
  abstract = {Educational Research: Planning, Conducting, and Evaluating Quantitative and Qualitative Research, 6th Edition},
  langid = {english},
  annotation = {49315},
  file = {/Users/igormoreno/Zotero/storage/Q7R3EUV6/Educational Research Planning, Conducting, and Ev.pdf;/Users/igormoreno/Zotero/storage/924DW4S7/PGM335066.html}
}

@article{crichtonGroundedConceptualModel2023,
  title = {A {{Grounded Conceptual Model}} for {{Ownership Types}} in {{Rust}}},
  author = {Crichton, Will and Gray, Gavin and Krishnamurthi, Shriram},
  year = {2023},
  month = oct,
  journal = {Proceedings of the ACM on Programming Languages},
  volume = {7},
  number = {OOPSLA2},
  pages = {265:1224--265:1252},
  doi = {10.1145/3622841},
  urldate = {2023-10-30},
  abstract = {Programmers learning Rust struggle to understand ownership types, Rust's core mechanism for ensuring memory safety without garbage collection. This paper describes our attempt to systematically design a pedagogy for ownership types. First, we studied Rust developers' misconceptions of ownership to create the Ownership Inventory, a new instrument for measuring a person's knowledge of ownership. We found that Rust learners could not connect Rust's static and dynamic semantics, such as determining why an ill-typed program would (or would not) exhibit undefined behavior. Second, we created a conceptual model of Rust's semantics that explains borrow checking in terms of flow-sensitive permissions on paths into memory. Third, we implemented a Rust compiler plugin that visualizes programs under the model. Fourth, we integrated the permissions model and visualizations into a broader pedagogy of ownership by writing a new ownership chapter for The Rust Programming Language, a popular Rust textbook. Fifth, we evaluated an initial deployment of our pedagogy against the original version, using reader responses to the Ownership Inventory as a point of comparison. Thus far, the new pedagogy has improved learner scores on the Ownership Inventory by an average of 9},
  keywords = {concept inventory,ownership types,program state visualization,Rust},
  file = {/Users/igormoreno/Zotero/storage/9IU9F7FX/Crichton et al - 2023 - A Grounded Conceptual Model for Ownership Types in Rust.pdf}
}

@misc{CSTeachingTips,
  title = {Computer {{Science Teaching Tips}}},
  author = {Lewis, Colleen},
  year = {2021},
  month = mar,
  urldate = {2021-03-12},
  howpublished = {https://www.csteachingtips.org/ [Accessed March 29, 2021]},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/YMM6CJQ2/www.csteachingtips.org.html}
}

@book{culicoverGrammarComplexityLanguage2013,
  title = {Grammar \& {{Complexity}}: {{Language}} at the {{Intersection}} of {{Competence}} and {{Performance}}},
  shorttitle = {Grammar \& {{Complexity}}},
  author = {Culicover, Peter W.},
  year = {2013},
  month = apr,
  publisher = {{Oxford University Press}},
  address = {{Oxford, New York}},
  abstract = {This book combines ideas about the architecture of grammar and language acquisition, processing, and change to explain why languages show regular patterns when there is so much irregularity in their use and so much complexity when there is such regularity in linguistic phenomena. Peter Culicover argues that the structure of language can be understood and explained in terms of two kinds of complexity: firstly that of the correspondence between form and meaning; secondly in the real-time processes involved in the construction of meanings in linguistic expressions.   Mainstream syntactic theory has focused largely on regularities within and across languages, relegating to the periphery exceptional and idiosyncratic phenomena. But, the author argues, a languages irregular and unique features offer fundamental insights into the nature of language, how it changes, and how it is produced and understood.   Peter Culicover's new book offers a pertinent and original contribution to key current debates in linguistic theory. It will interest scholars and advanced students of linguists of all theoretical persuasions.},
  isbn = {978-0-19-965459-8},
  file = {/Users/igormoreno/Zotero/storage/L3XDMEMX/grammar-and-complexity-9780199654598.html}
}

@article{culicoverMarkednessAntisymmetryComplexity2002,
  title = {Markedness, Antisymmetry and Complexity of Constructions},
  author = {Culicover, Peter and Nowak, Andrzej},
  year = {2002},
  month = dec,
  journal = {Linguistic Variation Yearbook},
  volume = {2},
  pages = {5--30},
  issn = {9780199660230},
  doi = {10.1075/livy.2.03cul},
  abstract = {Our concern in this paper is with the interactions between language change, language acquisition, markedness, and computational complexity of mappings between grammatical representations. We demonstrate through a computational simulation of language change that markedness can produce `gaps' in the distribution of combinations of linguistic features. Certain combinations will not occur, simply because there are combinations that are computationally less complex. We argue that one contributor to markedness in this sense is the degree of the transparency of the mapping between superficial syntactic structure and Conceptual Structure. We develop a rough measure of complexity that takes into account the extent to which the syntactic structure involves stretching and twisting of the relations that hold in Conceptual Structure, and we show how it gives the right results in a number of specific cases.}
}

@inproceedings{cunninghamEffectSketchingTracing2017,
  title = {The {{Effect}} of {{Sketching}} and {{Tracing}} on {{Instructors}}' {{Understanding}} of {{Student Misconceptions}}},
  booktitle = {Proceedings of the 2017 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Cunningham, Kathryn},
  year = {2017},
  month = aug,
  pages = {301--302},
  publisher = {{ACM}},
  address = {{Tacoma Washington USA}},
  doi = {10.1145/3105726.3105746},
  urldate = {2020-06-22},
  isbn = {978-1-4503-4968-0},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/4DGAXML6/Cunningham - 2017 - The Effect of Sketching and Tracing on Instructors' Understanding of Student.pdf}
}

@inproceedings{cunninghamNoviceProgrammerNeeds2018,
  title = {The Novice Programmer Needs a Plan},
  booktitle = {2018 {{IEEE Symposium}} on {{Visual Languages}} and {{Human-Centric Computing}} ({{VL}}/{{HCC}})},
  author = {Cunningham, Kathryn},
  year = {2018},
  month = oct,
  pages = {269--270},
  publisher = {{IEEE}},
  address = {{Lisbon}},
  doi = {10.1109/VLHCC.2018.8506481},
  urldate = {2020-06-22},
  isbn = {978-1-5386-4235-1},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/BFVBUDDI/Cunningham - 2018 - The novice programmer needs a plan.pdf}
}

@inproceedings{cunninghamNoviceRationalesSketching2019,
  ids = {cunninghamNoviceRationalesSketching2019a},
  title = {Novice {{Rationales}} for {{Sketching}} and {{Tracing}}, and {{How They Try}} to {{Avoid It}}},
  booktitle = {Proceedings of the 2019 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Cunningham, Kathryn and Ke, Shannon and Guzdial, Mark and Ericson, Barbara},
  year = {2019},
  month = jul,
  pages = {37--43},
  publisher = {{ACM}},
  address = {{Aberdeen Scotland Uk}},
  doi = {10.1145/3304221.3319788},
  urldate = {2020-06-22},
  abstract = {Prior research has shown that sketching out a code trace on paper is correlated with higher scores on code reading problems. Why do students sometimes choose not to draw out a code trace, or if they do, choose a different sketching technique than their instructor has demonstrated? In this study, we interviewed 13 CS1 students retrospectively about their decisions to sketch and draw on a recent programming exam. When students do sketch, we find that their sketching choices do not always align with a strict execution of the notional machine. Sketching choices are driven by a search for a program's patterns, an attempt to create organizational structure among intermediate values, and the tracking of prior steps and results. When novices don't sketch, they often report that they've identified the goal that the code achieves. In either case, novices are searching for the functionality of code, rather than merely tracing its behavior.},
  isbn = {978-1-4503-6895-7},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/F3TXHYWI/Cunningham et al - 2019 - Novice Rationales for Sketching and Tracing, and How They Try to Avoid It.pdf;/Users/igormoreno/Zotero/storage/KCICFWM3/Cunningham et al. - 2019 - Novice Rationales for Sketching and Tracing, and H.pdf}
}

@inproceedings{cunninghamUsingTracingSketching2017,
  title = {Using {{Tracing}} and {{Sketching}} to {{Solve Programming Problems}}: {{Replicating}} and {{Extending}} an {{Analysis}} of {{What Students Draw}}},
  shorttitle = {Using {{Tracing}} and {{Sketching}} to {{Solve Programming Problems}}},
  booktitle = {Proceedings of the 2017 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Cunningham, Kathryn and Blanchard, Sarah and Ericson, Barbara and Guzdial, Mark},
  year = {2017},
  month = aug,
  pages = {164--172},
  publisher = {{ACM}},
  address = {{Tacoma Washington USA}},
  doi = {10.1145/3105726.3106190},
  urldate = {2020-06-22},
  abstract = {Sketching out a code trace is a cognitive assistance for programmers, student and professional. Previous research (Lister et al. 2004) showed that students who sketch a trace on paper had greater success on code `reading' problems involving loops, arrays, and conditionals. We replicated this nding, and developed further categories of student sketching strategies. Our results support previous ndings that students who don't sketch on code reading problems have a lower success rate than students who do sketch. We found that students who sketch incomplete traces also have a low success rate, similar to students who don't sketch at all. We categorized sketching strategies on new problem types (code writing, code ordering, and code xing) and nd that di erent types of sketching are used on these problems, not always with increased success. We ground our results in a theory of sketching as a method for distributing cognition and as a demonstration of the process of the notional machine.},
  isbn = {978-1-4503-4968-0},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/FQI9BCE2/Cunningham et al - 2017 - Using Tracing and Sketching to Solve Programming Problems.pdf}
}

@article{curtisFIFTEENYEARSPSYCHOLOGY,
  title = {{{FIFTEEN YEARS OF PSYCHOLOGY IN SOFTWARE ENGINEERING}}: {{INDIVIDUAL DIFFERENCES AND COGNITIVE SCIENCE}}},
  author = {Curtis, Bill},
  pages = {10},
  abstract = {Since the 1950's, psychologists have studied the behavioral aspects of software engineering. However, the results of their research have never been organized into a subfield of either software engineering or psychology. This failure results from the difficulty of integrating theory and data from the mixture of paradigms borrowed from psychology. This paper will review some of the psychological research on software engineering performed since the Garmisch Conference in 1968. This review will be organized under two of the psychological paradigms used in exploring programming problems: individual differences and cognitive science. The major theoretical and practical contributions of each area to the theory and practice of software engineering will be discussed. The review will end with a call for more research guided by the paradigm of cognitive science, since such results are the easiest to integrate with new developments in artificial intelligence and computer science theory.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/CZZH3TER/Curtis - FIFTEEN YEARS OF PSYCHOLOGY IN SOFTWARE ENGINEERING.pdf}
}

@misc{curzonSemanticWavesAnalysing2020,
  title = {Semantic Waves: Analysing Activities' Effectiveness},
  shorttitle = {Semantic Waves},
  author = {Curzon, Paul},
  year = {2020},
  month = apr,
  urldate = {2021-04-03},
  abstract = {Learn from and discuss with leading researchers in computing education: http://rpf.io/fyt-rs\hspace{0pt} Find out more about us: http://rpf.io/fyt\hspace{0pt} *** Young people \&amp; parents *** Learn about coding with us live through Digital Making at Home: http://rpf.io/fyt-dmah\hspace{0pt} Create coding projects with our step-by-step guides in 25+ languages: http://rpf.io/fyt-op\hspace{0pt} Discover our free, volunteer-run coding clubs near you Code Club in schools in the UK, ROI, USA: http://rpf.io/fyt-cc\hspace{0pt} Code Club in schools all over the world: http://rpf.io/fyt-cci\hspace{0pt} CoderDojo in community spaces all over the world: http://rpf.io/fyt-cd\hspace{0pt}  Send your programs to space in the European Astro Pi Challenge: http://rpf.io/fyt-ap\hspace{0pt} Share your creation with the world in the Coolest Projects tech showcase: http://rpf.io/fyt-cp\hspace{0pt} *** Teachers \&amp; educators *** Build your teaching skills with our free online courses: http://rpf.io/fyt-oc\hspace{0pt} Read our free magazine for computing educators, Hello World: http://rpf.io/fyt-hw\hspace{0pt} Set up a Code Club in your school In the UK, ROI, USA: http://rpf.io/fyt-cc\hspace{0pt} All over the world: http://rpf.io/fyt-cci\hspace{0pt} Support your learners to run their own science experiments in space as part of the European Astro Pi Challenge: http://rpf.io/fyt-ap\hspace{0pt} *** You can help make computing accessible to more young people across the globe *** Volunteer at a coding club near you: http://rpf.io/fyt-vol\hspace{0pt} Join our community of volunteer translators: http://rpf.io/fyt-tr\hspace{0pt} Donate to sustain our work: http://rpf.io/fyt-don\hspace{0pt} *** Interested in the Raspberry Pi computer? *** For videos related to our products, subscribe to the Raspberry Pi computer channel: http://rpf.io/ytsub\hspace{0pt} Buy a Raspberry Pi from one of our Approved Resellers: http://rpf.io/fyt-prod\hspace{0pt} Join a community event run by Raspberry Pi enthusiasts: http://rpf.io/fyt-jam\hspace{0pt} The Raspberry Pi Foundation is a global nonprofit that works to put the power of computing and digital making into the hands of people all over the world. We do this so that more people are able to harness the power of computing and digital technologies for work, to solve problems that matter to them, and to express themselves creatively. This video's copyright is held by the Raspberry Pi Foundation, and the video is dual licensed under the YouTube Standard license and Creative Commons CC BY-SA 4.0 license.}
}

@inproceedings{cuttsCodeNotCode2014,
  title = {Code or (Not Code): Separating Formal and Natural Language in {{CS}} Education},
  shorttitle = {Code or (Not Code)},
  booktitle = {Proceedings of the 9th {{Workshop}} in {{Primary}} and {{Secondary Computing Education}} on - {{WiPSCE}} '14},
  author = {Cutts, Quintin and Connor, Richard and Michaelson, Greg and Donaldson, Peter},
  year = {2014},
  pages = {20--28},
  publisher = {{ACM Press}},
  address = {{Berlin, Germany}},
  doi = {10.1145/2670757.2670780},
  urldate = {2020-06-22},
  abstract = {This paper argues that the ``institutionalised understanding'' of pseudo-code as a blend of formal and natural languages makes it an unsuitable choice for national assessment where the intention is to test program comprehension skills. It permits question-setters to inadvertently introduce a level of ambiguity and consequent confusion. This is not in keeping with either good assessment practice or an argument developed in the paper that CS education should be clearly fostering the skills needed for understanding formal, as distinct from natural, languages. The argument is backed up by an analysis of 49 questions drawn from the national school CS examinations of a single country, spanning a period of six years and two phases \textendash{} the first in which no formal pseudocode was defined, the second in which a formal reference language, referred to as a ``formally-defined pseudo-code", was provided for teachers and exam setters. The analysis demonstrates that in both phases, incorrect, confusing or ambiguous code was presented in questions. The paper concludes by recommending that the term reference language should be used in place of pseudo-code, and an appropriate formally-defined language specified, in national exam settings where a common language of assessment is required. This change of terms emphasises the characteristics required of a language to be used for assessment of program comprehension. The reference language used in the study is outlined. It was designed by the authors for human readability and also to make absolutely explicit the demarcation between formal and informal language, in such a way that automated checking can be carried out on programs written in the language. Formal specifications and a checker for the language are available.},
  isbn = {978-1-4503-3250-7},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/UAPRSFN7/Cutts et al - 2014 - Code or (not code).pdf}
}

@article{cuttsEvaluationProfessionalLearning2017,
  title = {An Evaluation of a Professional Learning Network for Computer Science Teachers},
  author = {Cutts, Quintin and Robertson, Judy and Donaldson, Peter and O'Donnell, Laurie},
  year = {2017},
  month = jan,
  journal = {Computer Science Education},
  volume = {27},
  number = {1},
  pages = {30--53},
  publisher = {{Routledge}},
  issn = {0899-3408},
  doi = {10.1080/08993408.2017.1315958},
  urldate = {2021-01-30},
  abstract = {This paper describes and evaluates aspects of a professional development programme for existing CS teachers in secondary schools (PLAN C) which was designed to support teachers at a time of substantial curricular change. The paper's particular focus is on the formation of a teacher professional development network across several hundred teachers and a wide geographical area. Evidence from a series of observations and teacher surveys over a two-year period is analysed with respect to the project's programme theory in order to illustrate not only whether it worked as intended, by why. Results indicate that the PLAN C design has been successful in increasing teachers' professional confidence and appears to have catalysed powerful change in attitudes to learning. Presentation of challenging pedagogical content knowledge and conceptual frameworks, high-quality teacher-led professional dialogue, along with the space for reflection and classroom trials, triggered examination of the teachers' own current practices.},
  keywords = {Computer science education,professional learning,teacher education},
  annotation = {00020},
  file = {/Users/igormoreno/Zotero/storage/BLLBU5VI/Cutts et al - 2017 - An evaluation of a professional learning network for computer science teachers.pdf;/Users/igormoreno/Zotero/storage/3CG5PLL6/08993408.2017.html}
}

@article{cuttsExperienceReportThinkathon,
  title = {Experience {{Report}}: {{Thinkathon}} - {{Countering}} an `{{I Got It Working}}' {{Mentality}} with {{Pencil-}} and-{{Paper Exercises}}},
  author = {Cutts, Quintin and Barr, Matthew and Ada, Mireilla Bikanga and Donaldson, Peter and Draper, Steve and Parkinson, Jack and Singer, Jeremy and Sundin, Lovisa},
  pages = {8},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/PWY4DZ75/Cutts et al - Experience Report.pdf}
}

@inproceedings{cuvicExtendingObjectorientedNotional2017,
  title = {Extending the Object-Oriented Notional Machine Notation with Inheritance, Polymorphism, and {{GUI}} Events},
  booktitle = {2017 40th {{International Convention}} on {{Information}} and {{Communication Technology}}, {{Electronics}} and {{Microelectronics}} ({{MIPRO}})},
  author = {Cuvic, Marin Aglic and Maras, Josip and Mladenovic, Sasa},
  year = {2017},
  month = may,
  pages = {794--799},
  publisher = {{IEEE}},
  address = {{Opatija, Croatia}},
  doi = {10.23919/MIPRO.2017.7973530},
  urldate = {2020-06-22},
  abstract = {Learning to program is a challenging task. Novices need to have an accurate understanding of the program execution at the conceptual level provided by the programming language. This level of execution is often referred to as the notional machine, which is often easier to understand through program visualizations.},
  isbn = {978-953-233-090-8},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/HN8YVTY8/Cuvic et al - 2017 - Extending the object-oriented notional machine notation with inheritance,.pdf}
}

@inproceedings{dadicMeaningfulLearningTutoring2008,
  title = {Meaningful Learning in the Tutoring System for Programming},
  booktitle = {{{ITI}} 2008 - 30th {{International Conference}} on {{Information Technology Interfaces}}},
  author = {Dadic, Tonci and Stankov, Slavomir and Rosic, Marko},
  year = {2008},
  month = jun,
  pages = {483--488},
  publisher = {{IEEE}},
  address = {{Cavtat/Dubrovnik, Croatia}},
  doi = {10.1109/ITI.2008.4588458},
  urldate = {2020-06-22},
  abstract = {Tutoring systems for programming helps students to understand features of target programming language, and develops their general problem solving skill. Our system guides novices in learning syntax and semantics of programming language, problem decomposition, program design and testing. The notional machine defined by programming language and its verbal description of instruction actions helps students to understand semantics of instructions. Advancement through the course material controlled by computer teacher supports connection of new concepts to the present student's knowledge.},
  isbn = {978-953-7138-12-7},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/XF9S7BPZ/Dadic et al - 2008 - Meaningful learning in the tutoring system for programming.pdf}
}

@article{dagieneBebrasSustainableCommunity2016,
  title = {Bebras - a {{Sustainable Community Building Model}} for the {{Concept Based Learning}} of {{Informatics}} and {{Computational Thinking}}},
  author = {Dagien{\.e}, Valentina and Stupurien{\.e}, Gabriel{\.e}},
  year = {2016},
  month = may,
  journal = {INFORMATICS IN EDUCATION},
  volume = {15},
  number = {1},
  pages = {25--44},
  issn = {23358971},
  doi = {10.15388/infedu.2016.02},
  urldate = {2018-10-22},
  abstract = {As an international informatics contest, or challenge, Bebras has started the second decade of its existence. The contest attracts more and more countries every year, recently there have been over 40 participating countries. From a single contest-focused annual event Bebras developed to a multifunctional challenge and an activities-based educational community building model. This paper aims to introduce the Bebras model using ten years of observations in implementing the contest in different countries. The model is essentially based on democratic and inclusive education values. Systematic literature review of research papers concerning Bebras activities has made an integral background for this model. The model is represented both at international and national levels and consists of several components where the development of Bebras tasks has taken a very significant role. Reasoning on innovated learning informatics and strengthening computational thinking by utilising carefully selected informatics concepts is discussed as well.},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/WTJST3V3/Dagienė and Stupurienė - 2016 - Bebras - a Sustainable Community Building Model for the Concept Based Learning.pdf}
}

@book{dahlGrowthMaintenanceLinguistic,
  title = {The {{Growth}} and {{Maintenance}} of {{Linguistic Complexity}}},
  author = {Dahl, Osten},
  journal = {slcs.71},
  publisher = {{John Benjamins Publishing Company}},
  urldate = {2021-10-10},
  abstract = {Issue of Studies in Language Companion Series},
  isbn = {978-90-272-3081-2},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/DXICKFYD/slcs.html}
}

@inproceedings{daleparsonsParsonsProgrammingPuzzles2006,
  title = {Parsons Programming Puzzles: {{A}} Fun and Effective Learning Tool for First Programming Courses},
  booktitle = {Australasian {{Computing Education Conference}}},
  author = {{Dale Parsons} and {Patricia Haden}},
  year = {2006},
  address = {{Hobart, Australia}},
  file = {/Users/igormoreno/Zotero/storage/8X7AKB3A/Dale Parsons and Patricia Haden - 2006 - Parsons programming puzzles.pdf}
}

@inproceedings{daltonAutomatedConstructionMemory2010,
  title = {Automated Construction of Memory Diagrams for Program Comprehension},
  booktitle = {Proceedings of the 48th {{Annual Southeast Regional Conference}}},
  author = {Dalton, Andrew R. and Kreahling, William},
  year = {2010},
  month = apr,
  series = {{{ACM SE}} '10},
  pages = {1--6},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1900008.1900040},
  urldate = {2023-04-14},
  abstract = {Memory diagrams serve as a visualization technique that enables students to better understand the abstract state of program memory. Unlike traditional program visualizations, memory diagrams illustrate where variables of different types and storage classes are allocated. Our experience is that memory diagrams enhance the ability of novice programmers to understand object-oriented programming. Unfortunately, however, constructing these diagrams by hand can prove tedious. We introduce a toolkit for constructing memory diagrams. The toolkit enables students to verify their understanding of the state of their programs' memory, and allows instructors to generate both correct and incorrect diagrams to test their students' understanding of course material. We evaluate the toolkit in terms of its ability to generate visualizations of various Java language constructs including enumerations, arrays, and reference aliasing.},
  isbn = {978-1-4503-0064-3},
  keywords = {CS1/2,object-oriented programming,program state,visualization},
  file = {/Users/igormoreno/Zotero/storage/S3EC5Z8A/Dalton and Kreahling - 2010 - Automated construction of memory diagrams for prog.pdf}
}

@inproceedings{danielakDeprecatingMisconceptionsContextDependent2019,
  title = {Deprecating {{Misconceptions Through Context-Dependent Accounts}} of {{Productive Knowledge}}},
  booktitle = {Proceedings of the 2019 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Danielak, Brian A.},
  year = {2019},
  series = {{{ICER}} '19},
  pages = {91--100},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3291279.3339424},
  urldate = {2019-10-07},
  abstract = {This paper aims to expand our sense of what's possible in modeling cognition within computing education research. We argue that research approaches that privilege canonical knowledge do so at the expense of other productive knowledge and ways of knowing that students have. We explore applicable cognitive theory by showing how manifold models of cognition can be powerful frameworks for analysis in Computing Education (CEd). Finally, we conclude with an exploration of epistemological concerns, arguing that a fundamental concern for our research community should be paying attention to what counts as knowledge and knowing in computing learning environments.},
  isbn = {978-1-4503-6185-9},
  keywords = {cognition,ForAndrea,misconceptions,programming,psychology},
  annotation = {00003},
  file = {/Users/igormoreno/Zotero/storage/N4SSAE54/Danielak - 2019 - Deprecating Misconceptions Through Context-Dependent Accounts of Productive.pdf}
}

@inproceedings{danielsiekDetectingUnderstandingStudents2012,
  title = {Detecting and Understanding Students' Misconceptions Related to Algorithms and Data Structures},
  booktitle = {Proceedings of the 43rd {{ACM}} Technical Symposium on {{Computer Science Education}} - {{SIGCSE}} '12},
  author = {Danielsiek, Holger and Paul, Wolfgang and Vahrenhold, Jan},
  year = {2012},
  pages = {21},
  publisher = {{ACM Press}},
  address = {{Raleigh, North Carolina, USA}},
  doi = {10.1145/2157136.2157148},
  urldate = {2018-10-22},
  abstract = {We describe the first results of our work towards a concept inventory for Algorithms and Data Structures. Based on expert interviews and the analysis of 400 exams we were able to identify several core topics which are prone to error. In a pilot study, we verified misconceptions known from the literature and identified previously unknown misconceptions related to Algorithms and Data Structures. In addition to this, we report on methodological issues and point out the importance of a two-pronged approach to data collection.},
  isbn = {978-1-4503-1098-7},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/HJ8TINXU/Danielsiek et al - 2012 - Detecting and understanding students' misconceptions related to algorithms and.pdf}
}

@article{daradoumisAnalyzingStudentsPerceptions2019,
  title = {Analyzing Students' Perceptions to Improve the Design of an Automated Assessment Tool in Online Distributed Programming},
  author = {Daradoumis, Thanasis and Marqu{\`e}s Puig, Joan Manuel and Arguedas, Marta and Calvet Li{\~n}an, Laura},
  year = {2019},
  month = jan,
  journal = {Computers \& Education},
  volume = {128},
  pages = {159--170},
  issn = {03601315},
  doi = {10.1016/j.compedu.2018.09.021},
  urldate = {2018-11-06},
  abstract = {Designing an automated assessment tool in online distributed programming can provide students with a meaningful distributed learning environment that improves their academic performance. However, it is a complex and challenging endeavor that, as far as we know, has not been investigated yet. To address this research gap, this work presents a new automated assessment tool in online distributed programming, called DSLab. The tool was evaluated in a real long-term online educational experience by analyzing students' perceptions with the aim of improving its design. A quantitative analysis method was employed to collect and analyze data concerning students' perceptions as to whether using the DSLab tool was really a worthwhile experience. Our study shows that the DSLab tool includes acceptable utility and efficiency features. It also identifies factors that influence current design efficiency with the aim of improving DSLab design by suggesting new functionalities and ideas.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/T566W5UF/Daradoumis et al - 2019 - Analyzing students' perceptions to improve the design of an automated.pdf}
}

@techreport{darling-hammondEffectiveTeacherProfessional2017,
  title = {Effective {{Teacher Professional Development}}},
  author = {{Darling-Hammond}, Linda and Hyler, Maria E and Gardner, Madelyn},
  year = {2017},
  month = jun,
  address = {{Palo Alto, CA, USA}},
  institution = {{Learning Policy Institute}},
  langid = {english},
  annotation = {01101},
  file = {/Users/igormoreno/Zotero/storage/D3TBGXKD/Institute et al. - Effective Teacher Professional Development.pdf}
}

@phdthesis{daveberryGeneratingProgramAnimations1991,
  title = {Generating {{Program Animations}} from {{Programming Language Semantics}}},
  author = {{Dave Berry}},
  year = {1991},
  urldate = {2021-03-08},
  school = {University of Edinburgh},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/82SIE333/Dave Berry - 1991 - Generating Program Animations from Programming Language Semantics.pdf}
}

@article{DAVIES1993237,
  title = {Models and Theories of Programming Strategy},
  author = {Davies, Simon P.},
  year = {1993},
  journal = {International Journal of Man-Machine Studies},
  volume = {39},
  number = {2},
  pages = {237--267},
  issn = {0020-7373},
  doi = {10.1006/imms.1993.1061},
  abstract = {Much of the literature concerned with understanding the nature of programming skill has focused explicitly upon the declarative aspects of programmers' knowledge. This literature has sought to describe the nature of stereotypical programming knowledge structures and their organization. However, one major limitation of many of these knowledge-based theories is that they often fail to consider the way in which knowledge is used or applied. Another strand of literature is less well represented. This literature deals with the strategic elements of programming skill and is directed towards an analysis of the strategies commonly employed by programmers in the generation and the comprehension of programs. In this paper an attempt is made to unify various analyses of programming strategy. This paper presents a review of the literature in this area, highlighting common themes and concerns, and proposes a model of strategy development which attempts to encompass the central findings of previous research in this area. It is suggested that many studies of programming strategy are descriptive and fail to explain why strategies take the form they do or to explain the typical strategy shifts which are observed during the transitions between different levels of skill. This paper suggests that what is needed is an explanation of programming skill that integrates ideas about knowledge representation with a strategic model, enabling one to make predictions about how changes in knowledge representation might give rise to particular strategies and to the strategy changes associated with developing expertise. This paper concludes by making a number of brief suggestions about the possible nature of this model and its implications for theories of programming expertise.},
  file = {/Users/igormoreno/Zotero/storage/B4SC9DYJ/Davies - 1993 - Models and theories of programming strategy.pdf;/Users/igormoreno/Zotero/storage/HTL77XCU/1-s2.0-S0020737383710618-main.pdf}
}

@inproceedings{daviesEffectsEmphasizingComputational2008,
  title = {The Effects of Emphasizing Computational Thinking in an Introductory Programming Course},
  booktitle = {2008 38th {{Annual Frontiers}} in {{Education Conference}}},
  author = {Davies, Stephen},
  year = {2008},
  month = oct,
  pages = {T2C-3-T2C-8},
  publisher = {{IEEE}},
  address = {{Saratoga Springs, NY, USA}},
  doi = {10.1109/FIE.2008.4720362},
  urldate = {2020-06-22},
  abstract = {In many introductory programming courses, the surface features of the programming language can distract and intimidate students so much that they fail to concentrate on what is really the ``brainy'' task: solving the problem conceptually. To counter this, we devised a form of structured pseudocode, designed to highlight and facilitate algorithmic construction so that the complexities of the programming language can be deferred until proficiency in design has been reached. Students taught with this experimental approach are not introduced to the language itself, or the compiler, until the last few weeks of the semester. A controlled experiment comparing this approach with a traditional language-based pedagogy has revealed that by the end of the course, students' programming skills, even on language-specific tasks, is every bit as strong as students taught traditionally, and that their comfort level with modularity (writing functions) is increased. Additionally, we found that students appear to strongly prefer such an approach, citing mostly emotive benefits, and that these effects may be particularly strong among women.},
  isbn = {978-1-4244-1969-2},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/Q4DM2MKC/Davies - 2008 - The effects of emphasizing computational thinking in an introductory.pdf}
}

@book{davisScientificPapersPresentations2012,
  title = {Scientific Papers and Presentations},
  author = {Davis, Martha and Davis, Kaaron J. and Dunagan, Marion M.},
  year = {2012},
  edition = {Third edition},
  publisher = {{Elsevier/AP}},
  address = {{Amsterdam}},
  isbn = {978-0-12-384727-0},
  langid = {english},
  lccn = {T11 .D324 2012},
  keywords = {Communication of technical information,Technical writing},
  file = {/Users/igormoreno/Zotero/storage/JRAGMTIA/Davis et al - 2012 - Scientific papers and presentations.pdf}
}

@article{dawsonConcreteAbstractFormal2010,
  title = {Concrete, Abstract, Formal, and Systematic Operations as Observed in a "{{Piagetian}}" Balance-Beam Task Series},
  author = {Dawson, Theo Linda and Goodheart, Eric Andrew and Draney, Karen and Wilson, Mark and Commons, Michael Lamport},
  year = {2010},
  journal = {Journal of Applied Measurement},
  volume = {11},
  number = {1},
  pages = {11--23},
  issn = {1529-7713},
  abstract = {We performed a Rasch analysis of cross-sectional developmental data gathered from children and adults who were presented with a task series derived from Inhelder's and Piaget's balance beam. The partial credit model situates both participants and items along a single hierarchically ordered dimension. As the Model of Hierarchical Complexity predicted, order of hierarchical complexity accurately predicted item difficulty, with notable exceptions at the formal and systematic levels. Gappiness between items was examined using the saltus model. A two level saltus model, which examined the gap between the concrete/abstract and formal/systematic items, was a better predictor of performance than the Rasch analysis (chi square = 71.91, df = 4, p {$<$} .01).},
  langid = {english},
  pmid = {20351445},
  keywords = {Adolescent,Adult,Child,Cognition,Cross-Sectional Studies,Female,Humans,Male,Middle Aged,{Models, Psychological},{Models, Statistical},Psychometrics,Surveys and Questionnaires,Young Adult},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/SE7HA5KV/Dawson et al - 2010 - Concrete, abstract, formal, and systematic operations as observed in a.pdf}
}

@article{de-marcosEffectivenessGamelikeSocial2016,
  title = {On the Effectiveness of Game-like and Social Approaches in Learning: {{Comparing}} Educational Gaming, Gamification \& Social Networking},
  shorttitle = {On the Effectiveness of Game-like and Social Approaches in Learning},
  author = {{de-Marcos}, Luis and {Garcia-Lopez}, Eva and {Garcia-Cabot}, Antonio},
  year = {2016},
  month = apr,
  journal = {Computers \& Education},
  volume = {95},
  pages = {99--113},
  issn = {03601315},
  doi = {10.1016/j.compedu.2015.12.008},
  urldate = {2023-06-27},
  abstract = {Game-like approaches are becoming increasingly popular in education, with educational games and gamification drawing increasing levels of attention. While games specifically designed for educational purposes have been used for decades, gamification is particularly new and contrasting evidence was presented about its effectiveness. The potential of social networks has also been harnessed by educators and institutions either using popular social networking sites or specific educational instances. This paper studies how well-established approaches (educational game and social networking) compare with more novel ones (gamification and social gamification) in terms of learning performance in an undergraduate course. Four experimental conditions were compared in an experiment (N {$\frac{1}{4}$} 379). Results suggest that all experimental conditions significantly impact on learning performance, but social gamification returned better results in terms of immediacy and for all types of assessments.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/UX42NQGW/de-Marcos et al. - 2016 - On the effectiveness of game-like and social appro.pdf}
}

@inproceedings{dearaujoSystematicMappingStudy2016,
  title = {A Systematic Mapping Study on Assessing Computational Thinking Abilities},
  booktitle = {2016 {{IEEE Frontiers}} in {{Education Conference}} ({{FIE}})},
  author = {{de Araujo}, Ana Liz Souto O. and Andrade, Wilkerson L. and Serey Guerrero, Dalton D.},
  year = {2016},
  month = oct,
  pages = {1--9},
  publisher = {{IEEE}},
  address = {{Erie, PA, USA}},
  doi = {10.1109/FIE.2016.7757678},
  urldate = {2023-03-16},
  abstract = {Several initiatives have been created to promote Computational Thinking (CT) abilities in students. There are multiple approaches of assessing CT and wide abilities and skills involved. However, the evidence on how to assess CT has not yet been systematically grouped or reviewed. The goal of our study is to identify and classify approaches to promote CT and the different ways of assessing CT abilities. To achieve this goal, a systematic mapping study was planned and executed. The results reveal that: (i) programming courses are the most common pedagogical approaches to promote CT for K-12 students; (ii) multiple skills are involved in CT, but solving problems, algorithms, and abstraction are most common abilities assessed; and (iii) codes and multi-choice questionnaires are the most common artifacts for assessing CT abilities. This study points out to the fact that there are open questions for exploring and developing new researches for promoting and assessing CT abilities.},
  isbn = {978-1-5090-1790-4},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/A5L44UWY/de Araujo et al. - 2016 - A systematic mapping study on assessing computatio.pdf}
}

@inproceedings{dearaujoSystematicMappingStudy2016a,
  title = {A Systematic Mapping Study on Assessing Computational Thinking Abilities},
  booktitle = {2016 {{IEEE Frontiers}} in {{Education Conference}} ({{FIE}})},
  author = {{de Araujo}, Ana Liz Souto O. and Andrade, Wilkerson L. and Serey Guerrero, Dalton D.},
  year = {2016},
  month = oct,
  pages = {1--9},
  publisher = {{IEEE}},
  address = {{Erie, PA, USA}},
  doi = {10.1109/FIE.2016.7757678},
  urldate = {2023-03-16},
  abstract = {Several initiatives have been created to promote Computational Thinking (CT) abilities in students. There are multiple approaches of assessing CT and wide abilities and skills involved. However, the evidence on how to assess CT has not yet been systematically grouped or reviewed. The goal of our study is to identify and classify approaches to promote CT and the different ways of assessing CT abilities. To achieve this goal, a systematic mapping study was planned and executed. The results reveal that: (i) programming courses are the most common pedagogical approaches to promote CT for K-12 students; (ii) multiple skills are involved in CT, but solving problems, algorithms, and abstraction are most common abilities assessed; and (iii) codes and multi-choice questionnaires are the most common artifacts for assessing CT abilities. This study points out to the fact that there are open questions for exploring and developing new researches for promoting and assessing CT abilities.},
  isbn = {978-1-5090-1790-4},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/QGZ9Q66X/de Araujo et al. - 2016 - A systematic mapping study on assessing computatio.pdf}
}

@article{debruijnLambdaCalculusNotation1972,
  title = {Lambda Calculus Notation with Nameless Dummies, a Tool for Automatic Formula Manipulation, with Application to the {{Church-Rosser}} Theorem},
  author = {{de Bruijn}, N. G},
  year = {1972},
  month = jan,
  journal = {Indagationes Mathematicae (Proceedings)},
  volume = {75},
  number = {5},
  pages = {381--392},
  issn = {1385-7258},
  doi = {10.1016/1385-7258(72)90034-0},
  urldate = {2023-08-31},
  abstract = {In ordinary lambda calculus the occurrences of a bound variable are made recognizable by the use of one and the same (otherwise irrelevant) name at all occurrences. This convention is known to cause considerable trouble in cases of substitution. In the present paper a different notational system is developed, where occurrences of variables are indicated by integers giving the ``distance'' to the binding {$\lambda$} instead of a name attached to that {$\lambda$}. The system is claimed to be efficient for automatic formula manipulation as well as for metalingual discussion. As an example the most essential part of a proof of the Church-Rosser theorem is presented in this namefree calculus.},
  file = {/Users/igormoreno/Zotero/storage/MDKVD5N2/de Bruijn - 1972 - Lambda calculus notation with nameless dummies, a .pdf;/Users/igormoreno/Zotero/storage/KXF7ZE2E/1385725872900340.html}
}

@article{debruinBridgingCognitiveLoad2017,
  title = {Bridging {{Cognitive Load}} and {{Self-Regulated Learning Research}}: {{A}} Complementary Approach to Contemporary Issues in Educational Research},
  shorttitle = {Bridging {{Cognitive Load}} and {{Self-Regulated Learning Research}}},
  author = {{de Bruin}, Anique B. H. and {van Merri{\"e}nboer}, Jeroen J. G.},
  year = {2017},
  month = oct,
  journal = {Learning and Instruction},
  series = {Bridging {{Cognitive Load}} and {{Self-Regulated Learning Research}}},
  volume = {51},
  pages = {1--9},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2017.06.001},
  urldate = {2018-11-06},
  abstract = {The aim of this Introduction to the Special Issue `Bridging Cognitive Load and Self-Regulated Learning Research' is to explore how cognitive load theory, which is particularly relevant for how learners deal with complex information, and self-regulated learning theory, which is particularly relevant for how learners use information to monitor and control their learning, can be combined into one joint research paradigm that is relevant for contemporary and future developments in education. The first two sections introduce cognitive load theory and self-regulated learning theory. The third section discusses the main similarities and differences between the theories, and describes how the cue-utilization framework can be used as the basis for a joint research paradigm. The main idea postulated is that new instructional methods should help learners identify diagnostic cues in available information that provide an accurate indication of where learners stand in relation to criterion task performance. Use of these diagnostic cues when monitoring learning will lead to better regulation of learning activities and of mental resources allocated, and thus to more efficient learning and higher learning outcomes. In the fourth section, the six studies and two commentaries presented in this special issue are positioned within this paradigm. In the fifth and final section, a common research agenda based on the joint CLT-SRL paradigm is sketched and its relevance for future developments is explained. The studies presented in this special issue and the two commentaries, which complete the Special Issue, should be seen as a very first step in executing this research agenda.},
  keywords = {Cognitive load,Cue diagnosticity,Cue utilization,Self-regulated learning,Special issue},
  file = {/Users/igormoreno/Zotero/storage/4A6BW5VL/de Bruin and van Merriënboer - 2017 - Bridging Cognitive Load and Self-Regulated Learning Research.pdf;/Users/igormoreno/Zotero/storage/8ELDPDIS/S0959475217303705.html}
}

@inproceedings{deckerCommonFrameworkEvaluating2016,
  title = {Towards a {{Common Framework}} for {{Evaluating Computing Outreach Activities}}},
  booktitle = {Proceedings of the 47th {{ACM Technical Symposium}} on {{Computing Science Education}} - {{SIGCSE}} '16},
  author = {Decker, Adrienne and McGill, Monica M. and Settle, Amber},
  year = {2016},
  pages = {627--632},
  publisher = {{ACM Press}},
  address = {{Memphis, Tennessee, USA}},
  doi = {10.1145/2839509.2844567},
  urldate = {2021-07-15},
  abstract = {In the past six years, dozens of conference papers and journal articles have been presented in Association of Computing Machinery (ACM) and Institute of Electrical and Electronics Engineers (IEEE) educational forums concerning computing outreach activities. Nearly half of these (47.5\%) appeared in SIGCSE venues. In this study, we used the free-form question ``What type of data has been collected in formal, peer-reviewed research that has been conducted on computing outreach activities in recent years?'' as a basis for a systematic literature review in these venues from 2009-2015. During the analysis of the articles, it was discovered that a majority of efforts focused on middle school and high school students, a majority of the reported events took place in the United States, and almost half had a goal of increasing gender diversity in computing. This paper summarizes the information about the studies, including their data collection techniques and the data that was collected. We also present a list of recommended practices for data collection, methodologies, and reporting for educational researchers engaged in these activities in an effort to provide comparative data and allow us as a community to more scientifically understand the impact that these activities are having on the participants.},
  isbn = {978-1-4503-3685-7},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/TK6J53XM/Decker et al. - 2016 - Towards a Common Framework for Evaluating Computin.pdf}
}

@inproceedings{deckerTopicalReviewEvaluation2019,
  title = {A {{Topical Review}} of {{Evaluation Instruments}} for {{Computing Education}}},
  booktitle = {Proceedings of the 50th {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Decker, Adrienne and McGill, Monica M.},
  year = {2019},
  month = feb,
  pages = {558--564},
  publisher = {{ACM}},
  address = {{Minneapolis MN USA}},
  doi = {10.1145/3287324.3287393},
  urldate = {2021-07-15},
  abstract = {As computing education research continues to grow and mature as a field, it becomes more important to focus on the quality and rigor of our research studies. One important aspect of any research study is its formal evaluation. Using standardized and validated instruments relevant to computer science education to perform evaluations can increase the quality of the study and the value of its results. However, researchers often create their own instruments rather than using existing ones, perhaps due to their lack of knowledge of the value of using an existing instrument or due to the challenge of finding such instruments. Through a review of relevant computing education literature, this paper presents a listing of 47 evaluation instruments specifically designed for measuring programs or constructs related to computing that can influence student achievement and learning. Analysis of purpose, target audience, reliability, and validity of the instruments is also presented. The paper ends with a call for the community to begin to make more regular use of validated instruments in their studies when possible and to develop and validate additional instruments in areas where few exist.},
  isbn = {978-1-4503-5890-3},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/J6KFQQWR/Decker e McGill - 2019 - A Topical Review of Evaluation Instruments for Com.pdf;/Users/igormoreno/Zotero/storage/QF5PFWMK/Decker e McGill - 2019 - A Topical Review of Evaluation Instruments for Com.pdf}
}

@misc{DefiningLinguisticComplexity,
  title = {Defining {{Linguistic Complexity}} | {{LANGUAGE COMPLEXITY}}},
  urldate = {2021-10-10},
  howpublished = {https://blogs.ntu.edu.sg/hg3040-2014-5/?page\_id=133},
  file = {/Users/igormoreno/Zotero/storage/PPS7RGN8/hg3040-2014-5.html}
}

@book{deitelJavaHowProgram2018,
  title = {Java: How to Program Early Objects},
  shorttitle = {Java},
  author = {Deitel, Paul J. and Deitel, Harvey M.},
  year = {2018},
  series = {How to Program Series},
  edition = {11th edition},
  publisher = {{Pearson}},
  address = {{New York}},
  abstract = {Presents leading-edge computing technologies using the Deitel signature live-code approach, which demonstrates concepts in hundreds of complete working programs. The 11th Edition presents updated coverage of Java SE 8 and new Java SE 9 capabilities, including JShell, the Java Module System, and other key Java 9 topics},
  isbn = {978-0-13-474335-6},
  langid = {english},
  lccn = {QA76.73.J38 D45345 2018},
  keywords = {Java (Computer program language),Object-oriented programming (Computer science)},
  annotation = {OCLC: ocn989759954},
  file = {/Users/igormoreno/Zotero/storage/IW43YKNG/Deitel and Deitel - 2018 - Java how to program early objects.pdf}
}

@inproceedings{dejongLearningMultipleRepresentations2003,
  title = {Learning with {{Multiple Representations}}},
  booktitle = {{{EARLI}} Conference 2003},
  author = {{de Jong}, Ton and {van der Meij}, Jan},
  year = {2003},
  month = aug,
  pages = {2026--2029},
  address = {{Padua, Italy}},
  abstract = {This paper reports a study which examined support the translation between multiple representations in simulation-based learning. We compared three versions of the same simulation-based learning environment: a learning environment with separated representations (control condition), a learning environment with dynamically linked representations, and a learning environment with integrated representations. Ninety learners from four middle vocational training schools (aged 16 to 18) took a pretest on an applied physics domain called `moment', worked with a simulation-based learning environment on the domain, and took a posttest. Subjects were randomly assigned to one of the three experimental conditions. Subjects received an electronic questionnaire five times while working with the learning environment. This questionnaire asked subjects to score their experienced difficulty. The results of this study did not lead to significant results between conditions and thus does not lead to insights into the benefits or drawbacks of a particular measure to support translation. Insights into how the design of the learning environments may have influenced these results as well as research designs are discussed. Implications for future research will also be addressed.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/WXWU6TBL/de Jong and van der Meij - 2003 - Learning with Multiple Representations.pdf}
}

@incollection{dejongLearningMultipleRepresentations2012,
  title = {Learning with {{Multiple Representations}}},
  booktitle = {Encyclopedia of the {{Sciences}} of {{Learning}}},
  author = {{de Jong}, Ton and {van der Meij}, Jan},
  editor = {Seel, Norbert M.},
  year = {2012},
  pages = {2026--2029},
  publisher = {{Springer US}},
  address = {{Boston, MA}},
  doi = {10.1007/978-1-4419-1428-6_485},
  urldate = {2019-04-22},
  isbn = {978-1-4419-1428-6},
  langid = {english}
}

@article{dekoningAttentionCueingInstructional2011,
  title = {Attention Cueing in an Instructional Animation: {{The}} Role of Presentation Speed},
  shorttitle = {Attention Cueing in an Instructional Animation},
  author = {{de Koning}, Bj{\"o}rn B. and Tabbers, Huib K. and Rikers, Remy M. J. P. and Paas, Fred},
  year = {2011},
  month = jan,
  journal = {Computers in Human Behavior},
  series = {Current {{Research Topics}} in {{Cognitive Load Theory}}},
  volume = {27},
  number = {1},
  pages = {41--45},
  issn = {0747-5632},
  doi = {10.1016/j.chb.2010.05.010},
  urldate = {2018-11-06},
  abstract = {Research has shown that guiding learners' attention in animations by cueing does not necessarily improve conceptual understanding. This study investigated whether the number of elements that are presented per unit of time influences the effectiveness of cueing by showing a cued or an uncued animation about the cardiovascular system at a high or at a low speed. It was hypothesized that cueing would be most helpful for learning when the animation was shown at a high rather than at a low speed. Unexpectedly, students showed equal performances on comprehension and transfer tests irrespective of cueing and the animation's speed. However, the low speed groups invested more mental effort to obtain this performance than the high speed groups. The findings and their implications for the design of animations are discussed in terms of cognitive load theory.},
  keywords = {Animations,Cognitive load,Cueing,Speed},
  file = {/Users/igormoreno/Zotero/storage/CAL39ECM/de Koning et al - 2011 - Attention cueing in an instructional animation.pdf;/Users/igormoreno/Zotero/storage/YWL3YXYM/S0747563210001470.html}
}

@article{delapenaLearningPlayGamification2021,
  title = {Learning through Play: {{Gamification}} Model in University-Level Distance Learning},
  shorttitle = {Learning through Play},
  author = {De La Pe{\~n}a, David and Lizcano, David and {Mart{\'i}nez-{\'A}lvarez}, Isabel},
  year = {2021},
  month = aug,
  journal = {Entertainment Computing},
  volume = {39},
  pages = {100430},
  issn = {18759521},
  doi = {10.1016/j.entcom.2021.100430},
  urldate = {2023-06-27},
  abstract = {Innovative instructional courses in university-level distance learning are key to improving the quality of edu\- cation, due to their great ability to facilitate higher education to students with mobility limitations or problems in reconciling their professional and academic activity. However, university distance education presents a great challenge: students often feel lost, have issues with the technology, and experience lack of engagement. All these factors, among others, can result in increased dropout rates or lack of understanding and commitment. This is the context that provides the framework for the project we set out here, and whose goal is to design and analyse a gamification model for university-level distance learning, where game choice is based on skill type and the learning objectives to be attained. Using gamification does not guarantee success, as the results in terms of dropout and interaction will depend on how it is undertaken. We addressed this question via an exhaustive prior analysis, which guided the subsequent experimental design, and has allowed us to assess, through analysis of real experiments which reveal the lessons learned, its effectiveness in different areas of study and types of subject The method followed in our model is based on the application of gamification techniques in 4 subjects from different fields of knowledge. The total sample was made up of 150 students and the results were compared with those obtained in the previous course without applying the model. This gives interesting results with respect to aspects that might be linked to encouraging interactivity or permanence in distance university students, such as an increase in interaction with students in the classroom, and training resources, a decrease in the dropout rate, an increase in the number of passes, and developmental achievement in creative problems. It thereby satisfies the goals set out for the research and offers the first clues as to how to continue work on the most important points.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/5VPF7ZIA/De La Peña et al. - 2021 - Learning through play Gamification model in unive.pdf}
}

@inproceedings{delevStaticAnalysisSource2017,
  title = {Static Analysis of Source Code Written by Novice Programmers},
  booktitle = {2017 {{IEEE Global Engineering Education Conference}} ({{EDUCON}})},
  author = {Delev, Tomche and Gjorgjevikj, Dejan},
  year = {2017},
  month = apr,
  pages = {825--830},
  publisher = {{IEEE}},
  address = {{Athens, Greece}},
  doi = {10.1109/EDUCON.2017.7942942},
  urldate = {2020-06-22},
  abstract = {In this paper we are reporting the finding on the use of a static analysis of C source code written by students learning to program. Two different tools for static code analysis were used to analyze the solutions submitted by the students on the partial exams and exams from the introductory course in programming in a three year period. We have collected, analyzed and compared most common errors reported by both tools. We further investigate if the available checks provided by these tools, often used in professional software development practices to find bugs and improve the code quality, can also help novice programmers in tracking down and resolving their problems in the code or have any other value in the process of learning programming.},
  isbn = {978-1-5090-5467-1},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/SH4C3XXT/Delev and Gjorgjevikj - 2017 - Static analysis of source code written by novice programmers.pdf}
}

@article{dendenEffectsGenderPersonality2021,
  title = {Effects of Gender and Personality Differences on Students' Perception of Game Design Elements in Educational Gamification},
  author = {Denden, Mouna and Tlili, Ahmed and Essalmi, Fathi and Jemni, Mohamed and Chen, Nian-Shing and Burgos, Daniel},
  year = {2021},
  month = oct,
  journal = {International Journal of Human-Computer Studies},
  volume = {154},
  pages = {102674},
  issn = {10715819},
  doi = {10.1016/j.ijhcs.2021.102674},
  urldate = {2023-06-27},
  abstract = {While many studies have reported the effectiveness of gamification in motivating students and making learning more fun, some others have reported contradictory findings regarding the potential of implementing game el\- ements in an online gamified course. It is recognized that designing a successful gamification is a challenging process. Previous studies have shown that students' individual differences may impact their gamification ex\- periences. This study complements the available body of research by examining the effect of gender and per\- sonality differences on students' perception of gamification in education. An experiment was conducted in a public university with 189 undergraduate students who took three online gamified courses, based on the selfdetermination theory, during two academic years. The results showed that gender and personality can affect students' perception of specific game elements. For instance, females are more likely to find feedback useful than males. Additionally, students low in extraversion are more likely to find a progress bar useful than students high in extraversion. The results also showed that gender moderates the effect of personality on students' perception of the implemented game elements. For instance, males low in extraversion are more likely to perceive badges' usefulness in gamified courses than males high in extraversion, whereas females low in conscientiousness are more likely to enjoy feedback than females high in conscientiousness. The findings of this study can help de\- signers and educators personalize their gamified courses' design based on personality and gender.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/T69EGVWU/Denden et al. - 2021 - Effects of gender and personality differences on s.pdf}
}

@article{dennerComputerGamesCreated2012,
  title = {Computer Games Created by Middle School Girls: {{Can}} They Be Used to Measure Understanding of Computer Science Concepts?},
  shorttitle = {Computer Games Created by Middle School Girls},
  author = {Denner, Jill and Werner, Linda and Ortiz, Eloy},
  year = {2012},
  month = jan,
  journal = {Computers \& Education},
  volume = {58},
  number = {1},
  pages = {240--249},
  issn = {0360-1315},
  doi = {10.1016/j.compedu.2011.08.006},
  urldate = {2018-12-02},
  abstract = {Computer game programming has been touted as a promising strategy for engaging children in the kinds of thinking that will prepare them to be producers, not just users of technology. But little is known about what they learn when programming a game. In this article, we present a strategy for coding student games, and summarize the results of an analysis of 108 games created by middle school girls using Stagecast Creator in an after school class. The findings show that students engaged in moderate levels of complex programming activity, created games with moderate levels of usability, and that the games were characterized by low levels of code organization and documentation. These results provide evidence that game construction involving both design and programming activities can support the learning of computer science concepts.},
  keywords = {After-school,Construction of computer games,Programming,Secondary education},
  file = {/Users/igormoreno/Zotero/storage/NGMTDUW8/Denner et al - 2012 - Computer games created by middle school girls.pdf;/Users/igormoreno/Zotero/storage/HYE6BG3G/S0360131511001849.html}
}

@article{denningComputationalDesign2017,
  ids = {denningComputationalDesign2017a},
  title = {Computational Design},
  author = {Denning, Peter J.},
  year = {2017},
  month = aug,
  journal = {Ubiquity},
  volume = {2017},
  number = {August},
  pages = {1--9},
  issn = {15302180},
  doi = {10.1145/3132087},
  urldate = {2018-10-02},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/J9ELIBKA/Denning - 2017 - Computational design.pdf;/Users/igormoreno/Zotero/storage/ZRFTCPSG/Denning - 2017 - Computational design.pdf}
}

@article{denningRemainingTroubleSpots2017,
  title = {Remaining Trouble Spots with Computational Thinking},
  author = {Denning, Peter J.},
  year = {2017},
  month = may,
  journal = {Communications of the ACM},
  volume = {60},
  number = {6},
  pages = {33--39},
  issn = {0001-0782, 1557-7317},
  doi = {10.1145/2998438},
  urldate = {2023-10-03},
  abstract = {Addressing unresolved questions concerning computational thinking.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/KP8BQSGH/Denning - 2017 - Remaining trouble spots with computational thinkin.pdf}
}

@misc{dennyConversingCopilotExploring2022a,
  title = {Conversing with {{Copilot}}: {{Exploring Prompt Engineering}} for {{Solving CS1 Problems Using Natural Language}}},
  shorttitle = {Conversing with {{Copilot}}},
  author = {Denny, Paul and Kumar, Viraj and Giacaman, Nasser},
  year = {2022},
  month = oct,
  number = {arXiv:2210.15157},
  eprint = {2210.15157},
  primaryclass = {cs},
  publisher = {{arXiv}},
  urldate = {2022-11-22},
  abstract = {GitHub Copilot is an artificial intelligence model for automatically generating source code from natural language problem descriptions. Since June 2022, Copilot has officially been available for free to all students as a plug-in to development environments like Visual Studio Code. Prior work exploring OpenAI Codex, the underlying model that powers Copilot, has shown it performs well on typical CS1 problems thus raising concerns about the impact it will have on how introductory programming courses are taught. However, little is known about the types of problems for which Copilot does not perform well, or about the natural language interactions that a student might have with Copilot when resolving errors. We explore these questions by evaluating the performance of Copilot on a publicly available dataset of 166 programming problems. We find that it successfully solves around half of these problems on its very first attempt, and that it solves 60\textbackslash\% of the remaining problems using only natural language changes to the problem description. We argue that this type of prompt engineering, which we believe will become a standard interaction between human and Copilot when it initially fails, is a potentially useful learning activity that promotes computational thinking skills, and is likely to change the nature of code writing skill development.},
  archiveprefix = {arxiv},
  keywords = {Computer Science - Artificial Intelligence,Computer Science - Human-Computer Interaction},
  file = {/Users/igormoreno/Zotero/storage/DZB3SB25/Denny et al. - 2022 - Conversing with Copilot Exploring Prompt Engineer.pdf}
}

@inproceedings{dennyPeerWiseStudentsSharing2008,
  title = {{{PeerWise}}: {{Students Sharing Their Multiple Choice Questions}}},
  shorttitle = {{{PeerWise}}},
  booktitle = {Proceedings of the {{Fourth International Workshop}} on {{Computing Education Research}}},
  author = {Denny, Paul and Hamer, John and {Luxton-Reilly}, Andrew and Purchase, Helen},
  year = {2008},
  series = {{{ICER}} '08},
  pages = {51--58},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1404520.1404526},
  urldate = {2018-10-02},
  abstract = {PeerWise is a system in which students create multiple choice questions and answer those created by their peers. In this paper, we report on some quantitative results which suggest that students who use PeerWise actively perform better in final examinations than students who are not active. We note a significant correlation between performance in written (not just multiple choice) questions and PeerWise activity, suggesting that active use of the system may contribute to deep (and not just drill-and-practise) learning.},
  copyright = {All rights reserved},
  isbn = {978-1-60558-216-0},
  keywords = {automated,contributing student,MCQ,peer assessment,peerwise,question test bank},
  file = {/Users/igormoreno/Zotero/storage/77JQS6I3/Denny et al - 2008 - PeerWise.pdf}
}

@inproceedings{dennyUnderstandingSyntaxBarrier2011,
  title = {Understanding the Syntax Barrier for Novices},
  booktitle = {Proceedings of the 16th Annual Joint Conference on {{Innovation}} and Technology in Computer Science Education - {{ITiCSE}} '11},
  author = {Denny, Paul and {Luxton-Reilly}, Andrew and Tempero, Ewan and Hendrickx, Jacob},
  year = {2011},
  pages = {208},
  publisher = {{ACM Press}},
  address = {{Darmstadt, Germany}},
  doi = {10.1145/1999747.1999807},
  urldate = {2021-10-25},
  abstract = {Mastering syntax is one of the earliest challenges facing the novice programmer. Problem solving and algorithms are the focus of many first year programming classes, leaving students to learn syntax on their own while they practice writing code. In this paper we investigate the frequency with which students encounter syntax errors during a drill and practice activity. We find that students struggle with syntax to a greater extent than we anticipated, even when writing short fragments of code.},
  isbn = {978-1-4503-0697-3},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/PMLGU65M/Denny et al. - 2011 - Understanding the syntax barrier for novices.pdf}
}

@article{depaepeGeneralPedagogicalKnowledge2018,
  title = {General Pedagogical Knowledge, Self-Efficacy and Instructional Practice: {{Disentangling}} Their Relationship in Pre-Service Teacher Education},
  shorttitle = {General Pedagogical Knowledge, Self-Efficacy and Instructional Practice},
  author = {Depaepe, Fien and K{\"o}nig, Johannes},
  year = {2018},
  month = jan,
  journal = {Teaching and Teacher Education},
  volume = {69},
  pages = {177--190},
  issn = {0742-051X},
  doi = {10.1016/j.tate.2017.10.003},
  urldate = {2018-10-05},
  abstract = {Teachers' professional competence is composed of cognitive (professional knowledge) and affective (professional beliefs) components. These components are generally assumed to be related and to impact instructional practice. However, studies simultaneously relating cognitive and affective components to instructional practice are scarce. The present study investigates the relationship between general pedagogical knowledge (GPK), self-efficacy beliefs (SE), and reported instructional practice based on a sample of 342 pre-service teachers. No significant association was observed between GPK and SE. Furthermore, SE significantly predicted all investigated reported instructional practices, although GPK only predicted reported instructional practices that dealt with student support and provision of structure.},
  keywords = {General pedagogical knowledge,Instructional practice,Pre-service teachers,Self-efficacy},
  file = {/Users/igormoreno/Zotero/storage/R32VTHB8/Depaepe and König - 2018 - General pedagogical knowledge, self-efficacy and instructional practice.pdf;/Users/igormoreno/Zotero/storage/GFDQ38ZC/S0742051X17304006.html}
}

@article{depaepePedagogicalContentKnowledge2013,
  title = {Pedagogical Content Knowledge: {{A}} Systematic Review of the Way in Which the Concept Has Pervaded Mathematics Educational Research},
  shorttitle = {Pedagogical Content Knowledge},
  author = {Depaepe, Fien and Verschaffel, Lieven and Kelchtermans, Geert},
  year = {2013},
  month = aug,
  journal = {Teaching and Teacher Education},
  volume = {34},
  pages = {12--25},
  issn = {0742051X},
  doi = {10.1016/j.tate.2013.03.001},
  urldate = {2018-10-05},
  langid = {english},
  annotation = {00433},
  file = {/Users/igormoreno/Zotero/storage/KGHQRF6C/Depaepe et al - 2013 - Pedagogical content knowledge.pdf;/Users/igormoreno/Zotero/storage/X9DU5C5S/S0742051X1300053X.html}
}

@incollection{depauwVisualizingExecutionJava2002,
  title = {Visualizing the {{Execution}} of {{Java Programs}}},
  booktitle = {Software {{Visualization}}},
  author = {De Pauw, Wim and Jensen, Erik and Mitchell, Nick and Sevitsky, Gary and Vlissides, John and Yang, Jeaha},
  editor = {Goos, Gerhard and Hartmanis, Juris and {van Leeuwen}, Jan and Diehl, Stephan},
  year = {2002},
  volume = {2269},
  pages = {151--162},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/3-540-45875-1_12},
  urldate = {2020-06-22},
  isbn = {978-3-540-43323-1 978-3-540-45875-3},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/J62SR2A9/De Pauw et al - 2002 - Visualizing the Execution of Java Programs.pdf}
}

@article{deraadtStudentCreatedCheatSheets2012,
  title = {Student {{Created Cheat-Sheets}} in {{Examinations}}: {{Impact}} on {{Student Outcomes}}},
  author = {{de Raadt}, Michael},
  year = {2012},
  volume = {123},
  pages = {6},
  abstract = {Examinations have traditionally been classified as ``openbook'' or ``closed-book'' in relation to the freedom for students to bring resources into examinations. Open-book examinations can have benefits, such as reduced anxiety, de-emphasis of memorisation and reduced cheating. But open-book examinations can also have disadvantages such as reduced preparation and the need for time during examinations to look up facts. An emerging alternative allows students to bring a ,,cheat-sheet\quotedblbase{} of hand-written notes. This form of examination has the potential to offer many of the benefits of an open-book examination while overcoming some of its failings. There has been little evidence showing that cheat-sheets can have an impact, and what exists is contradictory. This study reveals that students who create and use cheat-sheets performed better, on average, in an introductory programming examination. Certain features of cheat-sheets were found to be related to superior performance, which may relate to student understanding..},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/56L2TQ3F/de Raadt - 2012 - Student Created Cheat-Sheets in Examinations Impa.pdf}
}

@inproceedings{deraadtTeachingAssessingProgramming2009,
  title = {Teaching and {{Assessing Programming Strategies Explicitly}}},
  booktitle = {Proceedings of the {{Eleventh Australasian Conference}} on {{Computing Education}} - {{Volume}} 95},
  author = {{de Raadt}, Michael and Watson, Richard and Toleman, Mark},
  year = {2009},
  series = {{{ACE}} '09},
  pages = {45--54},
  publisher = {{Australian Computer Society, Inc.}},
  address = {{Darlinghurst, Australia, Australia}},
  urldate = {2018-12-11},
  abstract = {This paper describes how programming strategies were explicitly instructed and assessed in an introductory programming course and describes the impact of this curricular change. A description is given of how strategies were explicitly integrated into teaching materials and assessed in assignments and examinations. Comparisons are made between the outcomes of novices under the new curriculum and results of novices' learning under the previous implicit-only strategy curriculum, measured in an earlier study. This comparison shows improvement in novices' strategy application under the new curriculum.},
  isbn = {978-1-920682-76-7},
  keywords = {curriculum,introductory programming,Misconceptions Proposal,strategies,To Read},
  file = {/Users/igormoreno/Zotero/storage/5BLE4QZN/de Raadt et al - 2009 - Teaching and Assessing Programming Strategies Explicitly.pdf}
}

@article{deremerProgrammingintheLargeProgramminginthesmall1975,
  title = {Programming-in-the Large versus Programming-in-the-Small},
  author = {DeRemer, Frank and Kron, Hans},
  year = {1975},
  month = apr,
  journal = {ACM SIGPLAN Notices},
  volume = {10},
  number = {6},
  pages = {114--121},
  issn = {0362-1340},
  doi = {10.1145/390016.808431},
  urldate = {2022-08-18},
  abstract = {We distinguish the activity of writing large programs from that of writing small ones. By large programs we mean systems consisting of many small programs (modules), possibly written by different people. We need languages for programming-in-the-small, i.e. languages not unlike the common programming languages of today, for writing modules. We also need a ``module interconnection language'' for knitting those modules together into an integrated whole and for providing an overview that formally records the intent of the programmer(s) and that can be checked for consistency by a compiler. We explore the software reliability aspects of such an interconnection language. Emphasis is placed on facilities for information hiding and for defining layers of virtual machines.},
  keywords = {Accessibility,External name,Information hiding,Linking,Module interconnection language,Project management tool.,Protection,Scope of definition,System hierarchy,Virtual machine,Visibility},
  file = {/Users/igormoreno/Zotero/storage/4FSY2LXW/DeRemer and Kron - 1975 - Programming-in-the large versus programming-in-the.pdf}
}

@article{derryConductingVideoResearch2010,
  ids = {derryConductingVideoResearch2010a},
  title = {Conducting {{Video Research}} in the {{Learning Sciences}}: {{Guidance}} on {{Selection}}, {{Analysis}}, {{Technology}}, and {{Ethics}}},
  shorttitle = {Conducting {{Video Research}} in the {{Learning Sciences}}},
  author = {Derry, Sharon J. and Pea, Roy D. and Barron, Brigid and Engle, Randi A. and Erickson, Frederick and Goldman, Ricki and Hall, Rogers and Koschmann, Timothy and Lemke, Jay L. and Sherin, Miriam Gamoran and Sherin, Bruce L.},
  year = {2010},
  month = jan,
  journal = {Journal of the Learning Sciences},
  volume = {19},
  number = {1},
  pages = {3--53},
  publisher = {{Routledge}},
  issn = {1050-8406},
  doi = {10.1080/10508400903452884},
  urldate = {2020-10-21},
  abstract = {Focusing on expanding technical capabilities and new collaborative possibilities, we address 4 challenges for scientists who collect and use video records to conduct research in and on complex learning environments: (a) Selection: How can researchers be systematic in deciding which elements of a complex environment or extensive video corpus to select for study? (b) Analysis: What analytical frameworks and practices are appropriate for given research problems? (c) Technology: What technologies are available and what new tools must be developed to support collecting, archiving, analyzing, reporting, and collaboratively sharing video? and (d) Ethics: How can research protocols encourage broad video sharing and reuse while adequately protecting the rights of research participants who are recorded?},
  annotation = {01053},
  file = {/Users/igormoreno/Zotero/storage/EL4LTEBG/Derry et al - 2010 - Conducting Video Research in the Learning Sciences.pdf;/Users/igormoreno/Zotero/storage/ZYAIFFA2/Derry et al. - 2010 - Conducting Video Research in the Learning Sciences.pdf;/Users/igormoreno/Zotero/storage/RCYZXCWJ/10508400903452884.html}
}

@techreport{derryGuidelinesVideoResearch2007,
  title = {Guidelines for {{Video Research}} in {{Education}}},
  year = {2007},
  month = jul,
  pages = {90},
  collaborator = {Derry, Sharon J},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/5WTBTBPN/2007 - Guidelines for Video Research in Education.pdf}
}

@article{deruiterCodingStagesAssessment2022,
  title = {The {{Coding Stages Assessment}}: Development and Validation of an Instrument for Assessing Young Children's Proficiency in the {{ScratchJr}} Programming Language},
  shorttitle = {The {{Coding Stages Assessment}}},
  author = {{de Ruiter}, Laura E. and Bers, Marina U.},
  year = {2022},
  month = oct,
  journal = {Computer Science Education},
  volume = {32},
  number = {4},
  pages = {388--417},
  issn = {0899-3408, 1744-5175},
  doi = {10.1080/08993408.2021.1956216},
  urldate = {2023-03-16},
  abstract = {Background and Context: Despite the increasing implementation of coding in early curricula, there are few valid and reliable assess\- ments of coding abilities for young children. This impedes studying learning outcomes and the development and evaluation of curricula.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/TPMFIVJJ/de Ruiter and Bers - 2022 - The Coding Stages Assessment development and vali.pdf}
}

@article{deruiterCodingStagesAssessment2022a,
  title = {The {{Coding Stages Assessment}}: Development and Validation of an Instrument for Assessing Young Children's Proficiency in the {{ScratchJr}} Programming Language},
  shorttitle = {The {{Coding Stages Assessment}}},
  author = {{de Ruiter}, Laura E. and Bers, Marina U.},
  year = {2022},
  month = oct,
  journal = {Computer Science Education},
  volume = {32},
  number = {4},
  pages = {388--417},
  issn = {0899-3408, 1744-5175},
  doi = {10.1080/08993408.2021.1956216},
  urldate = {2023-03-16},
  abstract = {Background and Context: Despite the increasing implementation of coding in early curricula, there are few valid and reliable assess\- ments of coding abilities for young children. This impedes studying learning outcomes and the development and evaluation of curricula.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/5HP8T2GZ/de Ruiter and Bers - 2022 - The Coding Stages Assessment development and vali.pdf}
}

@inproceedings{desportesTrialsTribulationsNovices2019,
  title = {Trials and {{Tribulations}} of {{Novices Working}} with the {{Arduino}}},
  booktitle = {Proceedings of the 2019 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {DesPortes, Kayla and DiSalvo, Betsy},
  year = {2019},
  month = jul,
  pages = {219--227},
  publisher = {{ACM}},
  address = {{Toronto ON Canada}},
  doi = {10.1145/3291279.3339427},
  urldate = {2021-06-14},
  abstract = {Physical computing has grown over the past decade leading to diverse experiences and tools for novices. Despite the variety of tools, Arduinos remain a leading choice in education. However, few studies examine how novices are learning about the programming and electronics concepts, and how tools impact their experience. The research presented reports on the qualitative analysis of a laboratory study in which 31 novices work with the Arduino for the first time. Video and audio recordings captured participants' actions and thoughts as they used the Arduino platform with a blocks-based programming environment, and two electronics prototyping tools\textemdash the standard Breadboard and a modular breadboard called BitBlox. The study presents three main contributions to the literature: first, it provides a codebook of the common breakdowns faced by novices; second, it offers insight into the work processes of novices; and third, it demonstrates ways that the tools used by novices can affect their experience.},
  isbn = {978-1-4503-6185-9},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/YJWJA9LQ/DesPortes e DiSalvo - 2019 - Trials and Tribulations of Novices Working with th.pdf}
}

@article{detienneAssessingCognitiveConsequences1997,
  title = {Assessing the Cognitive Consequences of the Object-Oriented Approach: {{A}} Survey of Empirical Research on Object-Oriented Design by Individuals and Teams},
  shorttitle = {Assessing the Cognitive Consequences of the Object-Oriented Approach},
  author = {D{\'e}tienne, Fran{\c c}oise},
  year = {1997},
  month = aug,
  journal = {Interacting with Computers},
  volume = {9},
  number = {1},
  pages = {47--72},
  issn = {0953-5438},
  doi = {10.1016/S0953-5438(97)00006-4},
  urldate = {2021-01-08},
  abstract = {This paper presents a state-of-the-art review of empirical research on object-oriented (OO) design. Many claims about the cognitive benefits of the OO paradigm have been made by its advocates. These claims concern the ease of designing and reusing software at the individual level as well as the benefits of this paradigm at the team level. Since these claims are cognitive in nature, it seems important to assess them empirically. After a brief presentation of the main concepts of the OO paradigm, the claims about the superiority of OO design are outlined. The core of this paper consists of a review of empirical studies of OO design (OOD). We first discuss results concerning OOD by individuals. On the basis of empirical work, we (1) analyse the design activity of novice OO designers, (2) compare OOD with procedural design and (3) discuss a typology of problems relevant for the OO approach. Then we assess the claims about naturalness and ease of OOD. The next part discusses results on OO software reuse. On the basis of empirical work, we (1) compare reuse in the OO versus the procedural paradigm, (2) discuss the potential for OO software reuse and (3) analyse reuse activity in the OO paradigm. Then we assess claims on reusability. The final part reviews empirical work on OOD by teams. We present results on communication, coordination, knowledge dissemination and interactions with clients. Then we assess claims about OOD at the software design team level. In a general conclusion, we discuss the limitations of these studies and give some directions for future research.},
  langid = {english},
  keywords = {Design organization,Design strategies,OO Design,OO Reuse,Psychology of programming,Typology of problems},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/UIY9BFJ9/Détienne - 1997 - Assessing the cognitive consequences of the object.pdf;/Users/igormoreno/Zotero/storage/UVUIA48Q/Détienne - 1997 - Assessing the cognitive consequences of the object.pdf;/Users/igormoreno/Zotero/storage/U8T2935H/S0953543897000064.html}
}

@article{devlinWhyUniversitiesRequire2003,
  title = {Why {{Universities}} Require Computer Science Students to Take Math},
  author = {Devlin, Keith},
  year = {2003},
  month = sep,
  journal = {Communications of the ACM},
  volume = {46},
  number = {9},
  pages = {36},
  issn = {00010782},
  doi = {10.1145/903893.903917},
  urldate = {2018-10-02},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/UUZYZEKH/Devlin - 2003 - Why Universities require computer science students to take math.pdf}
}

@article{dichevaMentalModelsRecursion1996,
  title = {Mental {{Models}} of {{Recursion}}},
  author = {Dicheva, Darina and Close, John},
  year = {1996},
  month = jan,
  journal = {Journal of Educational Computing Research},
  volume = {14},
  number = {1},
  pages = {1--23},
  publisher = {{SAGE Publications Inc}},
  issn = {0735-6331},
  doi = {10.2190/AGG9-A5UD-DEK0-80EN},
  urldate = {2020-10-04},
  abstract = {This article presents the results of a two-year study of children's difficulties in learning the concept of recursion in Logo. A number of incorrect mental models of recursion identified in the study are described. These are classified into main groups: mental models associated with the interpretation of recursive procedures and those associated with the construction of recursive procedures. Misconceptions underlying the erroneous mental models are presented. Possible reasons for adopting these misconceptions are put forward.},
  langid = {english},
  keywords = {proposedByIgor},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/BMZX9Z24/Dicheva and Close - 1996 - Mental Models of Recursion.pdf}
}

@article{dickMachinesWhoWrite2013,
  title = {Machines {{Who Write}} [{{Think Piece}}]},
  author = {Dick, Stephanie},
  year = {2013},
  month = apr,
  journal = {IEEE Annals of the History of Computing},
  volume = {35},
  number = {2},
  pages = {88--88},
  issn = {1058-6180},
  doi = {10.1109/MAHC.2013.21},
  urldate = {2020-06-22},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/FQSXNWCQ/Dick - 2013 - Machines Who Write [Think Piece].pdf}
}

@inproceedings{dicksonEngageMachineRise2020,
  title = {Engage {{Against}} the {{Machine}}: {{Rise}} of the {{Notional Machines}} as {{Effective Pedagogical Devices}}},
  shorttitle = {Engage {{Against}} the {{Machine}}},
  booktitle = {Proceedings of the 2020 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Dickson, Paul E. and Brown, Neil C. C. and Becker, Brett A.},
  year = {2020},
  month = jun,
  series = {{{ITiCSE}} '20},
  pages = {159--165},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3341525.3387404},
  urldate = {2023-11-09},
  abstract = {The term "the machine" is commonly used to refer to the complicated physical hardware running similarly complex software that ultimately executes programs. The idea that programmers write programs for a notional machine - an abstract model of an execution environment - not the machine itself, has risen to the point of gaining acceptance as a useful device in computing education. This has seeded a growing discussion about how explicitly utilizing notional machines in teaching can help students construct more accurate mental models, which is essential for learning programming. Much of the existing literature necessarily involves specific languages, visualization, and/or facilitating tools, and is not very accessible to many practitioners. Less focus has been put on how teachers can make explicit use of notional machines in their teaching. In this paper we describe notional machines and their use in a manner that is more accessible to a general educator audience in order to facilitate more effective computing education at all levels. We advocate explicitly delineating between visualization tools and the notional machines they depict, isolating and clarifying the notional machine so that it is conspicuous, apparent and useful. We present examples of how this approach can facilitate a more consistent method of teaching computing, and be used in more effective pedagogical practice for teaching computing.},
  isbn = {978-1-4503-6874-2},
  keywords = {code tracing,code writing,memory diagrams,notional machines,pedagogy,program construction,stack traces,visualization},
  file = {/Users/igormoreno/Zotero/storage/4W4AUL2G/Dickson et al - 2020 - Engage Against the Machine.pdf}
}

@inproceedings{dicksonExperiencesImplementingUtilizing2022,
  title = {Experiences {{Implementing}} and {{Utilizing}} a {{Notional Machine}} in the {{Classroom}}},
  booktitle = {Proceedings of the 53rd {{ACM Technical Symposium V}}.1 on {{Computer Science Education}}},
  author = {Dickson, Paul E. and Richards, Tim and Becker, Brett A.},
  year = {2022},
  month = feb,
  series = {{{SIGCSE}} 2022},
  pages = {850--856},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3478431.3499320},
  urldate = {2022-03-01},
  abstract = {In the computing education community, discussion is growing about the benefits of teaching programming by explicitly using notional machines to help students. To-date most work is largely theoretical and little work addresses actually using them in a classroom. This paper documents our experience of creating a notional machine for a specific course and using it in that classroom. A key point we learned while creating this notional machine is that many of the difficulties encountered were due to the concept of a notional machine being tightly coupled to students' mental models. Although not surprising, the numerous complications this brings are important to overcome. The potential amount of detail included in the notional machine is enormously influenced by the students' mental models, which are likely specific to a course, and also change throughout a semester -- and certainly across several semesters. We present lessons learned from this experience, among them that implementing a notional machine and using it in class is a non-trivial yet possibly beneficial exercise.},
  isbn = {978-1-4503-9070-5},
  keywords = {code tracing,code writing,cs1,introductory programming,memory diagrams,mental models,notional machines,pedagogy,program construction,stack traces,visualization},
  file = {/Users/igormoreno/Zotero/storage/WWXG6QXT/Dickson et al - 2022 - Experiences Implementing and Utilizing a Notional Machine in the Classroom.pdf}
}

@inproceedings{dicksonMemoryDiagramAll2021,
  title = {A {{Memory Diagram}} for {{All Seasons}}},
  booktitle = {Proceedings of the 26th {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education V}}. 1},
  author = {Dickson, Paul E. and Dragon, Toby},
  year = {2021},
  month = jun,
  series = {{{ITiCSE}} '21},
  pages = {150--156},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3430665.3456317},
  urldate = {2021-07-29},
  abstract = {Tracing code execution and creating memory diagrams have long been tools for teaching computer science. These techniques are useful beyond demonstration or assessment of understanding: they are teaching and learning tools. We argue that if consistent diagramming is used across courses and programming languages, variations to the level of detail in those diagrams can become a teaching technique. We previously described a consistent form of memory diagram to be used across curricula, Ithaca Memory Diagrams IMDs, and explained their basic use. After four more years of classroom use, we find that variation in these diagrams is useful to emphasize specific concepts and highlight features of various languages. Our updates to previously published memory diagrams improve their usefulness in courses from the high-level abstraction of CS1 to the depth of systems courses. We provide specific examples of this variation with explanation of the intended benefits.},
  isbn = {978-1-4503-8214-4},
  keywords = {IMD,Ithaca memory diagrams,memory diagrams,notional machine,stack tracing,tracing},
  file = {/Users/igormoreno/Zotero/storage/9GG36GME/Dickson and Dragon - 2021 - A Memory Diagram for All Seasons.pdf}
}

@article{diefenbachCounterproductiveEffectsGamification2019,
  title = {Counterproductive Effects of Gamification: {{An}} Analysis on the Example of the Gamified Task Manager {{Habitica}}},
  shorttitle = {Counterproductive Effects of Gamification},
  author = {Diefenbach, Sarah and M{\"u}ssig, Annemarie},
  year = {2019},
  month = jul,
  journal = {International Journal of Human-Computer Studies},
  volume = {127},
  pages = {190--210},
  issn = {10715819},
  doi = {10.1016/j.ijhcs.2018.09.004},
  urldate = {2023-06-27},
  abstract = {The concept of gamification has evoked increasing attention in HCI research and practice. Gamification uses game elements in serious, non-game contexts in order to motivate a particular target behavior or attitude change (e.g., sustainable behavior, physical activity, task management). While gamification has been attributed a high potential, a critical question is whether it actually induces the intended effect. The present research explores ``counterproductive effects of gamification'', i.e., cases when a gamification element does not encourage the intended behavior but rather the opposite (e.g., procrastination instead of getting things done). Studying the example of the gamified task manager Habitica, our paper reports insights from two consecutive studies. Study 1, a qualitative interview study based on interpretative phenomenological analysis (IPA) with one single user revealed seven themes describing distinct counterproductive effects in Habitica, and additional seven themes related to Habitica's reward/punishment system and psychological reactions to counterproductive effects. Study 2 further explored these findings in a quantitative field study with 45 users over a two-week usage period, also studying correlations to user experience, product evaluation, motivation to play Habitica and individual belief in gamification. All participants experienced counterproductive effects to some degree, whereby some effects (e.g., being punished by Habitica in especially productive times, since one does not manage to check off tasks in time) were more prevalent than others (e.g., relabeling tasks as positive habits with no due date to prevent the risk of punishments). The prevalence of counterproductive effects was correlated to the users' perceived inappropriateness of the reward system, and a crucial predictor for motivation change over time. Relations to psychological mechanisms, general implications for gamification design and future research directions are discussed.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/JFSMVSLE/Diefenbach and Müssig - 2019 - Counterproductive effects of gamification An anal.pdf}
}

@techreport{DigitalEducationAction2018,
  title = {Digital {{Education Action Plan}}},
  year = {2018},
  month = jan,
  institution = {{European Commission}},
  urldate = {2022-11-21},
  file = {/Users/igormoreno/Zotero/storage/YC7BFZYK/PDF.pdf}
}

@article{dijkstraLettersEditorGo1968,
  title = {Letters to the {{Editor}}: {{Go}} to {{Statement Considered Harmful}}},
  shorttitle = {Letters to the {{Editor}}},
  author = {Dijkstra, Edsger W.},
  year = {1968},
  month = mar,
  journal = {Communications of the ACM},
  volume = {11},
  number = {3},
  pages = {147--148},
  issn = {0001-0782},
  doi = {10.1145/362929.362947},
  urldate = {2018-09-11},
  keywords = {alternative clause,branch instruction,conditional clause,go to statement,jump instruction,program intelligibility,program sequencing,repetitive clause},
  annotation = {01764},
  file = {/Users/igormoreno/Zotero/storage/MBBHMNR4/Dijkstra - 1968 - Letters to the Editor Go to Statement Considered .pdf}
}

@article{dijkstraRecursiveProgramming1960,
  title = {Recursive Programming},
  author = {Dijkstra, Edsger W.},
  year = {1960},
  journal = {Numerische Mathematik},
  volume = {2},
  number = {1},
  pages = {312--318},
  annotation = {00235},
  file = {/Users/igormoreno/Zotero/storage/WAAPE3CC/Dijkstra - 1960 - Recursive programming.pdf}
}

@incollection{dillenbourgEvolutionResearchCollaborative1996,
  title = {The Evolution of Research on Collaborative Learning},
  booktitle = {Learning in {{Humans}} and {{Machine}}: {{Towards}} an Interdisciplinary Learning Science},
  author = {Dillenbourg, P and Baker, M and Blaye, A and O'Malley, C},
  editor = {{E. Spada} and {P. Reiman}},
  year = {1996},
  pages = {27},
  publisher = {{Elsevier}},
  abstract = {For many years, theories of collaborative learning tended to focus on how individuals function in a group. More recently, the focus has shifted so that the group itself has become the unit of analysis. In terms of empirical research, the initial goal was to establish whether and under what circumstances collaborative learning was more effective than learning alone. Researchers controlled several independent variables (size of the group, composition of the group, nature of the task, communication media, and so on). However, these variables interacted with one another in a way that made it almost impossible to establish causal links between the conditions and the effects of collaboration. Hence, empirical studies have more recently started to focus less on establishing parameters for effective collaboration and more on trying to understand the role which such variables play in mediating interaction. In this chapter, we argue that this shift to a more process-oriented account requires new tools for analysing and modelling interactions.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/SKTDR5KJ/Dillenbourg et al - 1996 - The evolution of research on collaborative learning.pdf}
}

@inproceedings{dimoulasOhLordPlease2016,
  title = {Oh {{Lord}}, Please Don't Let Contracts Be Misunderstood (Functional Pearl)},
  booktitle = {Proceedings of the 21st {{ACM SIGPLAN International Conference}} on {{Functional Programming}}},
  author = {Dimoulas, Christos and New, Max S. and Findler, Robert Bruce and Felleisen, Matthias},
  year = {2016},
  month = sep,
  series = {{{ICFP}} 2016},
  pages = {117--131},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2951913.2951930},
  urldate = {2021-12-17},
  abstract = {Contracts feel misunderstood, especially those with a higher-order soul. While software engineers appreciate contracts as tools for articulating the interface between components, functional programmers desperately search for their types and meaning, completely forgetting about their pragmatics. This gem presents a novel analysis of contract systems. Applied to the higher-order kind, this analysis reveals their large and clearly unappreciated software engineering potential. Three sample applications illustrate where this kind of exploration may lead.},
  isbn = {978-1-4503-4219-3},
  keywords = {Contracts,Language design,Specifications},
  file = {/Users/igormoreno/Zotero/storage/8R396DZB/Dimoulas et al - 2016 - Oh Lord, please don't let contracts be misunderstood (functional pearl).pdf}
}

@article{dingApproachesDataAnalysis2009,
  title = {Approaches to Data Analysis of Multiple-Choice Questions},
  author = {Ding, Lin and Beichner, Robert},
  year = {2009},
  month = sep,
  journal = {Physical Review Special Topics - Physics Education Research},
  volume = {5},
  number = {2},
  issn = {1554-9178},
  doi = {10.1103/PhysRevSTPER.5.020103},
  urldate = {2019-01-27},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/T7Q58ZNC/Ding and Beichner - 2009 - Approaches to data analysis of multiple-choice questions.pdf}
}

@article{disessaBoxerReconstructibleComputational1986,
  title = {Boxer: A Reconstructible Computational Medium},
  shorttitle = {Boxer},
  author = {{diSessa}, A. A and Abelson, H.},
  year = {1986},
  month = sep,
  journal = {Communications of the ACM},
  volume = {29},
  number = {9},
  pages = {859--868},
  issn = {0001-0782},
  doi = {10.1145/6592.6595},
  urldate = {2020-05-14},
  abstract = {Programming is most often viewed as a way for experts to get computers to perform complex tasks efficiently and reliably. Boxer presents an alternative image\textemdash programming as a way for nonexperts to control a reconstructible medium, much like written language, but with dramatically extended interactive capabilities.},
  file = {/Users/igormoreno/Zotero/storage/NMKCN4GW/diSessa and Abelson - 1986 - Boxer.pdf}
}

@book{disessaChangingMindsComputers2001,
  title = {Changing {{Minds}}: {{Computers}}, {{Learning}}, and {{Literacy}}},
  shorttitle = {Changing {{Minds}}},
  author = {DiSessa, Andrea A.},
  year = {2001},
  publisher = {{MIT Press}},
  abstract = {An impassioned guide to how computers can fundamentally change how we learn and think.Andrea diSessa's career as a scholar, technologist, and teacher has been driven by one important question: can education--in particular, science education--be transformed by the computer so that children can learn more, learn more easily at an earlier age, and learn with pleasure and commitment? This book is diSessa's informed and passionate affirmative answer to that question.While written at a level that anyone with a good acquaintance with high school science can understand, the book reflects the depth and breadth of the issues surrounding technology in education. Rejecting the simplistic notion that the computer is merely a tool for more efficient instruction, diSessa shows how computers can be the basis for a new literacy that will change how people think and learn. He discusses the learning theory that explains why computers can be such powerful catalysts for change in education, in particular, how intuitive knowledge is the platform on which students build scientific understanding. He also discusses the material and social reasons for the computer's potential and argues for two-way literacies, where everyone is a creator as well as consumer of dynamic and interactive expressive forms. DiSessa gives many examples from his work using the Boxer computer environment, an integrated software system designed to investigate computational literacies.},
  googlebooks = {DfNaW4zvJVgC},
  isbn = {978-0-262-54132-9},
  langid = {english},
  keywords = {Computers / General,Education / Computers \& Technology,Education / General,Language Arts \& Disciplines / Reading Skills}
}

@article{disessaEpistemologyPhysics1993,
  title = {Toward an {{Epistemology}} of {{Physics}}},
  author = {{diSessa}, Andrea A.},
  year = {1993},
  month = apr,
  journal = {Cognition and Instruction},
  volume = {10},
  number = {2-3},
  pages = {105--225},
  issn = {0737-0008},
  doi = {10.1080/07370008.1985.9649008},
  urldate = {2019-06-24},
  keywords = {To Read},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/UH3RYQ95/diSessa - 1993 - Toward an Epistemology of Physics.pdf;/Users/igormoreno/Zotero/storage/8WFTDJT8/07370008.1985.html}
}

@inproceedings{disessaFriendlyIntroductionKnowledge2018,
  title = {A {{Friendly Introduction}} to ``{{Knowledge}} in {{Pieces}}'': {{Modeling Types}} of {{Knowledge}} and {{Their Roles}} in {{Learning}}},
  shorttitle = {A {{Friendly Introduction}} to ``{{Knowledge}} in {{Pieces}}''},
  booktitle = {Invited {{Lectures}} from the 13th {{International Congress}} on {{Mathematical Education}}},
  author = {{diSessa}, Andrea A.},
  editor = {Kaiser, Gabriele and Forgasz, Helen and Graven, Mellony and Kuzniak, Alain and Simmt, Elaine and Xu, Binyan},
  year = {2018},
  series = {{{ICME-13 Monographs}}},
  pages = {65--84},
  publisher = {{Springer International Publishing}},
  abstract = {Knowledge in Pieces (KiP) is an epistemological perspective that has had significant success in explaining learning phenomena in science education, notably the phenomenon of students' prior conceptions and their roles in emerging competence. KiP is much less used in mathematics. However, I conjecture that the reasons for relative disuse mostly concern historical differences in traditions rather than in-principle distinctions in the ways mathematics and science are learned. This article aims to explain KiP in a relatively non-technical way to mathematics educators. I explain the general principles and distinguishing characteristics of KiP, I use a range of examples, including from mathematics, to show how KiP works in practice and what one might expect to gain from using it. My hope is to encourage and help guide a greater use of KiP in mathematics education.},
  isbn = {978-3-319-72170-5},
  langid = {english},
  keywords = {Complex systems,Conceptual change,Knowledge in pieces,Misconceptions Proposal},
  annotation = {00017},
  file = {/Users/igormoreno/Zotero/storage/K5DYBQEW/diSessa - 2018 - A Friendly Introduction to “Knowledge in Pieces”.pdf}
}

@article{disessaMetarepresentationIntroduction2000,
  title = {Meta-Representation: An Introduction},
  shorttitle = {Meta-Representation},
  author = {{diSessa}, Andrea A and Sherin, Bruce L},
  year = {2000},
  month = oct,
  journal = {The Journal of Mathematical Behavior},
  volume = {19},
  number = {4},
  pages = {385--398},
  issn = {0732-3123},
  doi = {10.1016/S0732-3123(01)00051-7},
  urldate = {2020-10-21},
  abstract = {This paper presents an introduction to Project MaRC. The goal of Project MaRC is to study, in very broad terms, what students know about scientific representations and what is possible for them to learn. We use the term meta-representational competence (MRC) to describe the full range of capabilities that students (and others) have concerning the construction and use of external representations. As part of our project, we are engaging in an analysis of the nature of MRC, and we have begun to explore instructional implications. This introductory paper provides an overview of that work, including its goals and results, and it also provides an introduction to the four following papers in the issue.},
  langid = {english},
  keywords = {Collaborative design,Constructivism,Representations},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/U8W3DSFT/S0732312301000517.html}
}

@techreport{disessaTurtleEscapesPlane1975,
  title = {Turtle {{Escapes}} the {{Plane}}: {{Some Advanced Turtle Geometry}}},
  shorttitle = {Turtle {{Escapes}} the {{Plane}}},
  author = {{diSessa}, Andy},
  year = {1975},
  month = dec,
  number = {AIM-348 / LOGO Memo 21},
  institution = {{MIT}},
  urldate = {2022-01-12},
  abstract = {Since the LOGO Turtle took his first step he  has been mathematically confined to running  around on flat surfaces. Fortunately the  physically intuitive, procedurally oriented  nature of the Turtle which makes him a  powerful explorer in the plane is equally, if not  more apparent when he is liberated to tread  curved surfaces. This paper is aimed roughly  at the High School level. Yet because it is built  on intuition and physical action rather than  formalism, it can reach such "graduate  school" mathematical ideas as geodesics,  Gaussian Curvature, and topological  invariants as expressed in the Gauss-Bonnet  Theorem.},
  langid = {american},
  annotation = {Accepted: 2004-10-01T20:37:05Z},
  file = {/Users/igormoreno/Zotero/storage/E4KVNMP5/diSessa - 1975 - Turtle Escapes the Plane.pdf;/Users/igormoreno/Zotero/storage/VPAXJUKF/5793.html}
}

@inproceedings{diwanInfrastructureTeachingSkills2002,
  title = {An Infrastructure for Teaching Skills for Group Decision Making and Problem Solving in Programming Projects},
  booktitle = {Proceedings of the 33rd {{SIGCSE}} Technical Symposium on {{Computer}} Science Education},
  author = {Diwan, Amer and Waite, William M. and Jackson, Michele H.},
  year = {2002},
  month = feb,
  series = {{{SIGCSE}} '02},
  pages = {276--280},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/563340.563447},
  urldate = {2023-11-15},
  abstract = {In industry, programmers work in groups to design and implement substantial pieces of software. In contrast, most programs that students write in classes are toy programs involving little or no group work. To address this discrepancy, we have developed a software infrastructure that aims to teach group work skills to students in computer science courses and also enables students to tackle larger and more significant projects. We are in the process of deploying this infrastructure in a three course sequence at the University of Colorado: Data Structures---Programming Languages---Compiler Construction.},
  isbn = {978-1-58113-473-5},
  file = {/Users/igormoreno/Zotero/storage/NKHK6ACJ/Diwan et al - 2002 - An infrastructure for teaching skills for group decision making and problem.pdf}
}

@misc{dockerinc.DockerAcceleratedContainerized2022,
  title = {Docker: {{Accelerated}}, {{Containerized Application Development}}},
  shorttitle = {Docker},
  author = {{Docker, Inc.}},
  year = {2022},
  month = may,
  urldate = {2023-06-06},
  abstract = {Docker is a platform designed to help developers build, share, and run modern applications. We handle the tedious setup, so you can focus on the code.},
  howpublished = {https://www.docker.com/},
  langid = {american},
  file = {/Users/igormoreno/Zotero/storage/LYLRC82T/www.docker.com.html}
}

@article{doebelihoneggerFachdidaktikMedienUnd2015,
  title = {{Fachdidaktik Medien und Informatik. Ein Beitrag zur Standortbestimmung}},
  author = {D{\"o}beli Honegger, Beat and Merz, Thomas},
  year = {2015},
  journal = {Beitr\"age zur Lehrerinnen- und Lehrerbildung},
  volume = {33},
  number = {2},
  pages = {256--263},
  abstract = {Media change poses a considerable challenge for the education system. Media and information \& communication technology (ICT) are more than just a tool that can be discussed in media pedagogy. Students need more in order to be prepared for the information and media society. The new curriculum for compulsory school in the German-speaking cantons of Switzerland (\guillemotleft Lehrplan 21\guillemotright ) made a first step in the right direction by defining the module \guillemotleft Media and Computer Science\guillemotright. This must be followed by a corresponding allocation of lessons in the timetables of the individual cantons and requires an adequately adapted conception of a subjectspecific pedagogy that deals with media and ICT as learning contents.},
  langid = {ngerman},
  file = {/Users/igormoreno/Zotero/storage/2JTV6TAV/Döbeli Honegger and Merz - 2015 - Fachdidaktik Medien und Informatik.pdf}
}

@inproceedings{dominguezEffectsCompetitiveCooperative2020,
  title = {Effects of {{Competitive}} and {{Cooperative Classroom Response Systems}} on {{Quiz Performance}} and {{Programming Skills}} in a {{Video Game Programming Course}}},
  booktitle = {Proceedings of the 2020 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Dom{\'i}nguez, Adri{\'a}n and {de-Marcos}, Luis and {Mart{\'i}nez-Herr{\'a}iz}, Jos{\'e}-Javier},
  year = {2020},
  month = jun,
  pages = {398--403},
  publisher = {{ACM}},
  address = {{Trondheim Norway}},
  doi = {10.1145/3341525.3387393},
  urldate = {2021-06-14},
  abstract = {Classroom response systems (CRSs) are tools that allow all students to respond to teacher questions individually through a software platform during lectures. Some widely used CRSs, like Kahoot or Classtime, include gamified designs that transform teacher questions into competitive or cooperative challenges in an attempt to make their usage more enjoyable. A question arises as to what differences may exist in the effects of competitive and cooperative gamified CRSs on student's test performance and learning. This study aims to analyze those differences in the context of a pre-graduate programming university course, which introduces students to video game programming. We present a quasi-experiment with 69 students assigned to two experimental and one control group. We examine between-group differences in CRSs' quiz results and programming skills when using competitive, cooperative, and neutral CRSs. An initial analysis suggests that quiz results are significantly lower when using competitive CRSs, in contrast with cooperative and neutral CRSs, but that there are no significant differences in the programming skill acquisition, considering practical assignments, as well as midterm and final examinations.},
  isbn = {978-1-4503-6874-2},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/XGTB4IVW/Domínguez et al. - 2020 - Effects of Competitive and Cooperative Classroom R.pdf}
}

@inproceedings{donaldactonWhatDoes502011,
  title = {What {{Does}} 50\% {{Mean}}?},
  booktitle = {{{WCCCE}} '11},
  author = {{Donald Acton}},
  year = {2011},
  publisher = {{ACM}},
  address = {{Prince George, Canada}},
  abstract = {In this paper, we describe the changes from a norm based assessment scheme to a criterion based one in a large second year programming course with a heterogeneous student population. The changes were prompted by two observations. One was that many students were reporting that the course and assignments were too easy while others were reporting the opposite. The second observation was that the results of some final exam BRACElet questions indicated that students weren't mastering some key areas of the course. This paper describes the modifications to the existing course grading scheme, the rationale for the changes, and the results of the changes in an attempt to address the concerns.},
  file = {/Users/igormoreno/Zotero/storage/GJHUC89B/Donald Acton - 2011 - What Does 50% Mean.pdf}
}

@inproceedings{donaldsonFlexibleLowcostActivities2018,
  title = {Flexible Low-Cost Activities to Develop Novice Code Comprehension Skills in Schools},
  booktitle = {Proceedings of the 13th {{Workshop}} in {{Primary}} and {{Secondary Computing Education}} on - {{WiPSCE}} '18},
  author = {Donaldson, Peter and Cutts, Quintin},
  year = {2018},
  pages = {1--4},
  publisher = {{ACM Press}},
  address = {{Potsdam, Germany}},
  doi = {10.1145/3265757.3265776},
  urldate = {2020-06-22},
  abstract = {The lack of code comprehension skills in novice programming students is recognised as a major factor underpinning poor learning outcomes. We use Schulte's Block Model to support teachers' understanding of how to break the skill down into component parts that are more manageable for a learner. This analysis is operationalised in three code annotation-based learning/assessment exercise formats, two helping students to identify and describe programming concepts and the third enabling them to parse code correctly and carry out desk executions. A great benefit of the activities is that they are low cost and can be applied to any imperative style code and so can be easily adopted by schools anywhere; furthermore, they are active, not passive, an issue with some animation-based visualisation approaches. The exercise formats were included as part of a national schools computing science professional learning programme (PLAN C).},
  isbn = {978-1-4503-6588-8},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/I6A7FDJB/Donaldson and Cutts - 2018 - Flexible low-cost activities to develop novice code comprehension skills in.pdf}
}

@inproceedings{donaldsonFlexibleLowcostActivities2018a,
  title = {Flexible Low-Cost Activities to Develop Novice Code Comprehension Skills in Schools},
  booktitle = {Proceedings of the 13th {{Workshop}} in {{Primary}} and {{Secondary Computing Education}}},
  author = {Donaldson, Peter and Cutts, Quintin},
  year = {2018},
  month = oct,
  series = {{{WiPSCE}} '18},
  pages = {1--4},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3265757.3265776},
  urldate = {2021-11-30},
  abstract = {The lack of code comprehension skills in novice programming students is recognised as a major factor underpinning poor learning outcomes. We use Schulte's Block Model to support teachers' understanding of how to break the skill down into component parts that are more manageable for a learner. This analysis is operationalised in three code annotation-based learning/assessment exercise formats, two helping students to identify and describe programming concepts and the third enabling them to parse code correctly and carry out desk executions. A great benefit of the activities is that they are low cost and can be applied to any imperative style code and so can be easily adopted by schools anywhere; furthermore, they are active, not passive, an issue with some animation-based visualisation approaches. The exercise formats were included as part of a national schools computing science professional learning programme (PLAN C).},
  isbn = {978-1-4503-6588-8},
  keywords = {block model,formative assessment,notional machine,program comprehension},
  file = {/Users/igormoreno/Zotero/storage/3WK49SKS/Donaldson and Cutts - 2018 - Flexible low-cost activities to develop novice code comprehension skills in.pdf}
}

@incollection{donmezWebBasedTool2008,
  title = {A {{Web Based Tool}} for {{Novice Programmers}}: {{Interaction}} in {{Use}}},
  shorttitle = {A {{Web Based Tool}} for {{Novice Programmers}}},
  booktitle = {Computational {{Science}} and {{Its Applications}} \textendash{} {{ICCSA}} 2008},
  author = {Donmez, Onur and Inceoglu, Mustafa Murat},
  editor = {Gervasi, Osvaldo and Murgante, Beniamino and Lagan{\`a}, Antonio and Taniar, David and Mun, Youngsong and Gavrilova, Marina L.},
  year = {2008},
  volume = {5072},
  pages = {530--540},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  issn = {0302-9743, 1611-3349},
  doi = {10.1007/978-3-540-69839-5_39},
  urldate = {2020-06-22},
  abstract = {This paper represents a web based tool model for novice programmers. It is a well known fact that, because of its abstract nature, programming is perceived to be hard amongst novice learners. Aim of this web based tool is to make students feel more comfortable with programming and overcome the abstractness. While designing this software we took the results of recent studies' into consideration to promote the effectiveness, such as getting learner inputs as code and variable values and giving representations of code and variables as learning aids. What is new to this software is placing learners into a more effective role. With this software learners are no more passive viewers of floating graphics, but active ``simulators'' of their very own code and inputs. With this software, learners simulate the ``notional machine'' behind the screen. In this paper we will be giving details about the model along with its potential uses.},
  isbn = {978-3-540-69838-8 978-3-540-69839-5},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/SFCAF4K5/Donmez and Inceoglu - 2008 - A Web Based Tool for Novice Programmers Interacti.pdf}
}

@techreport{donzeau-gougeProgrammingEnvironmentsBased1980,
  title = {Programming Environments Based on Structured Editors: {{The MENTOR}} Experience},
  shorttitle = {Programming Environments Based on Structured Editors},
  author = {{Donzeau-Gouge}, Veronique and Huet, Gerard and Kahn, Gilles and Lang, Bernard},
  year = {1980},
  institution = {{INSTITUT NATIONAL DE RECHERCHE D'INFORMATIQUE ET D'AUTOMATIQUE ROCQUENCOURT \ldots}},
  file = {/Users/igormoreno/Zotero/storage/RT42E3AL/Donzeau-Gouge et al. - 1980 - Programming environments based on structured edito.pdf;/Users/igormoreno/Zotero/storage/SDMI6B4M/Programming Environments Based on Structured Edito.pdf;/Users/igormoreno/Zotero/storage/93T29PIZ/ADA114990.html}
}

@book{doranBasicMeasurementEvaluation1980,
  title = {Basic {{Measurement}} and {{Evaluation}} of {{Science Instruction}}},
  author = {Doran, Rodney L.},
  year = {1980},
  publisher = {{National Science Teachers Association, 1742 Connecticut Ave}},
  urldate = {2019-01-27},
  abstract = {Designed to be used by preservice and in-service science teachers interested in assessing the outcomes of school science programs, this publication is aimed at helping teachers do a better job of developing tests and inventories specifically for their instructional programs and students. Material is presented in six chapters entitled: (1) Trends in Measurement and Evaluation of Science Instruction; (2) Assessing Cognitive Outcomes in Science; (3) Assessing Affective Outcomes in Science; (4) Assessing the Outcomes of Science Laboratory Activity; (5) Item and Test Analysis; and (6) Grading Students in Science. Also included is a selected references section containing 97 titles. (PB)},
  isbn = {978-0-87355-016-1},
  langid = {english},
  keywords = {Educational Assessment,Educational Objectives,Elementary Secondary Education,Evaluation,Evaluation Methods,Grading,Higher Education,Measurement,Program Evaluation,Science Education,Science Instruction,Student Evaluation},
  file = {/Users/igormoreno/Zotero/storage/TK9T38A9/Doran - 1980 - Basic Measurement and Evaluation of Science Instruction.pdf;/Users/igormoreno/Zotero/storage/4QEG7PEH/eric.ed.gov.html}
}

@inproceedings{dornLearningJobCharacterizing2010,
  title = {Learning on the Job: Characterizing the Programming Knowledge and Learning Strategies of Web Designers},
  shorttitle = {Learning on the Job},
  booktitle = {Proceedings of the {{SIGCHI Conference}} on {{Human Factors}} in {{Computing Systems}}},
  author = {Dorn, Brian and Guzdial, Mark},
  year = {2010},
  month = apr,
  series = {{{CHI}} '10},
  pages = {703--712},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1753326.1753430},
  urldate = {2020-10-13},
  abstract = {This paper reports on a study of professional web designers and developers. We provide a detailed characterization of their knowledge of fundamental programming concepts elicited through card sorting. Additionally, we present qualitative findings regarding their motivation to learn new concepts and the learning strategies they employ. We find a high level of recognition of basic concepts, but we identify a number of concepts that they do not fully understand, consider difficult to learn, and use infrequently. We also note that their learning process is motivated by work projects and often follows a pattern of trial and error. We conclude with implications for end-user programming researchers.},
  isbn = {978-1-60558-929-9},
  keywords = {informal learning,web development},
  annotation = {00070},
  file = {/Users/igormoreno/Zotero/storage/TYLS59JS/Dorn and Guzdial - 2010 - Learning on the job.pdf}
}

@misc{doroudiPrimerLearningTheories2021,
  title = {A {{Primer}} on {{Learning Theories}}},
  author = {Doroudi, Shayan},
  year = {2021},
  month = aug,
  institution = {{EdArXiv}},
  doi = {10.35542/osf.io/ze5hc},
  urldate = {2021-09-06},
  abstract = {The following primer is intended to give a brief overview of learning theories that are influential in educational practice, education research, and educational technology. Existing resources appear to be either too long (e.g., education or psychology textbooks) or too short (e.g., blog posts on individual learning theories). There seems to be a dearth of pedagogical material in the middle, namely something that (1) can be read in a few hours, (2) covers the set of prominent learning theories discussed here in historical context, and (3) provides enough detail so that a student or newcomer to this field can begin to see the contours of the complex landscape of learning theories in education. This is my attempt to provide such a resource, first of all, for my own students, and second, for others who may find it useful.},
  keywords = {Education,Educational Psychology,Social and Philosophical Foundations of Education},
  file = {/Users/igormoreno/Zotero/storage/DJWJBKHS/Doroudi - 2021 - A Primer on Learning Theories.pdf;/Users/igormoreno/Zotero/storage/7338J82G/learning-theories.html}
}

@inproceedings{doukakisUnderstandingProgrammingVariable2007,
  title = {Understanding the {{Programming Variable Concept}} with {{Animated Interactive Analogies}}},
  booktitle = {Proceedings of the {{The}} 8th {{Hellenic European Research}} on {{Computer Mathematics}} \& {{Its Applications Conference}}},
  author = {Doukakis, Dimitrios and Grigoriadou, Maria and Tsaganou, Grammatiki},
  year = {2007},
  month = sep,
  series = {{{HERCMA}}'07},
  publisher = {{Economical University}},
  address = {{Athens, Greece}},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/MHRNSBU2/Doukakis et al. - 2007 - Understanding the programming variable concept wit.pdf}
}

@inproceedings{dragonMemoryDiagramsConsistant2016,
  title = {Memory {{Diagrams}}: {{A Consistant Approach Across Concepts}} and {{Languages}}},
  shorttitle = {Memory {{Diagrams}}},
  booktitle = {Proceedings of the 47th {{ACM Technical Symposium}} on {{Computing Science Education}} - {{SIGCSE}} '16},
  author = {Dragon, Toby and Dickson, Paul E.},
  year = {2016},
  pages = {546--551},
  publisher = {{ACM Press}},
  address = {{Memphis, Tennessee, USA}},
  doi = {10.1145/2839509.2844607},
  urldate = {2020-06-22},
  abstract = {Hand-drawn memory diagrams are frequently used in computer science to demonstrate new programming concepts and support students' understanding of program functionality. These diagrams often vary among courses, instructors, and languages, which confuse students moving through the curriculum. Consistent memory diagrams throughout a curriculum not only alleviate confusion but offer a scaffold for students to transfer their understanding between courses taught at different levels of complexity and in different languages. We describe our standardized system for memory diagrams as it is used in our curriculum to demonstrate this scaffolding process through multiple concepts and programming languages.},
  isbn = {978-1-4503-3685-7},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/G4DQCGSD/Dragon and Dickson - 2016 - Memory Diagrams A Consistant Approach Across Conc.pdf}
}

@inproceedings{dragonMemoryDiagramsConsistant2016a,
  title = {Memory {{Diagrams}}: {{A Consistant Approach Across Concepts}} and {{Languages}}},
  shorttitle = {Memory {{Diagrams}}},
  booktitle = {Proceedings of the 47th {{ACM Technical Symposium}} on {{Computing Science Education}}},
  author = {Dragon, Toby and Dickson, Paul E.},
  year = {2016},
  month = feb,
  series = {{{SIGCSE}} '16},
  pages = {546--551},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2839509.2844607},
  urldate = {2023-04-14},
  abstract = {Hand-drawn memory diagrams are frequently used in computer science to demonstrate new programming concepts and support students' understanding of program functionality. These diagrams often vary among courses, instructors, and languages, which confuse students moving through the curriculum. Consistent memory diagrams throughout a curriculum not only alleviate confusion but offer a scaffold for students to transfer their understanding between courses taught at different levels of complexity and in different languages. We describe our standardized system for memory diagrams as it is used in our curriculum to demonstrate this scaffolding process through multiple concepts and programming languages.},
  isbn = {978-1-4503-3685-7},
  keywords = {computer science education,memory diagram,pedagogy,program memory traces,tracing},
  file = {/Users/igormoreno/Zotero/storage/MA76EGXR/Dragon and Dickson - 2016 - Memory Diagrams A Consistant Approach Across Conc.pdf}
}

@book{dresingManualTranscriptionTranscription2015,
  title = {Manual (on) {{Transcription}}: {{Transcription Conventions}}, {{Software Guides}} and {{Practical Hints}} for {{Qualitative Researchers}}},
  shorttitle = {Manual (on) {{Transcription}}},
  author = {Dresing, Thorsten and Pehl, Thorsten},
  year = {2015},
  month = jan,
  edition = {3},
  address = {{Marburg}},
  isbn = {978-3-8185-0497-7},
  langid = {english},
  annotation = {OCLC: 1042892324},
  file = {/Users/igormoreno/Zotero/storage/4EEDQ7BK/Dresing and Pehl - 2015 - Manual (on) Transcription Transcription Conventio.pdf}
}

@article{dreyerPrinciplesPOPL2013,
  title = {Principles of {{POPL}}},
  author = {Dreyer, Derek and Field, John and Giacobazzi, Roberto and Hicks, Michael and Jagannathan, Suresh and Sagiv, Mooly and Sewell, Peter and Wadler, Phil},
  year = {2013},
  month = jul,
  journal = {ACM SIGPLAN Notices},
  volume = {48},
  number = {4S},
  pages = {12--16},
  issn = {0362-1340},
  doi = {10.1145/2502508.2502517},
  urldate = {2020-05-10},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/9JX2LDXL/Dreyer et al. - 2013 - Principles of POPL.pdf}
}

@article{driverMakingMatchReview1982,
  title = {Making a Match?: {{A}} Review of the {{CSMS Science Reasonings Tasks}}},
  author = {Driver, Rosalind},
  year = {1982},
  month = jan,
  journal = {European Journal of Science Education},
  volume = {4},
  number = {1},
  pages = {123--131},
  issn = {0140-5284},
  doi = {10.1080/0140528820040116},
  urldate = {2018-10-02},
  keywords = {Piaget},
  file = {/Users/igormoreno/Zotero/storage/857JJTAU/Driver - 1982 - Making a match.pdf;/Users/igormoreno/Zotero/storage/EVFF6YRH/0140528820040116.html}
}

@incollection{drossopoulouDescribingSemanticsJava1999,
  title = {Describing the {{Semantics}} of {{Java}} and {{Proving Type Soundness}}},
  booktitle = {Formal {{Syntax}} and {{Semantics}} of {{Java}}},
  author = {Drossopoulou, Sophia and Eisenbach, Susan},
  editor = {{Alves-Foss}, Jim},
  year = {1999},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {41--80},
  publisher = {{Springer}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/3-540-48737-9_2},
  urldate = {2022-08-02},
  abstract = {Java combines the experience from the development of several object oriented languages, such as C++, Smalltalk and Clos. The philosophy of the language designers was to include only features with already known semantics, and to provide a small and simple language.},
  isbn = {978-3-540-48737-1},
  langid = {english},
  keywords = {Argument Type,Method Call,Operational Semantic,Type Rule,Type System},
  file = {/Users/igormoreno/Zotero/storage/ZC4CPK49/Drossopoulou and Eisenbach - 1999 - Describing the Semantics of Java and Proving Type .pdf}
}

@misc{drossopoulouJavaTypeSoundness2000,
  title = {Java {{Type Soundness Revisited}}},
  author = {Drossopoulou, Sophia and Valkevych, Tanya and Eisenbach, Susan},
  year = {2000},
  abstract = {We present an operational semantics, type system, and a proof of type soundness for a substantial subset of Java. The subset includes interfaces, classes, inheritance, field hiding, method overloading and overriding, arrays with associated dynamic checks, and exception handling. We distinguish between normal execution, where no exception is thrown -- or, more precisely, any exception thrown is handled -- and abnormal execution, where an exception is thrown and not handled. The type system distinguishes normal types which describe the possible outcomes of normal execution, and abnormal types which describe the possible outcomes of abnormal execution. The type of a term consists of its normal type and its abnormal type. With this set-up we prove subject reduction. Thus, the meaning of our subject reduction theorem is stronger than usual: it guarantees that normal execution returns a value of a type compatible with the normal type of the term, and that abnormal execution throws an exception ...},
  file = {/Users/igormoreno/Zotero/storage/S9MP79TQ/Drossopoulou et al. - 2000 - Java Type Soundness Revisited.pdf;/Users/igormoreno/Zotero/storage/T7DMFLV2/summary.html}
}

@article{duboulayBlackBoxGlass1999,
  title = {The Black Box inside the Glass Box: Presenting Computing Concepts to Novices},
  shorttitle = {The Black Box inside the Glass Box},
  author = {{Du boulay}, {\relax BENEDICT} and O'shea, {\relax TIM} and Monk, {\relax JOHN}},
  year = {1999},
  month = aug,
  journal = {International Journal of Human-Computer Studies},
  volume = {51},
  number = {2},
  pages = {265--277},
  issn = {1071-5819},
  doi = {10.1006/ijhc.1981.0309},
  urldate = {2019-02-20},
  abstract = {Simplicity and visibility are two important characteristics of programming languages for novices. Novices start programming with very little idea of the properties of the notional machine implied by the language they are learning. To help them learn these properties, the notional machine should be simple. That is, it should consist of a small number of parts that interact in ways that can be easily understood, possibly by analogy to other mechanisms with which the novice is more familiar. A notional machine is the idealized model of the computer implied by the constructs of the programming language. Visibility is concerned with methods for viewing selected parts and processes of this notional machine in action. We introduce the term ``commentary'' which is the system's dynamic characterization of the notional machine, expressed in either text or pictures on the user's terminal. We examine the simplicity and visibility of three systems, each designed to provide programming experience to different populations of novices.},
  file = {/Users/igormoreno/Zotero/storage/YYJ3WMWA/S1071581981603092.html}
}

@article{duboulayDifficultiesLearningProgram1986,
  ids = {doi:10.2190/3LFX-9RRF-67T8-UVK9},
  title = {Some {{Difficulties}} of {{Learning}} to {{Program}}},
  author = {Du Boulay, Benedict},
  year = {1986},
  month = feb,
  journal = {Journal of Educational Computing Research},
  volume = {2},
  number = {1},
  eprint = {https://doi.org/10.2190/3LFX-9RRF-67T8-UVK9},
  pages = {57--73},
  publisher = {{SAGE Publications Inc}},
  issn = {0735-6331},
  doi = {10.2190/3LFX-9RRF-67T8-UVK9},
  urldate = {2021-01-04},
  abstract = {This article is a brief introduction to some of the issues that teachers of programming may find helpful. It starts by presenting a fairly idiosyncratic view of teaching programming which makes use of mechanistic analogies and points out some of the pitfalls. The article goes on to examine certain errors based on the misapplication of analogies as well as certain interaction errors. The main emphasis is on the notional machine both at the general level of understanding (and misunderstanding) the relationship of the terminal to the computer as such, as well as at the more specific level of understanding assignment. Notation and mistakes that poorly-designed languages can induce novices to commit are discussed.},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/JE9Q3IPI/Du Boulay - 1986 - Some Difficulties of Learning to Program.pdf;/Users/igormoreno/Zotero/storage/TV73VVVG/Du Boulay - 1986 - Some Difficulties of Learning to Program.pdf}
}

@article{duboulayDifficultiesLearningProgram1986a,
  title = {Some {{Difficulties}} of {{Learning}} to {{Program}}},
  author = {Du Boulay, Benedict},
  year = {1986},
  month = feb,
  journal = {Journal of Educational Computing Research},
  volume = {2},
  number = {1},
  pages = {57--73},
  publisher = {{SAGE Publications Inc}},
  issn = {0735-6331},
  doi = {10.2190/3LFX-9RRF-67T8-UVK9},
  urldate = {2022-11-27},
  abstract = {This article is a brief introduction to some of the issues that teachers of programming may find helpful. It starts by presenting a fairly idiosyncratic view of teaching programming which makes use of mechanistic analogies and points out some of the pitfalls. The article goes on to examine certain errors based on the misapplication of analogies as well as certain interaction errors. The main emphasis is on the notional machine both at the general level of understanding (and misunderstanding) the relationship of the terminal to the computer as such, as well as at the more specific level of understanding assignment. Notation and mistakes that poorly-designed languages can induce novices to commit are discussed.},
  langid = {english}
}

@article{duboulayDifficultiesLearningProgram1986b,
  title = {Some {{Difficulties}} of {{Learning}} to {{Program}}},
  author = {Du Boulay, Benedict},
  year = {1986},
  month = feb,
  journal = {Journal of Educational Computing Research},
  volume = {2},
  number = {1},
  pages = {57--73},
  publisher = {{SAGE Publications Inc}},
  issn = {0735-6331},
  doi = {10.2190/3LFX-9RRF-67T8-UVK9},
  urldate = {2023-05-31},
  abstract = {This article is a brief introduction to some of the issues that teachers of programming may find helpful. It starts by presenting a fairly idiosyncratic view of teaching programming which makes use of mechanistic analogies and points out some of the pitfalls. The article goes on to examine certain errors based on the misapplication of analogies as well as certain interaction errors. The main emphasis is on the notional machine both at the general level of understanding (and misunderstanding) the relationship of the terminal to the computer as such, as well as at the more specific level of understanding assignment. Notation and mistakes that poorly-designed languages can induce novices to commit are discussed.},
  langid = {english}
}

@techreport{duboulayHowWorkLOGO1976,
  title = {How to {{Work}} the {{LOGO Machine}}},
  author = {Du Boulay, Benedict and O'Shea, Tim},
  year = {1976},
  month = nov,
  number = {4},
  institution = {{Department of Artificial Intelligence, University of Edinburgh}},
  urldate = {2020-08-18},
  file = {/Users/igormoreno/Zotero/storage/GMA8SISW/logomachine.pdf}
}

@inproceedings{ducasseDistributionMap2006,
  title = {Distribution {{Map}}},
  booktitle = {2006 22nd {{IEEE International Conference}} on {{Software Maintenance}}},
  author = {Ducasse, S. and Girba, T. and Kuhn, A.},
  year = {2006},
  month = sep,
  pages = {203--212},
  doi = {10.1109/ICSM.2006.22},
  abstract = {Understanding large software systems is a challenging task, and to support it many approaches have been developed. Often, the result of these approaches categorize existing entities into new groups or associates them with mutually exclusive properties. In this paper we present the distribution map as a generic technique to visualize and analyze this type of result. Our technique is based on the notion of focus, which shows whether a property is well-encapsulated or cross-cutting, and the notion of spread, which shows whether the property is present in several parts of the system. We present a basic visualization and complement it with measurements that quantify focus and spread. To validate our technique we show evidence of applying it on the result sets of different analysis approaches. As a conclusion we propose that the distribution map technique should belong to any reverse engineering toolkit},
  keywords = {distributed programming,distribution map,program visualisation,reverse engineering,reverse engineering toolkit,software clustering,software metrics,software visualization},
  file = {/Users/igormoreno/Zotero/storage/GNXLSZRT/Ducasse et al - 2006 - Distribution Map.pdf;/Users/igormoreno/Zotero/storage/HVSULNT8/4021339.html}
}

@mastersthesis{duganAssessingValidityReliability2006,
  title = {Assessing the Validity and Reliability of a Piagetian Based Paper-Pencil Test},
  author = {Dugan, Amy},
  year = {2006},
  month = may,
  address = {{Wichita, KS, USA}},
  langid = {english},
  school = {Wichita State University},
  file = {/Users/igormoreno/Zotero/storage/STRRTFCT/Dugan - 2006 - Assessing the validity and reliability of a piagetian based paper-pencil test.pdf}
}

@article{dunloskyImprovingStudentsLearning2013,
  title = {Improving {{Students}}' {{Learning With Effective Learning Techniques}}: {{Promising Directions From Cognitive}} and {{Educational Psychology}}},
  shorttitle = {Improving {{Students}}' {{Learning With Effective Learning Techniques}}},
  author = {Dunlosky, John and Rawson, Katherine A. and Marsh, Elizabeth J. and Nathan, Mitchell J. and Willingham, Daniel T.},
  year = {2013},
  month = jan,
  journal = {Psychological Science in the Public Interest},
  volume = {14},
  number = {1},
  pages = {4--58},
  publisher = {{SAGE Publications Inc}},
  issn = {1529-1006},
  doi = {10.1177/1529100612453266},
  urldate = {2021-03-15},
  abstract = {Many students are being left behind by an educational system that some people believe is in crisis. Improving educational outcomes will require efforts on many fronts, but a central premise of this monograph is that one part of a solution involves helping students to better regulate their learning through the use of effective learning techniques. Fortunately, cognitive and educational psychologists have been developing and evaluating easy-to-use learning techniques that could help students achieve their learning goals. In this monograph, we discuss 10 learning techniques in detail and offer recommendations about their relative utility. We selected techniques that were expected to be relatively easy to use and hence could be adopted by many students. Also, some techniques (e.g., highlighting and rereading) were selected because students report relying heavily on them, which makes it especially important to examine how well they work. The techniques include elaborative interrogation, self-explanation, summarization, highlighting (or underlining), the keyword mnemonic, imagery use for text learning, rereading, practice testing, distributed practice, and interleaved practice., To offer recommendations about the relative utility of these techniques, we evaluated whether their benefits generalize across four categories of variables: learning conditions, student characteristics, materials, and criterion tasks. Learning conditions include aspects of the learning environment in which the technique is implemented, such as whether a student studies alone or with a group. Student characteristics include variables such as age, ability, and level of prior knowledge. Materials vary from simple concepts to mathematical problems to complicated science texts. Criterion tasks include different outcome measures that are relevant to student achievement, such as those tapping memory, problem solving, and comprehension., We attempted to provide thorough reviews for each technique, so this monograph is rather lengthy. However, we also wrote the monograph in a modular fashion, so it is easy to use. In particular, each review is divided into the following sections: , , The review for each technique can be read independently of the others, and particular variables of interest can be easily compared across techniques., To foreshadow our final recommendations, the techniques vary widely with respect to their generalizability and promise for improving student learning. Practice testing and distributed practice received high utility assessments because they benefit learners of different ages and abilities and have been shown to boost students' performance across many criterion tasks and even in educational contexts. Elaborative interrogation, self-explanation, and interleaved practice received moderate utility assessments. The benefits of these techniques do generalize across some variables, yet despite their promise, they fell short of a high utility assessment because the evidence for their efficacy is limited. For instance, elaborative interrogation and self-explanation have not been adequately evaluated in educational contexts, and the benefits of interleaving have just begun to be systematically explored, so the ultimate effectiveness of these techniques is currently unknown. Nevertheless, the techniques that received moderate-utility ratings show enough promise for us to recommend their use in appropriate situations, which we describe in detail within the review of each technique., Five techniques received a low utility assessment: summarization, highlighting, the keyword mnemonic, imagery use for text learning, and rereading. These techniques were rated as low utility for numerous reasons. Summarization and imagery use for text learning have been shown to help some students on some criterion tasks, yet the conditions under which these techniques produce benefits are limited, and much research is still needed to fully explore their overall effectiveness. The keyword mnemonic is difficult to implement in some contexts, and it appears to benefit students for a limited number of materials and for short retention intervals. Most students report rereading and highlighting, yet these techniques do not consistently boost students' performance, so other techniques should be used in their place (e.g., practice testing instead of rereading)., Our hope is that this monograph will foster improvements in student learning, not only by showcasing which learning techniques are likely to have the most generalizable effects but also by encouraging researchers to continue investigating the most promising techniques. Accordingly, in our closing remarks, we discuss some issues for how these techniques could be implemented by teachers and students, and we highlight directions for future research.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/4RDMS9SU/Dunlosky et al. - 2013 - Improving Students’ Learning With Effective Learni.pdf}
}

@article{dunnModelingComplexityDescriptive,
  title = {Modeling the {{Complexity}} and {{Descriptive Adequacy}} of {{Construction Grammars}}},
  author = {Dunn, Jonathan},
  pages = {10},
  abstract = {This paper uses the Minimum Description Length paradigm to model the complexity of CxGs (operationalized as the encoding size of a grammar) alongside their descriptive adequacy (operationalized as the encoding size of a corpus given a grammar). These two quantities are combined to measure the quality of potential CxGs against unannotated corpora, supporting discovery-device CxGs for English, Spanish, French, German, and Italian. The results show (i) that these grammars provide significant generalizations as measured using compression and (ii) that more complex CxGs with access to multiple levels of representation provide greater generalizations than single-representation CxGs.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/ILIXWBRS/Dunn - Modeling the Complexity and Descriptive Adequacy o.pdf}
}

@inproceedings{duranAnalysisProgramComplexity2018,
  title = {Towards an {{Analysis}} of {{Program Complexity From}} a {{Cognitive Perspective}}},
  booktitle = {Proceedings of the 2018 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Duran, Rodrigo and Sorva, Juha and Leite, Sofia},
  year = {2018},
  month = aug,
  pages = {21--30},
  publisher = {{ACM}},
  address = {{Espoo Finland}},
  doi = {10.1145/3230977.3230986},
  urldate = {2020-06-22},
  abstract = {Instructional designers, examiners, and researchers frequently need to assess the complexity of computer programs in their work. However, there is a dearth of established methodologies for assessing the complexity of a program from a learning point of view. In this article, we explore theories and methods for describing programs in terms of the demands they place on human cognition. More specifically, we draw on Cognitive Load Theory and the Model of Hierarchical Complexity in order to extend Soloway's plan-based analysis of programs and apply it at a fine level of granularity. The resulting framework of Cognitive Complexity of Computer Programs (CCCP) generates metrics for two aspects of a program: plan depth and maximal plan interactivity. Plan depth reflects the overall complexity of the cognitive schemas that are required for reasoning about the program, and maximal plan interactivity reflects the complexity of interactions between schemas that arise from program composition. Using a number of short programs as case studies, we apply the CCCP to illustrate why one program or construct is more complex than another, to identify dependencies between constructs that a novice programmer needs to learn and to contrast the complexity of different strategies for program composition. Finally, we highlight some areas in computing education and computing education research in which the CCCP could be applied and discuss the upcoming work to validate and refine the CCCP and associated methodology beyond this initial exploration.},
  isbn = {978-1-4503-5628-2},
  langid = {english},
  keywords = {To Read},
  file = {/Users/igormoreno/Zotero/storage/ILF2PGSY/Duran et al - 2018 - Towards an Analysis of Program Complexity From a Cognitive Perspective.pdf}
}

@article{duranRulesProgramBehavior2021,
  title = {Rules of {{Program Behavior}}},
  author = {Duran, Rodrigo and Sorva, Juha and Sepp{\"a}l{\"a}, Otto},
  year = {2021},
  month = nov,
  journal = {ACM Transactions on Computing Education},
  volume = {21},
  number = {4},
  pages = {33:1--33:37},
  doi = {10.1145/3469128},
  urldate = {2021-11-23},
  abstract = {We propose a framework for identifying, organizing, and communicating learning objectives that involve program semantics. In this framework, detailed learning objectives are written down as rules of program behavior (RPBs). RPBs are teacher-facing statements that describe what needs to be learned about the behavior of a specific sort of programs. Different programming languages, student cohorts, and contexts call for different RPBs. Instructional designers may define progressions of RPB rulesets for different stages of a programming course or curriculum; we identify evaluation criteria for RPBs and discuss tradeoffs in RPB design. As a proof-of-concept example, we present a progression of rulesets designed for teaching beginners how expressions, variables, and functions work in Python. We submit that the RPB framework is valuable to practitioners and researchers as a tool for design and communication. Within computing education research, the framework can inform, among other things, the ongoing exploration of ``notional machines'' and the design of assessments and visualizations. The theoretical work that we report here lays a foundation for future empirical research that compares the effectiveness of RPB rulesets as well as different methods for teaching a particular ruleset.},
  keywords = {instructional design,introductory programming,learning objectives,model of program behavior,notional machines,Programming education,rules of program behavior,semantics},
  file = {/Users/igormoreno/Zotero/storage/7PFP5XD2/Duran et al - 2021 - Rules of Program Behavior.pdf}
}

@article{duschlSecondDimensionCrosscutting2012,
  title = {The {{Second Dimension}}\textemdash{{Crosscutting Concepts}}},
  author = {Duschl, Richard A.},
  year = {2012},
  journal = {Science and Children},
  volume = {49},
  number = {6},
  eprint = {43747566},
  eprinttype = {jstor},
  pages = {10--14},
  issn = {0036-8148},
  urldate = {2019-10-31},
  file = {/Users/igormoreno/Zotero/storage/JEDHU5VR/Duschl - 2012 - The Second Dimension—Crosscutting Concepts.pdf}
}

@inproceedings{dyerBoaLanguageInfrastructure2013,
  title = {Boa: {{A}} Language and Infrastructure for Analyzing Ultra-Large-Scale Software Repositories},
  shorttitle = {Boa},
  booktitle = {2013 35th {{International Conference}} on {{Software Engineering}} ({{ICSE}})},
  author = {Dyer, Robert and Nguyen, Hoan Anh and Rajan, Hridesh and Nguyen, Tien N.},
  year = {2013},
  month = may,
  pages = {422--431},
  issn = {1558-1225},
  doi = {10.1109/ICSE.2013.6606588},
  abstract = {In today's software-centric world, ultra-large-scale software repositories, e.g. SourceForge (350,000+ projects), GitHub (250,000+ projects), and Google Code (250,000+ projects) are the new library of Alexandria. They contain an enormous corpus of software and information about software. Scientists and engineers alike are interested in analyzing this wealth of information both for curiosity as well as for testing important hypotheses. However, systematic extraction of relevant data from these repositories and analysis of such data for testing hypotheses is hard, and best left for mining software repository (MSR) experts! The goal of Boa, a domain-specific language and infrastructure described here, is to ease testing MSR-related hypotheses. We have implemented Boa and provide a web-based interface to Boa's infrastructure. Our evaluation demonstrates that Boa substantially reduces programming efforts, thus lowering the barrier to entry. We also see drastic improvements in scalability. Last but not least, reproducing an experiment conducted using Boa is just a matter of re-running small Boa programs provided by previous researchers.},
  keywords = {Data mining,ease of use,Java,Libraries,lower barrier to entry,mining,Protocols,repository,reproducible,Runtime,scalable,software,Software},
  file = {/Users/igormoreno/Zotero/storage/UXZ9TZ2K/Dyer et al. - 2013 - Boa A language and infrastructure for analyzing u.pdf;/Users/igormoreno/Zotero/storage/IRJAGXUT/6606588.html}
}

@inproceedings{dyerDeclarativeVisitorsEase2013,
  title = {Declarative Visitors to Ease Fine-Grained Source Code Mining with Full History on Billions of {{AST}} Nodes},
  booktitle = {Proceedings of the 12th International Conference on {{Generative}} Programming: Concepts \& Experiences - {{GPCE}} '13},
  author = {Dyer, Robert and Rajan, Hridesh and Nguyen, Tien N.},
  year = {2013},
  pages = {23--32},
  publisher = {{ACM Press}},
  address = {{Indianapolis, Indiana, USA}},
  doi = {10.1145/2517208.2517226},
  urldate = {2021-10-11},
  abstract = {Software repositories contain a vast wealth of information about software development. Mining these repositories has proven useful for detecting patterns in software development, testing hypotheses for new software engineering approaches, etc. Specifically, mining source code has yielded significant insights into software development artifacts and processes. Unfortunately, mining source code at a large-scale remains a difficult task. Previous approaches had to either limit the scope of the projects studied, limit the scope of the mining task to be more coarse-grained, or sacrifice studying the history of the code due to both human and computational scalability issues. In this paper we address the substantial challenges of mining source code: a) at a very large scale; b) at a fine-grained level of detail; and c) with full history information.},
  isbn = {978-1-4503-2373-4},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/Z64L6MJV/Dyer et al. - 2013 - Declarative visitors to ease fine-grained source c.pdf}
}

@inproceedings{dyerMiningBillionsAST2014,
  title = {Mining Billions of {{AST}} Nodes to Study Actual and Potential Usage of {{Java}} Language Features},
  booktitle = {Proceedings of the 36th {{International Conference}} on {{Software Engineering}}},
  author = {Dyer, Robert and Rajan, Hridesh and Nguyen, Hoan Anh and Nguyen, Tien N.},
  year = {2014},
  month = may,
  series = {{{ICSE}} 2014},
  pages = {779--790},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2568225.2568295},
  urldate = {2021-10-11},
  abstract = {Programming languages evolve over time, adding additional language features to simplify common tasks and make the language easier to use. For example, the Java Language Specification has four editions and is currently drafting a fifth. While the addition of language features is driven by an assumed need by the community (often with direct requests for such features), there is little empirical evidence demonstrating how these new features are adopted by developers once released. In this paper, we analyze over 31k open-source Java projects representing over 9 million Java files, which when parsed contain over 18 billion AST nodes. We analyze this corpus to find uses of new Java language features over time. Our study gives interesting insights, such as: there are millions of places features could potentially be used but weren't; developers convert existing code to use new features; and we found thousands of instances of potential resource handling bugs.},
  isbn = {978-1-4503-2756-5},
  keywords = {empirical study,Java,language feature use,software mining},
  file = {/Users/igormoreno/Zotero/storage/HQSP79PY/Dyer et al. - 2014 - Mining billions of AST nodes to study actual and p.pdf}
}

@techreport{eamesCoReWayBuild2011,
  title = {{{CoRe}}: {{A}} Way to Build Pedagogical Content Knowledge for Beginning Teachers},
  author = {Eames, Chris and Williams, John and Hume, Anne and Lockley, John},
  year = {2011},
  pages = {7},
  institution = {{University of Waikato}},
  abstract = {Research has shown that one of the factors which enables teachers to be effective is their rich pedagogical content knowledge (PCK). Beginning teachers need support to develop this PCK and recent research in the field has proposed a conceptual tool known as ``content representations'', or CoRes, as a model for doing this. The study reported here brought together science and technology experts in content and pedagogy, early career secondary teachers, and researchers to design a CoRe to assist development of teacher PCK. The study then researched the early career teachers' use of the CoRe in their planning and delivery of a unit in their classrooms to examine the effect of the CoRe on teaching and learning, and on the development of the teachers' PCK.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/6J53WNHH/Eames et al - 2011 - CoRe.pdf}
}

@incollection{easterbrookSelectingEmpiricalMethods2008,
  title = {Selecting {{Empirical Methods}} for {{Software Engineering Research}}},
  booktitle = {Guide to {{Advanced Empirical Software Engineering}}},
  author = {Easterbrook, Steve and Singer, Janice and Storey, Margaret-Anne and Damian, Daniela},
  editor = {Shull, Forrest and Singer, Janice and Sj{\o}berg, Dag I. K.},
  year = {2008},
  pages = {285--311},
  publisher = {{Springer London}},
  address = {{London}},
  doi = {10.1007/978-1-84800-044-5_11},
  urldate = {2018-10-02},
  abstract = {Selecting a research method for empirical software engineering research is problematic because the benefits and challenges to using each method are not yet well catalogued. Therefore, this chapter describes a number of empirical methods available. It examines the goals of each and analyzes the types of questions each best addresses. Theoretical stances behind the methods, practical considerations in the application of the methods and data collection are also briefly reviewed. Taken together, this information provides a suitable basis for both understanding and selecting from the variety of methods applicable to empirical software engineering.},
  isbn = {978-1-84800-044-5},
  langid = {english},
  keywords = {Case Study Research,Critical Theorist,Empirical Method,Software Engineering,Survey Research},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/YSUYDVET/Easterbrook et al - 2008 - Selecting Empirical Methods for Software Engineering Research.pdf}
}

@article{ebrahimiNoviceProgrammerErrors1994,
  title = {Novice Programmer Errors: Language Constructs and Plan Composition},
  shorttitle = {Novice Programmer Errors},
  author = {Ebrahimi, Alireza},
  year = {1994},
  month = oct,
  journal = {International Journal of Human-Computer Studies},
  volume = {41},
  number = {4},
  pages = {457--480},
  issn = {1071-5819},
  doi = {10.1006/ijhc.1994.1069},
  urldate = {2018-12-02},
  abstract = {Why do novice programmers have difficulties in programming, and what are the probable causes of these errors? This study analyses the role of Language Constructs comprehension, Plan Composition, and their relationship to each other as applied to novice programming errors. The experiment was conducted with 80 novice programmers who were divided into four groups of 20. Each of the groups enrolled in one of the following programming language courses: Pascal, C, FORTRAN, or LISP. The results of the study indicate that the misunderstanding of Plan Composition and semantic misinterpretation of Language Constructs are the two major causes of errors. In addition, the study has concluded that these errors are highly correlated.},
  keywords = {To Read},
  file = {/Users/igormoreno/Zotero/storage/Z5NVGHYP/Ebrahimi - 1994 - Novice programmer errors.pdf;/Users/igormoreno/Zotero/storage/XJ8YFRUV/S107158198471069X.html}
}

@article{ebrahimiVPCLVisualLanguage1992,
  title = {{{VPCL}}: {{A}} Visual Language for Teaching and Learning Programming. ({{A}} Picture Is Worth a Thousand Words)},
  shorttitle = {{{VPCL}}},
  author = {Ebrahimi, Alireza},
  year = {1992},
  month = sep,
  journal = {Journal of Visual Languages \& Computing},
  volume = {3},
  number = {3},
  pages = {299--317},
  issn = {1045-926X},
  doi = {10.1016/1045-926X(92)90021-D},
  urldate = {2018-12-02},
  abstract = {There is a need to incorporate visualization in programming. This visualization can be accomplished through various programming steps such as plan composition, language constructs and program execution. Several empirical studies of programmers reveal that major programming errors are related to plan composition and language constructs. These programming steps are considered in the development of a new visual environment known as VPCL. To understand and learn programming, VPCL is divided into three phases: plan observation, plan integration and plan creation. During the plan observation or elementary level, the programming steps of a plan are rehearsed. In the intermediate level, the plans of a given problem are integrated by the user. In the advanced level, all the programming steps are developed using VPCL tools and the language constructs library. Each phase of VPCL is illustrated in detail with several examples. The effectiveness of VPCL as an instructional and developmental tool is demonstrated by the analysis of a sample empirical study.},
  file = {/Users/igormoreno/Zotero/storage/AB4ILG8D/Ebrahimi - 1992 - VPCL A visual language for teaching and learning .pdf;/Users/igormoreno/Zotero/storage/IEAB89DK/1045926X9290021D.html}
}

@misc{EBSCOhost,
  title = {{{EBSCOhost}}},
  urldate = {2020-10-30},
  howpublished = {https://web-a-ebscohost-com.proxy.unimib.it/ehost/delivery?sid=60afb0e4-3f95-40c1-84d4-7e1481f06ac9\%40sdc-v-sessmgr03\&vid=3\&ReturnUrl=https\%3a\%2f\%2fweb.a.ebscohost.com\%2fehost\%2fdetail\%2fdetail\%3fvid\%3d1\%26sid\%3d60afb0e4-3f95-40c1-84d4-7e1481f06ac9\%2540sdc-v-sessmgr03\%26bdata\%3dJnNpdGU9ZWhvc3QtbGl2ZQ\%253d\%253d},
  annotation = {00034}
}

@article{ecarnotWritingScientificArticle2015,
  title = {Writing a Scientific Article: {{A}} Step-by-Step Guide for Beginners},
  shorttitle = {Writing a Scientific Article},
  author = {Ecarnot, F. and Seronde, M. -F. and Chopard, R. and Schiele, F. and Meneveau, N.},
  year = {2015},
  month = dec,
  journal = {European Geriatric Medicine},
  volume = {6},
  number = {6},
  pages = {573--579},
  issn = {1878-7649},
  doi = {10.1016/j.eurger.2015.08.005},
  urldate = {2022-11-29},
  abstract = {Many young researchers find it extremely difficult to write scientific articles, and few receive specific training in the art of presenting their research work in written format. Yet, publication is often vital for career advancement, to obtain funding, to obtain academic qualifications, or for all these reasons. We describe here the basic steps to follow in writing a scientific article. We outline the main sections that an average article should contain; the elements that should appear in these sections, and some pointers for making the overall result attractive and acceptable for publication.},
  langid = {english},
  keywords = {Article,Research,Scientific publications,Writing},
  file = {/Users/igormoreno/Zotero/storage/WHDWCIN3/Ecarnot et al - 2015 - Writing a scientific article.pdf;/Users/igormoreno/Zotero/storage/33JRIV5X/S1878764915001606.html}
}

@misc{ECDLStandardSyllabus2021,
  title = {{ECDL Standard Syllabus Testinhalte der ECDL Standard Module}},
  year = {2021},
  publisher = {{Digital Literacy AG}},
  langid = {ngerman},
  file = {/Users/igormoreno/Zotero/storage/VAH7G3XR/ECDL_Syllabus_Standard_de_2021.pdf}
}

@inproceedings{eckerdalNoviceJavaProgrammers2005,
  ids = {eckerdalNoviceJavaProgrammers2005a},
  title = {Novice {{Java Programmers}}' {{Conceptions}} of "{{Object}}" and "{{Class}}", and {{Variation Theory}}},
  booktitle = {Proceedings of the 10th {{Annual SIGCSE Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Eckerdal, Anna and Thun{\'e}, Michael},
  year = {2005},
  series = {{{ITiCSE}} '05},
  pages = {89--93},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1067445.1067473},
  urldate = {2018-10-22},
  abstract = {Problems with understanding concepts, so called misconceptions, have been investigated and reported in a number of studies regarding object-oriented programming [4], [3]. In a first programming course using an object-oriented language, it is of great importance that students get a good understanding of central concepts like object and class at an early stage of their education. We have, with a phenomenographic research approach, performed a study with first year university students, investigating what an understanding of the concepts object and class includes from a student perspective. By applying variation theory [8] to our results we are able to pin-point what the students need to be able to discern in order to gain a "rich" understanding of these concepts.},
  isbn = {978-1-59593-024-8},
  keywords = {conceptions,misconceptions,phenomenography,variation theory},
  annotation = {00161},
  file = {/Users/igormoreno/Zotero/storage/Q2V3RD6S/Eckerdal e Thuné - 2005 - Novice Java programmers' conceptions of object a.pdf;/Users/igormoreno/Zotero/storage/WNT9FLJI/Eckerdal and Thuné - 2005 - Novice Java Programmers' Conceptions of Object and Class, and Variation.pdf;/Users/igormoreno/Zotero/storage/VDJA29IJ/1151954.html}
}

@phdthesis{eckerdalNoviceProgrammingStudents2009,
  title = {Novice Programming Students' Learning of Concepts and Practise},
  author = {Eckerdal, Anna},
  year = {2009},
  address = {{Uppsala}},
  isbn = {9789155474065},
  langid = {english},
  school = {Acta Universitatis Upsaliensis},
  keywords = {InterestingDissertation},
  annotation = {00085  OCLC: 938168016},
  file = {/Users/igormoreno/Zotero/storage/89DFYF7F/Eckerdal - 2009 - Novice programming students' learning of concepts .pdf}
}

@article{eckerdalRelationshipTextAction,
  title = {Relationship {{Between Text}} and {{Action Conceptions}} of {{Programming}}: {{A Phenomenographic}} and {{Quantitative Perspective}}},
  author = {Eckerdal, Anna and Laakso, Mikko-Jussi and Lopez, Mike and Sarkar, Amitrajit},
  pages = {5},
  abstract = {Phenomenographic research studies have identified different understandings of the concepts class and object by novice programmers. Aspects of understanding include a focus on artefacts of text, syntax and structure (text), as active agents in a program (action) and as models of an external reality (model). We explore the hypothesis that these aspects of conceptual understanding form a hierarchy in which mastery of the text aspect is a necessary precondition for understanding objects as active agents and the action aspect is a precondition for model understandings. We use empirical data from the final examination of an introductory programming course to test the relationship between the text and action aspects. Our findings do not support the hypothesis of a hierarchy but rather suggest that text and action understandings develop in parallel.},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/ZJNWF87V/Eckerdal et al - Relationship Between Text and Action Conceptions of Programming.pdf}
}

@article{edelsbrunnerVariableControlConceptual2018,
  title = {Variable Control and Conceptual Change: {{A}} Large-Scale Quantitative Study in Elementary School},
  shorttitle = {Variable Control and Conceptual Change},
  author = {Edelsbrunner, Peter A. and Schalk, Lennart and Schumacher, Ralph and Stern, Elsbeth},
  year = {2018},
  month = aug,
  journal = {Learning and Individual Differences},
  volume = {66},
  pages = {38--53},
  issn = {10416080},
  doi = {10.1016/j.lindif.2018.02.003},
  urldate = {2018-10-02},
  abstract = {We examined the predictive value and interplay of elementary school students' understanding of the control-ofvariables strategy, a domain-general experimentation skill, and their prior content knowledge for subsequent conceptual knowledge acquisition and conceptual change. Trained teachers provided N = 1809 first to sixth graders with 15 lessons of guided inquiry-based instruction on floating and sinking. We assessed understanding of the control-of-variables strategy before instruction, and conceptual content knowledge from before to after instruction. A mixture model analysis, specifically, a latent transition analysis, indicates that understanding of the control-of-variables strategy predicts content knowledge structure before instruction, and content knowledge development from before to after instruction. These findings corroborate lab-based research on the interplay of experimentation skills and content knowledge in inquiry settings and extend it to teacher-guided classroom instruction. We describe how learning pathways vary depending on students' understanding of the control-ofvariables strategy and prior content knowledge, and discuss implications for learning and instruction.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/24VYPDPG/Edelsbrunner et al - 2018 - Variable control and conceptual change.pdf}
}

@misc{edk-plenarversammlungRahmenlehrplanInformatik2017,
  title = {{Rahmenlehrplan Informatik}},
  author = {{EDK-Plenarversammlung}},
  year = {2017},
  month = oct,
  langid = {ngerman},
  file = {/Users/igormoreno/Zotero/storage/ISLVJR6B/EDK-Plenarversammlung - 2017 - Rahmenlehrplan Informatik.pdf}
}

@article{edwardsExampleCentricProgramming2004,
  title = {Example {{Centric Programming}}},
  author = {Edwards, Jonathan},
  year = {2004},
  journal = {ACM SIGPLAN Notices},
  volume = {39},
  pages = {8},
  abstract = {Programmers tend to understand programs by thinking of concrete examples. Example Centric Programming seeks to add IDE support for examples throughout the process of programming. Instead of programmers interpreting examples in their head, the examples are written down and the IDE interprets them automatically. Advanced UI techniques are used to present the results closely integrated with the code. Traditionally distinct programming tools (the editor, Read-Eval-Print-Loop, debugger, and test runner) are unified into a single tool that might be called an example-enlightened editor. This is expected to benefit a wide spectrum of programming activities, for both novice and experienced programmers. Some novel methods for testing and development are made possible. In the longer term, example centrism has implications for the design of future programming languages. A prototype has been implemented for Java in Eclipse.},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/DGNKH7Q9/Edwards - 2004 - Example Centric Programming.pdf}
}

@article{edwardsImprovingStudentPerformance2003,
  title = {Improving Student Performance by Evaluating How Well Students Test Their Own Programs},
  author = {Edwards, Stephen H.},
  year = {2003},
  month = sep,
  journal = {Journal on Educational Resources in Computing},
  volume = {3},
  number = {3},
  pages = {1--es},
  issn = {1531-4278},
  doi = {10.1145/1029994.1029995},
  urldate = {2022-11-27},
  abstract = {Students need to learn more software testing skills. This paper presents an approach to teaching software testing in a way that will encourage students to practice testing skills in many classes and give them concrete feedback on their testing performance, without requiring a new course, any new faculty resources, or a significant number of lecture hours in each course where testing will be practiced. The strategy is to give students basic exposure to test-driven development, and then provide an automated tool that will assess student submissions on-demand and provide feedback for improvement. This approach has been demonstrated in an undergraduate programming languages course using a prototype tool. The results have been positive, with students expressing appreciation for the practical benefits of test-driven development on programming assignments. Experimental analysis of student programs shows a 28\% reduction in defects per thousand lines of code.},
  keywords = {agile methods,extreme programming,teaching software testing,test-driven development,test-first coding}
}

@inproceedings{edwardsInvestigatingStaticAnalysis2017,
  title = {Investigating {{Static Analysis Errors}} in {{Student Java Programs}}},
  booktitle = {Proceedings of the 2017 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Edwards, Stephen H. and Kandru, Nischel and Rajagopal, Mukund B.M.},
  year = {2017},
  month = aug,
  pages = {65--73},
  publisher = {{ACM}},
  address = {{Tacoma Washington USA}},
  doi = {10.1145/3105726.3106182},
  urldate = {2021-02-04},
  abstract = {Research on students learning to program has produced studies on both compile-time errors (syntax errors) and run-time errors (exceptions). Both of these types of errors are natural targets, since detection is built into the programming language. In this paper, we present an empirical investigation of static analysis errors present in syntactically correct code. Static analysis errors can be revealed by tools that examine a program's source code, but this error detection is typically not built into common programming languages and instead requires separate tools. Static analysis can be used to check formatting or commenting expectations, but it also can be used to identify problematic code or to find some kinds of conceptual or logic errors. We study nearly 10 million static analysis errors found in over 500 thousand program submissions made by students over a fivesemester period. The study includes data from four separate courses, including a non-majors introductory course as well as the CS1/CS2/CS3 sequence for CS majors. We examine the differences between the error rates of CS major and non-major beginners, and also examine how these patterns change over time as students progress through the CS major course sequence. Our investigation shows that while formatting and Javadoc issues are the most common, static checks that identify coding flaws that are likely to be errors are strongly correlated with producing correct programs, even when students eventually fix the problems. With experience, students produce fewer errors, but the errors that are most frequent are consistent between both computer science majors and non-majors, and across experience levels. These results can highlight student struggles or misunderstandings that have escaped past analyses focused on syntax or run-time errors.},
  isbn = {978-1-4503-4968-0},
  langid = {english},
  annotation = {00019},
  file = {/Users/igormoreno/Zotero/storage/DA2KLQI7/Edwards et al. - 2017 - Investigating Static Analysis Errors in Student Ja.pdf}
}

@inproceedings{edwardsNoIfsAnds2007,
  title = {No {{Ifs}}, {{Ands}}, or {{Buts}}: {{Uncovering}} the {{Simplicity}} of {{Conditionals}}},
  shorttitle = {No {{Ifs}}, {{Ands}}, or {{Buts}}},
  booktitle = {Proceedings of the {{22Nd Annual ACM SIGPLAN Conference}} on {{Object-oriented Programming Systems}} and {{Applications}}},
  author = {Edwards, Jonathan},
  year = {2007},
  series = {{{OOPSLA}} '07},
  pages = {639--658},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1297027.1297075},
  urldate = {2018-10-02},
  abstract = {Schematic tables are a new representation for conditionals. Roughly a cross between decision tables and data flowgraphs, they represent computation and decision-making orthogonally. They unify the full range of conditional constructs, from if statements through pattern matching to polymorphic predicate dispatch. Program logic is maintained in a declarative canonical form that enforces completeness and disjointness among choices. Schematic tables can beused either as a code specification/generation tool, or as a self-contained diagrammatic programming language. They give program logic the clarity of truth tables, and support high-level direct manipulation of that logic, avoiding much of the mental computation demanded by conventional conditionals.},
  isbn = {978-1-59593-786-5},
  keywords = {control structures,decision tables,polymorphism,refactoring,visual programming},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/DHRP2J42/Edwards - 2007 - No Ifs, Ands, or Buts.pdf}
}

@inproceedings{edwardsSubtextUncoveringSimplicity2005,
  title = {Subtext: {{Uncovering}} the {{Simplicity}} of {{Programming}}},
  shorttitle = {Subtext},
  booktitle = {Proceedings of the 20th {{Annual ACM SIGPLAN Conference}} on {{Object-oriented Programming}}, {{Systems}}, {{Languages}}, and {{Applications}}},
  author = {Edwards, Jonathan},
  year = {2005},
  series = {{{OOPSLA}} '05},
  pages = {505--518},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1094811.1094851},
  urldate = {2018-10-02},
  abstract = {Representing programs as text strings makes programming harder then it has to be. The source text of a program is far removed from its behavior. Bridging this conceptual gulf is what makes programming so inhumanly difficult -- we are not compilers. Subtext is a new medium in which the representation of a program is the same thing as its execution. Like a spreadsheet, a program is visible and alive, constantly executing even as it is edited. Program edits are coherent semantic transformations.The essence of this new medium is copying. Programs are constructed by copying and executed by copy flow: the projection of changes through copies. The simple idea of copying develops into a rich theory of higher-order continual copying of trees. Notably absent are symbolic names, the workhorse of textual notation, replaced by immediately-bound explicit relationships. Subtext unifies traditionally distinct programming tools and concepts, and enables some novel ones. Ancestral structures are a new primitive data type that combines the features of lists and records, along with unproblematic multiple inheritance. Adaptive conditionals use first-class program edits to dynamically adapt behavior.A prototype implementation shows promise, but calls for much further research. Subtext suggests that we can make programming radically easier, if we are willing to be radical.},
  isbn = {978-1-59593-031-6},
  keywords = {copying,non-textual programming,prototypes,visual programming},
  file = {/Users/igormoreno/Zotero/storage/3IRIHB8M/Edwards - 2005 - Subtext.pdf}
}

@article{edwardsWebCATAutomaticallyGrading,
  title = {Web-{{CAT}}: {{Automatically Grading Programming Assignments}}},
  author = {Edwards, Stephen H and {P{\'e}rez-Qui{\~n}ones}, Manuel A},
  pages = {1},
  abstract = {This demonstration introduces participants to using Web-CAT, an open-source automated grading system. Web-CAT is customizable and extensible, allowing it to support a wide variety of programming languages and assessment strategies. Web-CAT is most well-known as the system that ``grades students on how well they test their own code,'' with experimental evidence that it offers greater learning benefits than more traditional outputcomparison grading. Participants will learn how to set up courses, prepare reference tests, set up assignments, and allow graders to manually grade for design.},
  langid = {english},
  annotation = {00212},
  file = {/Users/igormoreno/Zotero/storage/EBTBMND8/Edwards e Pérez-Quiñones - Web-CAT Automatically Grading Programming Assignm.pdf}
}

@article{ehrlichSpatialDescriptionsReferential1982,
  title = {Spatial Descriptions and Referential Continuity},
  author = {Ehrlich, Kate and {Johnson-Laird}, P. N.},
  year = {1982},
  month = jun,
  journal = {Journal of Verbal Learning and Verbal Behavior},
  volume = {21},
  number = {3},
  pages = {296--306},
  issn = {0022-5371},
  doi = {10.1016/S0022-5371(82)90626-0},
  urldate = {2018-12-02},
  abstract = {Three experiments were carried out in which subjects drew diagrams to depict spatial layouts corresponding to such three-sentence verbal descriptions as: ``The apple is on the left of the banana. The banana is in front of the carrot. The carrot is on the left of the doughnut.'' In Experiment 1, a referentially continuous description in which each adjacent pair of sentences had a referent in common required less listening time and elicited more correct diagrams than a referentially discontinuous description in which the first and second sentences had no referent in common. In Experiment 2, descriptions in which the second and third sentences had no referent in common were no more difficult to remember than continuous descriptions. Both, however, were considerably easier than the discontinuous descriptions. In Experiment 3, the subjects read the descriptions rather than heard them. Its results replicated the earlier findings, and the times taken to read the individual sentences in a description suggested that subjects try to integrate each incoming sentence into a single coherent mental model, and that those sentences which cannot be immediately integrated are represented in a propositional form.},
  file = {/Users/igormoreno/Zotero/storage/4667RFLT/Ehrlich and Johnson-Laird - 1982 - Spatial descriptions and referential continuity.pdf;/Users/igormoreno/Zotero/storage/SZGI5439/S0022537182906260.html}
}

@inproceedings{eicherGivingAITheory2018,
  title = {Giving {{AI}} a {{Theory}} of {{Mind}}},
  booktitle = {Proceedings of the 2018 {{AAAI}}/{{ACM Conference}} on {{AI}}, {{Ethics}}, and {{Society}}},
  author = {Eicher, Bobbie},
  year = {2018},
  month = dec,
  pages = {364--365},
  publisher = {{ACM}},
  address = {{New Orleans LA USA}},
  doi = {10.1145/3278721.3278797},
  urldate = {2020-06-22},
  abstract = {Effective collaboration between humans and artificially intelligent agents will require that the two are equipped to build a sense of mutual understanding with each other. When humans have an intuitive understanding of the motives and intentions of other humans, it is known as Theory of Mind. My work revolves around designing artificial intelligence to leverage this capacity to improve human collaborations with artificial agents.},
  isbn = {978-1-4503-6012-8},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/SZDX37V6/Eicher - 2018 - Giving AI a Theory of Mind.pdf}
}

@article{eichmannRolePlanningComplex2019,
  title = {The Role of Planning in Complex Problem Solving},
  author = {Eichmann, Beate and Goldhammer, Frank and Greiff, Samuel and Pucite, Liene and Naumann, Johannes},
  year = {2019},
  month = jan,
  journal = {Computers \& Education},
  volume = {128},
  pages = {1--12},
  issn = {03601315},
  doi = {10.1016/j.compedu.2018.08.004},
  urldate = {2018-11-06},
  abstract = {Complex problem solving (CPS) is a highly transversal competence needed in educational and vocational settings as well as everyday life. The assessment of CPS is often computer-based, and therefore provides data regarding not only the outcome but also the process of CPS. However, research addressing this issue is scarce. In this article we investigated planning activities in the process of complex problem solving. We operationalized planning through three behavioral measures indicating the duration of the longest planning interval, the delay of the longest planning interval and the variance of intervals between each two successive interactions. We found a significant negative average effect for our delay indicator, indicating that early planning in CPS is more beneficial. However, we also found effects depending on task and interaction effects for all three indicators, suggesting that the effects of different planning behaviors on CPS are highly intertwined.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/7RCNT3KA/Eichmann et al - 2019 - The role of planning in complex problem solving.pdf}
}

@inproceedings{eisenbergClosedTypeFamilies2014,
  title = {Closed {{Type Families}} with {{Overlapping Equations}}},
  booktitle = {Proceedings of the 41st {{ACM SIGPLAN-SIGACT Symposium}} on {{Principles}} of {{Programming Languages}}},
  author = {Eisenberg, Richard A. and Vytiniotis, Dimitrios and Peyton Jones, Simon and Weirich, Stephanie},
  year = {2014},
  series = {{{POPL}} '14},
  pages = {671--683},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2535838.2535856},
  urldate = {2019-06-28},
  abstract = {Open, type-level functions are a recent innovation in Haskell that move Haskell towards the expressiveness of dependent types, while retaining the look and feel of a practical programming language. This paper shows how to increase expressiveness still further, by adding closed type functions whose equations may overlap, and may have non-linear patterns over an open type universe. Although practically useful and simple to implement, these features go beyond conventional dependent type theory in some respects, and have a subtle metatheory.},
  isbn = {978-1-4503-2544-8},
  keywords = {haskell,system fc,type families,type-level computation},
  annotation = {00059},
  file = {/Users/igormoreno/Zotero/storage/28KHNRJF/Eisenberg et al. - 2014 - Closed Type Families with Overlapping Equations.pdf}
}

@inproceedings{eisenbergDependentlyTypedProgramming2012,
  title = {Dependently {{Typed Programming}} with {{Singletons}}},
  booktitle = {Proceedings of the 2012 {{Haskell Symposium}}},
  author = {Eisenberg, Richard A. and Weirich, Stephanie},
  year = {2012},
  series = {Haskell '12},
  pages = {117--130},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2364506.2364522},
  urldate = {2019-06-28},
  abstract = {Haskell programmers have been experimenting with dependent types for at least a decade, using clever encodings that push the limits of the Haskell type system. However, the cleverness of these encodings is also their main drawback. Although the ideas are inspired by dependently typed programs, the code looks significantly different. As a result, GHC implementors have responded with extensions to Haskell's type system, such as GADTs, type families, and datatype promotion. However, there remains a significant difference between programming in Haskell and in full-spectrum dependently typed languages. Haskell enforces a phase separation between runtime values and compile-time types. Therefore, singleton types are necessary to express the dependency between values and types. These singleton types introduce overhead and redundancy for the programmer. This paper presents the singletons library, which generates the boilerplate code necessary for dependently typed programming using GHC. To compare with full-spectrum languages, we present an extended example based on an Agda interface for safe database access. The paper concludes with a detailed discussion on the current capabilities of GHC for dependently typed programming and suggestions for future extensions to better support this style of programming.},
  isbn = {978-1-4503-1574-6},
  keywords = {dependently typed programming,gadts,haskell,singletons},
  annotation = {00073},
  file = {/Users/igormoreno/Zotero/storage/WRWLEL44/Eisenberg and Weirich - 2012 - Dependently Typed Programming with Singletons.pdf}
}

@article{eisenbergDEPENDENTTYPESHASKELL,
  title = {{{DEPENDENT TYPES IN HASKELL}}: {{THEORY AND PRACTICE}}},
  author = {Eisenberg, Richard A},
  pages = {53},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/SNEG26PN/Eisenberg - DEPENDENT TYPES IN HASKELL THEORY AND PRACTICE.pdf}
}

@article{eisenbergDependentTypesHaskell2016,
  title = {Dependent {{Types}} in {{Haskell}}: {{Theory}} and {{Practice}}},
  shorttitle = {Dependent {{Types}} in {{Haskell}}},
  author = {Eisenberg, Richard A.},
  year = {2016},
  month = oct,
  journal = {arXiv:1610.07978 [cs]},
  eprint = {1610.07978},
  primaryclass = {cs},
  urldate = {2019-06-28},
  abstract = {Haskell, as implemented in the Glasgow Haskell Compiler (GHC), has been adding new type-level programming features for some time. Many of these features---chiefly: generalized algebraic datatypes (GADTs), type families, kind polymorphism, and promoted datatypes---have brought Haskell to the doorstep of dependent types. Many dependently typed programs can even currently be encoded, but often the constructions are painful. In this dissertation, I describe Dependent Haskell, which supports full dependent types via a backward-compatible extension to today's Haskell. An important contribution of this work is an implementation, in GHC, of a portion of Dependent Haskell, with the rest to follow. The features I have implemented are already released, in GHC 8.0. This dissertation contains several practical examples of Dependent Haskell code, a full description of the differences between Dependent Haskell and today's Haskell, a novel type-safe dependently typed lambda-calculus (called Pico) suitable for use as an intermediate language for compiling Dependent Haskell, and a type inference and elaboration algorithm, Bake, that translates Dependent Haskell to type-correct Pico.},
  archiveprefix = {arxiv},
  keywords = {Computer Science - Programming Languages},
  annotation = {00027},
  file = {/Users/igormoreno/Zotero/storage/QHIZTGJR/Eisenberg - 2016 - Dependent Types in Haskell Theory and Practice.pdf;/Users/igormoreno/Zotero/storage/9P5S6MBN/1610.html}
}

@article{eisenbergDEPENDENTTYPESHASKELLa,
  title = {{{DEPENDENT TYPES IN HASKELL}}: {{THEORY AND PRACTICE}}},
  author = {Eisenberg, Richard A},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/EX2R72R5/Eisenberg - DEPENDENT TYPES IN HASKELL THEORY AND PRACTICE.pdf}
}

@misc{eisenbergRichardEisenbergDissertation2023,
  title = {Richard {{A}}. {{Eisenberg}}'s {{Dissertation}}},
  author = {Eisenberg, Richard},
  year = {2023},
  month = apr,
  urldate = {2023-06-08},
  abstract = {Richard A. Eisenberg's PhD Dissertation}
}

@inproceedings{eisenbergTypeVariablesPatterns2018,
  title = {Type {{Variables}} in {{Patterns}}},
  booktitle = {Proceedings of the 11th {{ACM SIGPLAN International Symposium}} on {{Haskell}}},
  author = {Eisenberg, Richard A. and Breitner, Joachim and Peyton Jones, Simon},
  year = {2018},
  series = {Haskell 2018},
  pages = {94--105},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3242744.3242753},
  urldate = {2019-03-12},
  abstract = {For many years, GHC has implemented an extension to Haskell that allows type variables to be bound in type signatures and patterns, and to scope over terms. This extension was never properly specified. We rectify that oversight here. With the formal specification in hand, the otherwise-labyrinthine path toward a design for binding type variables in patterns becomes blindingly clear. We thus extend ScopedTypeVariables to bind type variables explicitly, obviating the Proxy workaround to the dustbin of history.},
  isbn = {978-1-4503-5835-4},
  keywords = {Haskell,Pattern Matching,Patterns,polymorphism,type variables},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/9MKB2ZK7/Eisenberg et al. - 2018 - Type Variables in Patterns.pdf;/Users/igormoreno/Zotero/storage/A7SSJKSX/Eisenberg et al. - 2018 - Type Variables in Patterns.pdf}
}

@inproceedings{eisenbergVisibleTypeApplication2016,
  title = {Visible {{Type Application}}},
  booktitle = {Programming {{Languages}} and {{Systems}}},
  author = {Eisenberg, Richard A. and Weirich, Stephanie and Ahmed, Hamidhasan G.},
  editor = {Thiemann, Peter},
  year = {2016},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {229--254},
  publisher = {{Springer Berlin Heidelberg}},
  abstract = {The Hindley-Milner (HM) type system automatically infers the types at which polymorphic functions are used. In HM, the inferred types are unambiguous, and every expression has a principal type. Type annotations make HM compatible with extensions where complete type inference is impossible, such as higher-rank polymorphism and type-level functions. However, programmers cannot use annotations to explicitly provide type arguments to polymorphic functions, as HM requires type instantiations to be inferred.We describe an extension to HM that allows visible type application. Our extension requires a novel type inference algorithm, yet its declarative presentation is a simple extension to HM. We prove that our extended system is a conservative extension of HM and admits principal types. We then extend our approach to a higher-rank type system with bidirectional type-checking. We have implemented this system in the Glasgow Haskell Compiler and show how our approach scales in the presence of complex type system features.},
  isbn = {978-3-662-49498-1},
  langid = {english},
  keywords = {Principal Type,System Versus,Type Scheme,Type System,Type Variable},
  annotation = {00025},
  file = {/Users/igormoreno/Zotero/storage/UGTBV9F7/Eisenberg et al. - 2016 - Visible Type Application.pdf}
}

@inbook{elliottFunctionalImages2003,
  title = {Functional Images},
  booktitle = {The {{Fun}} of {{Programming}}},
  author = {Elliott, Conal},
  year = {2003},
  month = mar,
  series = {Cornerstone of {{Computing}}},
  publisher = {{Bloomsbury Publishing}},
  collaborator = {Gibbons, Jeremy and {de Moor}, Oege},
  file = {/Users/igormoreno/Zotero/storage/4MSRRM5H/Elliott - 2003 - Functional images.pdf}
}

@inproceedings{elliottFunctionalReactiveAnimation1997,
  title = {Functional Reactive Animation},
  booktitle = {Proceedings of the Second {{ACM SIGPLAN}} International Conference on {{Functional}} Programming},
  author = {Elliott, Conal and Hudak, Paul},
  year = {1997},
  month = aug,
  series = {{{ICFP}} '97},
  pages = {263--273},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/258948.258973},
  urldate = {2023-01-21},
  abstract = {Fran (Functional Reactive Animation) is a collection of data types and functions for composing richly interactive, multimedia animations. The key ideas in Fran are its notions of behaviors and events. Behaviors are time-varying, reactive values, while events are sets of arbitrarily complex conditions, carrying possibly rich information. Most traditional values can be treated as behaviors, and when images are thus treated, they become animations. Although these notions are captured as data types rather than a programming language, we provide them with a denotational semantics, including a proper treatment of real time, to guide reasoning and implementation. A method to effectively and efficiently perform event detection using interval analysis is also described, which relies on the partial information structure on the domain of event times. Fran has been implemented in Hugs, yielding surprisingly good performance for an interpreter-based system. Several examples are given, including the ability to describe physical phenomena involving gravity, springs, velocity, acceleration, etc. using ordinary differential equations.},
  isbn = {978-0-89791-918-0},
  file = {/Users/igormoreno/Zotero/storage/ERQNTXUD/Elliott and Hudak - 1997 - Functional reactive animation.pdf}
}

@inproceedings{ellisLearningInferGraphics2018a,
  title = {Learning to Infer Graphics Programs from Hand-Drawn Images},
  booktitle = {Proceedings of the 32nd {{International Conference}} on {{Neural Information Processing Systems}}},
  author = {Ellis, Kevin and Ritchie, Daniel and {Solar-Lezama}, Armando and Tenenbaum, Joshua B.},
  year = {2018},
  month = dec,
  series = {{{NIPS}}'18},
  pages = {6062--6071},
  publisher = {{Curran Associates Inc.}},
  address = {{Red Hook, NY, USA}},
  urldate = {2023-01-21},
  abstract = {We introduce a model that learns to convert simple hand drawings into graphics programs written in a subset of LATEX. The model combines techniques from deep learning and program synthesis. We learn a convolutional neural network that proposes plausible drawing primitives that explain an image. These drawing primitives are a specification (spec) of what the graphics program needs to draw. We learn a model that uses program synthesis techniques to recover a graphics program from that spec. These programs have constructs like variable bindings, iterative loops, or simple kinds of conditionals. With a graphics program in hand, we can correct errors made by the deep network and extrapolate drawings.},
  file = {/Users/igormoreno/Zotero/storage/FLZEZ4YW/Ellis et al - 2018 - Learning to infer graphics programs from hand-drawn images.pdf}
}

@book{elloumiTheoryPracticeOnline2004,
  title = {Theory and Practice of Online Learning},
  author = {Elloumi, Fathi},
  year = {2004},
  publisher = {{Athabasca University}},
  address = {{Athabasca, Alta.}},
  urldate = {2021-03-10},
  langid = {english},
  annotation = {00025  OCLC: 937072150},
  file = {/Users/igormoreno/Zotero/storage/C25277MD/Elloumi - 2004 - Theory and practice of online learning.pdf}
}

@inproceedings{elmadaniDataDrivenMisconceptionDiscovery2012,
  title = {Data-{{Driven Misconception Discovery}} in {{Constraint-based Intelligent Tutoring Systems}}},
  booktitle = {International {{Conference}} on {{Computers}} in {{Education}}},
  author = {Elmadani, Myse and Mathews, Moffat and Mitrovic, Antonija},
  year = {2012},
  pages = {8},
  publisher = {{Asia-Pacific Society for Computers in Education}},
  address = {{Singapore}},
  abstract = {Students often have misconceptions in the domain they are studying. Misconception identification is a difficult task but allows teachers to create strategies to appropriately address misconceptions held by students. This project investigates a data-driven technique to discover students' misconceptions in interactions with constraint-based Intelligent Tutoring Systems (ITSs). This analysis has not previously been done. EER-Tutor is one such constraint-based ITS, which teaches conceptual database design using Enhanced Entity-Relationship (EER) data modelling. As with any ITS, a lot of data about each student's interaction within EER-Tutor are available: as individual student models, containing constraint histories, and logs, containing detailed information about each student action. This work can be extended to other ITSs and their relevant domains.},
  langid = {english},
  keywords = {proposedByIgor},
  annotation = {00014},
  file = {/Users/igormoreno/Zotero/storage/M3ZJ5PWV/Elmadani et al - 2012 - Data-Driven Misconception Discovery in Constraint-based Intelligent Tutoring.pdf}
}

@article{elshiekhUsingGamificationTeach2017,
  title = {Using {{Gamification}} to {{Teach Students Programming Concepts}}},
  author = {Elshiekh, Rania and Butgerit, Laurie},
  year = {2017},
  month = aug,
  journal = {Open Access Library Journal},
  volume = {4},
  number = {8},
  pages = {720--726},
  publisher = {{Scientific Research Publishing}},
  doi = {10.4236/oalib.1103803},
  urldate = {2020-09-28},
  abstract = {Using Gamification to Teach Students Programming Concepts},
  copyright = {http://creativecommons.org/licenses/by/4.0/},
  langid = {english},
  annotation = {00013},
  file = {/Users/igormoreno/Zotero/storage/2VZYTRFJ/Elshiekh e Butgerit - 2017 - Using Gamification to Teach Students Programming C.pdf;/Users/igormoreno/Zotero/storage/DQLH76EV/Elshiekh e Butgerit - 2017 - Using Gamification to Teach Students Programming C.pdf;/Users/igormoreno/Zotero/storage/DDRR2T3Y/78480.html}
}

@article{elvinaCombiningProgramVisualization2018,
  title = {Combining Program Visualization with Programming Workspace to Assist Students for Completing Programming Laboratory Task},
  author = {Elvina, Elvina and Karnalim, Oscar and Ayub, Mewati and Wijanto, Maresha Caroline},
  year = {2018},
  month = jun,
  journal = {Journal of Technology and Science Education},
  volume = {8},
  number = {4},
  pages = {268},
  issn = {2013-6374},
  doi = {10.3926/jotse.420},
  urldate = {2020-06-22},
  abstract = {Numerous Program Visualization tools (PVs) have been developed for assisting novice students to understand their source code further. However, none of them are practical to be used in the context of completing programming laboratory task; students are required to keep switching between PV and programming workspace since PV's features are considerably limited for developing programming solution from scratch. This paper combines PV with programming workspace to handle such issue. Resulted tool (which is named PITON) has 13 features extracted from PythonTutor (a program visualization tool), PyCharm (a programming workspace), and student's feedbacks about PythonTutor. According to think-aloud and user study, PITON is more practical to be used than a combination of PythonTutor and PyCharm. Further, its features are considerably helpful; students rated these features as useful and frequently used.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/P77X79Z7/Elvina et al - 2018 - Combining program visualization with programming workspace to assist students.pdf}
}

@inproceedings{emirMatchingObjectsPatterns2007,
  title = {Matching {{Objects}} with {{Patterns}}},
  booktitle = {{{ECOOP}} 2007 \textendash{} {{Object-Oriented Programming}}},
  author = {Emir, Burak and Odersky, Martin and Williams, John},
  editor = {Ernst, Erik},
  year = {2007},
  series = {{{ECOOP}} '07},
  pages = {273--298},
  publisher = {{Springer Berlin Heidelberg}},
  abstract = {Data in object-oriented programming is organized in a hierarchy of classes. The problem of object-oriented pattern matching is how to explore this hierarchy from the outside. This usually involves classifying objects by their run-time type, accessing their members, or determining some other characteristic of a group of objects. In this paper we compare six different pattern matching techniques: object-oriented decomposition, visitors, type-tests/type-casts, typecase, case classes, and extractors. The techniques are compared on nine criteria related to conciseness, maintainability and performance. The paper introduces case classes and extractors as two new pattern-matching methods and shows that their combination works well for all of the established criteria.},
  isbn = {978-3-540-73589-2},
  langid = {english},
  keywords = {Base Class,Case Class,Class Hierarchy,Pattern Match,Pattern Matching,prospectus,Type Variable},
  annotation = {00107},
  file = {/Users/igormoreno/Zotero/storage/R6BGJWM6/Emir et al. - 2007 - Matching objects with patterns.pdf;/Users/igormoreno/Zotero/storage/VF4J94RQ/978-3-540-73589-2_14.html}
}

@incollection{endlerTrackingCognitiveDevelopment2006,
  title = {Tracking {{Cognitive Development}} with the {{Rasch Model}}: {{Empirical Evidence}} of {{Growth}} and {{Heterogeneity}}},
  booktitle = {Applications of {{Rasch Measurement}} in {{Science Education}}},
  author = {Endler, Lorna C and Bond, Trevor G.},
  editor = {Liu, Xiufeng and Boone, William J.},
  year = {2006},
  pages = {37},
  publisher = {{JAM Press Books}},
  address = {{Maple Grove, MN, USA}},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/2HNCHUMM/Endler and Bond - 2006 - Tracking Cognitive Development with the Rasch Model.pdf}
}

@book{engelhartTaxonomyEducationalObjectives1956,
  title = {Taxonomy of {{Educational Objectives The Classification}} of {{Educational Goals}}; {{Handbook I}}: {{Cognitive Domain}}},
  shorttitle = {Taxonomy of {{Educational Objectives The Classification}} of {{Educational Goals}}; {{Handbook I}}},
  author = {Engelhart, Max D. and Hill, Walker H. and Furst, Edward J. and Krathwohl, David R.},
  editor = {Bloom, Benjamin S.},
  year = {1956},
  month = jan,
  edition = {Underlining/Highlighting edition},
  publisher = {{David McKay.}},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/2RWQJY4K/Bloom et al - 1956 - Taxonomy of Educational Objectives The Classification of Educational Goals;.pdf}
}

@techreport{enginbumbacherStateComputerScience2022,
  title = {State of {{Computer Science Education Research}} in {{Switzerland}}: {{Report}} of the {{WiPSCE}}'22 Workshop in {{Morschach}}},
  author = {{Engin Bumbacher} and {Mareen Grillenberger} and {Alexander Repenning}},
  year = {2022},
  month = dec,
  address = {{Morschach, Switzerland}},
  urldate = {2023-02-21},
  abstract = {On November 2nd, 2022, 27 Computer Science (CS) education researchers from all language regions in Switzerland met for an exchange of ideas regarding the current situation in computing education research in Switzerland. After an introduction by Rolf Ingold about the Hasler Foundation's principles and goals, the workshop leaders presented a brief analysis of the situation of CS education research in Switzerland (which lags behind in some international comparisons) and of participants' responses to the pre-workshop survey, which revealed a broad range of perceived challenges and opportunities for CS education research. The participants' analysis of their situation reflected also some of the main statements in the conjectures of the Hasler Foundation. The main part of the workshop was dedicated to the discussion of the seven conjectures put forth by the Hasler Foundation about the advancement of CS education research in Switzerland. Participants worked in 6 groups and in two rounds, with groups being mixed up in between. Participants engaged in group discussions on a self-selected conjecture from the list of seven conjectures. Participants went through two rounds of discussions, with groups being remixed between each round. The following points summarize the central outcomes of the discussions: - CS education researchers in Switzerland need vessels such as doctoral schools or regular gatherings that advance the development of a strong research community.  - There is a clear need for improving the competencies of CS education researchers and educators in terms of CS knowledge, pedagogy, and research methods.  - Participants have identified multiple structural and recruitment challenges as barriers to the advancement of CS education research that can be addressed through concentrated efforts.  - The definition of research ``at the level of excellence'' needs to be broadened to ensure the inclusion of more practice-oriented, action-based research, such as replication research and design-based research.  - The Hasler Foundation could develop targeted programs that differ from existing funding mechanisms like SNF or InnoSuisse to address some of the highlighted issues.  - The financial mechanisms for developing competencies and promoting excellence research should start in parallel rather than sequentially, as originally proposed by the conjectures. Developing already strong research proposals now, even if small in number, could help accelerate the professionalization of the field. Furthermore, a three-year program is considered to be too short for the development of programs that target the build-up of talent.},
  file = {/Users/igormoreno/Zotero/storage/824RIXUP/22_WiPSCE_Report.pdf}
}

@article{epplerComparisonConceptMaps2006,
  title = {A {{Comparison}} between {{Concept Maps}}, {{Mind Maps}}, {{Conceptual Diagrams}}, and {{Visual Metaphors}} as {{Complementary Tools}} for {{Knowledge Construction}} and {{Sharing}}},
  author = {Eppler, Martin J},
  year = {2006},
  month = sep,
  journal = {Information Visualization},
  volume = {5},
  number = {3},
  pages = {202--210},
  issn = {1473-8716, 1473-8724},
  doi = {10.1057/palgrave.ivs.9500131},
  urldate = {2019-09-27},
  langid = {english},
  keywords = {To Read},
  file = {/Users/igormoreno/Zotero/storage/46ALEULS/Eppler - 2006 - A Comparison between Concept Maps, Mind Maps, Conceptual Diagrams, and Visual.pdf}
}

@article{erbeReducingTestAnxiety2007,
  title = {Reducing {{Test Anxiety While Increasing Learning}}: {{The Cheat Sheet}}},
  shorttitle = {Reducing {{Test Anxiety While Increasing Learning}}},
  author = {Erbe, Brigitte},
  year = {2007},
  month = jul,
  journal = {College Teaching},
  volume = {55},
  number = {3},
  pages = {96--98},
  issn = {8756-7555},
  doi = {10.3200/CTCH.55.3.96-98},
  urldate = {2018-11-09},
  abstract = {Student learning is greatly enhanced by studying prior to an exam. Allowing students to prepare a cheat sheet for the exam helps structure this study time and deepens learning. The crib sheet is well defined: one double-sided page of notes. An award for the best and most creative cheat sheet allows the instructor to appreciate the students' efforts. Using the cheat sheet also reduces student anxiety during testing.},
  keywords = {assessment,cheat sheet,student anxiety},
  file = {/Users/igormoreno/Zotero/storage/JWMZ3DDW/Erbe - 2007 - Reducing Test Anxiety While Increasing Learning T.pdf;/Users/igormoreno/Zotero/storage/KBY63AKV/CTCH.55.3.html}
}

@inproceedings{erdwegConciseTypesafeEfficient2021,
  title = {Concise, Type-Safe, and Efficient Structural Diffing},
  booktitle = {Proceedings of the 42nd {{ACM SIGPLAN International Conference}} on {{Programming Language Design}} and {{Implementation}}},
  author = {Erdweg, Sebastian and Szab{\'o}, Tam{\'a}s and Pacak, Andr{\'e}},
  year = {2021},
  month = jun,
  series = {{{PLDI}} 2021},
  pages = {406--419},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3453483.3454052},
  urldate = {2022-03-11},
  abstract = {A structural diffing algorithm compares two pieces of tree-shaped data and computes their difference. Existing structural diffing algorithms either produce concise patches or ensure type safety, but never both. We present a new structural diffing algorithm called truediff that achieves both properties by treating subtrees as mutable, yet linearly typed resources. Mutation is required to derive concise patches that only mention changed nodes, but, in contrast to prior work, truediff guarantees all intermediate trees are well-typed. We formalize type safety, prove truediff has linear run time, and evaluate its performance and the conciseness of the derived patches empirically for real-world Python documents. While truediff ensures type safety, the size of its patches is on par with Gumtree, a popular untyped diffing implementation. Regardless, truediff outperforms Gumtree and a typed diffing implementation by an order of magnitude.},
  isbn = {978-1-4503-8391-2},
  keywords = {incremental computing,tree diffing},
  file = {/Users/igormoreno/Zotero/storage/529AZ9H9/Erdweg et al. - 2021 - Concise, type-safe, and efficient structural diffi.pdf}
}

@inproceedings{erdwegConciseTypesafeEfficient2021a,
  title = {Concise, Type-Safe, and Efficient Structural Diffing},
  booktitle = {Proceedings of the 42nd {{ACM SIGPLAN International Conference}} on {{Programming Language Design}} and {{Implementation}}},
  author = {Erdweg, Sebastian and Szab{\'o}, Tam{\'a}s and Pacak, Andr{\'e}},
  year = {2021},
  month = jun,
  pages = {406--419},
  publisher = {{ACM}},
  address = {{Virtual Canada}},
  doi = {10.1145/3453483.3454052},
  urldate = {2023-10-19},
  isbn = {978-1-4503-8391-2},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/E8FW7SP6/Erdweg et al. - 2021 - Concise, type-safe, and efficient structural diffi.pdf}
}

@inproceedings{ericsonEvaluatingEfficiencyEffectiveness2018,
  title = {Evaluating the {{Efficiency}} and {{Effectiveness}} of {{Adaptive Parsons Problems}}},
  booktitle = {Proceedings of the 2018 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Ericson, Barbara J. and Foley, James D. and Rick, Jochen},
  year = {2018},
  month = aug,
  pages = {60--68},
  publisher = {{ACM}},
  address = {{Espoo Finland}},
  doi = {10.1145/3230977.3231000},
  urldate = {2021-06-14},
  abstract = {Practice is essential for learning. There is evidence that solving Parsons problems (putting mixed up code blocks in order) is a more efficient, but just as effective, form of practice than writing code from scratch. However, not all students successfully solve every Parsons problem. Making the problems adaptive, so that the difficulty changes based on the learner's performance, should keep the learner in Vygotsky's zone of proximal development and maximize learning gains. This paper reports on a study comparing the efficiency and effectiveness of learning from solving adaptive Parsons problems vs non-adaptive Parsons problem vs writing the equivalent code. The adaptive Parsons problems used both intraproblem and inter-problem adaptation. Intra-problem adaptation means that if the learner is struggling to solve the current problem, the problem can dynamically be made easier. Inter-problem adaptation means that the difficulty of the next problem is modified based on the learner's performance on the previous problem. This study provides evidence that solving intra-problem and inter-problem adaptive Parsons problems is a more efficient, but just as effective, form of practice as writing the equivalent code.},
  isbn = {978-1-4503-5628-2},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/QLY35BP3/Ericson et al. - 2018 - Evaluating the Efficiency and Effectiveness of Ada.pdf}
}

@inproceedings{ericsonSolvingParsonsProblems2017,
  ids = {ericsonSolvingParsonsProblems2017a},
  title = {Solving Parsons Problems versus Fixing and Writing Code},
  booktitle = {Proceedings of the 17th {{Koli Calling Conference}} on {{Computing Education Research}} - {{Koli Calling}} '17},
  author = {Ericson, Barbara J. and Margulieux, Lauren E. and Rick, Jochen},
  year = {2017},
  pages = {20--29},
  publisher = {{ACM Press}},
  address = {{Koli, Finland}},
  doi = {10.1145/3141880.3141895},
  urldate = {2020-06-22},
  abstract = {Prior research has shown that Parsons problems are an engaging type of code completion problem that can be used to teach syntactic and semantic language constructs. They can also be used in summative assessments to reduce marking time and grading variability compared to code writing problems. In a Parsons problem the correct code is provided, but is broken into mixed-up code blocks that must be assembled in the correct order. Two-dimensional Parsons problems also require the code blocks to be indented correctly. Parsons problems can contain extra code blocks, called distractors, which are not needed in a correct solution. We present a study that compared the efficiency, effectiveness, and cognitive load of learning from solving twodimensional Parsons problems with distractors, versus fixing code with the same errors as the distractors, versus writing the equivalent code. We found that solving two-dimensional Parsons problems with distractors took significantly less time than fixing code with errors or than writing the equivalent code. Additionally, there was no statistically significant difference in the learning performance, or in student retention of the knowledge one week later.},
  isbn = {978-1-4503-5301-4},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/GGEB33MK/Ericson et al - 2017 - Solving parsons problems versus fixing and writing code.pdf;/Users/igormoreno/Zotero/storage/QRMXEHJN/Ericson et al. - 2017 - Solving parsons problems versus fixing and writing.pdf}
}

@book{ericssonProtocolAnalysisVerbal1984,
  title = {Protocol Analysis:  {{Verbal}} Reports as Data},
  shorttitle = {Protocol Analysis},
  author = {Ericsson, K. Anders and Simon, Herbert A.},
  year = {1984},
  series = {Protocol Analysis:  {{Verbal}} Reports as Data},
  pages = {426},
  publisher = {{The MIT Press}},
  address = {{Cambridge, MA, US}},
  abstract = {While psychologists have often employed the technique of protocol analysis\textemdash or the use of the subject's own verbal reports as data\textemdash in exploring cognitive processes, the nature and reliability of the method have been poorly understood. This book finally puts protocol analysis on firm ground by examining its underlying assumptions, techniques, and limitations. It addresses such key questions as what sorts of reports about what sorts of mental events are reliable; what the role of the investigator's interpretations should be in helping to understand such data; and what mental events cannot be explained by protocols.  The authors describe a general theory of cognitive processes and structure in the form of an information processing model, which, they argue, accounts for verbalization and verbal reports. Major issues surrounding the use and validity of verbal reports are taken up, and empirical studies are discussed within the framework of the model. While "Protocol Analysis" focuses on reports of cognitive processes, the concepts and models it employs can be extended to such areas of verbal behavior as psychophysics, survey design, and measurement of personality traits. (PsycINFO Database Record (c) 2016 APA, all rights reserved)},
  isbn = {978-0-262-55012-3},
  keywords = {Cognitive Processes,Measurement,Oral Communication,Self-Report},
  annotation = {14068},
  file = {/Users/igormoreno/Zotero/storage/4UA5UCRQ/1985-97337-000.html}
}

@article{ericssonRoleDeliberatePractice,
  title = {The {{Role}} of {{Deliberate Practice}} in the {{Acquisition}} of {{Expert Performance}}},
  author = {Ericsson, K Anders and Krampe, Ralf Th and {Tesch-Romer}, Clemens},
  pages = {44},
  langid = {english},
  annotation = {00002},
  file = {/Users/igormoreno/Zotero/storage/L2LRWKCR/Ericsson et al. - The Role of Deliberate Practice in the Acquisition.pdf}
}

@article{erProcessFrameCognitive1995,
  title = {Process Frame: {{A}} Cognitive Device for Recursion Comprehension},
  shorttitle = {Process Frame},
  author = {Er, M.C.},
  year = {1995},
  month = jan,
  journal = {Computers \& Education},
  volume = {24},
  number = {1},
  pages = {31--36},
  issn = {03601315},
  doi = {10.1016/0360-1315(94)00058-G},
  urldate = {2018-11-06},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/YY9K5ENG/Er - 1995 - Process frame A cognitive device for recursion co.pdf}
}

@article{erwigAbstractSyntaxSemantics1998,
  title = {Abstract {{Syntax}} and {{Semantics}} of {{Visual Languages}}},
  author = {Erwig, Martin},
  year = {1998},
  month = oct,
  journal = {Journal of Visual Languages \& Computing},
  volume = {9},
  number = {5},
  pages = {461--483},
  issn = {1045926X},
  doi = {10.1006/jvlc.1998.0098},
  urldate = {2021-04-17},
  abstract = {The effective use of visual languages requires a precise understanding of their meaning. Moreover, it is impossible to prove properties of visual languages like soundness of transformation rules or correctness results without having a formal language definition. Although this sounds obvious, it is surprising that only little work has been done about the semantics of visual languages, and even worse, there is no general framework available for the semantics specification of different visual languages. We present such a framework that is based on a rather general notion of abstract visual syntax. This framework allows a logical as well as a denotational approach to visual semantics, and it facilitates the formal reasoning about visual languages and their properties. We illustrate the concepts of the proposed approach by defining abstract syntax and semantics for the visual languages VEX, Show and Tell, and Euler Circles. We demonstrate the semantics in action by proving a rule for visual reasoning with Euler Circles and by showing the correctness of a Show and Tell program.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/XTCZZ2T7/Erwig - 1998 - Abstract Syntax and Semantics of Visual Languages.pdf}
}

@misc{EssenceJavaScriptCS4502020,
  title = {The {{Essence}} of {{JavaScript}} - {{CS450}}   39   01},
  year = {2020},
  month = may,
  urldate = {2020-11-12},
  annotation = {00000}
}

@techreport{europeancommission/eacea/eurydiceInformaticsEducationSchool2022,
  title = {Informatics Education at School in {{Europe}}.},
  author = {{European Commission / EACEA / Eurydice}},
  year = {2022},
  month = sep,
  pages = {126},
  address = {{Luxembourg}},
  institution = {{Publications Office of the European Union}},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/IG3CK7F3/Informatics education at school in Europe..pdf}
}

@article{evansDevelopingStudentsStrategies2014,
  title = {Developing {{Students}}' {{Strategies}} for {{Problem Solving}}},
  author = {Evans, Sheila and Swan, Malcolm},
  year = {2014},
  pages = {31},
  abstract = {This paper describes a design strategy that is intended to foster self and peer assessment and develop students' ability to compare alternative problem solving strategies in mathematics lessons. This involves giving students, after they themselves have tackled a problem, simulated ``sample student work'' to discuss and critique. We describe the potential uses of this strategy and the issues that have arisen during trials in both US and UK classrooms. We consider how this approach has the potential to develop metacognitive acts in which students reflect on their own decisions and planning actions during mathematical problem solving.},
  langid = {english},
  annotation = {00037},
  file = {/Users/igormoreno/Zotero/storage/WCSV6BHN/Evans and Swan - 2014 - Developing Students’ Strategies for Problem Solvin.pdf}
}

@article{ezeamuzieComputationalThinkingEmpirical2022,
  title = {Computational {{Thinking Through}} an {{Empirical Lens}}: {{A Systematic Review}} of {{Literature}}},
  shorttitle = {Computational {{Thinking Through}} an {{Empirical Lens}}},
  author = {Ezeamuzie, Ndudi O. and Leung, Jessica S. C.},
  year = {2022},
  month = apr,
  journal = {Journal of Educational Computing Research},
  volume = {60},
  number = {2},
  pages = {481--511},
  issn = {0735-6331, 1541-4140},
  doi = {10.1177/07356331211033158},
  urldate = {2023-03-16},
  abstract = {This article provides an overview of the diverse ways in which computational thinking has been operationalised in the literature. Computational thinking has attracted much interest and debatably ranks in importance with the time-honoured literacy skills of reading, writing, and arithmetic. However, learning interventions in this subject have modelled computational thinking differently. We conducted a systematic review of 81 empirical studies to examine the nature, explicitness, and patterns of definitions of computational thinking. Data analysis revealed that most of the reviewed studies operationalised computational thinking as a composite of programming concepts and preferred definitions from assessment-based frameworks. On the other hand, a substantial number of the studies did not establish the meaning of computational thinking when theorising their interventions nor clearly distinguish between computational thinking and programming. Based on these findings, this article proposes a model of computational thinking that focuses on algorithmic solutions supported by programming concepts which advances the conceptual clarity between computational thinking and programming.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/PIN3ZG47/Ezeamuzie and Leung - 2022 - Computational Thinking Through an Empirical Lens .pdf}
}

@article{ezeamuzieComputationalThinkingEmpirical2022a,
  title = {Computational {{Thinking Through}} an {{Empirical Lens}}: {{A Systematic Review}} of {{Literature}}},
  shorttitle = {Computational {{Thinking Through}} an {{Empirical Lens}}},
  author = {Ezeamuzie, Ndudi O. and Leung, Jessica S. C.},
  year = {2022},
  month = apr,
  journal = {Journal of Educational Computing Research},
  volume = {60},
  number = {2},
  pages = {481--511},
  issn = {0735-6331, 1541-4140},
  doi = {10.1177/07356331211033158},
  urldate = {2023-03-16},
  abstract = {This article provides an overview of the diverse ways in which computational thinking has been operationalised in the literature. Computational thinking has attracted much interest and debatably ranks in importance with the time-honoured literacy skills of reading, writing, and arithmetic. However, learning interventions in this subject have modelled computational thinking differently. We conducted a systematic review of 81 empirical studies to examine the nature, explicitness, and patterns of definitions of computational thinking. Data analysis revealed that most of the reviewed studies operationalised computational thinking as a composite of programming concepts and preferred definitions from assessment-based frameworks. On the other hand, a substantial number of the studies did not establish the meaning of computational thinking when theorising their interventions nor clearly distinguish between computational thinking and programming. Based on these findings, this article proposes a model of computational thinking that focuses on algorithmic solutions supported by programming concepts which advances the conceptual clarity between computational thinking and programming.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/XEKVYDND/Ezeamuzie and Leung - 2022 - Computational Thinking Through an Empirical Lens .pdf}
}

@inproceedings{falknerSupportingComputationalThinking2018,
  title = {Supporting {{Computational Thinking Development}} in {{K-6}}},
  booktitle = {2018 {{International Conference}} on {{Learning}} and {{Teaching}} in {{Computing}} and {{Engineering}} ({{LaTICE}})},
  author = {Falkner, Katrina and Vivian, Rebecca and Falkner, Nickolas},
  year = {2018},
  month = apr,
  pages = {126--133},
  publisher = {{IEEE}},
  address = {{Auckland, New Zealand}},
  doi = {10.1109/LaTICE.2018.00031},
  urldate = {2020-06-22},
  abstract = {This paper describes the CSER Digital Technologies MOOC curriculum, which aims to build confidence and awareness of fundamental computational thinking skills for teachers within the K-6 context. The CSER MOOC builds upon recent advances in the development of the Australian Curriculum Digital Technologies learning area, which explicitly addresses the development of computational thinking skills, moving ICT education away from digital literacy towards embedding the skills needed for the next generation to become creators of technology. The CSER MOOC presents a broad coverage of core computational thinking concepts, with a focus on integrating with existing learning areas and appropriate pedagogy for the K-6 context. In this paper, we discuss our course curriculum, its alignment with key concepts from the formal curriculum statements, example teacher assessments, and discuss key challenges and concerns.},
  isbn = {978-1-5386-7897-8},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/NMPNWYPW/Falkner et al - 2018 - Supporting Computational Thinking Development in K-6.pdf}
}

@book{farrellJavaProgramming2019,
  title = {Java Programming},
  author = {Farrell, Joyce},
  year = {2019},
  edition = {Nineth edition},
  publisher = {{Cengage}},
  address = {{Australia United States}},
  isbn = {978-1-337-39707-0},
  langid = {english},
  lccn = {QA76.73.J38 F38 2019},
  keywords = {Computer programming,Java (Computer program language)},
  annotation = {OCLC: on1057899231},
  file = {/Users/igormoreno/Zotero/storage/QTW5JNAU/Farrell - 2019 - Java programming.pdf}
}

@techreport{FeedbackBetterTeaching2013,
  title = {Feedback for {{Better Teaching}}: {{Nine Principles}} for {{Using Measures}} of {{Effective Teaching}}},
  year = {2013},
  month = jan,
  institution = {{MET Project, Bill \& Melinda Gates Foundation}},
  abstract = {This brief highlights a set of guiding principles from the Bill \& Melinda Gates Foundation to inform the design and implementation of high-quality teacher support and evaluation systems based on three years' of work by the Measures of Effective Teaching (MET) project, its partners, and other leading school systems and organizations. More in-depth discussion of the MET project's analyses to date may be found in the project's research reports and non-technical briefs at www.metproject.org.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/KMZDUDPD/2013 - Feedback for Better Teaching.pdf}
}

@inproceedings{feldmanAutomaticDiagnosisStudents2018,
  title = {Automatic {{Diagnosis}} of {{Students}}' {{Misconceptions}} in {{K-8 Mathematics}}},
  booktitle = {Proceedings of the 2018 {{CHI Conference}} on {{Human Factors}} in {{Computing Systems}}},
  author = {Feldman, Molly Q. and Cho, Ji Yong and Ong, Monica and Gulwani, Sumit and Popovi{\'c}, Zoran and Andersen, Erik},
  year = {2018},
  series = {{{CHI}} '18},
  pages = {264:1--264:12},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3173574.3173838},
  urldate = {2019-01-27},
  abstract = {K-8 mathematics students must learn many procedures, such as addition and subtraction. Students frequently learn "buggy' variations of these procedures, which we ideally could identify automatically. This is challenging because there are many possible variations that reflect deep compositions of procedural thought. Existing approaches for K-8 math use manually specified variations which do not scale to new math algorithms or previously unseen misconceptions. Our system examines students' answers and infers how they incorrectly combine basic skills into complex procedures. We evaluate this approach on data from approximately 300 students. Our system replicates 86\% of the answers that contain clear systematic mistakes (13\%). Investigating further, we found 77\% at least partially replicate a known misconception, with 53\% matching exactly. We also present data from 29 participants showing that our system can demonstrate inferred incorrect procedures to an educator as successfully as a human expert.},
  isbn = {978-1-4503-5620-6},
  keywords = {elementary education,programming by demonstration},
  annotation = {00011},
  file = {/Users/igormoreno/Zotero/storage/Q5RUXTAH/Feldman et al - 2018 - Automatic Diagnosis of Students' Misconceptions in K-8 Mathematics.pdf}
}

@article{felleisenExpressivePowerProgramming1991,
  title = {On the Expressive Power of Programming Languages},
  author = {Felleisen, Matthias},
  year = {1991},
  month = dec,
  journal = {Science of Computer Programming},
  volume = {17},
  number = {1},
  pages = {35--75},
  issn = {0167-6423},
  doi = {10.1016/0167-6423(91)90036-W},
  urldate = {2021-12-07},
  abstract = {The literature on programming languages contains an abundance of informal claims on the relative expressive power of programming languages, but there is no framework for formalizing such statements nor for deriving interesting consequences. As a first step in this direction, we develop a formal notion of expressiveness and investigate its properties. To validate the theory, we analyze some widely held beliefs about the expressive power of several extensions of functional languages. Based on these results, we believe that our system correctly captures many of the informal ideas on expressiveness, and that it constitutes a foundation for further research in this direction.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/EMD4VTSA/Felleisen - 1991 - On the expressive power of programming languages.pdf;/Users/igormoreno/Zotero/storage/IEFTSY6B/Felleisen - 1991 - On the expressive power of programming languages.pdf;/Users/igormoreno/Zotero/storage/93ZGJCAY/016764239190036W.html}
}

@article{felleisenFunctionalSystemFun2009,
  title = {A Functional {{I}}/{{O}} System or, Fun for Freshman Kids},
  author = {Felleisen, Matthias and Findler, Robert Bruce and Flatt, Matthew and Krishnamurthi, Shriram},
  year = {2009},
  month = aug,
  journal = {ACM SIGPLAN Notices},
  volume = {44},
  number = {9},
  pages = {47--58},
  issn = {0362-1340},
  doi = {10.1145/1631687.1596561},
  urldate = {2021-12-31},
  abstract = {Functional programming languages ought to play a central role in mathematics education for middle schools (age range: 10-14). After all, functional programming is a form of algebra and programming is a creative activity about problem solving. Introducing it into mathematics courses would make pre-algebra course come alive. If input and output were invisible, students could implement fun simulations, animations, and even interactive and distributed games all while using nothing more than plain mathematics. We have implemented this vision with a simple framework for purely functional I/O. Using this framework, students design, implement, and test plain mathematical functions over numbers, booleans, string, and images. Then the framework wires them up to devices and performs all the translation from external information to internal data (and vice versa)--just like every other operating system. Once middle school students are hooked on this form of programming, our curriculum provides a smooth path for them from pre-algebra to freshman courses in college on object-oriented design and theorem proving.},
  keywords = {introductory programming},
  file = {/Users/igormoreno/Zotero/storage/X62INH9B/Felleisen et al - 2009 - A functional I-O system or, fun for freshman kids.pdf}
}

@book{felleisenHowDesignPrograms2001,
  title = {How to {{Design Programs}}: {{An Introduction}} to {{Programming}} and {{Computing}}},
  shorttitle = {How to {{Design Programs}}},
  author = {Felleisen, Matthias and Findler, Robert Bruce and Flatt, Matthew and Krishnamurthi, Shriram},
  year = {2001},
  month = feb,
  edition = {First Edition edition},
  publisher = {{The MIT Press}},
  address = {{Cambridge, Mass}},
  abstract = {This introduction to programming places computer science in the core of a liberal arts education. Unlike other introductory books, it focuses on the program design process. This approach fosters a variety of skills\rule{1em}{1pt}critical reading, analytical thinking, creative synthesis, and attention to detail\rule{1em}{1pt}that are important for everyone, not just future computer programmers. The book exposes readers to two fundamentally new ideas. First, it presents program design guidelines that show the reader how to analyze a problem statement; how to formulate concise goals; how to make up examples; how to develop an outline of the solution, based on the analysis; how to finish the program; and how to test. Each step produces a well-defined intermediate product. Second, the book comes with a novel programming environment, the first one explicitly designed for beginners. The environment grows with the readers as they master the material in the book until it supports a full-fledged language for the whole spectrum of programming tasks.All the book's support materials are available for free on the Web. The Web site includes the environment, teacher guides, exercises for all levels, solutions, and additional projects.A second edition is now available.},
  isbn = {978-0-262-06218-3},
  langid = {english}
}

@book{felleisenHowDesignPrograms2014,
  title = {How to {{Design Programs}}},
  author = {Felleisen, Matthias and Findler, Robert Bruce and Flatt, Matthew and Krishnamurthi, Shriram},
  year = {2014},
  month = aug,
  edition = {Second Edition},
  publisher = {{MIT Press}},
  urldate = {2020-11-10},
  annotation = {00370},
  file = {/Users/igormoreno/Zotero/storage/XLZQ39GU/htdp.org.html}
}

@book{felleisenHowDesignPrograms2018,
  title = {How to {{Design Programs}}, Second Edition: {{An Introduction}} to {{Programming}} and {{Computing}}},
  shorttitle = {How to {{Design Programs}}, Second Edition},
  author = {Felleisen, Matthias and Findler, Robert Bruce and Flatt, Matthew and Krishnamurthi, Shriram},
  year = {2018},
  month = may,
  publisher = {{MIT Press}},
  abstract = {A completely revised edition, offering new design recipes for interactive programs and support for images as plain values, testing, event-driven programming, and even distributed programming.This introduction to programming places computer science at the core of a liberal arts education. Unlike other introductory books, it focuses on the program design process, presenting program design guidelines that show the reader how to analyze a problem statement, how to formulate concise goals, how to make up examples, how to develop an outline of the solution, how to finish the program, and how to test it. Because learning to design programs is about the study of principles and the acquisition of transferable skills, the text does not use an off-the-shelf industrial language but presents a tailor-made teaching language. For the same reason, it offers DrRacket, a programming environment for novices that supports playful, feedback-oriented learning. The environment grows with readers as they master the material in the book until it supports a full-fledged language for the whole spectrum of programming tasks.This second edition has been completely revised. While the book continues to teach a systematic approach to program design, the second edition introduces different design recipes for interactive programs with graphical interfaces and batch programs. It also enriches its design recipes for functions with numerous new hints. Finally, the teaching languages and their IDE now come with support for images as plain values, testing, event-driven programming, and even distributed programming.},
  googlebooks = {PahcDwAAQBAJ},
  isbn = {978-0-262-34412-8},
  langid = {english},
  keywords = {Computers / Computer Science,Computers / Programming / General}
}

@book{felleisenSemanticsEngineeringPLT2009,
  title = {Semantics {{Engineering}} with {{PLT Redex}}},
  author = {Felleisen, Matthias and Findler, Robert Bruce and Flatt, Matthew},
  year = {2009},
  month = aug,
  edition = {1st edition},
  publisher = {{The MIT Press}},
  address = {{Cambridge, Mass}},
  abstract = {The first comprehensive presentation of reduction semantics in one volume, and the first tool set for such forms of semantics.This text is the first comprehensive presentation of reduction semantics in one volume; it also introduces the first reliable and easy-to-use tool set for such forms of semantics. Software engineers have long known that automatic tool support is critical for rapid prototyping and modeling, and this book is addressed to the working semantics engineer (graduate student or professional language designer). The book comes with a prototyping tool suite to develop, explore, test, debug, and publish semantic models of programming languages. With PLT Redex, semanticists can formulate models as grammars and reduction models on their computers with the ease of paper and pencil. The text first presents a framework for the formulation of language models, focusing on equational calculi and abstract machines, then introduces PLT Redex, a suite of software tools for expressing these models as PLT Redex models. Finally, experts describe a range of models formulated in Redex. PLT Redex comes with the PLT Scheme implementation, available free at http://www.plt-scheme.org/. Readers can download the software and experiment with Redex as they work their way through the book.},
  isbn = {978-0-262-06275-6},
  langid = {english},
  annotation = {00314},
  file = {/Users/igormoreno/Zotero/storage/SLFAV4K9/Felleisen et al. - 2009 - Semantics Engineering with PLT Redex.pdf}
}

@article{felleisenStructureInterpretationComputer2004,
  title = {The Structure and Interpretation of the Computer Science Curriculum},
  author = {Felleisen, Matthias and Findler, Robert Bruce and Flatt, Matthew and Krishnamurthi, Shriram},
  year = {2004},
  month = jul,
  journal = {Journal of Functional Programming},
  volume = {14},
  number = {4},
  pages = {365--378},
  issn = {0956-7968, 1469-7653},
  doi = {10.1017/S0956796804005076},
  urldate = {2022-04-05},
  abstract = {Twenty years ago Abelson and Sussman's Structure and Interpretation of Computer Programs radically changed the intellectual landscape of introductory computing courses. Instead of teaching some currently fashionable programming language, it employed Scheme and functional programming to teach important ideas. Introductory courses based on the book showed up around the world and made Scheme and functional programming popular. Unfortunately, these courses quickly disappeared again due to shortcomings of the book and the whimsies of Scheme. Worse, the experiment left people with a bad impression of Scheme and functional programming in general.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/7XE8LTZY/Felleisen et al. - 2004 - The structure and interpretation of the computer s.pdf}
}

@book{felleisenTeachSchemeProjectComputing2003,
  title = {The {{TeachScheme}}! {{Project}}: {{Computing}} and {{Programming}} for {{Every Student}}},
  shorttitle = {The {{TeachScheme}}! {{Project}}},
  author = {Felleisen, Matthias and Findler, Robert Bruce and Flatt, Matthew and Krishnamurthi, Shriram},
  year = {2003},
  abstract = {The TeachScheme! project aims to reform three aspects of introductory high  school courses on programming. The first is a systematic program design method. The  key property of the method is that it asks students to design programs in a stepwise  fashion. Each step produces a well-specified intermediate product. It thus gets students  started and helps them to overcome obstacles. Furthermore, it empowers teachers to  evaluate the reasoning process and not just the final product. The second novelty is  the use of a series of increasingly powerful programming languages instead of a single  (subset of a) language. Each element of the series introduce students to specific  linguistic mechanisms and thus represents a cognitive development stage in a concrete  manner. Consequently, the language implementations can provide knowledgeappropriate  feedback when errors occur. The third new component is a program development  environment that was specifically developed for beginners. It supports the  teaching languages in a uniform manner and provides tools that assist with each stage  in the curriculum. This paper reports on these three efforts. It includes a preliminary  evaluation report on the effects of these changes on teachers and students.},
  annotation = {00067},
  file = {/Users/igormoreno/Zotero/storage/PA66F423/Felleisen et al. - 2003 - The TeachScheme! Project Computing and Programmin.pdf;/Users/igormoreno/Zotero/storage/58AA3DAL/summary.html}
}

@article{felleisenWhyComputerScience2009,
  title = {Why Computer Science Doesn't Matter},
  author = {Felleisen, Matthias and Krishnamurthi, Shriram},
  year = {2009},
  month = jul,
  journal = {Communications of the ACM},
  volume = {52},
  number = {7},
  pages = {37--40},
  issn = {0001-0782, 1557-7317},
  doi = {10.1145/1538788.1538803},
  urldate = {2022-01-18},
  abstract = {Aligning computer science with high school mathematics can help turn it into an essential subject for all students.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/XLIGLC6G/Felleisen e Krishnamurthi - 2009 - ViewpointWhy computer science doesn't matter.pdf}
}

@misc{felleisenWorks1991,
  title = {({{Y Y}}) {{Works}}!},
  author = {Felleisen, Matthias and Friedman, Daniel P.},
  year = {1991},
  month = sep,
  file = {/Users/igormoreno/Zotero/storage/6GMXZBR2/Felleisen and Friedman - 1991 - (Y Y) Works.pdf}
}

@article{fengGamificationArtifactsCrowdsourcing2018,
  title = {Gamification Artifacts and Crowdsourcing Participation: {{Examining}} the Mediating Role of Intrinsic Motivations},
  shorttitle = {Gamification Artifacts and Crowdsourcing Participation},
  author = {Feng, Yuanyue and Jonathan Ye, Hua and Yu, Ying and Yang, Congcong and Cui, Tingru},
  year = {2018},
  month = apr,
  journal = {Computers in Human Behavior},
  volume = {81},
  pages = {124--136},
  issn = {07475632},
  doi = {10.1016/j.chb.2017.12.018},
  urldate = {2023-06-27},
  abstract = {Participation of individual workers (i.e., solvers) is critical to the viability and success of crowdsourcing platforms. Past literature indicates that gamification artifacts, by intriguing solvers' intrinsic motivations, can encourage solvers' participation in crowdsourcing. Nevertheless, little research has systemically theorized how intrinsic motivations mediate the relationship between gamification artifacts and crowdsourcing participation. Based on the motivational affordance perspective and related literature, this study theorizes gamification artifacts i.e., point rewarding and feedback giving, and identifies four intrinsic motivations (i.e., self-presentation, self-efficacy, social bonds, and playfulness) in the context of crowdsourcing. It then hypothesizes the mediating effects of the four intrinsic motivations on the relationships between the two gamification artifacts and crowdsourcing participation. It tests the model using survey data from 295 solvers in a large crowdsourcing platform. Results show that selfpresentation, self-efficacy and playfulness positively mediates the impacts of two gamification artifacts on solvers' participation. Theoretical contributions and practical implications are discussed.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/46DHITQ8/Feng et al. - 2018 - Gamification artifacts and crowdsourcing participa.pdf}
}

@book{ferraioloScalableVectorGraphics2000,
  title = {Scalable Vector Graphics ({{SVG}}) 1.0 Specification},
  author = {Ferraiolo, Jon and Jun, Fujisawa and Jackson, Dean},
  year = {2000},
  publisher = {{iuniverse Bloomington}},
  file = {/Users/igormoreno/Zotero/storage/MRC676RZ/Ferraiolo et al. - 2000 - Scalable vector graphics (SVG) 1.0 specification.pdf}
}

@article{fessakisProblemSolvingYears2013,
  title = {Problem Solving by 5\textendash 6 Years Old Kindergarten Children in a Computer Programming Environment: {{A}} Case Study},
  shorttitle = {Problem Solving by 5\textendash 6 Years Old Kindergarten Children in a Computer Programming Environment},
  author = {Fessakis, G. and Gouli, E. and Mavroudi, E.},
  year = {2013},
  month = apr,
  journal = {Computers \& Education},
  volume = {63},
  pages = {87--97},
  issn = {0360-1315},
  doi = {10.1016/j.compedu.2012.11.016},
  urldate = {2018-12-02},
  abstract = {Computer programming is considered an important competence for the development of higher-order thinking in addition to algorithmic problem solving skills. Its horizontal integration throughout all educational levels is considered worthwhile and attracts the attention of researchers. Towards this direction, an exploratory case study is presented concerning dimensions of problem solving using computer programming by 5\textendash 6 years old kindergarten children. After a short introductory experiential game the children were involved in solving a series of analogous computer programming problems, using a Logo-based environment on an Interactive White Board. The intervention was designed as a part of the structured learning activities of the kindergarten which are teacher-guided and are conducted in a whole-class social mode. The observation of the video recording of the intervention along with the analysis of teacher's interview and the researcher's notes allow for a realistic evaluation of the feasibility, the appropriateness and the learning value of integrating computer programming in such a context. The research evidence supports the view that children enjoyed the engaging learning activities and had opportunities to develop mathematical concepts, problem solving and social skills. Interesting results about children learning, difficulties, interactions, problem solving strategies and the teacher's role are reported. The study also provides proposals for the design of future research.},
  keywords = {Improving classroom teaching,Kindergarten,Programming and programming languages,Teaching/learning strategies},
  file = {/Users/igormoreno/Zotero/storage/9NAF7HI2/Fessakis et al - 2013 - Problem solving by 5–6 years old kindergarten children in a computer.pdf;/Users/igormoreno/Zotero/storage/UYLBJ7YT/S0360131512002813.html}
}

@inproceedings{fessardAreThereDifferences2019,
  ids = {fessardAreThereDifferences2019a},
  title = {Are {{There Differences}} in {{Learning Gains When Programming}} a {{Tangible Object}} or a {{Simulation}}?},
  booktitle = {Proceedings of the 2019 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Fessard, Gr{\'e}goire and Wang, Patrick and Renna, Ilaria},
  year = {2019},
  month = jul,
  pages = {78--84},
  publisher = {{ACM}},
  address = {{Aberdeen Scotland Uk}},
  doi = {10.1145/3304221.3319747},
  urldate = {2020-06-22},
  abstract = {Physical computing is about programming and interacting with a tangible object to learn fundamental concepts of Computer Science (CS). This approach presents several benefits regarding motivation, creativity, and learning gains. Yet, these learning gains hardly are compared with those resulting from the programming of a simulation of a tangible object. In this article we present the results of a comparative study that has been conducted to explore this issue. With this study, we aimed to determine whether the programming of a tangible object or its digital simulation yields significantly different learning gains. In the experiment we conducted, participants (aged 14-17 with little or no prior programming knowledge) were divided into two groups: one programmed a tangible electronic board (the BBC micro:bit) while the other programmed a simulation of it. The results of this experiment suggest that, while each group significantly improved their understandings of fundamental CS concepts (i.e., variables, conditions, and loops), no significant difference was found when comparing the learning gains between the two groups.},
  isbn = {978-1-4503-6895-7},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/2I98PZKX/Fessard et al - 2019 - Are There Differences in Learning Gains When Programming a Tangible Object or a.pdf;/Users/igormoreno/Zotero/storage/CPCQ7DIK/Fessard et al. - 2019 - Are There Differences in Learning Gains When Progr.pdf}
}

@article{feurzeigLOGOProgrammingLanguage1972,
  title = {{{LOGO}}\textemdash{{A Programming Language}} for {{Teaching Mathematics}}},
  author = {Feurzeig, Wallace and Lukas, George},
  year = {1972},
  journal = {Educational Technology},
  volume = {12},
  number = {3},
  eprint = {44417811},
  eprinttype = {jstor},
  pages = {39--46},
  publisher = {{Educational Technology Publications, Inc.}},
  issn = {0013-1962},
  urldate = {2021-06-24},
  file = {/Users/igormoreno/Zotero/storage/RJ5PLBCZ/Feurzeig and Lukas - 1972 - LOGO—A Programming Language for Teaching Mathemati.pdf}
}

@book{feynmanSurelyYouRe1985,
  title = {Surely {{You}}'re {{Joking}}, {{Mr}}. {{Feynman}}!},
  author = {Feynman, Richard},
  year = {1985},
  publisher = {{W. W. Norton}},
  isbn = {0-393-01921-7},
  file = {/Users/igormoreno/Zotero/storage/L2576XAM/Feynman - 1985 - Surely You're Joking, Mr. Feynman!.PDF}
}

@article{fiebrinkMachineLearningEducation2019,
  title = {Machine {{Learning Education}} for {{Artists}}, {{Musicians}}, and {{Other Creative Practitioners}}},
  author = {Fiebrink, Rebecca},
  year = {2019},
  month = nov,
  journal = {ACM Transactions on Computing Education},
  volume = {19},
  number = {4},
  pages = {1--32},
  issn = {1946-6226, 1946-6226},
  doi = {10.1145/3294008},
  urldate = {2020-06-22},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/Z57976U6/Fiebrink - 2019 - Machine Learning Education for Artists, Musicians, and Other Creative.pdf}
}

@article{fiedlerQuestionableResearchPractices2016,
  title = {Questionable {{Research Practices Revisited}}},
  author = {Fiedler, Klaus and Schwarz, Norbert},
  year = {2016},
  month = jan,
  journal = {Social Psychological and Personality Science},
  volume = {7},
  number = {1},
  pages = {45--52},
  issn = {1948-5506, 1948-5514},
  doi = {10.1177/1948550615612150},
  urldate = {2021-06-08},
  abstract = {The current discussion of questionable research practices (QRPs) is meant to improve the quality of science. It is, however, important to conduct QRP studies with the same scrutiny as all research. We note problems with overestimates of QRP prevalence and the survey methods used in the frequently cited study by John, Loewenstein, and Prelec. In a survey of German psychologists, we decomposed QRP prevalence into its two multiplicative components, proportion of scientists who ever committed a behavior and, if so, how frequently they repeated this behavior across all their research. The resulting prevalence estimates are lower by order of magnitudes. We conclude that inflated prevalence estimates, due to problematic interpretation of survey data, can create a descriptive norm (QRP is normal) that can counteract the injunctive norm to minimize QRPs and unwantedly damage the image of behavioral sciences, which are essential to dealing with many societal problems.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/JGRF3ZAB/Fiedler e Schwarz - 2016 - Questionable Research Practices Revisited.pdf}
}

@book{fieldHowDesignReport2003,
  title = {How to {{Design}} and {{Report Experiments}}},
  author = {Field, Andy and Hole, Dr Graham J.},
  year = {2003},
  month = feb,
  edition = {1 edition},
  publisher = {{Sage Publications Ltd}},
  address = {{London ; Thousand Oaks, Calif}},
  abstract = {How to Design and Report Experiments is the perfect textbook and guide to the often bewildering world of experimental design and statistics. It provides a complete map of the entire process beginning with how to get ideas about research, how to refine your research question and the actual design of the experiment, leading on to statistical procedure and assistance with writing up of results.  While many books look at the fundamentals of doing successful experiments and include good coverage of statistical techniques, this book very importantly considers the process in chronological order with specific attention given to effective design in the context of likely methods needed and expected results. Without full assessment of these aspects, the experience and results may not end up being as positive as one might have hoped. Ample coverage is then also provided of statistical data analysis, a hazardous journey in itself, and the reporting of findings, with numerous examples and helpful tips of common downfalls throughout. Combining light humour, empathy with solid practical guidance to ensure a positive experience overall, Designing and Reporting Experiments will be essential reading for students in psychology and those in cognate disciplines with an experimental focus or content in research methods courses.},
  isbn = {978-0-7619-7383-6},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/24CKTPS8/Field_Hole_2003_Chapter 1 (Before You Begin).pdf;/Users/igormoreno/Zotero/storage/3GIVYREH/Field_Hole_2003_Chapter 2 (Planning an Experiment).pdf;/Users/igormoreno/Zotero/storage/4PD89JQW/Field_Hole_2003_Chapter 3 (Experimental Designs).pdf;/Users/igormoreno/Zotero/storage/6NHYQKSY/Field_Hole_2003_Chapter 9 (A Quick Guide to Writing a Psychology Lab-Report).pdf;/Users/igormoreno/Zotero/storage/FZNDIJER/Field_Hole_2003_Chapter 5 (Inferential Statistics).pdf;/Users/igormoreno/Zotero/storage/HAHSBQWX/Field_Hole_2003_Chapter 4 (Descriptive Statistics).pdf;/Users/igormoreno/Zotero/storage/HIWBGGIS/Field_Hole_2003_Chapter 16 (Example of an Experimental Write-Up).pdf;/Users/igormoreno/Zotero/storage/RHBE9DY6/Field_Hole_2003_TOC.pdf;/Users/igormoreno/Zotero/storage/WBCK5S9E/Field_Hole_2003_Chapter 6 (Parametric Statistics).pdf}
}

@inproceedings{fieldsProgrammingWildTrends2014,
  title = {Programming in the Wild: Trends in Youth Computational Participation in the Online Scratch Community},
  shorttitle = {Programming in the Wild},
  booktitle = {Proceedings of the 9th {{Workshop}} in {{Primary}} and {{Secondary Computing Education}}},
  author = {Fields, Deborah A. and Giang, Michael and Kafai, Yasmin},
  year = {2014},
  month = nov,
  series = {{{WiPSCE}} '14},
  pages = {2--11},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2670757.2670768},
  urldate = {2020-10-13},
  abstract = {Most research in primary and secondary computing education has focused on understanding learners within formal classroom communities, leaving aside the growing number of promising informal online programming communities where young learners contribute, comment, and collaborate on programs. In this paper, we examined trends in computational participation in Scratch, an online community with over 1 million registered youth designers primarily 11-18 years of age. Drawing on a random sample of 5,000 youth programmers and their activities over three months in early 2012, we examined the quantity of programming concepts used in projects in relation to level of participation, gender, and account age of Scratch programmers. Latent class analyses revealed four unique groups of programmers. While there was no significant link between level of online participation, ranging from low to high, and level of programming sophistication, the exception was a small group of highly engaged users who were most likely to use more complex programming concepts. Groups who only used few of the more sophisticated programming concepts, such as Booleans, variables and operators, were identified as Scratch users new to the site and girls. In the discussion we address the challenges of analyzing young learners' programming in informal online communities and opportunities for designing more equitable computational participation.},
  isbn = {978-1-4503-3250-7},
  keywords = {collaborative learning,computer science education,social networking sites},
  annotation = {00051},
  file = {/Users/igormoreno/Zotero/storage/IARN3KMJ/Fields et al - 2014 - Programming in the wild.pdf}
}

@book{fincherCambridgeHandbookComputing2019,
  title = {The {{Cambridge Handbook}} of {{Computing Education Research}}},
  editor = {Fincher, Sally A. and Robins, Anthony V.},
  year = {2019},
  series = {Cambridge {{Handbooks}} in {{Psychology}}},
  publisher = {{Cambridge University Press}},
  address = {{Cambridge}},
  doi = {10.1017/9781108654555},
  urldate = {2020-10-14},
  abstract = {This Handbook describes the extent and shape of computing education research today. Over fifty leading researchers from academia and industry (including Google and Microsoft) have contributed chapters that together define and expand the evidence base. The foundational chapters set the field in context, articulate expertise from key disciplines, and form a practical guide for new researchers. They address what can be learned empirically, methodologically and theoretically from each area. The topic chapters explore issues that are of current interest, why they matter, and what is already known. They include discussion of motivational context, implications for practice, and open questions which might suggest future research. The authors provide an authoritative introduction to the field which is essential reading for policy makers, as well as both new and established researchers.},
  isbn = {978-1-108-49673-5},
  annotation = {00018},
  file = {/Users/igormoreno/Zotero/storage/LFFZU7WQ/Fincher and Robins - 2019 - The Cambridge Handbook of Computing Education Rese.pdf;/Users/igormoreno/Zotero/storage/PRQIK43D/F8CFAF7B81A8F6BF5C663412BA0A943D.html}
}

@article{fincherCommonsLeaderVade2011,
  title = {A {{Commons Leader}}'s {{Vade Mecum}}},
  author = {Fincher, Sally and Tenenberg, Josh},
  year = {2011},
  pages = {54},
  langid = {english},
  annotation = {00008},
  file = {/Users/igormoreno/Zotero/storage/2BMHHTV5/Fincher and Tenenberg - 2011 - A Commons Leader’s Vade Mecum.pdf}
}

@book{fincherComputerScienceEducation2005,
  title = {Computer {{Science Education Research}}},
  editor = {Fincher, Sally and Petre, Marian and Petre, Marian},
  year = {2005},
  month = sep,
  journal = {Computer Science Education Research},
  pages = {95--110},
  publisher = {{Taylor \& Francis}},
  doi = {10.1201/9781482287325-18},
  urldate = {2021-01-08},
  isbn = {978-0-429-07888-0},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/JXRDFNW3/Fincher and Petre - 2005 - Computer Science Education Research.pdf}
}

@inproceedings{fincherMultiinstitutionalMultinationalStudies2005,
  title = {Multi-Institutional, Multi-National Studies in {{CSEd Research}}: Some Design Considerations and Trade-Offs},
  shorttitle = {Multi-Institutional, Multi-National Studies in {{CSEd Research}}},
  booktitle = {Proceedings of the First International Workshop on {{Computing}} Education Research},
  author = {Fincher, Sally and Lister, Raymond and Clear, Tony and Robins, Anthony and Tenenberg, Josh and Petre, Marian},
  year = {2005},
  month = oct,
  series = {{{ICER}} '05},
  pages = {111--121},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1089786.1089797},
  urldate = {2020-10-13},
  abstract = {One indication of the maturation of Computer Science Education as a research-based discipline is the recent emergence of several large-scale studies spanning multiple institutions. This paper examines a "family" of these multi-institutional, multi-national studies, detailing core elements and points of difference in both study design and the organization of the research team, and highlighting the costs and benefits associated with the different approaches.},
  isbn = {978-1-59593-043-9},
  keywords = {education,empirical,multi-institutional,research},
  file = {/Users/igormoreno/Zotero/storage/YC5ZP5UA/Fincher et al - 2005 - Multi-institutional, multi-national studies in CSEd Research.pdf}
}

@inproceedings{fincherNotionalMachinesComputing2020,
  title = {Notional {{Machines}} in {{Computing Education}}: {{The Education}} of {{Attention}}},
  shorttitle = {Notional {{Machines}} in {{Computing Education}}},
  booktitle = {Proceedings of the {{Working Group Reports}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Fincher, Sally and Jeuring, Johan and Miller, Craig S. and Donaldson, Peter and {du Boulay}, Benedict and Hauswirth, Matthias and Hellas, Arto and Hermans, Felienne and Lewis, Colleen and M{\"u}hling, Andreas and Pearce, Janice L. and Petersen, Andrew},
  year = {2020},
  month = jun,
  series = {{{ITiCSE-WGR}} '20},
  pages = {21--50},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3437800.3439202},
  urldate = {2020-12-30},
  abstract = {This report defines notional machines (NMs), and provides a series of definitional characteristics by which they may be identified. Over several sections, it includes a first-hand report of the origin of NMs, reports a systematic literature review to track the use and development of the concept, and presents a small collection of examples collected through interviews with experienced teachers. Additionally, the report presents NMs in a common format, and makes some preliminary explorations of their use in practice, including examples of instructors using multiple NMs in sequence. Approach and method are fully detailed in evidential appendices, to support replication of results and adoption/adaptation of practice.},
  isbn = {978-1-4503-8293-9},
  keywords = {computing education,notional machines},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/IVSVSA8V/Fincher et al - 2020 - Notional Machines in Computing Education.pdf}
}

@article{findlerDrSchemeProgrammingEnvironment2002,
  ids = {findlerDrSchemeProgrammingEnvironment2002a},
  title = {{{DrScheme}}: {{A Programming Environment}} for {{Scheme}}},
  shorttitle = {{{DrScheme}}},
  author = {Findler, Robert Bruce and Clements, John and Flanagan, Cormac and Flatt, Matthew and Krishnamurthi, Shriram and Steckler, Paul and Felleisen, Matthias},
  year = {2002},
  month = mar,
  journal = {J. Funct. Program.},
  volume = {12},
  number = {2},
  pages = {159--182},
  publisher = {{Cambridge University Press}},
  issn = {0956-7968},
  doi = {10.1017/S0956796801004208},
  urldate = {2019-07-08},
  abstract = {DrScheme is a programming environment for Scheme. It fully integrates a graphics-enriched editor, a parser for multiple variants of Scheme, a functional read-eval-print loop, and an algebraic printer. The environment is especially useful for students, because it has a tower of syntactically restricted variants of Scheme that are designed to catch typical student mistakes and explain them in terms the students understand. The environment is also useful for professional programmers, due to its sophisticated programming tools, such as the static debugger, and its advanced language features, such as units and mixins. Beyond the ordinary programming environment tools, DrScheme provides an algebraic stepper, a context-sensitive syntax checker, and a static debugger. The stepper reduces Scheme programs to values, according to the reduction semantics of Scheme. It is useful for explaining the semantics of linguistic facilities and for studying the behavior of small programs. The syntax checker annotates programs with font and color changes based on the syntactic structure of the program. On demand, it draws arrows that point from bound to binding occurrences of identifiers. It also supports {$\alpha$}-renaming. Finally, the static debugger provides a type inference system that explains specific inferences in terms of a value-flow graph, selectively overlaid on the program text.},
  annotation = {00286},
  file = {/Users/igormoreno/Zotero/storage/IQIC8WZU/Findler et al. - 2002 - DrScheme a programming environment for Scheme.pdf;/Users/igormoreno/Zotero/storage/RDCTL27Y/Findler et al. - 2002 - DrScheme A Programming Environment for Scheme.pdf;/Users/igormoreno/Zotero/storage/YJFHYJGC/A3F8F65C27FF86D9CEB63B61DBB3EEC6.html}
}

@inproceedings{findlerSlideshowFunctionalPresentations2004,
  title = {Slideshow: {{Functional Presentations}}},
  booktitle = {{{ICFP}}},
  author = {Findler, Robert Bruce and Flatt, Matthew},
  year = {2004},
  address = {{Snowbird, UT}},
  abstract = {Among slide-presentation systems, the dominant application offers essentially no abstraction capability. Slideshow, an extension of PLT Scheme, represents our effort over the last several years to build an abstraction-friendly slide system. We show how functional programming is well suited to the task of slide creation, we report on the programming abstractions that we have developed for slides, and we describe our solutions to practical problems in rendering slides. We also describe a prototype extension to DrScheme that supports a mixture of programmatic and WYSIWYG slide creation.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/VRJL79UU/Findler and Flatt - Slideshow Functional Presentations.pdf}
}

@book{finkCreatingSignificantLearning2013,
  title = {Creating {{Significant Learning Experiences}}: {{An Integrated Approach}} to {{Designing College Courses}}, {{Revised}} and {{Updated}}},
  shorttitle = {Creating {{Significant Learning Experiences}}},
  author = {Fink, L. Dee},
  year = {2013},
  month = aug,
  publisher = {{Jossey-Bass}},
  urldate = {2019-09-27},
  abstract = {Dee Fink challenges our conventional assumptions and practices and offers an insightful approach to expanding our learning goals, making higher education more meaningful. This is a gem of a book that every college teacher should read. \textemdash Ken Bain, author, What the Best College Students Do Since the original publication of L. Dee Finks Creating Significant Learning Experiences, higher education has continued to move in two opposite directions: more institutions encourage faculty to focus on research, obtaining grants, and publishing, while accreditation agencies, policy-makers, and students themselves emphasize the need for greater attention to the quality of teaching and learning. Now the author has updated his bestselling classic, providing busy faculty with invaluable conceptual and procedural tools for instructional design. Step by step, Fink shows how to use a taxonomy of significant learning and systematically combine the best research-based practices for learning-centered teaching with a teaching strategy in a way that results in powerful learning experiences. This edition addresses new research on how people learn, active learning, and student engagement; includes illustrative examples from online teaching; and reports on the effectiveness of Finks time-tested model. Fink also explores recent changes in higher education nationally and internationally and offers more proven strategies for dealing with student resistance to innovative teaching. Tapping into the knowledge, tools, and strategies in Creating Significant Learning Experiences empowers educators to creatively design courses that will result in significant learning for their students. As thought-provoking and inspiring today as it was when it was first published, it is a must for anyone serious about creating courses that challenge students to learn deeply. \textemdash Elizabeth F. Barkley, author, Student Engagement Techniques},
  isbn = {978-1-118-12425-3},
  langid = {american},
  file = {/Users/igormoreno/Zotero/storage/B3C9Z5BZ/Fink - 2013 - Creating Significant Learning Experiences An Inte.pdf;/Users/igormoreno/Zotero/storage/8RYDUH72/Creating+Significant+Learning+Experiences+An+Integrated+Approach+to+Designing+College+Courses,+.html}
}

@inproceedings{finnePicturesSimpleStructured1995,
  title = {Pictures: {{A}} Simple Structured Graphics Model},
  shorttitle = {Pictures},
  booktitle = {Proceedings of the 1995 {{Glasgow Workshop}} on {{Functional Programming}}},
  author = {Finne, Sigbjorn and Jones, Simon Peyton},
  year = {1995},
  month = jul,
  doi = {10.14236/ewic/FP1995.6},
  urldate = {2022-01-12},
  abstract = {We present in this paper a simple, device-independent model for describing two-dimensional graphics using a functional language. Graphical scenes, or pictures, are represented as values that functions can manipulate and inspect to create new values. Complete pictures are constructed by repeatedly composing such picture values together using picture combinators. A novel aspect of the model presented is its use of structured translation to abstractly express the geometric composition of arbitrary pictures.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/WDHLMXZM/Finne e Jones - 1995 - Pictures A simple structured graphics model.pdf}
}

@inproceedings{finnie-ansleyMyAIWants2023,
  title = {My {{AI Wants}} to {{Know}} If {{This Will Be}} on the {{Exam}}: {{Testing OpenAI}}'s {{Codex}} on {{CS2 Programming Exercises}}},
  shorttitle = {My {{AI Wants}} to {{Know}} If {{This Will Be}} on the {{Exam}}},
  booktitle = {Australasian {{Computing Education Conference}}},
  author = {{Finnie-Ansley}, James and Denny, Paul and {Luxton-Reilly}, Andrew and Santos, Eddie Antonio and Prather, James and Becker, Brett A.},
  year = {2023},
  month = jan,
  pages = {97--104},
  publisher = {{ACM}},
  address = {{Melbourne VIC Australia}},
  doi = {10.1145/3576123.3576134},
  urldate = {2023-01-30},
  abstract = {The introduction of OpenAI Codex sparked a surge of interest in the impact of generative AI models on computing education practices. Codex is also the underlying model for GitHub Copilot, a plugin which makes AI-generated code accessible to students through auto-completion in popular code editors. Research in this area, particularly on the educational implications, is nascent and has focused almost exclusively on introductory programming (or CS1) questions. Very recent work has shown that Codex performs considerably better on typical CS1 exam questions than most students. It is not clear, however, what Codex's limits are with regard to more complex programming assignments and exams. In this paper, we present results detailing how Codex performs on more advanced CS2 (data structures and algorithms) exam questions taken from past exams. We compare these results to those of students who took the same exams under normal conditions, demonstrating that Codex outscores most students. We consider the implications of such tools for the future of undergraduate computing education.},
  isbn = {978-1-4503-9941-8},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/MXXB3P99/Finnie-Ansley et al. - 2023 - My AI Wants to Know if This Will Be on the Exam T.pdf}
}

@inproceedings{finnie-ansleyRobotsAreComing2022,
  title = {The {{Robots Are Coming}}: {{Exploring}} the {{Implications}} of {{OpenAI Codex}} on {{Introductory Programming}}},
  shorttitle = {The {{Robots Are Coming}}},
  booktitle = {Australasian {{Computing Education Conference}}},
  author = {{Finnie-Ansley}, James and Denny, Paul and Becker, Brett A. and {Luxton-Reilly}, Andrew and Prather, James},
  year = {2022},
  month = feb,
  series = {{{ACE}} '22},
  pages = {10--19},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3511861.3511863},
  urldate = {2022-10-17},
  abstract = {Recent advances in artificial intelligence have been driven by an exponential growth in digitised data. Natural language processing, in particular, has been transformed by machine learning models such as OpenAI's GPT-3 which generates human-like text so realistic that its developers have warned of the dangers of its misuse. In recent months OpenAI released Codex, a new deep learning model trained on Python code from more than 50 million GitHub repositories. Provided with a natural language description of a programming problem as input, Codex generates solution code as output. It can also explain (in English) input code, translate code between programming languages, and more. In this work, we explore how Codex performs on typical introductory programming problems. We report its performance on real questions taken from introductory programming exams and compare it to results from students who took these same exams under normal conditions, demonstrating that Codex outscores most students. We then explore how Codex handles subtle variations in problem wording using several published variants of the well-known ``Rainfall Problem'' along with one unpublished variant we have used in our teaching. We find the model passes many test cases for all variants. We also explore how much variation there is in the Codex generated solutions, observing that an identical input prompt frequently leads to very different solutions in terms of algorithmic approach and code length. Finally, we discuss the implications that such technology will have for computing education as it continues to evolve, including both challenges and opportunities.},
  isbn = {978-1-4503-9643-1},
  keywords = {academic integrity,AI,artificial intelligence,code generation,code writing,Codex,copilot,CS1,deep learning,GitHub,GPT-3,introductory programming,machine learning,neural networks,novice programming,OpenAI},
  file = {/Users/igormoreno/Zotero/storage/3FJDITZM/Finnie-Ansley et al. - 2022 - The Robots Are Coming Exploring the Implications .pdf}
}

@article{fiorellaDrawingBoundaryConditions2018,
  title = {Drawing {{Boundary Conditions}} for {{Learning}} by {{Drawing}}},
  author = {Fiorella, Logan and Zhang, Qian},
  year = {2018},
  month = sep,
  journal = {Educational Psychology Review},
  volume = {30},
  number = {3},
  pages = {1115--1137},
  issn = {1573-336X},
  doi = {10.1007/s10648-018-9444-8},
  urldate = {2018-11-09},
  abstract = {Learning by drawing can be an effective strategy for supporting science text comprehension. However, drawing can also be cognitively demanding and time consuming, and students may not create quality drawings without sufficient guidance. Furthermore, evidence for drawing is often based on comparisons to weak control conditions, such as students who only read the text without provided illustrations. In this review, we synthesize past research to help draw boundary conditions for learning by drawing, focusing on the role of comparison conditions and drawing guidance. First, we analyze how drawing compares to each of four control conditions: reading only, text-focused strategies (e.g., summarizing), other model-focused strategies (e.g., imagining), or viewing instructor-provided illustrations. Next, we distinguish among four levels of drawing guidance: minimal guidance, drawing training, partially provided illustrations, and comparison to instructor-provided illustrations. Our findings indicate that when compared to only reading the text or using text-focused strategies, creating drawings is consistently more effective at fostering comprehension and transfer, regardless of the level of drawing guidance provided. However, when compared to other model-focused strategies or to viewing instructor-provided illustrations, effects of creating drawings are mixed and may depend on the level of drawing guidance provided, among other factors. We discuss the theoretical and practical considerations of our findings and suggest several directions for broadening research on drawing.},
  langid = {english},
  keywords = {Generative learning,Learning by drawing,Learning strategies,Science,Strong,To Read},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/AJLC652Y/Fiorella and Zhang - 2018 - Drawing Boundary Conditions for Learning by Drawing.pdf}
}

@inproceedings{fischerComputerProgramingFormal1986,
  title = {Computer {{Programing}}: {{A Formal Operational Task}}},
  booktitle = {Annual {{Symposium}} of the {{Piaget Society}}},
  author = {Fischer, Gwen Bredendieck},
  year = {1986},
  pages = {17},
  address = {{Philadelphia, PA, USA}},
  langid = {english},
  keywords = {Academic Achievement,Cognitive Development,Cognitive Style,Cognitive Tests,Evaluation Criteria,Higher Education,Piaget,Piagetian Test,Pretests Postests,Programing,Research Methodology,Undergraduate Students},
  file = {/Users/igormoreno/Zotero/storage/LS6X6LER/Fischer - 1986 - Computer Programing.pdf}
}

@article{fisherTimeManagementFamily,
  title = {Time Management, Family, and Quality of Life},
  author = {Fisher, Kathleen},
  pages = {13},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/AC3LLE3N/Fisher - Time management, family, and quality of life.pdf}
}

@inproceedings{fislerAssessingTeachingScope2017,
  title = {Assessing and {{Teaching Scope}}, {{Mutation}}, and {{Aliasing}} in {{Upper-Level Undergraduates}}},
  booktitle = {Proceedings of the 2017 {{ACM SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  author = {Fisler, Kathi and Krishnamurthi, Shriram and Tunnell Wilson, Preston},
  year = {2017},
  month = mar,
  pages = {213--218},
  publisher = {{ACM}},
  address = {{Seattle Washington USA}},
  doi = {10.1145/3017680.3017777},
  urldate = {2020-06-22},
  abstract = {Scope, aliasing, mutation, and parameter passing are fundamental programming concepts that interact in subtle ways, especially in complex programs. Research has shown that students have substantial misconceptions on these topics. But this research has been done largely in CS1 courses, when students' programming experience is limited and problems are necessarily simple. What happens later in the curriculum? Does more programming experience iron out these misconceptions naturally, or are interventions required? This paper explores students' understanding of these topics in the context of a programming languages class for thirdand fourth-year CS majors. Our pre- and post-tests pose questions in two programming languages to gauge whether upper-level students transfer knowledge between languages. Many students held misconceptions about these concepts at the start of the course. Students made progress in only some languages and topics, and cross-language transfer does not occur naturally. We also discuss various pedagogic activities we used to engage students with these concepts, and provide data and student opinion on their effectiveness.},
  isbn = {978-1-4503-4698-6},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/VKPFQ8DF/Fisler et al - 2017 - Assessing and Teaching Scope, Mutation, and Aliasing in Upper-Level.pdf}
}

@inproceedings{fislerModernizingPlanCompositionStudies2016,
  title = {Modernizing {{Plan-Composition Studies}}},
  booktitle = {Proceedings of the 47th {{ACM Technical Symposium}} on {{Computing Science Education}}},
  author = {Fisler, Kathi and Krishnamurthi, Shriram and Siegmund, Janet},
  year = {2016},
  series = {{{SIGCSE}} '16},
  pages = {211--216},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2839509.2844556},
  urldate = {2018-11-30},
  abstract = {Plan composition is an important but under-studied topic in programming education. Most studies were done three decades ago, under assumptions that miss important issues that today's students must confront. This paper presents rationale and details for a modernized study of plan composition that accommodates a broader range of programming languages and problem features. Our study design has two novelties: the problems require students to deal with data-processing challenges (such as noisy data), and the questions ask students to not only produce but also evaluate programs. We present preliminary results from using our study in multiple courses from different linguistic paradigms. We discuss several future studies that are prompted by these results.},
  isbn = {978-1-4503-3685-7},
  keywords = {functional programming,imperative programming,plan composition,To Read},
  file = {/Users/igormoreno/Zotero/storage/6TK2XM99/Fisler et al - 2016 - Modernizing Plan-Composition Studies.pdf}
}

@inproceedings{fislerRecurringRainfallProblem2014,
  ids = {fislerRecurringRainfallProblem2014a},
  title = {The {{Recurring Rainfall Problem}}},
  booktitle = {Proceedings of the {{Tenth Annual Conference}} on {{International Computing Education Research}}},
  author = {Fisler, Kathi},
  year = {2014},
  series = {{{ICER}} '14},
  pages = {35--42},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2632320.2632346},
  urldate = {2018-12-11},
  abstract = {Many studies have used Soloway's Rainfall problem to explore plan composition and programming errors by novice programmers. Few of these have explored students from CS1 courses that use functional programming. The concepts and programming styles commonly taught in such courses give CS1 students more viable plan-composition options than in traditional imperative CS1 courses. Using data from five functional-language CS1 courses at four schools, we show that our students choose different high-level structures and make fewer low-level errors compared to results of other Rainfall studies. We discuss the potential role of language in these results and raise various questions that could further explore these effects.},
  isbn = {978-1-4503-2755-8},
  keywords = {functional programming,novice programmers,plan composition},
  file = {/Users/igormoreno/Zotero/storage/PG5Q74LX/Fisler - 2014 - The Recurring Rainfall Problem.pdf}
}

@article{fitzgeraldDebuggingFindingFixing2008,
  title = {Debugging: Finding, Fixing and Flailing, a Multi-Institutional Study of Novice Debuggers},
  shorttitle = {Debugging},
  author = {Fitzgerald, Sue and Lewandowski, Gary and McCauley, Ren{\'e}e and Murphy, Laurie and Simon, Beth and Thomas, Lynda and Zander, Carol},
  year = {2008},
  month = jun,
  journal = {Computer Science Education},
  volume = {18},
  number = {2},
  pages = {93--116},
  publisher = {{Routledge}},
  issn = {0899-3408},
  doi = {10.1080/08993400802114508},
  urldate = {2020-11-23},
  abstract = {Debugging is often difficult and frustrating for novices. Yet because students typically debug outside the classroom and often in isolation, instructors rarely have the opportunity to closely observe students while they debug. This paper describes the details of an exploratory study of the debugging skills and behaviors of contemporary novice Java programmers. Based on a modified replication of Katz and Anderson's study of novices, we sought to broadly survey the modern landscape of novice debugging abilities. As such, this study reports general quantitative results and fills in the picture with qualitative detail from a relatively small, but varied sample. Comprehensive interviews involving both a programming and a debugging task, followed by a semi-structured interview and a questionnaire, were conducted with 21 CS2 students at seven colleges and universities. While many subjects successfully debugged a representative set of typical CS1 bugs, there was a great deal of variation in their success at the programming and debugging tasks. Most of the students who were good debuggers were good novice programmers, although not all of the good programmers were successful at debugging. Students employed a variety of strategies to find 70\% of all bugs and of the bugs they found they were able to fix 97\% of them. They had the most difficulty with malformed statements, such as arithmetic errors and incorrect loop conditions. Our results confirm many findings from previous studies (some quite old) \textendash{} most notably that once students find bugs, they can fix them. However, the results also suggest that some changes have occurred in the student population, particularly an increased use of debugging tools and online resources, as well as the use of pattern matching, which has not previously been reported.},
  keywords = {bugs,CS1,debugging,debugging strategies,novice programmers,pedagogy,programming errors},
  annotation = {00116},
  file = {/Users/igormoreno/Zotero/storage/F8L4INJH/Fitzgerald et al. - 2008 - Debugging finding, fixing and flailing, a multi-i.pdf}
}

@article{fitzgeraldDebuggingStudentPerspective2010,
  title = {Debugging {{From}} the {{Student Perspective}}},
  author = {Fitzgerald, S. and McCauley, R. and Hanks, B. and Murphy, L. and Simon, B. and Zander, C.},
  year = {2010},
  month = aug,
  journal = {IEEE Transactions on Education},
  volume = {53},
  number = {3},
  pages = {390--396},
  issn = {1557-9638},
  doi = {10.1109/TE.2009.2025266},
  abstract = {Learning to debug is a difficult, yet essential, aspect of learning to program. Students in this multi-institutional study report that finding bugs is harder than fixing them. They use a wide variety of debugging strategies, some of them unexpected. Time spent on understanding the problem can be effective. Pattern matching, particularly at the syntactic level, is an important technique for beginners. The Web has emerged as an obvious first place to look for similar examples. Lack of Web materials at an appropriate beginner level leads to flailing. Hypothesizing about the cause of bugs is an underdeveloped skill.},
  keywords = {Bugs,Computer bugs,computer science education,computing education,Data mining,debugging,Debugging,debugging strategies,debugging strategy,education-based research,Internet,Interviews,novice programmers,pattern matching,pedagogy,program debugging,Programming profession,student perspective,Testing,Web materials},
  annotation = {00055},
  file = {/Users/igormoreno/Zotero/storage/5IZ2KB2K/Fitzgerald et al. - 2010 - Debugging From the Student Perspective.pdf;/Users/igormoreno/Zotero/storage/L4SU2F2J/5238628.html}
}

@article{fitzgeraldStrategiesThatStudents,
  title = {Strategies That {{Students Use}} to {{Trace Code}}: {{An Analysis Based}} in {{Grounded Theory}}},
  author = {Fitzgerald, Sue and Simon, Beth and Thomas, Lynda},
  pages = {12},
  abstract = {How do beginning students approach problems which require them to read and understand code? We report on a Grounded Theory-based analysis of student transcripts from 12 institutions where students were asked to "think aloud" when solving such problems. We identify 19 strategies used by students. Primary results are that all students employ a range of strategies, there were (in total) many different strategies that were applied, students use multiple strategies on each individual problem, students applied different strategies to different types of questions, and students often applied strategies poorly. We show that strategies conform with existing education theories including Bloom's Taxonomy and the Approaches to Study Inventory. Additionally, we discuss emergent theories developed through a card sort process.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/EP7EZPAX/Fitzgerald et al - Strategies that Students Use to Trace Code.pdf}
}

@inproceedings{flattClassesMixins1998,
  title = {Classes and Mixins},
  booktitle = {Proceedings of the 25th {{ACM SIGPLAN-SIGACT}} Symposium on {{Principles}} of Programming Languages},
  author = {Flatt, Matthew and Krishnamurthi, Shriram and Felleisen, Matthias},
  year = {1998},
  month = jan,
  series = {{{POPL}} '98},
  pages = {171--183},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/268946.268961},
  urldate = {2020-11-12},
  abstract = {While class-based object-oriented programming languages provide a flexible mechanism for re-using and managing related pieces of code, they typically lack linguistic facilities for specifying a uniform extension of many classes with one set of fields and methods. As a result, programmers are unable to express certain abstractions over classes.In this paper we develop a model of class-to-class functions that we refer to as mixins. A mixin function maps a class to an extended class by adding or overriding fields and methods. Programming with mixins is similar to programming with single inheritance classes, but mixins more directly encourage programming to interfaces.The paper develops these ideas within the context of Java. The results are 1. an intuitive model of an essential Java subset; 2. an extension that explains and models mixins; and 3. type soundness theorems for these languages.},
  isbn = {978-0-89791-979-1},
  annotation = {00561},
  file = {/Users/igormoreno/Zotero/storage/9GRN5D6C/Flatt et al. - 1998 - Classes and mixins.pdf}
}

@incollection{flattProgrammerReductionSemantics1999,
  title = {A {{Programmer}}'s {{Reduction Semantics}} for {{Classes}} and {{Mixins}}},
  booktitle = {Formal {{Syntax}} and {{Semantics}} of {{Java}}},
  author = {Flatt, Matthew and Krishnamurthi, Shriram and Felleisen, Matthias},
  editor = {Goos, Gerhard and Hartmanis, Juris and {van Leeuwen}, Jan and {Alves-Foss}, Jim},
  year = {1999},
  volume = {1523},
  pages = {241--269},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/3-540-48737-9_7},
  urldate = {2020-11-12},
  abstract = {While class-based object-oriented programming languages provide a flexible mechanism for re-using and managing related pieces of code, they typically lack linguistic facilities for specifying a uniform extension of many classes with one set of fields and methods. As a result, programmers are unable to express certain abstractions over classes. In this paper we develop a model of class-to-class functions that we refer to as mixins. A mixin function maps a class to an extended class by adding or overriding fields and methods. Programming with mixins is similar to programming with single inheritance classes, but mixins more directly encourage programming to interfaces. The paper develops these ideas within the context of Java. The results are 1. an intuitive model of an essential Java subset; 2. an extension that explains and models mixins; and 3. type soundness theorems for these languages.},
  isbn = {978-3-540-66158-0 978-3-540-48737-1},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/6LCTIGAG/Flatt et al. - 1999 - A Programmer’s Reduction Semantics for Classes and.pdf}
}

@incollection{flattProgrammerReductionSemantics1999a,
  title = {A {{Programmer}}'s {{Reduction Semantics}} for {{Classes}} and {{Mixins}}},
  booktitle = {Formal {{Syntax}} and {{Semantics}} of {{Java}}},
  author = {Flatt, Matthew and Krishnamurthi, Shriram and Felleisen, Matthias},
  editor = {{Alves-Foss}, Jim},
  year = {1999},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {241--269},
  publisher = {{Springer}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/3-540-48737-9_7},
  urldate = {2022-11-30},
  abstract = {While class-based object-oriented programming languages provide a flexible mechanism for re-using and managing related pieces of code, they typically lack linguistic facilities for specifying a uniform extension of many classes with one set of fields and methods. As a result, programmers are unable to express certain abstractions over classes. In this paper we develop a model of class-to-class functions that we refer to as mixins. A mixin function maps a class to an extended class by adding or overriding fields and methods. Programming with mixins is similar to programming with single inheritance classes, but mixins more directly encourage programming to interfaces. The paper develops these ideas within the context of Java. The results are1.an intuitive model of an essential Java subset;2.an extension that explains and models mixins; and3.type soundness theorems for these languages.},
  isbn = {978-3-540-48737-1},
  langid = {english},
  keywords = {Multiple Inheritance,Operational Semantic,Type Elaboration,Type Soundness,Typing Rule},
  file = {/Users/igormoreno/Zotero/storage/KDJNZJCB/Flatt et al. - 1999 - A Programmer’s Reduction Semantics for Classes and.pdf}
}

@book{flavellMetamemory1975,
  title = {Metamemory},
  author = {Flavell, John H. and Wellman, Henry M.},
  year = {1975},
  month = aug,
  urldate = {2020-10-30},
  abstract = {This paper explores the concept of metamemory, generally defined as the individual's knowledge of and awareness of memory. The concept of metamemory is compared to three other categories of memory and a model of what the growing child could conceivably acquire in the domain of metamemory is presented. Brief reviews of existing research relations between metamemory and other psychological phenomena, with special reference to strategic memory behavior. Finally, some propositions about how metamemory might be acquired are offered. (Author/ED)},
  langid = {english},
  keywords = {Adults,Cognitive Development,Cognitive Processes,Elementary Secondary Education,Individual Differences,Learning Processes,Literature Reviews,Logical Thinking,Maturation,Memory,Mnemonics,Preschool Education,Recall (Psychology),Retention (Psychology),Test Construction},
  annotation = {02100},
  file = {/Users/igormoreno/Zotero/storage/CIMAU7JZ/Flavell e Wellman - 1975 - Metamemory.pdf;/Users/igormoreno/Zotero/storage/LNY5VSFY/eric.ed.gov.html}
}

@article{fleuryParameterPassingRules1991,
  title = {Parameter Passing: The Rules the Students Construct},
  shorttitle = {Parameter Passing},
  author = {Fleury, Ann E.},
  year = {1991},
  journal = {ACM SIGCSE Bulletin},
  volume = {23},
  number = {1},
  pages = {283--286},
  publisher = {{ACM New York, NY, USA}},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/T6SK32SX/Fleury - 1991 - Parameter passing the rules the students construc.pdf}
}

@inproceedings{fleuryProgrammingJavaStudentconstructed2000,
  ids = {fleuryProgrammingJavaStudentConstructed,fleuryProgrammingJavaStudentconstructed2000a},
  title = {Programming in {{Java}}: Student-Constructed Rules},
  shorttitle = {Programming in {{Java}}},
  booktitle = {Proceedings of the Thirty-First {{SIGCSE}} Technical Symposium on {{Computer}} Science Education},
  author = {Fleury, Ann E.},
  year = {2000},
  month = mar,
  series = {{{SIGCSE}} '00},
  pages = {197--201},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/330908.331854},
  urldate = {2021-01-04},
  abstract = {Java is becoming a popular first programming language for university students. One reason for its popularity is its power as an object-oriented language. This study examined beginning students' understanding of the construction and use of objects in Java. During tape-recorded interviews, students were asked to predict which programs from a collection of similar programs would work according to specification and which would not. This paper will discuss those interviews, including the most common false assumptions or ``student-constructed rules'' invoked by the students and the implications of the interviews for instruction.},
  isbn = {978-1-58113-213-7},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/7J8VE3VQ/Fleury - Programming in Java Student-Constructed Rules.pdf;/Users/igormoreno/Zotero/storage/M3TXAXF7/Fleury - 2000 - Programming in Java student-constructed rules.pdf;/Users/igormoreno/Zotero/storage/RIDKVM6C/Fleury - 2000 - Programming in Java student-constructed rules.pdf;/Users/igormoreno/Zotero/storage/AGGTGQRL/330908.html}
}

@article{flynnMicrogeneticMethodTime2006,
  title = {The Microgenetic Method {{Time}} for Change?},
  author = {Flynn, Emma and Pine, Karen and Lewis, Charlie},
  year = {2006},
  journal = {The Psychologist},
  volume = {19},
  number = {3},
  pages = {4},
  langid = {english},
  annotation = {00037},
  file = {/Users/igormoreno/Zotero/storage/MB2U6WIN/Flynn et al - 2006 - The microgenetic method Time for change.pdf}
}

@article{fokkinkConservativeLookOperational1998,
  title = {A {{Conservative Look}} at {{Operational Semantics}} with {{Variable Binding}}},
  author = {Fokkink, Wan and Verhoef, Chris},
  year = {1998},
  month = oct,
  journal = {Information and Computation},
  volume = {146},
  number = {1},
  pages = {24--54},
  issn = {0890-5401},
  doi = {10.1006/inco.1998.2729},
  urldate = {2018-12-02},
  abstract = {We set up a formal framework to describe transition system specifications in the style of Plotkin. This framework has the power to express many-sortedness, general binding mechanisms, and substitutions, among other notions such as negative hypotheses and unary predicates on terms. The framework is used to present a conservativity format in operational semantics, which states sufficient criteria to ensure that the extension of a transition system specification with new transition rules does not affect the semantics of the original terms.},
  file = {/Users/igormoreno/Zotero/storage/2THTQAIE/Fokkink and Verhoef - 1998 - A Conservative Look at Operational Semantics with Variable Binding.pdf;/Users/igormoreno/Zotero/storage/Y2KFDB9L/S0890540198927298.html}
}

@book{fongInvitationAppliedCategory2019,
  title = {An {{Invitation}} to {{Applied Category Theory}}: {{Seven Sketches}} in {{Compositionality}}},
  shorttitle = {An {{Invitation}} to {{Applied Category Theory}}},
  author = {Fong, Brendan and Spivak, David I.},
  year = {2019},
  month = jul,
  edition = {1},
  publisher = {{Cambridge University Press}},
  doi = {10.1017/9781108668804},
  urldate = {2021-12-29},
  isbn = {978-1-108-66880-4 978-1-108-48229-5 978-1-108-71182-1},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/TB93BXMZ/Fong and Spivak - 2019 - An Invitation to Applied Category Theory Seven Sk.pdf}
}

@article{forbusCogSketchSketchUnderstanding2011,
  title = {{{CogSketch}}: {{Sketch Understanding}} for {{Cognitive Science Research}} and for {{Education}}},
  shorttitle = {{{CogSketch}}},
  author = {Forbus, Kenneth and Usher, Jeffrey and Lovett, Andrew and Lockwood, Kate and Wetzel, Jon},
  year = {2011},
  journal = {Topics in Cognitive Science},
  volume = {3},
  number = {4},
  pages = {648--666},
  issn = {1756-8765},
  doi = {10.1111/j.1756-8765.2011.01149.x},
  urldate = {2023-01-21},
  abstract = {Sketching is a powerful means of working out and communicating ideas. Sketch understanding involves a combination of visual, spatial, and conceptual knowledge and reasoning, which makes it both challenging to model and potentially illuminating for cognitive science. This paper describes CogSketch, an ongoing effort of the NSF-funded Spatial Intelligence and Learning Center, which is being developed both as a research instrument for cognitive science and as a platform for sketch-based educational software. We describe the idea of open-domain sketch understanding, the scientific hypotheses underlying CogSketch, and provide an overview of the models it employs, illustrated by simulation studies and ongoing experiments in creating sketch-based educational software.},
  langid = {english},
  keywords = {Analogy,Cognitive simulation,Qualitative reasoning,Sketch understanding,Spatial cognition,Spatial reasoning,Visual reasoning},
  file = {/Users/igormoreno/Zotero/storage/BFHIWTP6/Forbus et al - 2011 - CogSketch.pdf;/Users/igormoreno/Zotero/storage/K7NQZXHY/j.1756-8765.2011.01149.html}
}

@article{forsterHowFeedbackProvided2018,
  title = {How Feedback Provided by Voluntary Electronic Quizzes Affects Learning Outcomes of University Students in Large Classes},
  author = {F{\"o}rster, Manuel and Weiser, Constantin and Maur, Andreas},
  year = {2018},
  month = jun,
  journal = {Computers \& Education},
  volume = {121},
  pages = {100--114},
  issn = {03601315},
  doi = {10.1016/j.compedu.2018.02.012},
  urldate = {2018-11-06},
  abstract = {In view of the increasing number of university students attending large statistics classes as a requirement for their degree courses, the use of an online learning environment is indispensable for delivering immediate and frequent feedback. However, results of research on the value of technological tools and blended courses in various academic disciplines are not consistent and only point to minimal effects on academic achievement. To fill this gap, in this study, participation in optional electronic quizzes and its effects on exam grades in large statistics classes depending on gender and previous statistics- and mathematics-related abilities are investigated. Overall, participation in the electronic quizzes yielded a positive effect on final grades. However, particularly the groups who participated less in the electronic quizzes \textendash{} i.e. poor performing students and males - benefitted more from quiz participation than high performing and female students. The large variability in effect sizes of feedback on performance suggests that additional moderators such as specific situation- and task-related characteristics and individual affective preconditions such as effort, motivation, and self-esteem should be analyzed in future research.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/VDDCU9AI/Förster et al - 2018 - How feedback provided by voluntary electronic quizzes affects learning outcomes.pdf}
}

@inproceedings{forteComputersCommunicationNot2004,
  title = {Computers for Communication, Not Calculation: Media as a Motivation and Context for Learning},
  shorttitle = {Computers for Communication, Not Calculation},
  booktitle = {37th {{Annual Hawaii International Conference}} on {{System Sciences}}, 2004. {{Proceedings}} of The},
  author = {Forte, A. and Guzdial, M.},
  year = {2004},
  month = jan,
  pages = {10 pp.-},
  doi = {10.1109/HICSS.2004.1265259},
  abstract = {As the skills that constitute literacy evolve to accommodate digital media, computer science education finds itself in a sorry state. While students are more in need of computational skills than ever, computer science suffers dramatically low retention rates and a declining percentage of women and minorities. Studies of the problem point to the overemphasis in computer science classes on abstraction over application, technical details instead of usability, and the stereotypical view of programmers as loners lacking creativity. In spring 2003, Georgia Institute of Technology trialed a new course, Introduction to Media Computation, which teaches programming and computation in the context of media creation and manipulation. Students implement PhotoShop-style filters and digital video special effects, splice sounds, and search Web pages. The course is open only to noncomputer science and nonengineering majors at Georgia Tech, such as liberal arts, management and architecture students. The course is supported through the use of a Web-based collaboration environment where students actively share and discuss their digital creations. The results have been dramatic. 120 students enrolled, 2/3 female, and only three students withdrew. By the end of the semester, the combined withdrawal, failure and D-grade rate had reached 11.5\% - compared to 42.9\% in the traditional introductory computer science course. 60\% of the students who took media computation reported that they would be interested in taking an advanced version of the course; only 6\% reported that they would otherwise be interested in taking more computer science. Results of the trial indicate that media computation motivates and engages an audience that is poorly served by traditional computer science courses.},
  keywords = {Application software,Computer science,Computer science education,Context,Digital filters,Information filtering,Information filters,Programming profession,Springs,Usability},
  file = {/Users/igormoreno/Zotero/storage/ZFD2W3EB/Forte e Guzdial - 2004 - Computers for communication, not calculation medi.pdf;/Users/igormoreno/Zotero/storage/DBCITW8V/1265259.html}
}

@inproceedings{fradrichCommonBugsScratch2020,
  title = {Common {{Bugs}} in {{Scratch Programs}}},
  booktitle = {Proceedings of the 2020 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Fr{\"a}drich, Christoph and Oberm{\"u}ller, Florian and K{\"o}rber, Nina and Heuer, Ute and Fraser, Gordon},
  year = {2020},
  month = jun,
  pages = {89--95},
  publisher = {{ACM}},
  address = {{Trondheim Norway}},
  doi = {10.1145/3341525.3387389},
  urldate = {2020-09-17},
  abstract = {Bugs in Scratch programs can spoil the fun and inhibit learning success. Many common bugs are the result of recurring patterns of bad code. In this paper we present a collection of common code patterns that typically hint at bugs in Scratch programs, and the LitterBox tool which can automatically detect them. We empirically evaluate how frequently these patterns occur, and how severe their consequences usually are. While fixing bugs inevitably is part of learning, the possibility to identify the bugs automatically provides the potential to support learners.},
  isbn = {978-1-4503-6874-2},
  langid = {english},
  annotation = {00001},
  file = {/Users/igormoreno/Zotero/storage/3EXRNTPB/Frädrich et al. - 2020 - Common Bugs in Scratch Programs.pdf}
}

@inproceedings{frandsenSingularChoiceMultiple2006,
  title = {A Singular Choice for Multiple Choice},
  booktitle = {Working Group Reports on {{ITiCSE}} on {{Innovation}} and Technology in Computer Science Education},
  author = {Frandsen, Gudmund S. and Schwartzbach, Michael I.},
  year = {2006},
  month = jun,
  series = {{{ITiCSE-WGR}} '06},
  pages = {34--38},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1189215.1189164},
  urldate = {2021-11-19},
  abstract = {How should multiple choice tests be scored and graded, in particular when students are allowed to check several boxes to convey partial knowledge? Many strategies may seem reasonable, but we demonstrate that five self-evident axioms are sufficient to determine completely the correct strategy. We also discuss how to measure robustness of the obtained grades. Our results have practical advantages and also suggest criteria for designing multiple choice questions.},
  isbn = {978-1-59593-603-5},
  keywords = {grading scales,multiple choice,scoring strategies,theory},
  file = {/Users/igormoreno/Zotero/storage/D7YS4NPC/Frandsen and Schwartzbach - 2006 - A singular choice for multiple choice.pdf}
}

@article{fraserControlGrammarImitation1963,
  title = {Control of Grammar in Imitation, Comprehension, and Production},
  author = {Fraser, Colin and Bellugi, Ursula and Brown, Roger},
  year = {1963},
  month = sep,
  journal = {Journal of Verbal Learning and Verbal Behavior},
  volume = {2},
  number = {2},
  pages = {121--135},
  issn = {0022-5371},
  doi = {10.1016/S0022-5371(63)80076-6},
  urldate = {2018-12-02},
  abstract = {Summary The familiar assertion that, in language development, understanding precedes production was tested for 10 grammatical contrasts with 12 3-year-old children. Understanding was operationalized as the correct identification of pictures named by contrasting sentences. Production was operationalized in two ways: (a) as the correct imitation of contrasting features in sentences without evidence of understanding; and (b) as the correct production of contrasting features in sentences applied appropriately to pictures. Production, in the second sense, proves to be less advanced than understanding in 3-year-old children. However, production in the sense of imitation proves to be more advanced than understanding in 3-year-olds.},
  file = {/Users/igormoreno/Zotero/storage/G86QAL87/Fraser et al - 1963 - Control of grammar in imitation, comprehension, and production.pdf;/Users/igormoreno/Zotero/storage/ASSQGTXM/S0022537163800766.html}
}

@inproceedings{fraserTenThingsWe2015,
  title = {Ten Things We've Learned from {{Blockly}}},
  booktitle = {2015 {{IEEE Blocks}} and {{Beyond Workshop}} ({{Blocks}} and {{Beyond}})},
  author = {Fraser, Neil},
  year = {2015},
  month = oct,
  pages = {49--50},
  doi = {10.1109/BLOCKS.2015.7369000},
  abstract = {Over the last four years the Blockly team has learned many lessons which are applicable to block-based programming in general. The following are a collection of ten mistakes we have made, or mistakes commonly made by others. Each issue is presented as noncontroversial folk knowledge without supporting data.},
  keywords = {block programming,Conferences,Connectors,Games,Image color analysis,Programming,Programming environments,Syntactics,usability,user interface,UX},
  file = {/Users/igormoreno/Zotero/storage/EBXUPS3L/Fraser - 2015 - Ten things we've learned from Blockly.pdf;/Users/igormoreno/Zotero/storage/HIHFLC2K/stamp.html}
}

@inproceedings{freiermuthCreatingTestingTextbooks2008,
  title = {Creating and {{Testing Textbooks}} for {{Secondary Schools}}},
  booktitle = {Informatics {{Education}} - {{Supporting Computational Thinking}}},
  author = {Freiermuth, Karin and Hromkovi{\v c}, Juraj and Steffen, Bj{\"o}rn},
  editor = {Mittermeir, Roland T. and Sys{\l}o, Maciej M.},
  year = {2008},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {216--228},
  publisher = {{Springer Berlin Heidelberg}},
  abstract = {The main goal of this paper is to present our approach for writing textbooks that are self-contained and available for individual learning. These texts are written in the language of the corresponding pupils and are not restricted by any length limitations. This allows us to write as clearly and thoroughly as possible. Minimizing the time for mastering the subject instead of minimizing the presentation length is the main goal. The detailed lecture notes provide a safety net for the teacher and the pupils alike. They do not restrict teachers in their interaction with the class or in the freedom of choosing alternative ways in approaching the subject. On the contrary, the freedom of designing the content of the lesson increases because pupils have the certainty to be able to learn from the lecture notes if something was not fully understood.Here some general rules for writing learning aids are presented and then applied for an introductory course about programming in LOGO. Finally, we summarize our teaching experience in different classes with the produced learning aids.},
  isbn = {978-3-540-69924-8},
  langid = {english},
  keywords = {Elementary Geometry,Learning Objective,Program Execution,Recursive Call,Regular Polygon},
  annotation = {00015},
  file = {/Users/igormoreno/Zotero/storage/5IN38F8G/Freiermuth et al - 2008 - Creating and Testing Textbooks for Secondary Schools.pdf}
}

@article{freundTHETISANSIPROGRAMMING,
  title = {{{THETIS}}: {{AN ANSI C PROGRAMMING ENVIRONMENT DESIGNED FOR INTRODUCTORY USE}}},
  author = {Freund, Stephen N and Roberts, Eric S},
  pages = {5},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/Y3PR89IA/Freund and Roberts - THETIS.pdf}
}

@inproceedings{frezzaModellingCompetenciesComputing2018,
  title = {Modelling Competencies for Computing Education beyond 2020: A Research Based Approach to Defining Competencies in the Computing Disciplines},
  shorttitle = {Modelling Competencies for Computing Education beyond 2020},
  booktitle = {Proceedings {{Companion}} of the 23rd {{Annual ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Frezza, Stephen and Daniels, Mats and Pears, Arnold and Cajander, {\AA}sa and Kann, Viggo and Kapoor, Amanpreet and McDermott, Roger and Peters, Anne-Kathrin and Sabin, Mihaela and Wallace, Charles},
  year = {2018},
  month = jul,
  series = {{{ITiCSE}} 2018 {{Companion}}},
  pages = {148--174},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3293881.3295782},
  urldate = {2020-09-22},
  abstract = {How might the content and outcomes of tertiary education programmes be described and analysed in order to understand how they are structured and function? To address this question we develop a framework for modelling graduate competencies linked to tertiary degree programmes in the computing disciplines. While the focus of our work is computing the framework is applicable to education more broadly. The work presented here draws upon the pioneering curricular document for information technology (IT2017), curricular competency frameworks, other related documents such as the software engineering competency model (SWECOM), the Skills Framework for the Information Age (SFIA), current research in competency models, and elicitation workshop results from recent computing conferences. The aim is to inform the ongoing Computing Curricula (CC2020) project, an endeavour supported by the Association for Computing Machinery (ACM) and the IEEE Computer Society. We develop the Competency Learning Framework (CoLeaF), providing an internationally relevant tool for describing competencies. We argue that this competency based approach is well suited for constructing learning environments and assists degree programme architects in dealing with the challenge of developing, describing and including competencies relevant to computer and IT professionals. In this paper we demonstrate how the CoLeaF competency framework can be applied in practice, and though a series of case studies demonstrate its effectiveness and analytical power as a tool for describing and comparing degree programmes in the international higher education landscape.},
  isbn = {978-1-4503-6223-8},
  keywords = {CC2020,Computing competencies,curriculum guidelines,Curriculus,Professional competencies},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/KAJB3J2N/Frezza et al - 2018 - Modelling competencies for computing education beyond 2020.pdf;/Users/igormoreno/Zotero/storage/X3JL9U94/Frezza et al - 2018 - Modelling competencies for computing education beyond 2020.pdf}
}

@book{friedmanLittleSchemer1996,
  title = {The Little {{Schemer}}},
  author = {Friedman, Daniel P. and Felleisen, Matthias and Friedman, Daniel P.},
  year = {1996},
  edition = {4th ed},
  publisher = {{MIT Press}},
  address = {{Cambridge Mass}},
  isbn = {978-0-262-56099-3},
  langid = {english},
  lccn = {QA76.73.S34 F75 1996},
  keywords = {LISP (Computer program language),Scheme (Computer program language)},
  file = {/Users/igormoreno/Zotero/storage/6S7LKKUB/Friedman et al. - 1996 - The little Schemer.pdf}
}

@misc{frieseMeasuringIntercoderAgreement2020,
  title = {{Measuring Inter-coder Agreement \textendash{} Why Cohen's Kappa is not a good choice}},
  author = {Friese, Susanne},
  year = {2020},
  month = jul,
  journal = {ATLAS.ti},
  urldate = {2021-01-17},
  abstract = {Measuring Inter-coder Agreement \textendash{} Why Cohen's Kappa is not a good choice - ATLAS.ti is a powerful workbench for - Qualitative Data Analysis\ding{51} of Textual\ding{51} Graphical\ding{51},Audio \& Video Data},
  chapter = {Methods},
  langid = {ngerman},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/FD25K66Z/measuring-inter-coder-agreement-why-cohens-kappa-is-not-a-good-choice.html}
}

@article{fronzaTeachingComputationalThinking2017,
  title = {Teaching {{Computational Thinking Using Agile Software Engineering Methods}}: {{A Framework}} for {{Middle Schools}}},
  shorttitle = {Teaching {{Computational Thinking Using Agile Software Engineering Methods}}},
  author = {Fronza, Ilenia and Ioini, Nabil El and Corral, Luis},
  year = {2017},
  month = dec,
  journal = {ACM Transactions on Computing Education},
  volume = {17},
  number = {4},
  pages = {1--28},
  issn = {1946-6226},
  doi = {10.1145/3055258},
  urldate = {2023-03-16},
  abstract = {Computational Thinking (CT) has been recognized as one of the fundamental skills that all graduates should acquire. For this reason, motivational concerns need to be addressed at an early age of a child, and reaching students who do not consider themselves candidates for science, technology, engineering, and mathematics disciplines is important as well if the broadest audience possible is to be engaged. This article describes a framework for teaching and assessing CT in the context of K-12 education. The framework is based on Agile software engineering methods, which rely on a set of principles and practices that can be mapped to the activities of CT. The article presents as well the results of an experiment applying this framework in two sixth-grade classes, with 42 participants in total. The results show that Agile software engineering methods are effective at teaching CT in middle schools, after the addition of some tasks to allow students to explore, project, and experience the potential product before using the software tools at hand. Moreover, according to the teachers' feedback, the students reached all the educational objectives of the topics involved in the multidisciplinary activities. This result can be taken as an indicator that it is possible to use computing as a medium for teaching other subjects, besides computer science.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/65F6R2T7/Fronza et al. - 2017 - Teaching Computational Thinking Using Agile Softwa.pdf}
}

@article{fronzaTeachingComputationalThinking2017a,
  title = {Teaching {{Computational Thinking Using Agile Software Engineering Methods}}: {{A Framework}} for {{Middle Schools}}},
  shorttitle = {Teaching {{Computational Thinking Using Agile Software Engineering Methods}}},
  author = {Fronza, Ilenia and Ioini, Nabil El and Corral, Luis},
  year = {2017},
  month = dec,
  journal = {ACM Transactions on Computing Education},
  volume = {17},
  number = {4},
  pages = {1--28},
  issn = {1946-6226},
  doi = {10.1145/3055258},
  urldate = {2023-03-16},
  abstract = {Computational Thinking (CT) has been recognized as one of the fundamental skills that all graduates should acquire. For this reason, motivational concerns need to be addressed at an early age of a child, and reaching students who do not consider themselves candidates for science, technology, engineering, and mathematics disciplines is important as well if the broadest audience possible is to be engaged. This article describes a framework for teaching and assessing CT in the context of K-12 education. The framework is based on Agile software engineering methods, which rely on a set of principles and practices that can be mapped to the activities of CT. The article presents as well the results of an experiment applying this framework in two sixth-grade classes, with 42 participants in total. The results show that Agile software engineering methods are effective at teaching CT in middle schools, after the addition of some tasks to allow students to explore, project, and experience the potential product before using the software tools at hand. Moreover, according to the teachers' feedback, the students reached all the educational objectives of the topics involved in the multidisciplinary activities. This result can be taken as an indicator that it is possible to use computing as a medium for teaching other subjects, besides computer science.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/6X7Y3QGK/Fronza et al. - 2017 - Teaching Computational Thinking Using Agile Softwa.pdf}
}

@book{FunctionalGrammarComputer2019,
  title = {Functional {{Grammar}} and the {{Computer}}},
  year = {2019},
  month = oct,
  journal = {Functional Grammar and the Computer},
  publisher = {{De Gruyter Mouton}},
  doi = {10.1515/9783110871685},
  urldate = {2021-10-10},
  isbn = {978-3-11-087168-5},
  langid = {english},
  keywords = {Computerlinguistik,Funktionale Grammatik},
  file = {/Users/igormoreno/Zotero/storage/PLISVS2Z/2019 - Functional Grammar and the Computer.pdf}
}

@misc{FunctionalReactiveProgramming,
  title = {Functional {{Reactive Programming}}},
  journal = {Manning Publications},
  urldate = {2023-02-05},
  abstract = {Functional Reactive Programming teaches the concepts and applications of FRP. It offers a careful walk-through of core FRP operations and introduces the concepts and techniques you'll need to use FRP in any language.{$<$}/p{$>$}},
  howpublished = {https://www.manning.com/books/functional-reactive-programming},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/4F9RTCPU/functional-reactive-programming.html}
}

@article{fungTaxonomyNovicesMisconceptions1990,
  title = {Towards a Taxonomy of Novices' Misconceptions of the {{Prolog}} Interpreter},
  author = {Fung, Pat and Brayshaw, Mike and Du Boulay, Benedict and {Elsom-Cook}, Mark},
  year = {1990},
  month = jul,
  journal = {Instructional Science},
  volume = {19},
  number = {4},
  pages = {311--336},
  issn = {1573-1952},
  doi = {10.1007/BF00116443},
  urldate = {2020-06-23},
  abstract = {A series of novice programmers' misconceptions of Prolog flow-of-control and variable unification are identified on the basis of existing empirical evidence, and informal observation. This classification is intended to serve as a first pass attempt towards an understanding of these errors and as a basis for future empirical work.},
  langid = {english},
  annotation = {00000}
}

@inproceedings{furinghettiParametersUnknownsVariables1994,
  title = {Parameters, Unknowns and Variables: {{A}} Little Difference?},
  shorttitle = {1994 - {{Parameters}}, Unknowns and Variables},
  booktitle = {Proceedings of the 18th {{International Conference}} for the {{Psychology}} of {{Mathematics Education}}},
  author = {Furinghetti, Fulvia and Paola, Domingo},
  year = {1994},
  month = jan,
  volume = {2},
  pages = {368--375},
  abstract = {In this paper we report on a research concerning algebra learning in secondary school; the focus is on parameters and their relation to unknowns and variables. In developing our study we at first analysed the notion (in its manipulative and conceptual aspects) using a methodology we had already tested in other studies on algebra learning which consists in singling out what lies behind to a given notion and in constructing a tree of notions related to the initial one. We then prepared a questionnaire to establish how students perceive the differences between parameters, unknowns and variables and deal with algebraic situations where these notions intervene. The questionnaire was handed out to 199 students aged 16-17 of 3 schools. The results offer us useful insights for the analysis of fundamental aspects of algebraic thinking.},
  file = {/Users/igormoreno/Zotero/storage/B8YA2XMQ/Furinghetti and Paola - 1994 - Parameters, unknowns and variables.pdf}
}

@article{furukawaSteppingOCaml2019,
  title = {Stepping {{OCaml}}},
  author = {Furukawa, Tsukino and Cong, Youyou and Asai, Kenichi},
  year = {2019},
  month = jun,
  journal = {Electronic Proceedings in Theoretical Computer Science},
  volume = {295},
  pages = {17--34},
  issn = {2075-2180},
  doi = {10.4204/EPTCS.295.2},
  urldate = {2020-06-22},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/RP5P6FB9/Furukawa et al - 2019 - Stepping OCaml.pdf}
}

@article{fuscoMatchingCurriculumStudents1981,
  title = {Matching {{Curriculum}} to {{Students}}' {{Cognitive Levels}}},
  author = {Fusco, {\relax ESTHER}},
  year = {1981},
  month = oct,
  journal = {Educational Leadership},
  volume = {39},
  number = {1},
  pages = {47},
  abstract = {Reports on the Cognitive Level Matching inservice education project implemented by the Shoreham-Wading River School District in Shoreham, New York. Purposes of the program; Use of Arlin's Test of Formal Reasoning in order to determine participants' cognitive abilities; Development of curriculum units that enable teachers to match curricula to cognitive abilities found in hetergoneneously organized classrooms.},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/XTCLX938/Fusco - 1981 - Matching Curriculum to Students' Cognitive Levels.pdf}
}

@article{g.m.amdahlStructureSYSTEM3601964,
  title = {The Structure of {{SYSTEM}}/360: {{Part III}} - {{Processing}} Unit Design Considerations},
  author = {{G. M. Amdahl}},
  year = {1964},
  journal = {IBM Systems Journal},
  volume = {3},
  number = {2},
  abstract = {Considerations underlying the design of the central processing unit are discussed. Particular emphasis is placed on addressing, sequencing, and monitor control functions as well as provisions for arithmetic and logical operations.},
  file = {/Users/igormoreno/Zotero/storage/PG8WT4LS/G. M. Amdahl - 1964 - The structure of SYSTEM-360.pdf}
}

@inproceedings{gabrielBetterScienceArt2010,
  title = {Better Science through Art},
  booktitle = {Proceedings of the {{ACM}} International Conference on {{Object}} Oriented Programming Systems Languages and Applications},
  author = {Gabriel, Richard P. and Sullivan, Kevin J.},
  year = {2010},
  month = oct,
  series = {{{OOPSLA}} '10},
  pages = {885--900},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1869459.1869533},
  urldate = {2021-03-25},
  abstract = {How do artists and scientists work? The same.},
  isbn = {978-1-4503-0203-6},
  keywords = {art,design,science,software engineering},
  file = {/Users/igormoreno/Zotero/storage/CX6QC3EC/Gabriel and Sullivan - 2010 - Better science through art.pdf}
}

@book{gabrielPatternsSoftware1996,
  title = {Patterns of {{Software}}},
  author = {Gabriel, Richard P.},
  year = {1996},
  urldate = {2022-03-10},
  file = {/Users/igormoreno/Zotero/storage/9V9SPRIG/PatternsOfSoftware.pdf}
}

@article{gal-ezerComputerScienceTeacher2010,
  title = {Computer {{Science Teacher Preparation}} Is {{Critical}}},
  author = {{Gal-Ezer}, Judith and Stephenson, Chris},
  year = {2010},
  month = mar,
  journal = {ACM Inroads},
  volume = {1},
  number = {1},
  pages = {61--66},
  issn = {2153-2184},
  doi = {10.1145/1721933.1721953},
  urldate = {2019-05-16},
  abstract = {In this paper, we report on the research and recommendations of the CSTA (Computer Science Teachers Association) Teacher Certification Task Force, addressing the crisis in computer science teacher preparation and certification. This paper will address the importance of computer science as a scientific discipline, and provide a brief discussion of the relevant research and current existing certification models Primarily, however, this paper focuses on the Task Force's recommended models for teacher preparation and certification in computer science.},
  keywords = {computer science education,secondary level,teacher certification},
  file = {/Users/igormoreno/Zotero/storage/ZL9B72PI/Gal-Ezer and Stephenson - 2010 - Computer Science Teacher Preparation is Critical.pdf}
}

@inproceedings{gal-ezerPreparationHighSchool2009,
  title = {Preparation of {{High School Computer Science Teachers}}: {{The Israeli Perspective}}},
  shorttitle = {Preparation of {{High School Computer Science Teachers}}},
  booktitle = {Proceedings of the 40th {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {{Gal-Ezer}, Judith and Hazzan, Orit and Ragonis, Noa},
  year = {2009},
  series = {{{SIGCSE}} '09},
  pages = {269--270},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1508865.1508965},
  urldate = {2019-05-16},
  abstract = {This special session examines frameworks for the preparation of high school computer science (CS) teachers from the Israeli perspective. Specifically, several Israeli CS teacher preparation programs and their components are presented. The presentation includes both a general overview and a detailed description of the actual implementation of such programs. This bipolar presentation, we suggest, provides practical guidelines with respect to CS teacher preparation, both for policy makers and for faculty members who wish to establish a CS teacher preparation program at their universities.},
  isbn = {978-1-60558-183-5},
  keywords = {computer science education,computer science education in israel,computer science teacher preparation,methods of teaching computer science course,practicum in computer science,tutoring in computer science},
  file = {/Users/igormoreno/Zotero/storage/A6ZCKNNP/Gal-Ezer et al - 2009 - Preparation of High School Computer Science Teachers.pdf}
}

@article{gal-ezerReachingOutCS2007,
  title = {Reaching out to {{CS}} Teachers: {{Certification}} via Distance Learning},
  author = {{Gal-Ezer}, Judith and Zur, Ela},
  year = {2007},
  journal = {Mathematics and Computer Education},
  volume = {41},
  number = {3},
  pages = {16},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/PJ3LASL5/Gal-Ezer and Zur - 2007 - Reaching out to CS teachers.pdf}
}

@article{ganeDesignValidationLearning2021,
  title = {Design and Validation of Learning Trajectory-Based Assessments for Computational Thinking in Upper Elementary Grades},
  author = {Gane, Brian D. and Israel, Maya and Elagha, Noor and Yan, Wei and Luo, Feiya and Pellegrino, James W.},
  year = {2021},
  month = apr,
  journal = {Computer Science Education},
  volume = {31},
  number = {2},
  pages = {141--168},
  issn = {0899-3408, 1744-5175},
  doi = {10.1080/08993408.2021.1874221},
  urldate = {2023-03-16},
  abstract = {Background \& Context: We describe the rationale, design, and initial validation of computational thinking (CT) assessments to pair with curricular lessons that integrate fractions and CT.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/JIJKKP4Z/Gane et al. - 2021 - Design and validation of learning trajectory-based.pdf}
}

@article{ganeDesignValidationLearning2021a,
  title = {Design and Validation of Learning Trajectory-Based Assessments for Computational Thinking in Upper Elementary Grades},
  author = {Gane, Brian D. and Israel, Maya and Elagha, Noor and Yan, Wei and Luo, Feiya and Pellegrino, James W.},
  year = {2021},
  month = apr,
  journal = {Computer Science Education},
  volume = {31},
  number = {2},
  pages = {141--168},
  issn = {0899-3408, 1744-5175},
  doi = {10.1080/08993408.2021.1874221},
  urldate = {2023-03-16},
  abstract = {Background \& Context: We describe the rationale, design, and initial validation of computational thinking (CT) assessments to pair with curricular lessons that integrate fractions and CT.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/IAX8VDF6/Gane et al. - 2021 - Design and validation of learning trajectory-based.pdf}
}

@article{gaoSurveyGraphEdit2010,
  title = {A Survey of Graph Edit Distance},
  author = {Gao, Xinbo and Xiao, Bing and Tao, Dacheng and Li, Xuelong},
  year = {2010},
  month = feb,
  journal = {Pattern Analysis and Applications},
  volume = {13},
  number = {1},
  pages = {113--129},
  issn = {1433-755X},
  doi = {10.1007/s10044-008-0141-y},
  urldate = {2022-07-20},
  abstract = {Inexact graph matching has been one of the significant research foci in the area of pattern analysis. As an important way to measure the similarity between pairwise graphs error-tolerantly, graph edit distance (GED) is the base of inexact graph matching. The research advance of GED is surveyed in order to provide a review of the existing literatures and offer some insights into the studies of GED. Since graphs may be attributed or non-attributed and the definition of costs for edit operations is various, the existing GED algorithms are categorized according to these two factors and described in detail. After these algorithms are analyzed and their limitations are identified, several promising directions for further research are proposed.},
  langid = {english},
  keywords = {Attributed graph,Graph edit distance,Inexact graph matching,Non-attributed graph},
  file = {/Users/igormoreno/Zotero/storage/WCMV73EM/Gao et al. - 2010 - A survey of graph edit distance.pdf}
}

@inproceedings{garciaAbstractingGradualTyping2016,
  title = {Abstracting Gradual Typing},
  booktitle = {Proceedings of the 43rd {{Annual ACM SIGPLAN-SIGACT Symposium}} on {{Principles}} of {{Programming Languages}}},
  author = {Garcia, Ronald and Clark, Alison M. and Tanter, {\'E}ric},
  year = {2016},
  month = jan,
  series = {{{POPL}} '16},
  pages = {429--442},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2837614.2837670},
  urldate = {2022-11-21},
  abstract = {Language researchers and designers have extended a wide variety of type systems to support gradual typing, which enables languages to seamlessly combine dynamic and static checking. These efforts consistently demonstrate that designing a satisfactory gradual counterpart to a static type system is challenging, and this challenge only increases with the sophistication of the type system. Gradual type system designers need more formal tools to help them conceptualize, structure, and evaluate their designs. In this paper, we propose a new formal foundation for gradual typing, drawing on principles from abstract interpretation to give gradual types a semantics in terms of pre-existing static types. Abstracting Gradual Typing (AGT for short) yields a formal account of consistency---one of the cornerstones of the gradual typing approach---that subsumes existing notions of consistency, which were developed through intuition and ad hoc reasoning. Given a syntax-directed static typing judgment, the AGT approach induces a corresponding gradual typing judgment. Then the type safety proof for the underlying static discipline induces a dynamic semantics for gradual programs defined over source-language typing derivations. The AGT approach does not resort to an externally justified cast calculus: instead, run-time checks naturally arise by deducing evidence for consistent judgments during proof reduction. To illustrate the approach, we develop a novel gradually-typed counterpart for a language with record subtyping. Gradual languages designed with the AGT approach satisfy by construction the refined criteria for gradual typing set forth by Siek and colleagues.},
  isbn = {978-1-4503-3549-2},
  keywords = {abstract interpretation,gradual typing,subtyping},
  file = {/Users/igormoreno/Zotero/storage/W7SF9LCA/Garcia et al. - 2016 - Abstracting gradual typing.pdf}
}

@inproceedings{garciaInstructionalFrameworkCS12019a,
  title = {Instructional {{Framework}} for {{CS1 Question Activities}}},
  booktitle = {Proceedings of the 2019 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Garcia, Rita and Falkner, Katrina and Vivian, Rebecca},
  year = {2019},
  month = jul,
  series = {{{ITiCSE}} '19},
  pages = {189--195},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3304221.3319732},
  urldate = {2023-10-12},
  abstract = {Questioning is a learning activity that can promote the use of critical thinking skills, where thinking processes are required to answer a posed question. In this paper, we map instructional question types to Bloom's Taxonomy--a classification of critical thinking skills required for cognition--to form a framework for educators to construct learning activities through questioning. The preliminary instructional framework is applied to a question activity within a blended CS1 learning environment to support students in better understanding on how to solve a programming assignment. Our results show students meeting the desired Bloom's cognitive level when answering the question activity. Future research opportunities are presented to test the framework for upper-division CS courses and further explore the framework as an intervention for programming assignments.},
  isbn = {978-1-4503-6895-7},
  keywords = {bloom's,critical thinking skills,questions,teaching activity},
  file = {/Users/igormoreno/Zotero/storage/SYR2TEDT/Garcia et al. - 2019 - Instructional Framework for CS1 Question Activitie.pdf}
}

@inproceedings{garnerMyProgramCorrect2005,
  title = {My Program Is Correct but It Doesn't Run: A Preliminary Investigation of Novice Programmers' Problems},
  shorttitle = {My Program Is Correct but It Doesn't Run},
  booktitle = {Proceedings of the 7th {{Australasian}} Conference on {{Computing}} Education - {{Volume}} 42},
  author = {Garner, Sandy and Haden, Patricia and Robins, Anthony},
  year = {2005},
  month = jan,
  series = {{{ACE}} '05},
  pages = {173--180},
  publisher = {{Australian Computer Society, Inc.}},
  address = {{AUS}},
  urldate = {2021-01-08},
  abstract = {In this paper we describe an ongoing study of novice programmers. The aim is to record (as close as possible to) all of the problems encountered by students during the laboratory sessions of our introductory Java programming class. We discuss the tools and methods employed, in particular presenting the list of problem definitions which is used to classify students' problems. Data collected during 2003 are presented and discussed. The results are consistent with trends noted in the literature, and highlight the significance of both fundamental design issues and the procedural aspects of programming. Different problem distributions are observed for high and low performing students. An analysis of individual lab sessions can be useful for refining course materials and teaching practice.},
  isbn = {978-1-920682-24-8},
  keywords = {novice programming errors CS1},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/ATDVTKCN/Garner et al. - 2005 - My program is correct but it doesn't run a prelim.pdf}
}

@article{gelmanConservationAcquisitionProblem1969,
  title = {Conservation Acquisition: {{A}} Problem of Learning to Attend to Relevant Attributes},
  shorttitle = {Conservation Acquisition},
  author = {Gelman, Rochel},
  year = {1969},
  month = apr,
  journal = {Journal of Experimental Child Psychology},
  volume = {7},
  number = {2},
  pages = {167--187},
  issn = {0022-0965},
  doi = {10.1016/0022-0965(69)90041-1},
  urldate = {2018-12-02},
  abstract = {Five-year-old children who failed on conservation tests of length, number, mass, and liquid amount were given discrimination learning set (LS) training on length and number tasks. Posttests of conservation showed near perfect specific (length and number), and approximately 60\% nonspecific (mass and liquid amount) transfer of training. This effect was durable as measured 2\textendash 3 weeks later. Analyses of LS learning results and the effects of other training conditions support the hypothesis that young children fail to conserve because of inattention to relevant quantitative relationships and attention to irrelevant features in classical conservation tests.},
  file = {/Users/igormoreno/Zotero/storage/L4JHEURD/Gelman - 1969 - Conservation acquisition A problem of learning to.pdf;/Users/igormoreno/Zotero/storage/SU3G6CH9/0022096569900411.html}
}

@incollection{gentnerFlowingWatersTeeming2014,
  title = {Flowing {{Waters}} or {{Teeming Crowds}}: {{Mental Models}} of {{Electricity}}},
  shorttitle = {Flowing {{Waters}} or {{Teeming Crowds}}},
  booktitle = {Mental {{Models}}},
  editor = {Gentner, Dedre and Stevens, Albert L.},
  year = {2014},
  month = jan,
  edition = {0},
  pages = {107--138},
  publisher = {{Psychology Press}},
  doi = {10.4324/9781315802725-10},
  urldate = {2021-10-12},
  isbn = {978-1-315-80272-5},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/CLG7WD5T/Gentner and Stevens - 2014 - Flowing Waters or Teeming Crowds Mental Models of.pdf}
}

@article{gentnerLearningTransferGeneral2004,
  title = {Learning and {{Transfer}}: {{A General Role}} for {{Analogical Encoding}}},
  shorttitle = {Learning and {{Transfer}}},
  author = {Gentner, Dedre and Loewenstein, Jeffrey and Thompson, Leigh},
  year = {2004},
  month = mar,
  journal = {J Educ Psychol},
  volume = {95},
  doi = {10.1037/0022-0663.95.2.393},
  abstract = {this article should be addressed to Dedre Gentner, Department of Psychology, Northwestern University, Evanston, Illinois 60208. E-mail: gentner@northwestern.edu Journal of Educational Psychology Copyright 2003 by the American Psychological Association, Inc. 2003, Vol. 95, No. 2, 393--408 0022-0663/03/\$12.00 DOI: 10.1037/0022-0663.95.2.393 393 plified the same probability principle (i.e., their structure was the same). Gentner, Rattermann, and Forbus (1993) found similar results in an investigation of how people remember prose passages (brief stories about, for example, a hunter shooting a hawk). They asked participants to read stories in an initial session and then, a week later, to read new stories and write down any initial stories that they were reminded of while reading the new stories. As in Ross's (1984) study, remindings that bore surface similarities (i.e., another story about a hunter) far outnumbered remindings that were structurally similar (i.e., another story about attacking). Gentner and colleagues took the research a step further and asked the participants to judge the quality of the match (i.e., whether one could profitably be used to draw inferences about the other) between pairs of the same stories. Structurally similar pairs were judged to be of higher quality than the surface-similar pairs, thus showing a very different pattern from their actual remindings. If people are directly comparing two examples, they probably can appreciate structural similarities, but if they are presented with just one example, they are far more likely to recall a prior example on the basis of surface similarities than structural similarities},
  file = {/Users/igormoreno/Zotero/storage/X2N64N9U/Gentner et al - 2004 - Learning and Transfer.pdf}
}

@article{gentnerMetaphorStructureMapping1988,
  title = {Metaphor as {{Structure Mapping}}: {{The Relational Shift}}},
  shorttitle = {Metaphor as {{Structure Mapping}}},
  author = {Gentner, Dedre},
  year = {1988},
  journal = {Child Development},
  volume = {59},
  number = {1},
  eprint = {1130388},
  eprinttype = {jstor},
  pages = {47--59},
  publisher = {{[Wiley, Society for Research in Child Development]}},
  issn = {0009-3920},
  doi = {10.2307/1130388},
  urldate = {2023-01-22},
  abstract = {The goal of this research is to clarify the development of metaphor by using structure-mapping theory to make distinctions among kinds of metaphors. In particular, it is proposed that children can understand metaphors based on shared object attributes before those based on shared relational structure. This predicts (1) early ability to interpret metaphors based on shared attributes, (2) a developmental increase in ability to interpret metaphors based on shared relational structure, and (3) a shift from primarily attributional to primarily relational interpretations for metaphors that can be understood in either way. 2 experiments were performed to test these claims. There were 3 kinds of metaphors, varying in whether the shared information forming the basis for the interpretation was attributional, relational, or both. In Experiment 1, children aged 5-6 and 9-10 and adults produced interpretations of the 3 types of metaphors. The attributionality and relationality of their interpretations were scored by independent judges. In Experiment 2, children aged 4-5 and 7-8 and adults chose which of 2 interpretations-relational or attributional-of a metaphor they preferred. In both experiments, relational responding increased significantly with age, but attributional responding did not. These results indicate a developmental shift toward a focus on relational structure in metaphor interpretation.},
  file = {/Users/igormoreno/Zotero/storage/5WKJNU6D/Gentner - 1988 - Metaphor as Structure Mapping.pdf}
}

@article{gentnerStructuremappingTheoreticalFramework1983,
  title = {Structure-Mapping: {{A}} Theoretical Framework for Analogy},
  shorttitle = {Structure-Mapping},
  author = {Gentner, Dedre},
  year = {1983},
  month = apr,
  journal = {Cognitive Science},
  volume = {7},
  number = {2},
  pages = {155--170},
  issn = {0364-0213},
  doi = {10.1016/S0364-0213(83)80009-3},
  urldate = {2020-06-23},
  abstract = {A theory of analogy must describe how the meaning of an analogy is derived from the meanings of its parts. In the structure-mapping theory, the interpretation rules are characterized as implicit rules for mapping knowledge about a base domain into a target domain. Two important features of the theory are (a) the rules depend only on syntactic properties of the knowledge representation, and not on the specific content of the domains; and (b) the theoretical framework allows analogies to be distinguished cleanly from literal similarity statements, applications of abstractions, and other kinds of comparisons. Two mapping principles are described: (a) Relations between objects, rather than attributes of objects, are mapped from base to target; and (b) The particular relations mapped are determined by systematicity, as defined by the existence of higher-order relations.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/2CVGLBPZ/Gentner - 1983 - Structure-mapping A theoretical framework for ana.PDF;/Users/igormoreno/Zotero/storage/3REX4XGT/S0364021383800093.html}
}

@article{georgeEROSIVisualisingRecursion2000,
  title = {{{EROSI}}\textemdash Visualising Recursion and Discovering New Errors},
  author = {George, Carlisle E.},
  year = {2000},
  journal = {ACM SIGCSE Bulletin},
  volume = {32},
  number = {1},
  pages = {305--309},
  publisher = {{ACM New York, NY, USA}},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/7WTML34S/George - 2000 - EROSI—visualising recursion and discovering new er.pdf;/Users/igormoreno/Zotero/storage/P4KF8YW4/331795.html}
}

@inproceedings{georgeExperiencesNovicesImportance2000,
  title = {Experiences with {{Novices}}: {{The Importance}} of {{Graphical Representations}} in {{Supporting Mental Models}}},
  booktitle = {12th {{Workshop}} of the {{Psychology}} of {{Programming Interest Group}}},
  author = {George, Carlisle E},
  year = {2000},
  month = apr,
  pages = {7},
  address = {{Cozenza, Italy}},
  abstract = {Recursion is an important problem solving technique used in programming. It is also a highly unfamiliar mental activity and many computing novices have difficult understanding recursion and applying recursive techniques in problem solving. Research studies have concluded that novices and experts differ in their mental models of recursion. Novices seem to possess various inadequate models of recursion especially the iterative or loop model. This paper examines whether novices who are aided in acquiring an expert's mental model of recursion (the copies model) can effectively use this model in evaluating recursive algorithms. Results of a study indicated that a large percentage of novices who had previously demonstrated an understanding of the copies model (using explicit diagrammatic traces) failed do so when not using diagrammatic traces. In fact, they appeared to demonstrate evidence for the incorrect iterative or loop model when trying to mentally evaluate recursive programs. The results provide evidence that mental models are unstable and that graphical representations are a very necessary aid to retrieval of novices' mental models. This suggests that the teaching of recursion may be best facilitated by teaching students how to simulate the execution of a recursive algorithm using diagrammatic traces.},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/KLWH8QSE/George - 2000 - Experiences with Novices The Importance of Graphi.pdf}
}

@inproceedings{georgestinyShapeGrammarsGenerative1971,
  title = {Shape {{Grammars}} and the {{Generative Specification}} of {{Painting}} and {{Sculpture}}},
  booktitle = {{{IFIP Congress}}, {{Information Processing}} 71},
  author = {{George Stiny} and {James Gips}},
  year = {1971},
  pages = {1460--1465},
  abstract = {A method of shape generation using shape grammars which take shape as primitive and have shape-specific rules is pre- sented. A formalism for the complete, generative specifica- tion of a class of non-representational, geometric paintings or sculptures is defined which has shape grammars as its structural component. Paintings are material representations of two-dimensional shapes generated by shape grammars, sculptures of three-dimensional shapes. Implications for aesthetics and design theory in the visual arts are discussed. Aesthetics is considered in terms of specificational simplicity and visual complexity. In design based on generative specifications, the artist chooses structural and material relationships and then determines algorithmically the resulting works of art.},
  file = {/Users/igormoreno/Zotero/storage/5SSEMA8U/Shape_Grammars_and_the_Generative_Specification_o.pdf}
}

@article{gerjetsCanLearningMolar2006,
  title = {Can Learning from Molar and Modular Worked Examples Be Enhanced by Providing Instructional Explanations and Prompting Self-Explanations?},
  author = {Gerjets, Peter and Scheiter, Katharina and Catrambone, Richard},
  year = {2006},
  month = apr,
  journal = {Learning and Instruction},
  series = {Recent {{Worked Examples Research}}: {{Managing Cognitive Load}} to {{Foster Learning}} and {{Transfer}}},
  volume = {16},
  number = {2},
  pages = {104--121},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2006.02.007},
  urldate = {2018-11-06},
  abstract = {In two experiments we explored how learning from traditional molar worked-out examples\textemdash focusing on problem categories and their associated overall solution procedures\textemdash as well as from more efficient modular worked-out examples\textemdash where intrinsic cognitive load is reduced by breaking down complex solutions into smaller meaningful solution elements\textemdash can be further enhanced. Instructional explanations or self-explanation prompts were administered to increase germane cognitive load. However, both interventions were not effective for learning and prompting for self-explanations even impaired learning with modular examples. In the latter case, prompting might have forced learners to process redundant information, which they had already sufficiently understood.},
  keywords = {Cognitive load theory,Cognitive skill acquisition,Modular examples,Self-explanations,Worked-out examples},
  file = {/Users/igormoreno/Zotero/storage/WDHDNHD7/Gerjets et al - 2006 - Can learning from molar and modular worked examples be enhanced by providing.pdf;/Users/igormoreno/Zotero/storage/VXRKMSNZ/S0959475206000144.html}
}

@article{gharibTestAnxietyPerformance2012,
  title = {Test {{Anxiety}} and {{Performance}} on {{Open Book}} and {{Cheat Sheet Exams}} in {{Introductory Psychology}}},
  author = {Gharib, Afshin and Phillips, William},
  year = {2012},
  volume = {53},
  number = {1},
  pages = {4},
  abstract = {The differences between cheat sheet and open book exams were examined in introductory psychology classes. A total of 222 students enrolled in 5 sections of Introduction to Psychology participated in this study. Exam types were counterbalanced across sections. Students were given either cheat sheet or open book exams, and completed a pretest measure of test anxiety and study time. While students did slightly better on open book exams than on cheat sheet exams, exam scores were positively correlated, and students had lower levels of anxiety when taking open book exams compared to cheat sheet exams. Students also reported studying less for open book exams. The decision of what exam type to use depends on a tradeoff of student performance, anxiety levels, and effort.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/ZELLMVTL/Gharib and Phillips - 2012 - Test Anxiety and Performance on Open Book and Cheat Sheet Exams in Introductory.pdf}
}

@incollection{ghoshAdaptiveScaffoldingBlockBased2022,
  title = {Adaptive {{Scaffolding}} in {{Block-Based Programming}} via {{Synthesizing New Tasks}} as {{Pop Quizzes}}},
  booktitle = {Artificial {{Intelligence}} in {{Education}}},
  author = {Ghosh, Ahana and Tschiatschek, Sebastian and Devlin, Sam and Singla, Adish},
  editor = {Rodrigo, Maria Mercedes and Matsuda, Noburu and Cristea, Alexandra I. and Dimitrova, Vania},
  year = {2022},
  volume = {13355},
  pages = {28--40},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-031-11644-5_3},
  urldate = {2023-03-22},
  abstract = {Block-based programming environments are increasingly used to introduce computing concepts to beginners. However, novice students often struggle in these environments, given the conceptual and open-ended nature of programming tasks. To effectively support a student struggling to solve a given task, it is important to provide adaptive scaffolding that guides the student towards a solution. We introduce a scaffolding framework based on pop quizzes presented as multi-choice programming tasks. To automatically generate these pop quizzes, we propose a novel algorithm, PQUIZSYN. More formally, given a reference task with a solution code and the student's current attempt, PQUIZSYN synthesizes new tasks for pop quizzes with the following features: (a) Adaptive (i.e., individualized to the student's current attempt), (b) Comprehensible (i.e., easy to comprehend and solve), and (c) Concealing (i.e., do not reveal the solution code). Our algorithm synthesizes these tasks using techniques based on symbolic reasoning and graph-based code representations. We show that our algorithm can generate hundreds of pop quizzes for different student attempts on reference tasks from Hour of Code: Maze Challenge [11] and Karel [9]. We assess the quality of these pop quizzes through expert ratings using an evaluation rubric. Further, we have built an online platform for practicing block-based programming tasks empowered via pop quiz based feedback, and report results from an initial user study.},
  isbn = {978-3-031-11643-8 978-3-031-11644-5},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/6UQXZB75/Ghosh et al. - 2022 - Adaptive Scaffolding in Block-Based Programming vi.pdf}
}

@incollection{gibbonsCalculatingFunctionalPrograms2002,
  title = {Calculating {{Functional Programs}}},
  booktitle = {Algebraic and {{Coalgebraic Methods}} in the {{Mathematics}} of {{Program Construction}}: {{International Summer School}} and {{Workshop Oxford}}, {{UK}}, {{April}} 10\textendash 14, 2000 {{Revised Lectures}}},
  author = {Gibbons, Jeremy},
  editor = {Backhouse, Roland and Crole, Roy and Gibbons, Jeremy},
  year = {2002},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {151--203},
  publisher = {{Springer}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/3-540-47797-7_5},
  urldate = {2020-05-07},
  abstract = {Functional programs are merely equations; they may be manipulated by straightforward equational reasoning. In particular, one can use this style of reasoning to calculate programs, in the same way that one calculates numeric values in arithmetic. Many useful theorems for such reasoning derive from an algebraic view of programs, built around datatypes and their operations. Traditional algebraic methods concentrate on initial algebras, constructors, and values; dual co-algebraic methods concentrate on final co-algebras, destructors, and processes. Both methods are elegant and powerful; they deserve to be combined.},
  isbn = {978-3-540-47797-6},
  langid = {english},
  keywords = {Category Theory,Denotational Semantic,Functional Program,Operational Semantic,Universal Property},
  annotation = {00075},
  file = {/Users/igormoreno/Zotero/storage/IYN887S2/Gibbons - 2002 - Calculating Functional Programs.pdf}
}

@article{gibbonsDerivingTidyDrawings1995,
  title = {Deriving Tidy Drawings of Trees},
  author = {Gibbons, Jeremy},
  year = {1995},
  month = may,
  pages = {29},
  abstract = {The tree-drawing problem is to produce a `tidy' mapping of elements of a tree to points in the plane. In this paper, we derive an e cient algorithm for producing tidy drawings of trees. The speci cation, the starting point for the derivations, consists of a collection of intuitively appealing criteria satis ed by tidy drawings. The derivation shows constructively that these criteria completely determine the drawing. Indeed, the criteria completely determine a simple but ine cient algorithm for drawing a tree, which can be transformed into an e cient algorithm using just standard techniques and a small number of inventive steps.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/NT4WLFLI/Gibbons - 1995 - Deriving tidy drawings of trees.pdf}
}

@inproceedings{gibbonsDesignPatternsHigherorder2006,
  ids = {gibbonsDesignPatternsHigherorder2006a,gibbonsDesignPatternsHigherorder2006b},
  title = {Design Patterns as Higher-Order Datatype-Generic Programs},
  booktitle = {Proceedings of the 2006 {{ACM SIGPLAN}} Workshop on {{Generic}} Programming},
  author = {Gibbons, Jeremy},
  year = {2006},
  month = sep,
  series = {{{WGP}} '06},
  pages = {1--12},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1159861.1159863},
  urldate = {2021-03-01},
  abstract = {Design patterns are reusable abstractions in object-oriented software. However, using current mainstream programming languages, these elements can only be expressed extra-linguistically: as prose, pictures, and prototypes. We believe that this is not inherent in the patterns themselves, but evidence of a lack of expressivity in the languages of today. We expect that, in the languages of the future, the code parts of design patterns will be expressible as reusable library components. Indeed, we claim that the languages of tomorrow will suffice; the future is not far away. All that is needed, in addition to commonly-available features, are higher-order and datatype-generic constructs; these features are already or nearly available now. We argue the case by presenting higher-order datatype-generic programs capturing ORIGAMI, a small suite of patterns for recursive data structures.},
  isbn = {978-1-59593-492-5},
  keywords = {design patterns,folds,functional programming,generic programming,higher-order functions,unfolds},
  annotation = {00048},
  file = {/Users/igormoreno/Zotero/storage/DCMG9R9X/Gibbons - 2006 - Design patterns as higher-order datatype-generic p.pdf;/Users/igormoreno/Zotero/storage/V8C8X5JN/Gibbons - 2006 - Design patterns as higher-order datatype-generic p.pdf;/Users/igormoreno/Zotero/storage/VVGUZ9XL/Gibbons - 2006 - Design patterns as higher-order datatype-generic p.pdf}
}

@article{gibbonsHowDesignCoprograms2021,
  title = {How to Design Co-Programs},
  author = {Gibbons, Jeremy},
  year = {2021},
  journal = {Journal of Functional Programming},
  volume = {31},
  pages = {e15},
  issn = {0956-7968, 1469-7653},
  doi = {10.1017/S0956796821000113},
  urldate = {2022-11-28},
  abstract = {The observation that program structure follows data structure is a key lesson in introductory programming: good hints for possible program designs can be found by considering the structure of the data concerned. In particular, this lesson is a core message of the influential textbook ``How to Design Programs'' by Felleisen, Findler, Flatt, and Krishnamurthi. However, that book discusses using only the structure of input data for guiding program design, typically leading towards structurally recursive programs. We argue that novice programmers should also be taught to consider the structure of output data, leading them also towards structurally corecursive programs.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/WH64T735/Gibbons - 2021 - How to design co-programs.pdf}
}

@inproceedings{gibbonsJustItSimple2011,
  title = {Just Do It: Simple Monadic Equational Reasoning},
  shorttitle = {Just Do It},
  booktitle = {Proceedings of the 16th {{ACM SIGPLAN}} International Conference on {{Functional}} Programming},
  author = {Gibbons, Jeremy and Hinze, Ralf},
  year = {2011},
  month = sep,
  series = {{{ICFP}} '11},
  pages = {2--14},
  publisher = {{Association for Computing Machinery}},
  address = {{Tokyo, Japan}},
  doi = {10.1145/2034773.2034777},
  urldate = {2020-05-07},
  abstract = {One of the appeals of pure functional programming is that it is so amenable to equational reasoning. One of the problems of pure functional programming is that it rules out computational effects. Moggi and Wadler showed how to get round this problem by using monads to encapsulate the effects, leading in essence to a phase distinction - a pure functional evaluation yielding an impure imperative computation. Still, it has not been clear how to reconcile that phase distinction with the continuing appeal of functional programming; does the impure imperative part become inaccessible to equational reasoning? We think not; and to back that up, we present a simple axiomatic approach to reasoning about programs with computational effects.},
  isbn = {978-1-4503-0865-6},
  keywords = {algebraic specification,equational reasoning,lawvere theories,monads},
  annotation = {00082},
  file = {/Users/igormoreno/Zotero/storage/Q7DN7SI4/Gibbons and Hinze - 2011 - Just do it simple monadic equational reasoning.pdf}
}

@article{gibbonsMetamorphismsStreamingRepresentationchangers2007,
  title = {Metamorphisms: {{Streaming}} Representation-Changers},
  shorttitle = {Metamorphisms},
  author = {Gibbons, Jeremy},
  year = {2007},
  month = mar,
  journal = {Science of Computer Programming},
  volume = {65},
  number = {2},
  pages = {108--139},
  issn = {0167-6423},
  doi = {10.1016/j.scico.2006.01.006},
  urldate = {2022-01-06},
  abstract = {Unfolds generate data structures, and folds consume them. A hylomorphism is a fold after an unfold, generating then consuming a virtual data structure. A metamorphism is the opposite composition, an unfold after a fold; typically, it will convert from one data representation to another. In general, metamorphisms are less interesting than hylomorphisms: there is no automatic fusion to deforest the intermediate virtual data structure. However, under certain conditions fusion is possible: some of the work of the unfold can be done before all of the work of the fold is complete. This permits streaming metamorphisms, and among other things allows conversion of infinite data representations. We present a theory of metamorphisms and outline some examples.},
  keywords = {Conversion,Data representations,Folds,Fusion,Online algorithms,Streaming,Unfolds},
  file = {/Users/igormoreno/Zotero/storage/DRRNUWZ4/Gibbons - 2007 - Metamorphisms Streaming representation-changers.pdf;/Users/igormoreno/Zotero/storage/IGCELEHM/Gibbons - Metamorphisms Streaming Representation-Changers.pdf}
}

@incollection{gibbonsOrigamiProgramming2003,
  title = {Origami Programming},
  booktitle = {The {{Fun}} of {{Programming}}},
  author = {Gibbons, Jeremy},
  editor = {Gibbons, Jeremy and {de Moor}, Oege},
  year = {2003},
  pages = {41--60},
  publisher = {{Macmillan Education UK}},
  address = {{London}},
  doi = {10.1007/978-1-349-91518-7_3},
  urldate = {2021-05-03},
  isbn = {978-0-333-99285-2 978-1-349-91518-7},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/ZIXYZ7GB/Gibbons - 2003 - Origami programming.pdf}
}

@book{gibbonsOrigamiProgramming2003a,
  title = {Origami {{Programming}}},
  author = {Gibbons, Jeremy},
  year = {2003},
  urldate = {2020-08-18},
  abstract = {One style of functional programming is based purely on recursive equations. Such equations are easy to explain, and adequate for any computational purpose, but hard to use well as programs get bigger and more complicated. In a sense, recursive equations are the `assembly language' of functional programming, and direct recursion the {$<$}em{$>$}goto{$<$}/em{$>$}. As computer scientists discovered in the 1960s with structured programming, it is better to identify common patterns of use of such too-powerful tools, and capture these patterns as new constructions and abstractions. In functional programming, in contrast to imperative programming, we can often express the new constructions as higher-order operations within the language, whereas the move from unstructured to structured programming entailed the development of new languages. \textbackslash par In this chapter we will look at folds and unfolds as abstractions. In a precise technical sense, folds and unfolds are the natural patterns of computation over recursive datatypes; unfolds generate data structures and folds consume them. Functional programmers are very familiar with the {$<$}em{$>$}foldr{$<$}/em{$>$} function on lists, and its directional dual {$<$}em{$>$}foldl{$<$}/em{$>$}; they are gradually coming to terms with the generalisation to folds on other datatypes. The computational duals, unfolds, are still rather unfamiliar; we hope to show here that they are no more complicated than, and just as useful as, folds, and to promote a style of programming based on these and similar recursion patterns.},
  isbn = {978-1-4039-0772-1},
  langid = {british},
  annotation = {00032},
  file = {/Users/igormoreno/Zotero/storage/R8YTJZ8M/Gibbons - 2003 - Origami Programming.pdf;/Users/igormoreno/Zotero/storage/AYQA7Z7G/publication2335-abstract.html}
}

@article{gibbonsSchoolSquiggolHistory2020,
  title = {The {{School}} of {{Squiggol}}: {{A History}} of the {{Bird}}\&\#x2212;{{Meertens Formalism}}},
  shorttitle = {The {{School}} of {{Squiggol}}},
  author = {Gibbons, Jeremy},
  year = {2020},
  volume = {12233},
  doi = {10.1007/978-3-030-54997-8_2},
  urldate = {2023-10-17},
  abstract = {The Bird-Meertens Formalism, colloquially known as "Squiggol", is a calculus for program transformation by equational reasoning in a function style, developed by Richard Bird and Lambert Meertens and other members of IFIP Working Group 2.1 for about two decades from the mid 1970s. One particular characteristic of the development of the Formalism is fluctuating emphasis on novel 'squiggly' notation: sometimes favouring notational exploration in the quest for conciseness and precision, and sometimes reverting to simpler and more rigid notational conventions in the interests of accessibility. This paper explores that historical ebb and flow.},
  langid = {british},
  file = {/Users/igormoreno/Zotero/storage/9DFTSX87/Gibbons - 2020 - The School of Squiggol A History of the Bird&#x22.pdf}
}

@inproceedings{gibbonsUnderappreciatedUnfold1998,
  title = {The Under-Appreciated Unfold},
  booktitle = {Proceedings of the Third {{ACM SIGPLAN}} International Conference on {{Functional}} Programming},
  author = {Gibbons, Jeremy and Jones, Geraint},
  year = {1998},
  month = sep,
  series = {{{ICFP}} '98},
  pages = {273--279},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/289423.289455},
  urldate = {2022-01-06},
  abstract = {Folds are appreciated by functional programmers. Their dual, unfolds, are not new, but they are not nearly as well appreciated. We believe they deserve better. To illustrate, we present (indeed, we calculate) a number of algorithms for computing the breadth-first traversal of a tree. We specify breadth-first traversal in terms of level-order traversal, which we characterize first as a fold. The presentation as a fold is simple, but it is inefficient, and removing the inefficiency makes it no longer a fold. We calculate a characterization as an unfold from the characterization as a fold; this unfold is equally clear, but more efficient. We also calculate a characterization of breadth-first traversal directly as an unfold; this turns out to be the 'standard' queue-based algorithm.},
  isbn = {978-1-58113-024-9},
  keywords = {anamorphism,breadth-first,co-induction,fold,functional programing,level-order,program calculation,traversal,unfold},
  file = {/Users/igormoreno/Zotero/storage/LH2Q2RM8/Gibbons and Jones - 1998 - The under-appreciated unfold.pdf}
}

@article{gibbsSoftwareEngineeringComputer1991,
  title = {Software Engineering and Computer Science: The Impending Split?},
  shorttitle = {Software Engineering and Computer Science},
  author = {Gibbs, Norman E.},
  year = {1991},
  month = jan,
  journal = {Education and Computing},
  volume = {7},
  number = {1-2},
  pages = {111--117},
  issn = {01679287},
  doi = {10.1016/S0167-9287(05)80087-1},
  urldate = {2018-11-06},
  abstract = {A tension is emerging in academia between those who view computing as a science and those who view computing as an emerging engineering discipline. By the year 2000, computing may separate into two academic disciplines, software engineering and computer science, paralleling the split of computer science from mathematics in the late 1960s and early 1970s. Educators must recognize the true needs of the practitioner community, or risk fragmenting and weakening the still new and rapidly evolving field of computing. Actions today will determine if computing will compete with or be subsumed by software engineering, rather than complement it.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/M6AQJ282/Gibbs - 1991 - Software engineering and computer science the imp.pdf}
}

@article{gibsonLinguisticComplexityLocality1998,
  title = {Linguistic Complexity: Locality of Syntactic Dependencies},
  shorttitle = {Linguistic Complexity},
  author = {Gibson, Edward},
  year = {1998},
  month = aug,
  journal = {Cognition},
  volume = {68},
  number = {1},
  pages = {1--76},
  issn = {0010-0277},
  doi = {10.1016/S0010-0277(98)00034-1},
  urldate = {2021-10-10},
  abstract = {This paper proposes a new theory of the relationship between the sentence processing mechanism and the available computational resources. This theory \textendash{} the Syntactic Prediction Locality Theory (SPLT) \textendash{} has two components: an integration cost component and a component for the memory cost associated with keeping track of obligatory syntactic requirements. Memory cost is hypothesized to be quantified in terms of the number of syntactic categories that are necessary to complete the current input string as a grammatical sentence. Furthermore, in accordance with results from the working memory literature both memory cost and integration cost are hypothesized to be heavily influenced by locality (1) the longer a predicted category must be kept in memory before the prediction is satisfied, the greater is the cost for maintaining that prediction; and (2) the greater the distance between an incoming word and the most local head or dependent to which it attaches, the greater the integration cost. The SPLT is shown to explain a wide range of processing complexity phenomena not previously accounted for under a single theory, including (1) the lower complexity of subject-extracted relative clauses compared to object-extracted relative clauses, (2) numerous processing overload effects across languages, including the unacceptability of multiply center-embedded structures, (3) the lower complexity of cross-serial dependencies relative to center-embedded dependencies, (4) heaviness effects, such that sentences are easier to understand when larger phrases are placed later and (5) numerous ambiguity effects, such as those which have been argued to be evidence for the Active Filler Hypothesis.},
  langid = {english},
  keywords = {Computational resources,Linguistic complexity,Sentence processing,Syntactic dependency}
}

@article{gibsonPerceptualLearningDifferentiation1955,
  title = {Perceptual Learning: {{Differentiation}} or Enrichment?},
  shorttitle = {Perceptual Learning},
  author = {Gibson, James J. and Gibson, Eleanor J.},
  year = {1955},
  journal = {Psychological Review},
  volume = {62},
  number = {1},
  pages = {32--41},
  publisher = {{American Psychological Association}},
  address = {{US}},
  issn = {1939-1471},
  doi = {10.1037/h0048826},
  abstract = {The authors entertain the hypothesis that the flux of stimulation at receptors yields all of the information anyone needs about the environment. In the theory, perception gets richer in differential responses, not in images. It is progressively in greater correspondance with stimulation, not in less. Previous literature as well as an illustrative experiment are brought to bear upon the notion. (PsycINFO Database Record (c) 2016 APA, all rights reserved)},
  keywords = {Perceptual Motor Learning,Stimulation},
  file = {/Users/igormoreno/Zotero/storage/QJAHLFDJ/Gibson and Gibson - 1955 - Perceptual learning.pdf;/Users/igormoreno/Zotero/storage/TETHLTL3/Gibson and Gibson - 1955 - Perceptual learning Differentiation or enrichment.pdf;/Users/igormoreno/Zotero/storage/QCY48SXE/1955-08374-001.html}
}

@article{gickAnalogicalProblemSolving1980,
  title = {Analogical Problem Solving},
  author = {Gick, Mary L. and Holyoak, Keith J.},
  year = {1980},
  month = jul,
  journal = {Cognitive Psychology},
  volume = {12},
  number = {3},
  pages = {306--355},
  issn = {0010-0285},
  doi = {10.1016/0010-0285(80)90013-4},
  urldate = {2020-06-23},
  abstract = {The use of an analogy from a semantically distant domain to guide the problemsolving process was investigated. The representation of analogy in memory and processes involved in the use of analogies were discussed theoretically and explored in five experiments. In Experiment I oral protocols were used to examine the processes involved in solving a problem by analogy. In all experiments subjects who first read a story about a military problem and its solution tended to generate analogous solutions to a medical problem (Duncker's ``radiation problem''), provided they were given a hint to use the story to help solve the problem. Transfer frequency was reduced when the problem presented in the military story was substantially disanalogous to the radiation problem, even though the solution illustrated in the story corresponded to an effective radiation solution (Experiment II). Subjects in Experiment III tended to generate analogous solutions to the radiation problem after providing their own solutions to the military problem. Subjects were able to retrieve the story from memory and use it to generate an analogous solution, even when the critical story had been memorized in the context of two distractor stories (Experiment IV). However, when no hint to consider the story was given, frequency of analogous solutions decreased markedly. This decrease in transfer occurred when the story analogy was presented in a recall task along with distractor stories (Experiment IV), when it was presented alone, and when it was presented in between two attempts to solve the problem (Experiment V). Component processes and strategic variations in analogical problem solving were discussed. Issues related to noticing analogies and accessing them in memory were also examined, as was the relationship of analogical reasoning to other cognitive tasks.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/6TI4IWMG/Gick and Holyoak - 1980 - Analogical problem solving.pdf;/Users/igormoreno/Zotero/storage/JQVHFKM8/0010028580900134.html}
}

@article{gickSchemaInductionAnalogical1983,
  title = {Schema Induction and Analogical Transfer},
  author = {Gick, Mary L. and Holyoak, Keith J.},
  year = {1983},
  month = jan,
  journal = {Cognitive Psychology},
  volume = {15},
  number = {1},
  pages = {1--38},
  issn = {0010-0285},
  doi = {10.1016/0010-0285(83)90002-6},
  urldate = {2018-12-02},
  abstract = {An analysis of the process of analogical thinking predicts that analogies will be noticed on the basis of semantic retrieval cues and that the induction of a general schema from concrete analogs will facilitate analogical transfer. These predictions were tested in experiments in which subjects first read one or more stories illustrating problems and their solutions and then attempted to solve a disparate but analogous transfer problem. The studies in Part I attempted to foster the abstraction of a problem schema from a single story analog by means of summarization instructions, a verbal statement of the underlying principle, or a diagrammatic representation of it. None of these devices achieved a notable degree of sucess. In contrast, the experiments in Part II demonstrated that if two prior analogs were given, subjects often derived a problem schema as an incidental product of describing the similarities of the analogs. The quality of the induced schema was highly predictive of subsequent transfer performance. Furthermore, the verbal statements and diagrams that had failed to facilitate transfer from one analog proved highly beneficial when paired with two. The function of examples in learning was discussed in light of the present study.},
  file = {/Users/igormoreno/Zotero/storage/FVKBIEX8/Gick and Holyoak - 1983 - Schema induction and analogical transfer.pdf;/Users/igormoreno/Zotero/storage/A553F48Q/0010028583900026.html}
}

@article{gilmoreComprehensionRecallMiniature1984,
  title = {Comprehension and Recall of Miniature Programs},
  author = {Gilmore, D. J. and Green, T. R. G.},
  year = {1984},
  month = jul,
  journal = {International Journal of Man-Machine Studies},
  volume = {21},
  number = {1},
  pages = {31--48},
  issn = {0020-7373},
  doi = {10.1016/S0020-7373(84)80037-1},
  urldate = {2018-12-02},
  abstract = {Differences in the comprehensibility of programming notations can arise because their syntax can make them cognitively unwieldy in a generalized way (Mayer, 1976), because all notations are translated into the same ``mental language`` but some are easier to translate than others (Shneiderman \& Mayer, 1979), or because the mental operations demanded by certain tasks are harder in some notations than in others (Green, 1977). The first two hypotheses predict that the relative comprehensibility of two notations will be consistent across all tasks, whereas the mental operations hypothesis suggests that particular notations may be best suited to particular tasks. The present experiment used four notations and 40 non-programmers to test these hypotheses. Two of the notations were procedural and two were declarative, and one of each pair contained cues to declarative or procedural information, respectively. Different types of comprehension question were used (``sequential`` and ``circumstantial``); a mental operations analysis predicted that procedural languages would be ``matched'' with sequential questions, and declarative languages with circumstantial questions. Questions were answered first from the printed text, and then from recall. Subjects performed best on ``matched pairs'' of tasks and languages. Perceptually-based cues improved the performance on ``unmatched pairs'' better than non-perceptual cues when answering from the text, and both types of cues improved performance on ``unmatched pairs'' in the recall stage. These results support the mental operations explanation. They also show that the mental representation of a program preserves some features of the original notation; a comprehended program is not stored in a uniform ``mental language''.},
  annotation = {00190},
  file = {/Users/igormoreno/Zotero/storage/Q9CGHHGC/Gilmore and Green - 1984 - Comprehension and recall of miniature programs.pdf;/Users/igormoreno/Zotero/storage/ZVGCMXHW/S0020737384800371.html}
}

@article{gilsingDesignImplementationEvaluation2022,
  title = {Design, Implementation and Evaluation of the {{Hedy}} Programming Language},
  author = {Gilsing, Marleen and Pelay, Jes{\'u}s and Hermans, Felienne},
  year = {2022},
  month = dec,
  journal = {Journal of Computer Languages},
  volume = {73},
  pages = {101158},
  issn = {2590-1184},
  doi = {10.1016/j.cola.2022.101158},
  urldate = {2023-05-29},
  abstract = {Hedy is a programming language that implements the gradual programming approach in which the goal is to lower the syntax barrier by starting with a very simple language, and gradually adding both concepts and refining syntax. This paper describes the design and implementation of Hedy, as well as a first user study involving 39 children between the ages of 11 and age 14 who followed online lessons for six weeks. Based on lesson observations and a written survey filled out by the participants, we aim to understand the impact of using a gradual language. Our findings show that children appreciate the gradual nature of Hedy, find Hedy easy to learn and especially appreciate the power to control the difficulty of Hedy themselves. They also like and frequently use built-in educational features like example code snippets. Challenges of a gradual approach are the fact that commands sometimes change or overlap, and remembering commands and specific syntax remain a challenge. According to the participants, improvements could be made by making Hedy less sensitive to syntax errors, by improving error messages and by localizing keywords to the native language of children.},
  langid = {english},
  keywords = {Gradual programming,Grammars,K-12,Programming education,Programming languages},
  file = {/Users/igormoreno/Zotero/storage/JFDKK568/Gilsing et al. - 2022 - Design, implementation and evaluation of the Hedy .pdf;/Users/igormoreno/Zotero/storage/VZKDM6MB/S2590118422000557.html}
}

@inproceedings{ginatMultipleLevelsAbstraction2017,
  title = {Multiple {{Levels}} of {{Abstraction}} in {{Algorithmic Problem Solving}}},
  booktitle = {Proceedings of the 2017 {{ACM SIGCSE Technical Symposium}} on {{Computer Science Education}}  - {{SIGCSE}} '17},
  author = {Ginat, David and Blau, Yoav},
  year = {2017},
  pages = {237--242},
  publisher = {{ACM Press}},
  address = {{Seattle, Washington, USA}},
  doi = {10.1145/3017680.3017801},
  urldate = {2018-10-02},
  abstract = {The notion of abstraction repeatedly appears, in various ways, at all levels of computer science. It involves the aspects of leaving out details and comprehending concepts and mechanisms. It also involves the aspect of recognizing relationships between task elements. The latter aspect was not yet studied with respect to abstraction levels and algorithm design. We study it here. We analyze senior students' algorithmic solutions according to accepted interpretations of multiple abstraction levels, and offer guidelines for enhancing abstraction in students' algorithmics.},
  isbn = {978-1-4503-4698-6},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/CJ3XYGCM/Ginat and Blau - 2017 - Multiple Levels of Abstraction in Algorithmic Problem Solving.pdf}
}

@book{ginsbergEssentialsArtificialIntelligence1993,
  title = {Essentials of Artificial Intelligence},
  author = {Ginsberg, Matthew L.},
  year = {1993},
  publisher = {{Morgan Kaufmann Publishers}},
  address = {{San Mateo, Calif}},
  isbn = {978-1-55860-221-2},
  langid = {english},
  lccn = {Q335 .G55 1993},
  keywords = {Artificial intelligence},
  file = {/Users/igormoreno/Zotero/storage/5NP6X2YD/Ginsberg - 1993 - Essentials of artificial intelligence.pdf}
}

@misc{githubinc.2020GitHubEducation2020,
  title = {2020 {{GitHub Education Classroom Report}}},
  author = {{GitHub, Inc.}},
  year = {2020},
  journal = {2020 GitHub Education Classroom Report},
  urldate = {2023-04-18},
  howpublished = {https://education.github.com/classroom-report/2020},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/B6ZEVDKH/2020.html}
}

@misc{githubinc.GitHubActionsDocumentation2023,
  title = {{{GitHub Actions Documentation}}},
  author = {{GitHub, Inc.}},
  year = {2023},
  journal = {GitHub Actions Docs},
  urldate = {2023-04-18},
  abstract = {Automate, customize, and execute your software development workflows right in your repository with GitHub Actions. You can discover, create, and share actions to perform any job you'd like, including CI/CD, and combine actions in a completely customized workflow.},
  howpublished = {https://docs.github.com/en/rest/actions},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/WEM33RCB/actions.html}
}

@article{giunchigliaTheoryAbstraction1992,
  title = {A Theory of Abstraction},
  author = {Giunchiglia, Fausto and Walsh, Toby},
  year = {1992},
  month = oct,
  journal = {Artificial Intelligence},
  volume = {57},
  number = {2},
  pages = {323--389},
  issn = {0004-3702},
  doi = {10.1016/0004-3702(92)90021-O},
  urldate = {2018-12-02},
  abstract = {Informally, abstraction can be described as the process of mapping a representation of a problem onto a new representation. The aim of this paper is to propose the beginnings of a theory of reasoning with abstraction which captures and generalizes most previous work in the area. The theory allows us to study the properties of abstraction mappings and provides the foundations for the mechanization of abstraction inside an abstract proof checker.},
  file = {/Users/igormoreno/Zotero/storage/BPFHWG5P/Giunchiglia and Walsh - 1992 - A theory of abstraction.pdf;/Users/igormoreno/Zotero/storage/262CLRN6/000437029290021O.html}
}

@article{glogger-freyLearningDirectInstruction2017,
  title = {Learning from Direct Instruction: {{Best}} Prepared by Several Self-Regulated or Guided Invention Activities?},
  shorttitle = {Learning from Direct Instruction},
  author = {{Glogger-Frey}, Inga and Gaus, Katharina and Renkl, Alexander},
  year = {2017},
  month = oct,
  journal = {Learning and Instruction},
  series = {Bridging {{Cognitive Load}} and {{Self-Regulated Learning Research}}},
  volume = {51},
  pages = {26--35},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2016.11.002},
  urldate = {2018-11-06},
  abstract = {Learning from direct instruction can be enhanced by preparatory invention tasks: students invent an index that allows to differentiate a set of cases regarding important aspects (self-regulated). However, contradictory results have been found. As self-regulated activities often need practice, we tested whether the contradictory findings persist when students can practice inventing. We randomly assigned 99 eighth-grade students to two conditions (independent variable): they either invented twice (self-regulated; n~=~49) or worked through worked solutions of the two tasks (guided; n~=~50) before learning about ratios in physics from a lecture. Extraneous load, deep-structure recall, knowledge-gap perception, and self-efficacy were potential mediators. Transfer was the dependent measure. Guidance led to less extraneous load. However, self-regulation led to higher transfer because the students devoted more attention to the deep structure of the preparation tasks. Our findings suggest that\textemdash given some practice\textemdash self-regulated outperforms guided preparation for learning from direct instruction.},
  keywords = {Cognitive load,Invention activities,Physics education,Self-regulated preparation for learning,Worked examples},
  annotation = {00027},
  file = {/Users/igormoreno/Zotero/storage/KHIZKEE4/Glogger-Frey et al - 2017 - Learning from direct instruction.pdf;/Users/igormoreno/Zotero/storage/AGBL7RVZ/S095947521630216X.html}
}

@article{glucksbergDecisionsIgnoranceKnowing1981,
  title = {Decisions about Ignorance: {{Knowing}} That You Don't Know.},
  shorttitle = {Decisions about Ignorance},
  author = {Glucksberg, Sam and McCloskey, Michael},
  year = {1981},
  journal = {Journal of Experimental Psychology: Human Learning \& Memory},
  volume = {7},
  number = {5},
  pages = {311--325},
  issn = {0096-1515},
  doi = {10.1037/0278-7393.7.5.311},
  urldate = {2020-10-30},
  langid = {english},
  annotation = {00199},
  file = {/Users/igormoreno/Zotero/storage/AYZG2HA2/Glucksberg e McCloskey - 1981 - Decisions about ignorance Knowing that you don't .pdf}
}

@techreport{goldenbergGlossaryPDP11LOGO1975,
  title = {A {{Glossary}} of {{PDP11 LOGO Primitives}}},
  author = {Goldenberg, E. Paul},
  year = {1975},
  month = mar,
  number = {AIM-315a / LOGO Memo 16},
  institution = {{MIT}},
  urldate = {2022-01-12},
  abstract = {This glossary was written for the purpose of  providing a quick and concise yet accurate  description of the primitives and special  words and characters of the March 18, 1975  PDP 11 implementation of the LOGO languge.  Many entries include references to other  related words and/or examples of the use of  the primitive being described, but this is not  intended to replace the functions of a good  manual. For a more detailed and  comprehensive description of the language,  see the LOGO MANUAL, LOGO MEMO 7. The  description of each LOGO word includes the  work, itself, any arguments that the word may  require, the "type" of word it is, abbreviated  and alternate forms of the work, if any, and a  definition correct as the date of this glossary.  Word tupe is described on the first page and  an example of the formatt of the entries is  given below. In the appendix to this glossary  are sections about 1) LOGO words that take a  variable number of inputs, 2) infix operators,  3) editing characters, 4) special characters, 5)  special names, 6) decimal ascii code and  corresponding characters.},
  langid = {american},
  annotation = {Accepted: 2004-10-04T14:46:41Z},
  file = {/Users/igormoreno/Zotero/storage/AL6ZDTSE/Goldenberg - 1975 - A Glossary of PDP11 LOGO Primitives.pdf;/Users/igormoreno/Zotero/storage/QLGJCLX7/6229.html}
}

@article{goldmanExplorationsRelationshipsLearners2009,
  title = {Explorations of Relationships among Learners, Tasks, and Learning},
  author = {Goldman, Susan R.},
  year = {2009},
  month = oct,
  journal = {Learning and Instruction},
  series = {Cognitive Load in Interactive Knowledge Construction},
  volume = {19},
  number = {5},
  pages = {451--454},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2009.02.006},
  urldate = {2018-11-06},
  abstract = {Based on a critical re-analysis of cognitive load theory (CLT), Schnotz and K\"urschner identified the need for research on more sensitive ways of assessing learner characteristics, both prior to and during instruction, in order to understand learning processes and outcomes. One emergent theme of the papers in this special issue is that the ``same'' learning environment is differentially demanding and produces different results depending on characteristics of the learners, most importantly their knowledge in the task domain. These findings indicate that to optimize learning outcomes, theories of instructional design and learning need to be more adaptive and reflect the nuances of interactions among learners, tasks, and instructional supports.},
  keywords = {Instructional design,Knowledge effects,Learning},
  file = {/Users/igormoreno/Zotero/storage/ASKQXPXN/Goldman - 2009 - Explorations of relationships among learners, tasks, and learning.pdf;/Users/igormoreno/Zotero/storage/X652TQCR/S0959475209000139.html}
}

@inproceedings{goldmanIdentifyingImportantDifficult2008,
  title = {Identifying {{Important}} and {{Difficult Concepts}} in {{Introductory Computing Courses Using}} a {{Delphi Process}}},
  booktitle = {Proceedings of the 39th {{SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  author = {Goldman, Ken and Gross, Paul and Heeren, Cinda and Herman, Geoffrey and Kaczmarczyk, Lisa and Loui, Michael C. and Zilles, Craig},
  year = {2008},
  series = {{{SIGCSE}} '08},
  pages = {256--260},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1352135.1352226},
  urldate = {2018-10-22},
  abstract = {A Delphi process is a structured multi-step process that uses a group of experts to achieve a consensus opinion. We present the results of three Delphi processes to identify topics that are important and difficult in each of three introductory computing subjects: discrete math, programming fundamentals, and logic design. The topic rankings can be used to guide both the coverage of standardized tests of student learning (i.e., concept inventories) and can be used by instructors to identify what topics merit emphasis.},
  isbn = {978-1-59593-799-5},
  keywords = {concept inventory,curriculum,delphi,discrete math,logic design,programming fundamentals},
  file = {/Users/igormoreno/Zotero/storage/MWYZDRUB/Goldman et al - 2008 - Identifying Important and Difficult Concepts in Introductory Computing Courses.pdf}
}

@article{goldmanLearningComplexDomains2003,
  title = {Learning in Complex Domains: {{When}} and Why Do Multiple Representations Help?},
  shorttitle = {Learning in Complex Domains},
  author = {Goldman, Susan R},
  year = {2003},
  month = apr,
  journal = {Learning and Instruction},
  series = {External and {{Internal Representations}} in {{Multimedia Learning}}},
  volume = {13},
  number = {2},
  pages = {239--244},
  issn = {0959-4752},
  doi = {10.1016/S0959-4752(02)00023-3},
  urldate = {2018-11-06},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/ERDPS5LG/Goldman - 2003 - Learning in complex domains.pdf;/Users/igormoreno/Zotero/storage/YSYNYMJR/S0959475202000233.html}
}

@article{goldmanSettingScopeConcept2010,
  title = {Setting the {{Scope}} of {{Concept Inventories}} for {{Introductory Computing Subjects}}},
  author = {Goldman, Ken and Gross, Paul and Heeren, Cinda and Herman, Geoffrey L. and Kaczmarczyk, Lisa and Loui, Michael C. and Zilles, Craig},
  year = {2010},
  month = jun,
  journal = {ACM Transactions on Computing Education},
  volume = {10},
  number = {2},
  pages = {1--29},
  issn = {19466226},
  doi = {10.1145/1789934.1789935},
  urldate = {2018-10-22},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/5UR4U7VN/Goldman et al - 2010 - Setting the Scope of Concept Inventories for Introductory Computing Subjects.pdf}
}

@techreport{goldsteinLLOGOImplementationLOGO1975,
  title = {{{LLOGO}}: {{An Implementation}} of {{LOGO}} in {{LISP}}},
  shorttitle = {{{LLOGO}}},
  author = {Goldstein, Ira and Lieberman, Henry and Bochner, Harry and Miller, Mark},
  year = {1975},
  month = mar,
  number = {AIM-307a / LOGO Memo 11},
  urldate = {2022-01-12},
  abstract = {This paper describes LLOGO, an  implementation of the LOGO language written  in MACLISP for the ITS, TEN50 and TENEX  PDP-10 systems, and MULTICS. The relative  merits of LOGO and LISP as educational  languages are discussed. Design decisions  in the LISP implementation of LOGO are  contrasted with those of two other  implementations: CLOGO for the PDP-10 and  11LOGO for the PDP-11, both written in  assembler language. LLOGO's special  facilities for character-oriented display  terminals, graphic display 'turtles', and music  generation are also described.},
  langid = {american},
  annotation = {Accepted: 2004-10-04T14:46:27Z},
  file = {/Users/igormoreno/Zotero/storage/LZVPZT8R/Goldstein et al. - 1975 - LLOGO An Implementation of LOGO in LISP.pdf;/Users/igormoreno/Zotero/storage/5BIER5XM/6221.html}
}

@techreport{goldsteinSummaryMYCROFTSystem1974,
  title = {Summary of {{MYCROFT}}: {{A System}} for {{Understanding Simple Picture Programs}}},
  shorttitle = {Summary of {{MYCROFT}}},
  author = {Goldstein, Ira P.},
  year = {1974},
  month = may,
  number = {AIM-305 / LOGO Memo 10},
  institution = {{MIT}},
  urldate = {2022-01-12},
  abstract = {A collection of powerful ideas--description,  plans, linearity, insertions, global knowledge  and imperative semantics--are explored which are fundamental to debugging skill. To  make these concepts precise, a computer  monitor called MYCROFT is described that  can debug elementary programs for drawing  pictures. The programs are those written for  LOGO turtles.},
  langid = {american},
  annotation = {Accepted: 2004-10-04T14:46:24Z},
  file = {/Users/igormoreno/Zotero/storage/E62ZQ9LI/Goldstein - 1974 - Summary of MYCROFT.pdf;/Users/igormoreno/Zotero/storage/JP9BWECJ/6219.html}
}

@article{goldwasserGraphicsPackageFirst2009,
  title = {A Graphics Package for the First Day and Beyond},
  author = {Goldwasser, Michael H. and Letscher, David},
  year = {2009},
  month = mar,
  journal = {ACM SIGCSE Bulletin},
  volume = {41},
  number = {1},
  pages = {206--210},
  issn = {0097-8418},
  doi = {10.1145/1539024.1508945},
  urldate = {2023-04-21},
  abstract = {We describe cs1graphics, a new Python drawing package designed with pedagogy in mind. The package is simple enough that students can sit down and make use of it from the first day of an introductory class. Yet it provides seamless support for intermediate and advanced lessons as students progress. In this paper, we discuss its versatility in the context of an introductory course. The package is available at www.cs1graphics.org.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/PA55W6S2/Goldwasser and Letscher - 2009 - A graphics package for the first day and beyond.pdf}
}

@misc{gonzalesBackwardDesignBasics2020,
  title = {Backward {{Design}}: {{The Basics}}},
  shorttitle = {Backward {{Design}}},
  author = {Gonzales, Jennifer},
  year = {2020},
  month = jun,
  journal = {Cult of Pedagogy},
  urldate = {2022-06-26},
  abstract = {Are we planning with clear, measurable, meaningful learning goals in to guide us, or are we just keeping students busy?},
  howpublished = {https://www.cultofpedagogy.com/backward-design-basics/},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/636RDM8N/backward-design-basics.html}
}

@book{goodCommonErrorsStatistics2003,
  title = {Common Errors in Statistics (and How to Avoid Them)},
  author = {Good, Phillip I. and Hardin, James W.},
  year = {2003},
  publisher = {{Wiley-Interscience}},
  address = {{Hoboken, NJ}},
  isbn = {978-0-471-46068-8},
  langid = {english},
  lccn = {QA276 .G586 2003},
  keywords = {Statistics},
  annotation = {00447},
  file = {/Users/igormoreno/Zotero/storage/RTMCD7XH/Good and Hardin - 2003 - Common errors in statistics (and how to avoid them.pdf}
}

@inproceedings{goodeCurriculumNotEnough2014,
  title = {Curriculum Is Not Enough: The Educational Theory and Research Foundation of the Exploring Computer Science Professional Development Model},
  shorttitle = {Curriculum Is Not Enough},
  booktitle = {Proceedings of the 45th {{ACM}} Technical Symposium on {{Computer}} Science Education},
  author = {Goode, Joanna and Margolis, Jane and Chapman, Gail},
  year = {2014},
  month = mar,
  series = {{{SIGCSE}} '14},
  pages = {493--498},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2538862.2538948},
  urldate = {2021-01-30},
  abstract = {In recent years, the computer science education community has shown strong commitment to broadening participation in computing in K-12 classrooms. Educational research highlights the critical role of professional development in supporting teachers to attract and effectively teach underrepresented students in computing. In this paper we present the Exploring Computer Science (ECS) professional development model and the research on which it is based. We also present findings about the impact of ECS professional development on teachers' practice. As computing education initiatives become increasingly concerned with scaling up from a regional to a nationwide presence, it is important to consider how the essential components of effective professional development can drive this reform.},
  isbn = {978-1-4503-2605-6},
  keywords = {broadening participation in computing,CS reform,gender and ethnicity,inquiry,learning theory,pedagogy,professional development},
  annotation = {00100},
  file = {/Users/igormoreno/Zotero/storage/XG7N3Z3E/Goode et al. - 2014 - Curriculum is not enough the educational theory a.pdf}
}

@book{goosISSEP08Informatics2008,
  title = {{{ISSEP}}'08: {{Informatics Education}} \textendash{} {{Supporting Computational Thinking}}},
  author = {Goos, Gerhard and Hartmanis, Juris and {van Leeuwen}, Jan and Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M and Kobsa, Alfred and Mattern, Friedemann and Mitchell, John C and Naor, Moni and Nierstrasz, Oscar and Rangan, C Pandu and Steffen, Bernhard},
  year = {2008},
  month = jul,
  series = {{{LNCS}}},
  publisher = {{Springer}},
  address = {{Torun, Poland}},
  langid = {english},
  annotation = {00000  Third International Conference on Informatics in Secondary Schools \textendash{} Evolution and Perspectives, ISSEP 2008},
  file = {/Users/igormoreno/Zotero/storage/XYH4N27I/Goos et al - 2008 - ISSEP'08.pdf}
}

@article{gordonBisimilarityTheoryFunctional,
  title = {Bisimilarity as a {{Theory}} of {{Functional Programming}}},
  author = {Gordon, Andrew D},
  pages = {21},
  abstract = {Morris-style contextual equivalence|invariance of termination under any context of ground type|is the usual notion of operational equivalence for deterministic functional languages such as FPC (PCF plus sums, products and recursive types). Contextual equivalence is hard to establish directly. Instead we de ne a labelled transition system for call-by-name FPC (and variants) and prove that CCS-style bisimilarity equals contextual equivalence|a form of operational extensionality. Using co-induction we establish equational laws for FPC. By considering variations of Milner's `bisimulations up to ' we obtain a second co-inductive characterisation of contextual equivalence in terms of reduction behaviour and production of values. Hence we use co-inductive proofs to establish contextual equivalence in a series of stream-processing examples. Finally, we consider a form of Milner's original context lemma for FPC, but conclude that our form of bisimilarity supports simpler co-inductive proofs.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/CT4WW8HT/Gordon - Bisimilarity as a Theory of Functional Programming.pdf}
}

@article{gormallyFeedbackTeachingHigher2014,
  title = {Feedback about {{Teaching}} in {{Higher Ed}}: {{Neglected Opportunities}} to {{Promote Change}}},
  shorttitle = {Feedback about {{Teaching}} in {{Higher Ed}}},
  author = {Gormally, Cara and Evans, Mara and Brickman, Peggy},
  editor = {O'Dowd, Diane K.},
  year = {2014},
  month = jun,
  journal = {CBE\textemdash Life Sciences Education},
  volume = {13},
  number = {2},
  pages = {187--199},
  issn = {1931-7913},
  doi = {10.1187/cbe.13-12-0235},
  urldate = {2019-09-27},
  abstract = {Despite ongoing dissemination of evidence-based teaching strategies, science teaching at the university level is less than reformed. Most college biology instructors could benefit from more sustained support in implementing these strategies. One-time workshops raise awareness of evidence-based practices, but faculty members are more likely to make significant changes in their teaching practices when supported by coaching and feedback. Currently, most instructional feedback occurs via student evaluations, which typically lack specific feedback for improvement and focus on teacher-centered practices, or via drop-in classroom observations and peer evaluation by other instructors, which raise issues for promotion, tenure, and evaluation. The goals of this essay are to summarize the best practices for providing instructional feedback, recommend specific strategies for providing feedback, and suggest areas for further research. Missed opportunities for feedback in teaching are highlighted, and the sharing of instructional expertise is encouraged.},
  langid = {english},
  keywords = {To Read},
  file = {/Users/igormoreno/Zotero/storage/2V5QG7G3/Gormally et al - 2014 - Feedback about Teaching in Higher Ed.pdf}
}

@inproceedings{gormanDataProcessingCurriculum1970,
  title = {A Data Processing Curriculum Development Methodology},
  booktitle = {Proceedings of the Eighth Annual {{SIGCPR}} Conference},
  author = {Gorman, Michael M. and Rogers, John F. and Embick, Edward A.},
  year = {1970},
  month = jun,
  series = {{{SIGCPR}} '70},
  pages = {27--47},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/800162.805171},
  urldate = {2020-09-22},
  abstract = {This paper presents a methodology that can be implemented in a corporate or academic setting to develop a data processing curriculum. Even though this methodology does not present new concepts, it does gather together several useful, tried and proven techniques, namely, Work Study, Job Analysis, and Vocational Course Construction, which, when combined and utilized in your data processing environment, generates training programs that will produce graduates trained especially to meet your corporate requirements. This methodology, based on a ``wholistic'' approach to the creation of a functionally useful ``D. P. body'', analyzes an operational job, and creates a training program for it in a reasonably short time period.},
  isbn = {978-1-4503-7471-2},
  annotation = {00001},
  file = {/Users/igormoreno/Zotero/storage/IWFTX26W/Gorman et al - 1970 - A data processing curriculum development methodology.pdf}
}

@article{gortlerBubbleTreemapsUncertainty2018,
  title = {Bubble {{Treemaps}} for {{Uncertainty Visualization}}},
  author = {G{\"o}rtler, J. and Schulz, C. and Weiskopf, D. and Deussen, O.},
  year = {2018},
  month = jan,
  journal = {IEEE Transactions on Visualization and Computer Graphics},
  volume = {24},
  number = {1},
  pages = {719--728},
  doi = {10.1109/TVCG.2017.2743959},
  abstract = {We present a novel type of circular treemap, where we intentionally allocate extra space for additional visual variables. With this extended visual design space, we encode hierarchically structured data along with their uncertainties in a combined diagram. We introduce a hierarchical and force-based circle-packing algorithm to compute Bubble Treemaps, where each node is visualized using nested contour arcs. Bubble Treemaps do not require any color or shading, which offers additional design choices. We explore uncertainty visualization as an application of our treemaps using standard error and Monte Carlo-based statistical models. To this end, we discuss how uncertainty propagates within hierarchies. Furthermore, we show the effectiveness of our visualization using three different examples: the package structure of Flare, the S\&P 500 index, and the US consumer expenditure survey.},
  keywords = {bubble treemaps,circle packing,circle-packing algorithm,circular treemap,Computational modeling,contours,data visualisation,Data visualization,extended visual design space,Flare,hierarchically structured data,hierarchy visualization,Indexes,Layout,Monte Carlo methods,Monte Carlo-based statistical model,nested contour arcs,S\&P 500 index,standard error,Standards,statistical analysis,To Read,tree data structures,tree layout,treemaps,Uncertainty,uncertainty visualization,Uncertainty visualization,US consumer expenditure survey,visual variables,Visualization},
  file = {/Users/igormoreno/Zotero/storage/EZJP8FEM/Görtler et al - 2018 - Bubble Treemaps for Uncertainty Visualization.pdf;/Users/igormoreno/Zotero/storage/D49WPKKD/8017613.html}
}

@book{goslingJavaLanguageSpecification,
  ids = {goslingJavaLanguageSpecification2000},
  title = {The {{Java Language Specification}}},
  author = {Gosling, James and Joy, Bill and Steele, Guy and Bracha, Gilad and Buckley, Alex and Smith, Daniel},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/27SJU4AJ/Gosling et al. - The Java® Language Specification.pdf;/Users/igormoreno/Zotero/storage/E6YZLBSD/books.html}
}

@article{gotliebFashionsFundamentalsComputer1991,
  title = {Fashions and Fundamentals in Computer Science Education},
  author = {Gotlieb, Professor C.C.},
  year = {1991},
  month = jan,
  journal = {Education and Computing},
  volume = {7},
  number = {1-2},
  pages = {97--103},
  issn = {01679287},
  doi = {10.1016/S0167-9287(05)80085-8},
  urldate = {2018-11-06},
  abstract = {During the 25 years which have passed since the first computer science courses there have been major shifts of emphasis, but some things have remained constant. Shifts and permanencies in languages and operating systems, courses and curricula, concepts and subjects are examined.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/WUND7VWP/Gotlieb - 1991 - Fashions and fundamentals in computer science education.pdf}
}

@inproceedings{gotschiMentalModelsRecursion2003,
  ids = {gotschiMentalModelsRecursion2003a},
  title = {Mental Models of Recursion},
  booktitle = {Proceedings of the 34th {{SIGCSE}} Technical Symposium on {{Computer}} Science Education},
  author = {G{\"o}tschi, Tina and Sanders, Ian and Galpin, Vashti and G{\"o}tschi, Tina and Sanders, Ian and Galpin, Vashti},
  year = {2003},
  month = feb,
  volume = {35},
  pages = {346--350},
  address = {{Reno, NV, USA}},
  doi = {10.1145/611892.612004},
  urldate = {2018-11-30},
  abstract = {Recursion is a fundamental concept in Computer Science. A student's knowledge of recursion can be termed their mental model of recursion. A student's mental model is viable if it allows them to accurately and consistently represent the mechanics of recursion. Non-viable mental models are constructed if students have misconceptions about the mechanisms of recursion or have misconceptions about concepts fundamental to recursion. This paper presents a study of the mental models of recursion that first year students at the University of the Witwatersrand have constructed in 2000, 2001 and 2002. It was found that while the majority of students constructed the viable copies model, many non-viable models such as the looping, active, step, magic, return-value and various odd models were also constructed. Identifying the models that students have can allow lecturers to target individual students' specific problems and analysis of the models can provide insight into learning.},
  file = {/Users/igormoreno/Zotero/storage/27793KUN/Götschi et al - 2003 - Mental models of recursion.pdf;/Users/igormoreno/Zotero/storage/N2T4IZRJ/Götschi et al. - 2003 - Mental models of recursion.pdf;/Users/igormoreno/Zotero/storage/6UKISNY6/611892.html}
}

@article{gottlobXPathProcessingNutshell2003,
  title = {{{XPath Processing}} in a {{Nutshell}}},
  author = {Gottlob, Georg and Koch, Christoph and Pichler, Reinhard},
  year = {2003},
  journal = {SIGMOD Record},
  doi = {10.1145/640990.640992},
  keywords = {xpath},
  file = {/Users/igormoreno/Zotero/storage/5QRV4CN7/Gottlob et al. - 2003 - XPath Processing in a Nutshell.pdf}
}

@article{goughGrammaticalTransformationsSpeed1965,
  title = {Grammatical Transformations and Speed of Understanding},
  author = {Gough, Philip B.},
  year = {1965},
  month = apr,
  journal = {Journal of Verbal Learning and Verbal Behavior},
  volume = {4},
  number = {2},
  pages = {107--111},
  issn = {0022-5371},
  doi = {10.1016/S0022-5371(65)80093-7},
  urldate = {2018-12-02},
  abstract = {This study tested an hypothesis that the hearer of a complex sentence must transform that sentence into the underlying kernel sentence before understanding it, and hence that speed of understanding a sentence would vary with the number and nature of the transformations separating it from its kernel. Descriptive sentences of varying grammatical form were presented to Ss who were asked to verify them, and the speed of verification was taken as an index of speed of understanding. Active sentences were found to be verified faster than passive, affirmative faster than negative, and true faster than false. The true-false variable was found to interact with the affirmative-negative, indicating that the latter difference is not simply syntactical. The consistency of the results with the hypothesis was noteworthy, but transformational complexity was confounded with frequency and length.},
  file = {/Users/igormoreno/Zotero/storage/943TBRK6/Gough - 1965 - Grammatical transformations and speed of understanding.pdf;/Users/igormoreno/Zotero/storage/TSV6WBAQ/S0022537165800937.html}
}

@article{gouldPsychologicalEvidenceHow1975,
  title = {Some Psychological Evidence on How People Debug Computer Programs},
  author = {Gould, John D.},
  year = {1975},
  month = mar,
  journal = {International Journal of Man-Machine Studies},
  volume = {7},
  number = {2},
  pages = {151--182},
  issn = {0020-7373},
  doi = {10.1016/S0020-7373(75)80005-8},
  urldate = {2018-12-02},
  abstract = {Ten experienced programmers were each given the same 12 FORTRAN listings to debug. Each listing contained a non-syntactic error in one line. Median debug times (7 min), number of bugs not found (11\% of the listings), and number of incorrect assertions about the location of the bug (less than one per listing) all replicated earlier results (Gould \& Drongowski, 1974). Although subjects were given the opportunity to use the interactive debugging facilities of an on-line computer, they rarely did so. Bugs in assignment statements were about three times as hard to detect as array or interaction bugs. Debugging was about three times as efficient on programs subjects had debugged previously (although with a different bug). A number of basic concepts relating to debugging are identified and a gross theory of debugging is described.},
  file = {/Users/igormoreno/Zotero/storage/EJGFRFEQ/Gould - 1975 - Some psychological evidence on how people debug computer programs.pdf;/Users/igormoreno/Zotero/storage/KCAI4JJX/S0020737375800058.html}
}

@misc{gouthamPracticalAIAutomatically2020,
  title = {Practical {{AI}} : {{Automatically Generate Multiple Choice Questions}} ({{MCQs}}) from Any Content with {{BERT}}\ldots},
  shorttitle = {Practical {{AI}}},
  author = {Goutham, Ramsri},
  year = {2020},
  month = mar,
  journal = {Medium},
  urldate = {2020-07-22},
  abstract = {In this post we will see how to automatically generate Multiple Choice Questions (MCQs) from any story or article. This is one step\ldots},
  howpublished = {https://towardsdatascience.com/practical-ai-automatically-generate-multiple-choice-questions-mcqs-from-any-content-with-bert-2140d53a9bf5},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/2EYTMXQ2/practical-ai-automatically-generate-multiple-choice-questions-mcqs-from-any-content-with-bert-2.html}
}

@article{GradualTyping2022,
  title = {Gradual Typing},
  year = {2022},
  month = oct,
  journal = {Wikipedia},
  urldate = {2022-11-21},
  abstract = {Gradual typing is a type system in which some variables and expressions may be given types and the correctness of the typing is checked at compile time (which is static typing) and some expressions may be left untyped and eventual type errors are reported at runtime (which is dynamic typing). Gradual typing allows software developers to choose either type paradigm as appropriate, from within a single language. In many cases gradual typing is added to an existing dynamic language, creating a derived language allowing but not requiring static typing to be used. In some cases a language uses gradual typing from the start.},
  copyright = {Creative Commons Attribution-ShareAlike License},
  langid = {english},
  annotation = {Page Version ID: 1114610053},
  file = {/Users/igormoreno/Zotero/storage/PJ4CUJWW/Gradual_typing.html}
}

@inproceedings{grannCompetencyMapVisualizing2014,
  title = {Competency {{Map}}: {{Visualizing Student Learning}} to {{Promote Student Success}}},
  shorttitle = {Competency {{Map}}},
  booktitle = {Proceedings of the {{Fourth International Conference}} on {{Learning Analytics And Knowledge}}},
  author = {Grann, Jeff and Bushway, Deborah},
  year = {2014},
  series = {{{LAK}} '14},
  pages = {168--172},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2567574.2567622},
  urldate = {2019-09-25},
  abstract = {Adult students often struggle to appreciate the relevance of their higher educational experiences to their careers. Capella University's competency map is a dashboard that visually indicates each student's status relative to specific assessed competencies. MBA students who utilize their competency map demonstrate competencies at slightly higher levels and persist in their program at greater rates, even after statistically controlling for powerful covariates, such as course engagement.},
  isbn = {978-1-4503-2664-3},
  keywords = {competency,evaluation,learning analytics,To Read,visualization},
  file = {/Users/igormoreno/Zotero/storage/3UBIWMH4/Grann and Bushway - 2014 - Competency Map.pdf}
}

@book{gravetterStatisticsBehavioralSciences,
  title = {Statistics for the {{Behavioral Sciences}}},
  author = {Gravetter, Frederick J. and Wallnau, Larry B.},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/IC29U6V8/Gravetter and Wallnau - Statistics for the Behavioral Sciences.pdf}
}

@inproceedings{grayProfessorJGradualIntroduction2003,
  title = {{{ProfessorJ}}: {{A Gradual Introduction}} to {{Java Through Language Levels}}},
  shorttitle = {{{ProfessorJ}}},
  booktitle = {Companion of the 18th {{Annual ACM SIGPLAN Conference}} on {{Object-oriented Programming}}, {{Systems}}, {{Languages}}, and {{Applications}}},
  author = {Gray, Kathryn E. and Flatt, Matthew},
  year = {2003},
  series = {{{OOPSLA}} '03},
  pages = {170--177},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/949344.949394},
  urldate = {2019-07-09},
  abstract = {In the second-semester programming course at the University of Utah, we have observed that our students suffer unnecessarily from a mismatch between the course content and the programming environment. The course is typical, in that it exposes students to Java a little at a time. The programming environments are also typical, in that they report compilation and run-time errors in the jargon of professional programmers who use the full Java language. As a result, students rely heavily on teaching assistants to interpret error messages, and valuable classroom time is wasted on syntactic diversions.ProfessorJ is our new programming environment that remedies this problem. Like other pedagogical environments, such as BlueJ and DrJava, ProfessorJ presents the student with a simplified interface to the Java compiler and virtual machine. Unlike existing environments, ProfessorJ tailors the Java language and error messages to the students' needs. Since their needs evolve through the course, ProfessorJ offers several language levels, from Beginner Java to Full Java.},
  isbn = {978-1-58113-751-4},
  annotation = {00053},
  file = {/Users/igormoreno/Zotero/storage/HU4JYMKN/Gray and Flatt - 2003 - ProfessorJ A Gradual Introduction to Java Through.pdf}
}

@misc{GreatWorksProgramming,
  title = {Great {{Works}} in {{Programming Languages}}},
  urldate = {2018-12-01},
  howpublished = {http://www.cis.upenn.edu/\textasciitilde bcpierce/courses/670Fall04/GreatWorksInPL.shtml},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/FUZXL6H9/GreatWorksInPL.html}
}

@book{greenBuildingBetterTeacher2015,
  title = {Building a {{Better Teacher}}: {{How Teaching Works}}},
  shorttitle = {Building a {{Better Teacher}}},
  author = {Green, Elizabeth},
  year = {2015},
  month = jul,
  edition = {Illustrated edition},
  publisher = {{W. W. Norton \& Company}},
  address = {{New York}},
  isbn = {978-0-393-35108-8},
  langid = {english}
}

@article{greenConditionalProgramStatements1977,
  title = {Conditional Program Statements and Their Comprehensibility to Professional Programmers},
  author = {Green, T. R. G.},
  year = {1977},
  journal = {Journal of Occupational Psychology},
  volume = {50},
  number = {2},
  pages = {93--109},
  issn = {2044-8325},
  doi = {10.1111/j.2044-8325.1977.tb00363.x},
  urldate = {2021-01-08},
  abstract = {Programming languages embody two principal forms of conditional statement, the nesting if \ldots{} then \ldots{} else \ldots{} form and the goto form. Sime, Green \& Guest (1974) compared these two and a third variety not in common use, nesting with redundancy, and they found that non-programmers learning to write programs based on conditionals obtained best results with this last variety. Their explanation emphasized the need to comprehend a program, and distinguished between two comprehension processes applicable to conditionals: tracing through a program like a computer, and finding how a particular point in a program might be reached. They hypothesized that comprehensibility differences occurred mainly in the second process. The present experiments compared response times of professional programmers in comprehension tasks requiring either the first process (Expt. I) or the second (Expt. II). Much larger differences between the three styles of conditional statements were found in the second task, favouring nesting with redundancy and thus supporting the hypothesis. Implications for research in this area and for programming language design are discussed.},
  copyright = {1977 The British Psychological Society},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/DPJ5ZANV/Green - 1977 - Conditional program statements and their comprehen.pdf;/Users/igormoreno/Zotero/storage/V5UNKUME/j.2044-8325.1977.tb00363.html}
}

@article{greenUsabilityAnalysisVisual1996,
  title = {Usability {{Analysis}} of {{Visual Programming Environments}}: {{A}} `{{Cognitive Dimensions}}' {{Framework}}},
  shorttitle = {Usability {{Analysis}} of {{Visual Programming Environments}}},
  author = {Green, T. R. G. and Petre, M.},
  year = {1996},
  month = jun,
  journal = {Journal of Visual Languages \& Computing},
  volume = {7},
  number = {2},
  pages = {131--174},
  issn = {1045-926X},
  doi = {10.1006/jvlc.1996.0009},
  urldate = {2018-10-02},
  abstract = {The cognitive dimensions framework is a broad-brush evaluation technique for interactive devices and for non-interactive notations. It sets out a small vocabulary of terms designed to capture the cognitively-relevant aspects of structure, and shows how they can be traded off against each other. The purpose of this paper is to propose the framework as an evaluation technique for visual programming environments. We apply it to two commercially-available dataflow languages (with further examples from other systems) and conclude that it is effective and insightful; other HCI-based evaluation techniques focus on different aspects and would make good complements. Insofar as the examples we used are representative, current VPLs are successful in achieving a good `closeness of match', but designers need to consider the `viscosity ' (resistance to local change) and the `secondary notation' (possibility of conveying extra meaning by choice of layout, colour, etc.).},
  file = {/Users/igormoreno/Zotero/storage/Z32JUBAV/Green and Petre - 1996 - Usability Analysis of Visual Programming Environments.pdf;/Users/igormoreno/Zotero/storage/PNEFRMT7/S1045926X96900099.html}
}

@article{greerGrowthMathematicsConceptual2004,
  title = {The Growth of Mathematics through Conceptual Restructuring},
  author = {Greer, Brian},
  year = {2004},
  month = oct,
  journal = {Learning and Instruction},
  series = {The {{Conceptual Change Approach}} to {{Mathematics Learning}} and {{Teaching}}},
  volume = {14},
  number = {5},
  pages = {541--548},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2004.06.018},
  urldate = {2018-11-06},
  file = {/Users/igormoreno/Zotero/storage/TPCATARE/Greer - 2004 - The growth of mathematics through conceptual restructuring.pdf;/Users/igormoreno/Zotero/storage/Q2PCSV6M/S0959475204000490.html}
}

@article{greggProcessModelsStochastic1967,
  title = {Process Models and Stochastic Theories of Simple Concept Formation},
  author = {Gregg, L. W. and Simon, H. A.},
  year = {1967},
  month = jun,
  journal = {Journal of Mathematical Psychology},
  volume = {4},
  number = {2},
  pages = {246--276},
  issn = {0022-2496},
  doi = {10.1016/0022-2496(67)90052-1},
  urldate = {2018-12-02},
  abstract = {A class of information-processing models, stated in computer programming language, is constructed for a concept attainment experiment previously studied by Bower and Trabasso. The stochastic theory of Bower and Trabasso can be derived formally from the process models, but the process models, with fewer degrees of freedom, make more specific predictions over a wider range of experiments than the stochastic theory\textemdash hence are more universal, precise, and parsimonious in the sense of Popper. The formal process models are shown to be useful in discovering inconsistencies and unstated assumptions in informal descriptions of the psychological processes underlying the stochastic theory. The fit of the ``fine-grain'' statistics of the stochastic theory to the data is shown to be independent of the psychological content of the theory.},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/6F4QRPJ5/Gregg and Simon - 1967 - Process models and stochastic theories of simple concept formation.pdf;/Users/igormoreno/Zotero/storage/QRAFSCLX/0022249667900521.html}
}

@inproceedings{greifensteinEffectiveFeedbackElementary2021,
  title = {Effective {{Feedback}} on {{Elementary School Scratch Programs}}},
  booktitle = {Proceedings of the 17th {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Greifenstein, Luisa},
  year = {2021},
  month = aug,
  series = {{{ICER}} 2021},
  pages = {417--418},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3446871.3469779},
  urldate = {2021-08-18},
  isbn = {978-1-4503-8326-4},
  keywords = {Elementary education,Feedback,Scratch,Teachers,Tools},
  file = {/Users/igormoreno/Zotero/storage/LY3AMJD6/Greifenstein - 2021 - Effective Feedback on Elementary School Scratch Programs.pdf}
}

@inproceedings{grgurinaComputerScienceTeacher2008,
  title = {Computer {{Science Teacher Training}} at the {{University}} of {{Groningen}}},
  booktitle = {Informatics {{Education}} - {{Supporting Computational Thinking}}},
  author = {Grgurina, Nata{\v s}a},
  editor = {Mittermeir, Roland T. and Sys{\l}o, Maciej M.},
  year = {2008},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {272--281},
  publisher = {{Springer Berlin Heidelberg}},
  abstract = {The University Center for Academic Learning and Teaching (UOCG) provides the University of Groningen with an educational program to train fully qualified secondary school teachers in many secondary school subjects including computer science. This two-year Master's in Education Program consists of teacher training that includes a large internship component and teacher training courses, in addition to those courses provided by the faculties. During the internship, the secondary school where the internship takes place is in charge of a substantial part of the teacher training, while the University's role is mainly a supervisory one.},
  isbn = {978-3-540-69924-8},
  langid = {english},
  keywords = {computer science teacher training,didactics of computer science,University of Groningen},
  file = {/Users/igormoreno/Zotero/storage/QUZLIQ82/Grgurina - 2008 - Computer Science Teacher Training at the University of Groningen.pdf}
}

@article{griesImprovingCurriculumTeaching1991,
  title = {Improving the Curriculum through the Teaching of Calculation and Discrimination},
  author = {Gries, David},
  year = {1991},
  month = jan,
  journal = {Education and Computing},
  volume = {7},
  number = {1-2},
  pages = {61--72},
  issn = {01679287},
  doi = {10.1016/S0167-9287(05)80082-2},
  urldate = {2018-11-06},
  abstract = {The field of computing--includingits application by programmers, systems analysts and others--suffers tremendously from a lack of use of formal reasoning in everyday work. The problem can be solved, at least partly, by teaching calculational methods in mathematics and programming in the freshman year, and in such a way that students develop a skill with the methods, and not just a passing understanding. Freshman courses should instil the idea that mathematical techniques can help and should encourage a sense of discrimination, of making judgements on technical matters based on technical concerns.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/K5G5MWPA/Gries - 1991 - Improving the curriculum through the teaching of calculation and discrimination.pdf}
}

@article{griesInformaticsCurricula1990s1991,
  title = {Informatics Curricula for the 1990s},
  author = {Gries, David and Levrat, Bernard and Wegner, Peter},
  year = {1991},
  month = jan,
  journal = {Education and Computing},
  volume = {7},
  number = {1-2},
  pages = {3--8},
  issn = {01679287},
  doi = {10.1016/S0167-9287(05)80077-9},
  urldate = {2018-11-06},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/Q42LWJRF/Gries et al - 1991 - Informatics curricula for the 1990s.pdf}
}

@article{griesPrincipledApproachTeaching,
  title = {A {{Principled Approach}} to {{Teaching OO First}}},
  author = {Gries, David},
  pages = {5},
  abstract = {There has been debate about whether OO should, or even can, be taught first in CS1 (using Java). We claim that OO can be taught successfully, provided certain principles are followed. These principles lead to the requirement of an appropriate model for classes and objects, which we provide.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/VHWSHPXU/Gries - A Principled Approach to Teaching OO First.pdf}
}

@inproceedings{griffinDesigningIntentionalBugs2019,
  title = {Designing {{Intentional Bugs}} for {{Learning}}},
  booktitle = {Proceedings of the 1st {{UK}} \& {{Ireland Computing Education Research Conference}} on - {{UKICER}}},
  author = {Griffin, Jean M.},
  year = {2019},
  pages = {1--7},
  publisher = {{ACM Press}},
  address = {{Canterbury, United Kingdom}},
  doi = {10.1145/3351287.3351289},
  urldate = {2020-06-22},
  abstract = {There is general agreement that people can learn from their own mistakes, but the idea of intentionally incorporating errors into curricula is controversial. Some think it will introduce misconceptions, while others think it could help students learn concepts, avoid common errors and misconceptions, and reduce anxiety about errors. This paper develops a theoretical framework that supports this technique, and reviews the experiences and experiments of over a dozen research teams that have employed it for mathematics and computer science education. It also reports on a 14-week study that investigates this issue, where undergraduates learning to program with Python solved web-based practice problems during weekly labs. Approximately 80\% of the problems were the same for all students. For the remaining 20\%, the treatment group got problems with carefully designed bugs in supplied code. The control group got similar problems without bugs. According to two pre/post measures, the treatment group learned as much as the control group, with no statistical difference in learning gains. Instructional designs, design principles, and future research plans are discussed.},
  isbn = {978-1-4503-7257-2},
  langid = {english},
  keywords = {To Read},
  file = {/Users/igormoreno/Zotero/storage/GB53M78D/Griffin - 2019 - Designing Intentional Bugs for Learning.pdf}
}

@inproceedings{griffinLearningTakingApart2016,
  title = {Learning by {{Taking Apart}}: {{Deconstructing Code}} by {{Reading}}, {{Tracing}}, and {{Debugging}}},
  shorttitle = {Learning by {{Taking Apart}}},
  booktitle = {Proceedings of the 17th {{Annual Conference}} on {{Information Technology Education}} - {{SIGITE}} '16},
  author = {Griffin, Jean M.},
  year = {2016},
  pages = {148--153},
  publisher = {{ACM Press}},
  address = {{Boston, Massachusetts, USA}},
  doi = {10.1145/2978192.2978231},
  urldate = {2020-06-22},
  abstract = {This theoretical paper discusses several lines of research which support the premise that people learning to program can do so more effectively and efficiently if they spend as much time deconstructing code (reading, tracing, and debugging) as they do writing code. This work builds upon research in computing education on reading and tracing code, and in education psychology on learning from worked-examples and errors. A graphical model is included of cognitive science principles that scaffold the process of learning to solve problems. A sample learning progression is provided for teachers and instructional designers. The progression begins with low-stakes deconstructionist activities such as exploring, identifying, comparing, and debugging, before activities that require writing code. Deconstructionism is discussed as a pedagogy and learning theory complementary to Seymour Papert's Constructionism.},
  isbn = {978-1-4503-4452-4},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/QHP2UI8Z/Griffin - 2016 - Learning by Taking Apart Deconstructing Code by R.pdf}
}

@article{groeningAchievementUnlockedImpact2019,
  title = {``{{Achievement}} Unlocked!'' - {{The}} Impact of Digital Achievements as a Gamification Element on Motivation and Performance},
  author = {Groening, Christopher and Binnewies, Carmen},
  year = {2019},
  month = aug,
  journal = {Computers in Human Behavior},
  volume = {97},
  pages = {151--166},
  issn = {07475632},
  doi = {10.1016/j.chb.2019.02.026},
  urldate = {2023-06-27},
  abstract = {Gamification experiences further growth in our society with broad practical implications of game design elements in applications, activities, and services. In our study, we focus on one single element in the form of digital achievements, one cornerstone of gamification, to gain unconfounded insights into the effects and working mechanisms of digital achievements. In a controlled experimental environment we investigate their impact on motivation and performance. Three research questions were investigated, first, if achievements are effective in enhancing motivation and performance, second, how achievements need to be designed to be effective, and third, if achievements' underlying working mechanisms resemble classical goal-setting. In three experiments, a total of 245 participants worked on different cognitive tasks. We experimentally manipulated several aspects of achievements, such as quantity and difficulty. We also compared achievements directly with classical goalsetting instructions. Results showed that achievements enhanced performance. Achievements also improved motivation, however only regarding persistence, not self-reported interest and enjoyment. The effectiveness of achievements was highly dependent on the design. Results suggest utilizing achievements with high difficulty and in low quantity. Results also support our assumption that achievements provide a direct goal-setting function. We conclude that achievements do benefit motivation and performance if designed properly.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/KHP552GG/Groening and Binnewies - 2019 - “Achievement unlocked!” - The impact of digital ac.pdf}
}

@article{grosseEffectsMultipleSolution2006,
  title = {Effects of Multiple Solution Methods in Mathematics Learning},
  author = {Gro{\ss}e, Cornelia S. and Renkl, Alexander},
  year = {2006},
  month = apr,
  journal = {Learning and Instruction},
  series = {Recent {{Worked Examples Research}}: {{Managing Cognitive Load}} to {{Foster Learning}} and {{Transfer}}},
  volume = {16},
  number = {2},
  pages = {122--138},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2006.02.001},
  urldate = {2018-11-06},
  abstract = {Most mathematical problems can be solved using different methods. We tested the effectiveness of presenting more than one solution method by means of worked-out examples. In Experiment 1, a 2\texttimes 3-factorial design was implemented (``multiple solutions'': multiple/uniform; ``instructional support'': none/self-explanations/instructional explanations). Multiple solutions fostered learning. However, no positive effect was found for instructional support. In Experiment 2, effects of varying the representational code of solutions were studied, using three conditions (multiple solutions with multiple representations; multiple solutions sharing one representation; uniform solution). No effect of multiple solutions on learning was found. They even reduced some important spontaneous learning activities. Further research should focus on the context conditions under which multiple solutions are effective.},
  keywords = {Mathematics learning,Multiple solution methods,Worked-out examples},
  file = {/Users/igormoreno/Zotero/storage/3S29UAJ2/Große and Renkl - 2006 - Effects of multiple solution methods in mathematics learning.pdf;/Users/igormoreno/Zotero/storage/CNXLPHQI/S0959475206000156.html}
}

@incollection{groverAssessingAlgorithmicComputational2017,
  title = {Assessing {{Algorithmic}} and {{Computational Thinking}} in {{K-12}}: {{Lessons}} from a {{Middle School Classroom}}},
  shorttitle = {Assessing {{Algorithmic}} and {{Computational Thinking}} in {{K-12}}},
  booktitle = {Emerging {{Research}}, {{Practice}}, and {{Policy}} on {{Computational Thinking}}},
  author = {Grover, Shuchi},
  editor = {Rich, Peter J. and Hodges, Charles B.},
  year = {2017},
  pages = {269--288},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-52691-1_17},
  urldate = {2023-03-16},
  abstract = {As educators move to introduce computing in K-12 classrooms, the issue of assessing student learning of computational concepts, especially in the context of introductory programming, remains a challenge. Assessments are central if the goal is to help students develop deeper, transferable computational thinking (CT) skills that prepare them for success in future computing experiences. This chapter argues for the need for multiple measures or "systems of assessments" that are complementary, attend to cognitive and noncognitive aspects of learning CT, and contribute to a comprehensive picture of student learning. It describes the multiple forms of assessments designed and empirically studied in Foundationsfor Advancing Computational Thinking, a middle school introductory computing curriculum. These include directed and open-ended programming assignments in Scratch, multiple-choice formative assessments, artifact-based interviews, and summative assessments to measure student learning of algorithmic constructs. The design of unique "preparation for future learning" assessments to measure transfer of CT from block-based to text-based code snippets is also described.},
  isbn = {978-3-319-52690-4 978-3-319-52691-1},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/XCIXXX4A/Grover - 2017 - Assessing Algorithmic and Computational Thinking i.pdf}
}

@incollection{groverAssessingAlgorithmicComputational2017a,
  title = {Assessing {{Algorithmic}} and {{Computational Thinking}} in {{K-12}}: {{Lessons}} from a {{Middle School Classroom}}},
  shorttitle = {Assessing {{Algorithmic}} and {{Computational Thinking}} in {{K-12}}},
  booktitle = {Emerging {{Research}}, {{Practice}}, and {{Policy}} on {{Computational Thinking}}},
  author = {Grover, Shuchi},
  editor = {Rich, Peter J. and Hodges, Charles B.},
  year = {2017},
  pages = {269--288},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-52691-1_17},
  urldate = {2023-03-16},
  abstract = {As educators move to introduce computing in K-12 classrooms, the issue of assessing student learning of computational concepts, especially in the context of introductory programming, remains a challenge. Assessments are central if the goal is to help students develop deeper, transferable computational thinking (CT) skills that prepare them for success in future computing experiences. This chapter argues for the need for multiple measures or "systems of assessments" that are complementary, attend to cognitive and noncognitive aspects of learning CT, and contribute to a comprehensive picture of student learning. It describes the multiple forms of assessments designed and empirically studied in Foundationsfor Advancing Computational Thinking, a middle school introductory computing curriculum. These include directed and open-ended programming assignments in Scratch, multiple-choice formative assessments, artifact-based interviews, and summative assessments to measure student learning of algorithmic constructs. The design of unique "preparation for future learning" assessments to measure transfer of CT from block-based to text-based code snippets is also described.},
  isbn = {978-3-319-52690-4 978-3-319-52691-1},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/CIU4QL6N/Grover - 2017 - Assessing Algorithmic and Computational Thinking i.pdf}
}

@book{groverComputerScienceK122020,
  title = {Computer {{Science}} in {{K-12}}: {{An A-To-Z Handbook}} on {{Teaching Programming}}},
  editor = {Grover, Shuchi},
  year = {2020},
  month = jun,
  publisher = {{Edfinity}},
  isbn = {978-1-73466-270-2},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/3CQQ46KV/Grover - 2020 - Computer Science in K-12 An A-To-Z Handbook on Te.pdf}
}

@article{groverConceptsCodingNonprogramming2019,
  title = {Concepts before Coding: Non-Programming Interactives to Advance Learning of Introductory Programming Concepts in Middle School},
  shorttitle = {Concepts before Coding},
  author = {Grover, Shuchi and Jackiw, Nicholas and Lundh, Patrik},
  year = {2019},
  month = jul,
  journal = {Computer Science Education},
  volume = {29},
  number = {2-3},
  pages = {106--135},
  issn = {0899-3408, 1744-5175},
  doi = {10.1080/08993408.2019.1568955},
  urldate = {2020-06-16},
  abstract = {Background and Context: Learners struggle with conceptual understanding of introductory programming concepts such as variables, expressions, and loops.},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/YJPN6H5G/Grover et al - 2019 - Concepts before coding.pdf}
}

@article{groverFrameworkUsingHypothesisDriven2017,
  title = {A {{Framework}} for {{Using Hypothesis-Driven Approaches}} to {{Support Data-Driven Learning Analytics}} in {{Measuring Computational Thinking}} in {{Block-Based Programming Environments}}},
  author = {Grover, Shuchi and Basu, Satabdi and Bienkowski, Marie and Eagle, Michael and Diana, Nicholas and Stamper, John},
  year = {2017},
  month = sep,
  journal = {ACM Transactions on Computing Education},
  volume = {17},
  number = {3},
  pages = {1--25},
  issn = {1946-6226},
  doi = {10.1145/3105910},
  urldate = {2023-03-16},
  abstract = {Systematic endeavors to take computer science (CS) and computational thinking (CT) to scale in middle and high school classrooms are underway with curricula that emphasize the enactment of authentic CT skills, especially in the context of programming in block-based programming environments. There is, therefore, a growing need to measure students' learning of CT in the context of programming and also support all learners through this process of learning computational problem solving. The goal of this research is to explore hypothesis-driven approaches that can be combined with data-driven ones to better interpret student actions and processes in log data captured from block-based programming environments with the goal of measuring and assessing students' CT skills. Informed by past literature and based on our empirical work examining a dataset from the use of the Fairy Assessment in the Alice programming environment in middle schools, we present a framework that formalizes a process where a hypothesis-driven approach informed by Evidence-Centered Design effectively complements data-driven learning analytics in interpreting students' programming process and assessing CT in block-based programming environments. We apply the framework to the design of Alice tasks for high school CS to be used for measuring CT during programming.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/ZU3LB7XK/Grover et al. - 2017 - A Framework for Using Hypothesis-Driven Approaches.pdf}
}

@article{groverFrameworkUsingHypothesisDriven2017a,
  title = {A {{Framework}} for {{Using Hypothesis-Driven Approaches}} to {{Support Data-Driven Learning Analytics}} in {{Measuring Computational Thinking}} in {{Block-Based Programming Environments}}},
  author = {Grover, Shuchi and Basu, Satabdi and Bienkowski, Marie and Eagle, Michael and Diana, Nicholas and Stamper, John},
  year = {2017},
  month = sep,
  journal = {ACM Transactions on Computing Education},
  volume = {17},
  number = {3},
  pages = {1--25},
  issn = {1946-6226},
  doi = {10.1145/3105910},
  urldate = {2023-03-16},
  abstract = {Systematic endeavors to take computer science (CS) and computational thinking (CT) to scale in middle and high school classrooms are underway with curricula that emphasize the enactment of authentic CT skills, especially in the context of programming in block-based programming environments. There is, therefore, a growing need to measure students' learning of CT in the context of programming and also support all learners through this process of learning computational problem solving. The goal of this research is to explore hypothesis-driven approaches that can be combined with data-driven ones to better interpret student actions and processes in log data captured from block-based programming environments with the goal of measuring and assessing students' CT skills. Informed by past literature and based on our empirical work examining a dataset from the use of the Fairy Assessment in the Alice programming environment in middle schools, we present a framework that formalizes a process where a hypothesis-driven approach informed by Evidence-Centered Design effectively complements data-driven learning analytics in interpreting students' programming process and assessing CT in block-based programming environments. We apply the framework to the design of Alice tasks for high school CS to be used for measuring CT during programming.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/9MUKYCMT/Grover et al. - 2017 - A Framework for Using Hypothesis-Driven Approaches.pdf}
}

@inproceedings{groverMeasuringStudentLearning2017,
  title = {Measuring {{Student Learning}} in {{Introductory Block-Based Programming}}: {{Examining Misconceptions}} of {{Loops}}, {{Variables}}, and {{Boolean Logic}}},
  shorttitle = {Measuring {{Student Learning}} in {{Introductory Block-Based Programming}}},
  booktitle = {Proceedings of the 2017 {{ACM SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  author = {Grover, Shuchi and Basu, Satabdi},
  year = {2017},
  month = mar,
  series = {{{SIGCSE}} '17},
  pages = {267--272},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3017680.3017723},
  urldate = {2023-05-09},
  abstract = {Programming in block-based environments is a key element of introductory computer science (CS) curricula in K-12 settings. Past research conducted in the context of text-based programming points to several challenges related to novice learners' understanding of foundational programming constructs such as variables, loops, and expressions. This research aims to develop assessment items for measuring student understanding in introductory CS classrooms in middle school using a principled approach for assessment design. This paper describes the design of assessments items that were piloted with 100 6th, 7th, 8th graders who had completed an introductory programming course using Scratch. The results and follow-up cognitive thinkalouds indicate that students are generally unfamiliar with the use of variables, and harbor misconceptions about them. They also have trouble with other aspects of introductory programming such as how loops work, and how the Boolean operators work. These findings point to the need for pedagogy that combines popular constructionist activities with those that target conceptual learning, along with better professional development to support teachers' conceptual learning of these foundational constructs.},
  isbn = {978-1-4503-4698-6},
  keywords = {assessments,block based programming,boolean logic,introductory programming,K-12 CS education,loops,middle school CS,novice misconceptions,variables},
  file = {/Users/igormoreno/Zotero/storage/YSSBGW5T/Grover and Basu - 2017 - Measuring Student Learning in Introductory Block-B.pdf}
}

@inproceedings{gruberBringingAbstractConcepts2008,
  title = {Bringing {{Abstract Concepts Alive}}. {{How}} to {{Base Learning Success}} on the {{Principles}} of {{Playing}}, {{Curiosity}} and {{In-Classroom Differentiation}}},
  booktitle = {Informatics {{Education}} - {{Supporting Computational Thinking}}},
  author = {Gruber, Peter},
  editor = {Mittermeir, Roland T. and Sys{\l}o, Maciej M.},
  year = {2008},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {134--141},
  publisher = {{Springer Berlin Heidelberg}},
  abstract = {This article addresses the question which goals a valuable and sustainable learning process should aim at. Meaningful learning activities, emotional commitment and meeting individual needs are identified as core principles. According to these principles, several theories that support the construction of such lesson sequences are discussed. In particular, the importance of knowledge as compared to pure information retrieving is highlighted. From this perspective, the concept of In-Classroom Differentiation is derived. Finally, a concrete example demonstrates how this concept translates from theory into practice. Thus, this article addresses both, the theoretical foundation and the practical implementation.},
  isbn = {978-3-540-69924-8},
  langid = {english},
  keywords = {curiosity,in-classroom differentiation,individualization,learning activities,motivation},
  file = {/Users/igormoreno/Zotero/storage/4CZMB95S/Gruber - 2008 - Bringing Abstract Concepts Alive. How to Base Lear.pdf}
}

@article{guernicIndustrialExperienceReport2016,
  title = {Industrial {{Experience Report}} on the {{Formal Specification}} of a {{Packet Filtering Language Using}} the {{K Framework}}},
  author = {Guernic, Gurvan Le and Combemale, Benoit and Duarte, Jos{\'e} Angel Galindo},
  year = {2016},
  urldate = {2019-11-11},
  abstract = {Many project-specific languages, including in particular filtering languages, are defined using non-formal specifications written in natural languages. This leads to ambiguities and errors in the specification of those languages. This paper reports on an industrial experiment on using a tool-supported language specification framework (K) for the formal specification of the syntax and semantics of a filtering language having a complexity similar to those of real-life projects. This experimentation aims at estimating, in a specific industrial setting, the difficulty and benefits of formally specifying a packet filtering language using a tool-supported formal approach.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/MPXXY4KJ/Guernic et al - 2016 - Industrial Experience Report on the Formal Specification of a Packet Filtering.pdf;/Users/igormoreno/Zotero/storage/J9SH8WJ2/hal-01401849.html}
}

@article{guerrieroTeachersPedagogicalKnowledge,
  title = {Teachers' {{Pedagogical Knowledge}} and the {{Teaching Profession}}},
  author = {Guerriero, Sonia and Guerriero, Sonia},
  pages = {7},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/ENGET5BY/Guerriero and Guerriero - Teachers’ Pedagogical Knowledge and the Teaching Profession.pdf}
}

@inproceedings{guhaEssenceJavascript2010,
  ids = {guhaEssenceJavaScript2010},
  title = {The Essence of Javascript},
  booktitle = {Proceedings of the 24th {{European}} Conference on {{Object-oriented}} Programming},
  author = {Guha, Arjun and Saftoiu, Claudiu and Krishnamurthi, Shriram},
  year = {2010},
  month = jun,
  series = {{{ECOOP}}'10},
  pages = {126--150},
  publisher = {{Springer-Verlag}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-14107-2_7},
  urldate = {2020-11-12},
  abstract = {We reduce JavaScript to a core calculus structured as a small-step operational semantics. We present several peculiarities of the language and show that our calculus models them. We explicate the desugaring process that turns JavaScript programs into ones in the core. We demonstrate faithfulness to JavaScript using real-world test suites. Finally, we illustrate utility by defining a security property, implementing it as a type system on the core, and extending it to the full language.},
  isbn = {978-3-642-14106-5},
  annotation = {00278},
  file = {/Users/igormoreno/Zotero/storage/6JTE4EG2/Guha et al. - 2010 - The Essence of JavaScript.pdf}
}

@misc{GuidelinesIncludingGrey,
  title = {Guidelines for Including Grey Literature and Conducting Multivocal Literature Reviews in Software Engineering | {{Elsevier Enhanced Reader}}},
  doi = {10.1016/j.infsof.2018.09.006},
  urldate = {2022-02-09},
  howpublished = {https://reader.elsevier.com/reader/sd/pii/S0950584918301939?token=4AF616E7B805FA79DEA72C7778720A97EC035F662AE397FAB652E11B8412C7153FCDF24526C01EE399162AB4B62AB9CC\&originRegion=eu-west-1\&originCreation=20220209145248},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/6VWEJI2Q/Guidelines for including grey literature and condu.pdf;/Users/igormoreno/Zotero/storage/XVBLEDBB/S0950584918301939.html}
}

@incollection{gundlachWhatPsychologicalInstrument2007,
  title = {What Is a Psychological Instrument?},
  booktitle = {Psychology's {{Territories}}: {{Historical}} and Contemporary Perspectives from Different Disciplines.},
  author = {Gundlach, Horst},
  translator = {Klohr, Cynthia and Ash, Mitchell},
  year = {2007},
  pages = {195--224},
  publisher = {{Lawrence Erlbaum Associates Publishers}},
  address = {{Mahwah,  NJ,  US}},
  abstract = {Countless instruments have been used in the science of psychology--in research, for demonstrations and teaching purposes, and in psychological practice. These implements have come to be known as psychological instruments. Before investigating what the term psychological instrument designates, a few remarks on the phrase itself are in order. The term is not often used, and we rarely encounter it even in studies on scientific instruments or on the history of such instruments. Yet the term is not introduced here ad hoc. It has a past of its own. Before we delineate what constitutes the set of all scientific instruments used in psychological research, demonstrations and teaching, or practice, we must settle two questions: (a) just what constitutes a scientific instrument and (b) what we mean by psychology. (PsycInfo Database Record (c) 2020 APA, all rights reserved)},
  isbn = {0-8058-6137-8 (Paperback); 0-8058-6136-X (Paperback); 1-4106-1490-5 (Digital (undefined format)); 9-780805-861372 (Paperback)},
  keywords = {Psychological Assessment},
  file = {/Users/igormoreno/Zotero/storage/SN2D498C/Gundlach - 2007 - What is a psychological instrument.pdf}
}

@inproceedings{guoLearnersourcingScaleOvercome2020,
  title = {Learnersourcing at {{Scale}} to {{Overcome Expert Blind Spots}} for {{Introductory Programming}}: {{A Three-Year Deployment Study}} on the {{Python Tutor Website}}},
  shorttitle = {Learnersourcing at {{Scale}} to {{Overcome Expert Blind Spots}} for {{Introductory Programming}}},
  booktitle = {Proceedings of the {{Seventh ACM Conference}} on {{Learning}} @ {{Scale}}},
  author = {Guo, Philip J. and Markel, Julia M. and Zhang, Xiong},
  year = {2020},
  month = aug,
  series = {L@{{S}} '20},
  pages = {301--304},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3386527.3406733},
  urldate = {2021-01-15},
  abstract = {It is hard for experts to create good instructional resources due to a phenomenon known as the expert blind spot: They forget what it was like to be a novice, so they cannot pinpoint exactly where novices commonly struggle and how to best phrase their explanations. To help overcome these expert blind spots for computer programming topics, we created a learnersourcing system that elicits explanations of misconceptions directly from learners while they are coding. We have deployed this system for the past three years to the widely-used Python Tutor coding website (pythontutor.com) and collected 16,791 learner-written explanations. To our knowledge, this is the largest dataset of explanations for programming misconceptions. By inspecting this dataset, we found surprising insights that we did not originally think of due to our own expert blind spots as programming instructors. We are now using these insights to improve compiler and run-time error messages to explain common novice misconceptions.},
  isbn = {978-1-4503-7951-9},
  keywords = {learnersourcing,programming,python tutor,syntax errors},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/Y7B595K5/Guo et al - 2020 - Learnersourcing at Scale to Overcome Expert Blind Spots for Introductory.pdf}
}

@inproceedings{guoNonNativeEnglishSpeakers2018,
  title = {Non-{{Native English Speakers Learning Computer Programming}}: {{Barriers}}, {{Desires}}, and {{Design Opportunities}}},
  shorttitle = {Non-{{Native English Speakers Learning Computer Programming}}},
  booktitle = {Proceedings of the 2018 {{CHI Conference}} on {{Human Factors}} in {{Computing Systems}}  - {{CHI}} '18},
  author = {Guo, Philip J.},
  year = {2018},
  pages = {1--14},
  publisher = {{ACM Press}},
  address = {{Montreal QC, Canada}},
  doi = {10.1145/3173574.3173970},
  urldate = {2020-06-22},
  abstract = {People from nearly every country are now learning computer programming, yet the majority of programming languages, libraries, documentation, and instructional materials are in English. What barriers do non-native English speakers face when learning from English-based resources? What desires do they have for improving instructional materials? We investigate these questions by deploying a survey to a programming education website and analyzing 840 responses spanning 86 countries and 74 native languages. We found that non-native English speakers faced barriers with reading instructional materials, technical communication, reading and writing code, and simultaneously learning English and programming. They wanted instructional materials to use simplified English without culturally-specific slang, to use more visuals and multimedia, to use more culturally-agnostic code examples, and to embed inline dictionaries. Programming also motivated some to learn English better and helped clarify logical thinking about natural languages. Based on these findings, we recommend learner-centered design improvements to programming-related instructional resources and tools to make them more accessible to people around the world.},
  isbn = {978-1-4503-5620-6},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/LJTG24MT/Guo - 2018 - Non-Native English Speakers Learning Computer Programming.pdf}
}

@inproceedings{guoOnlinePythonTutor2013,
  title = {Online Python Tutor: Embeddable Web-Based Program Visualization for Cs Education},
  shorttitle = {Online Python Tutor},
  booktitle = {Proceeding of the 44th {{ACM}} Technical Symposium on {{Computer}} Science Education - {{SIGCSE}} '13},
  author = {Guo, Philip J.},
  year = {2013},
  pages = {579},
  publisher = {{ACM Press}},
  address = {{Denver, Colorado, USA}},
  doi = {10.1145/2445196.2445368},
  urldate = {2020-06-22},
  abstract = {This paper presents Online Python Tutor, a web-based program visualization tool for Python, which is becoming a popular language for teaching introductory CS courses. Using this tool, teachers and students can write Python programs directly in the web browser (without installing any plugins), step forwards and backwards through execution to view the run-time state of data structures, and share their program visualizations on the web.},
  isbn = {978-1-4503-1868-6},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/9U4YZP9B/Guo - 2013 - Online python tutor embeddable web-based program .pdf}
}

@article{gurrEffectiveDiagrammaticCommunication1999,
  title = {Effective {{Diagrammatic Communication}}: {{Syntactic}}, {{Semantic}} and {{Pragmatic Issues}}},
  shorttitle = {Effective {{Diagrammatic Communication}}},
  author = {Gurr, C. A.},
  year = {1999},
  month = aug,
  journal = {Journal of Visual Languages \& Computing},
  volume = {10},
  number = {4},
  pages = {317--342},
  issn = {1045-926X},
  doi = {10.1006/jvlc.1999.0130},
  urldate = {2018-10-02},
  abstract = {The study of systems of communication may be divided into three parts: syntax, semantics and pragmatics. Accounts of the embedding of text-based languages in the computational processes of reasoners and communicators are relatively well developed, with accounts available for a spectrum of languages ranging from the highly formalised and constrained, such as formal logics, to the highly informal and unconstrained natural languages used in everyday conversations. Analogies between diagrams and such textual representations of information are quite revealing about similarities and differences and can provide a useful starting point for exploring the issues in a theory of diagrammatic communication. This paper sketches out a theory of diagrammatic communication, based upon recent studies of the syntactic, semantic and pragmatic component issues which such a theory must accommodate. In the context of this theory an exploration is made of the issues involved in answering the question: what makes for an effective diagrammatic representation? To achieve this we review a framework in which we may explore properties of representations, and properties of the relation between representations and that which they represent. By relating this framework to our sketched theory of diagrammatic communication, we explore the concept of effectiveness in diagrams. This process of exploration enables us to relate previous studies of the effectiveness of diagrams into a broader, unified framework, which clarifies both the various issues relating to effectiveness and the relations between them.},
  file = {/Users/igormoreno/Zotero/storage/LHK6GM3D/Gurr - 1999 - Effective Diagrammatic Communication.pdf;/Users/igormoreno/Zotero/storage/RB958SQQ/S1045926X99901301.html}
}

@article{guskeyLessonsMasteryLearning2010,
  title = {Lessons of {{Mastery Learning}}},
  author = {Guskey, Thomas R.},
  year = {2010},
  month = oct,
  journal = {Educational Leadership},
  volume = {68},
  number = {2},
  pages = {52--57},
  publisher = {{ASCD}},
  issn = {0013-1784},
  doi = {10/vol68/num02/abstract.aspx},
  urldate = {2023-07-03},
  abstract = {Schools are frequently inundated with demands to implement new instructional interventions and teaching methods that are not yet backed up by a solid body of research. Fortunately, many of these innovations include elements of more established strategies for which evidence of positive effects does exist. Guskey describes the core elements of one such well-established teaching method, mastery learning. He explains a number of its essential features--including diagnostic pre-assessment with pre-teaching, progress monitoring through regular formative assessments, and enrichment or extension activities--which are also incorporated into the Response to Intervention model.},
  langid = {english},
  keywords = {Concept Formation,Enrichment Activities,Feedback (Response),Formative Evaluation,Group Instruction,Mastery Learning,Response to Intervention,Skill Development,Student Evaluation,Teaching Methods},
  annotation = {ERIC Number: EJ913779},
  file = {/Users/igormoreno/Zotero/storage/ND2G7WIP/eric.ed.gov.html}
}

@article{guskeyLessonsMasteryLearning2010a,
  title = {Lessons of {{Mastery Learning}}},
  author = {Guskey, Thomas},
  year = {2010},
  month = oct,
  journal = {Educational leadership: journal of the Department of Supervision and Curriculum Development, N.E.A},
  volume = {68},
  pages = {52--57},
  file = {/Users/igormoreno/Zotero/storage/EUD4FLQZ/Guskey - 2010 - Lessons of Mastery Learning.pdf}
}

@inproceedings{gusukumaInstructionalDesignKnowledge2018,
  title = {Instructional {{Design}} + {{Knowledge Components}}: {{A Systematic Method}} for {{Refining Instruction}}},
  shorttitle = {Instructional {{Design}} + {{Knowledge Components}}},
  booktitle = {Proceedings of the 49th {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Gusukuma, Luke and Bart, Austin Cory and Kafura, Dennis and Ernst, Jeremy and Cennamo, Katherine},
  year = {2018},
  month = feb,
  series = {{{SIGCSE}} '18},
  pages = {338--343},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3159450.3159478},
  urldate = {2021-05-25},
  abstract = {This paper reports on a systematic method used to improve an existing unit of instruction. The method is distinctive in combining steps of instructional design with "knowledge components" from a cognitively-based framework of learning. Instructional design is used to develop assessment instruments that incorporate information about student misconceptions. The method uses the assessment instruments to evaluate student performance and learning gains, while statistical analysis evaluates the quality of the instruments themselves using measures of difficulty and discrimination. Fine-grain insight into possible improvements is enabled by the knowledge components implicated by the assessment. The method is illustrated and evaluated by applying it to a unit of instruction on collection-based iteration in a computational thinking class. Data gathered during this evaluation highlights a number of opportunities within the unit to refine the instruction.},
  isbn = {978-1-4503-5103-4},
  keywords = {assessment,CS education,CS1,instructional design,knowledge components},
  file = {/Users/igormoreno/Zotero/storage/856WGPJI/Gusukuma et al - 2018 - Instructional Design + Knowledge Components.pdf}
}

@inproceedings{gusukumaMisconceptionDrivenFeedbackResults2018,
  ids = {gusukumaMisconceptionDrivenFeedbackResults2018a},
  title = {Misconception-{{Driven Feedback}}: {{Results}} from an {{Experimental Study}}},
  shorttitle = {Misconception-{{Driven Feedback}}},
  booktitle = {Proceedings of the 2018 {{ACM Conference}} on {{International Computing Education Research}}  - {{ICER}} '18},
  author = {Gusukuma, Luke and Bart, Austin Cory and Kafura, Dennis and Ernst, Jeremy},
  year = {2018},
  pages = {160--168},
  publisher = {{ACM Press}},
  address = {{Espoo, Finland}},
  doi = {10.1145/3230977.3231002},
  urldate = {2018-10-22},
  abstract = {The feedback given to novice programmers can be substantially improved by delivering advice focused on learners' cognitive misconceptions contextualized to the instruction. Building on this idea, we present Misconception-Driven Feedback (MDF); MDF uses a cognitive student model and program analysis to detect mistakes and uncover underlying misconceptions. To evaluate the impact of MDF on student learning, we performed a quasi-experimental study of novice programmers that compares conventional run-time and output check feedback against MDF over three semesters. Inferential statistics indicates MDF supports significantly accelerated acquisition of conceptual knowledge and practical programming skills. Additionally, we present descriptive analysis from the study indicating the MDF student model allows for complex analysis of student mistakes and misconceptions that can suggest improvements to the feedback, the instruction, and to specific students.},
  isbn = {978-1-4503-5628-2},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/QPCYJMXF/Gusukuma et al - 2018 - Misconception-Driven Feedback.pdf;/Users/igormoreno/Zotero/storage/TLL88RC2/Gusukuma et al. - 2018 - Misconception-Driven Feedback Results from an Exp.pdf}
}

@inproceedings{gusukumaPedalInfrastructureAutomated2020,
  title = {Pedal: {{An Infrastructure}} for {{Automated Feedback Systems}}},
  shorttitle = {Pedal},
  booktitle = {Proceedings of the 51st {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Gusukuma, Luke and Bart, Austin Cory and Kafura, Dennis},
  year = {2020},
  month = feb,
  pages = {1061--1067},
  publisher = {{ACM}},
  address = {{Portland OR USA}},
  doi = {10.1145/3328778.3366913},
  urldate = {2021-08-17},
  abstract = {This paper describes Pedal, an innovative approach to the automated creation of feedback given to students in programming classes. Pedal is so named because it supports the PEDAgogical goals of instructors and is an expandable Library of components motivated by these goals. Pedal currently comes with components for type inferencing, flow analysis, pattern matching, and unit testing to provide an instructor with a rich set of resources to use in authoring and prioritizing feedback. The larger vision is the looselycoupled architecture whose components can be readily expanded or replaced. The Pedal library components are motivated by a study of contemporary automated feedback systems and our own experience. Pedal's components are described and examples are given of Pedal-based feedback from three different introductory classes at two different universities. The integration of Pedal into several programming and autograding environments is briefly described.},
  isbn = {978-1-4503-6793-6},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/XDEFPDZL/Gusukuma et al. - 2020 - Pedal An Infrastructure for Automated Feedback Sy.pdf}
}

@mastersthesis{guthFormalSemanticsPython2013,
  title = {A {{Formal Semantics}} of {{Python}} 3.3},
  author = {Guth, Dwight},
  year = {2013},
  address = {{Urbana, IL, USA}},
  abstract = {This thesis demonstrates the ability to formalize the operational semantics of complex programming languages in the K Semantic Framework, which provides an interpreter as well as analysis tools for exploring the state space of programs and performing static reasoning about programs. This is demonstrated by means of a partial semantics for the latest version of the popular Python programming language. With additional effort, this semantics will allow users to reason about Python programs, including sources of nondeterminism in the Python language specification, and formal reasoning about their behavior. While the semantics is incomplete, it is executable and has been thoroughly tested against a number of unit tests, and will be demonstrated to perform as well as the reference implementation of Python, CPython, on those features which have been completed. On these features, it also performs as well as or better than other comparable operational semantics of Python.},
  langid = {english},
  school = {University of Illinois at Urbana-Champaign},
  file = {/Users/igormoreno/Zotero/storage/LXJLIL7R/Guth - 2013 - A Formal Semantics of Python 3.3.pdf}
}

@article{guzdialBalancingTeachingCS2017,
  title = {Balancing Teaching {{CS}} Efficiently with Motivating Students},
  author = {Guzdial, Mark},
  year = {2017},
  month = may,
  journal = {Communications of the ACM},
  volume = {60},
  number = {6},
  pages = {10--11},
  issn = {0001-0782, 1557-7317},
  doi = {10.1145/3077227},
  urldate = {2020-06-22},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/57AVCZFZ/Guzdial - 2017 - Balancing teaching CS efficiently with motivating students.pdf}
}

@article{guzdialCentralizedMindsetStudent1995,
  title = {Centralized Mindset: A Student Problem with Object-Oriented Programming},
  shorttitle = {Centralized Mindset},
  author = {Guzdial, Mark},
  year = {1995},
  month = mar,
  journal = {ACM SIGCSE Bulletin},
  volume = {27},
  number = {1},
  pages = {182--185},
  issn = {0097-8418},
  doi = {10.1145/199691.199772},
  urldate = {2021-01-08},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/RKPLI3SN/Guzdial - 1995 - Centralized mindset a student problem with object.pdf}
}

@incollection{guzdialHistoryComputingEducation2019,
  title = {The {{History}} of {{Computing Education Research}}},
  booktitle = {The {{Cambridge Handbook}} of {{Computing Education Research}}},
  author = {Guzdial, Mark and Du Boulay, Benedict},
  editor = {{S. A. Fincher} and {A. V. Robins}},
  year = {2019},
  pages = {11--39},
  publisher = {{Cambridge University Press}},
  address = {{Cambridge, UK}},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/TEGRVDS3/Guzdial and Du Boulay - 2019 - The History of Computing Education Research.pdf}
}

@book{guzdialLearnerCenteredDesignComputing2015,
  title = {Learner-{{Centered Design}} of {{Computing Education}}: {{Research}} on {{Computing}} for {{Everyone}}},
  shorttitle = {Learner-{{Centered Design}} of {{Computing Education}}},
  author = {Guzdial, Mark},
  year = {2015},
  month = nov,
  series = {Synthesis {{Lectures}} on {{Human-Centered Informatics}}},
  volume = {8},
  publisher = {{Morgan \& Claypool}},
  urldate = {2018-12-11},
  langid = {english},
  keywords = {computer science education,computing education,learner-centered design},
  file = {/Users/igormoreno/Zotero/storage/NFFHF2CQ/Guzdial - 2015 - Learner-Centered Design of Computing Education Re.pdf}
}

@inproceedings{guzdialMediaComputationCourse2003,
  title = {A Media Computation Course for Non-Majors},
  booktitle = {Proceedings of the 8th Annual Conference on {{Innovation}} and Technology in Computer Science Education},
  author = {Guzdial, Mark},
  year = {2003},
  month = jun,
  pages = {104--108},
  publisher = {{ACM}},
  address = {{Thessaloniki Greece}},
  doi = {10.1145/961511.961542},
  urldate = {2023-05-09},
  isbn = {978-1-58113-672-2},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/ZB6Y9YP3/Guzdial - 2003 - A media computation course for non-majors.pdf}
}

@article{guzdialScienceEngineering2011,
  title = {From Science to Engineering},
  author = {Guzdial, Mark},
  year = {2011},
  month = feb,
  journal = {Communications of the ACM},
  volume = {54},
  number = {2},
  pages = {37--39},
  issn = {0001-0782},
  doi = {10.1145/1897816.1897831},
  urldate = {2022-11-02},
  abstract = {Exploring the dual nature of computing education research.},
  file = {/Users/igormoreno/Zotero/storage/CHVHS46D/Guzdial - 2011 - From science to engineering.pdf}
}

@article{guzdialTeachingNintendoGeneration2002,
  title = {Teaching the {{Nintendo}} Generation to Program},
  author = {Guzdial, Mark and Soloway, Elliot},
  year = {2002},
  month = apr,
  journal = {Communications of the ACM},
  volume = {45},
  number = {4},
  pages = {17--21},
  issn = {0001-0782, 1557-7317},
  doi = {10.1145/505248.505261},
  urldate = {2023-04-20},
  abstract = {Preparing a new strategy for teaching introductory computer programming.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/ZNAWBEVM/Guzdial and Soloway - 2002 - Teaching the Nintendo generation to program.pdf}
}

@inproceedings{guzmanDataDrivenTechniqueMisconception2010,
  title = {A {{Data-Driven Technique}} for {{Misconception Elicitation}}},
  booktitle = {User {{Modeling}}, {{Adaptation}}, and {{Personalization}}},
  author = {Guzm{\'a}n, Eduardo and Conejo, Ricardo and G{\'a}lvez, Jaime},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Doug and Vardi, Moshe Y. and Weikum, Gerhard and De Bra, Paul and Kobsa, Alfred and Chin, David},
  year = {2010},
  volume = {6075},
  pages = {243--254},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-13470-8_23},
  urldate = {2018-10-22},
  abstract = {When a quantitative student model is constructed, one of the first tasks to perform is to identify the domain concepts assessed. In general, this task is easily done by the domain experts. In addition, the model may include some misconceptions which are also identified by these experts. Identifying these misconceptions is a difficult task, however, and one which requires considerable previous experience with the students. In fact, sometimes it is difficult to relate these misconceptions to the elements in the knowledge diagnostic system which feeds the student model. In this paper we present a data-driven technique which aims to help elicit the domain misconceptions. It also aims to relate these misconceptions with the assessment activities (e.g. exercises, problems or test questions), which assess the subject in question.},
  isbn = {978-3-642-13469-2 978-3-642-13470-8},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/98JKHE3U/Guzmán et al - 2010 - A Data-Driven Technique for Misconception Elicitation.pdf}
}

@article{guzzettiPromotingConceptualChange1993,
  title = {Promoting {{Conceptual Change}} in {{Science}}: {{A Comparative Meta-Analysis}} of {{Instructional Interventions}} from {{Reading Education}} and {{Science Education}}},
  shorttitle = {Promoting {{Conceptual Change}} in {{Science}}},
  author = {Guzzetti, Barbara J. and Snyder, Tonja E. and Glass, Gene V and Gamas, Warren S.},
  year = {1993},
  journal = {Reading Research Quarterly},
  volume = {28},
  number = {2},
  eprint = {747886},
  eprinttype = {jstor},
  pages = {117--159},
  publisher = {{[Wiley, International Reading Association]}},
  issn = {0034-0553},
  doi = {10.2307/747886},
  urldate = {2021-01-16},
  abstract = {Numerous investigations have been conducted in reading education and science education to test the effects of various instructional interventions on misconceptions. These studies have produced disparate and inconclusive results. The purpose of this project was, therefore, to synthesize quantitatively the experimental and quasi-experimental research designed to produce conceptual change. A meta-analytical perspective was used to conduct a cross-disciplinary analysis. Results from the accumulated evidence identified specific strategies in reading education and particular approaches in science education that were effective in producing conceptual change. These effective procedures had a common element of producing conceptual conflict. Results of the analysis and scrutiny of the research from these two disciplines raise questions regarding construct definition and measurement of conceptual change. /// [French] De nombreuses recherches ont \'et\'e r\'ealis\'ees en p\'edagogie de la lecture et en p\'edagogie scientifique pour tester les effets de diff\'erentes interventions p\'edagogiques sur les incompr\'ehensions. Ces \'etudes ont apport\'e des r\'esultats disparates et peu concluants. Ce projet a donc pour but d'effectuer une synth\`ese quantitative des recherches exp\'erimentales et quasi-exp\'erimentales r\'ealis\'ees pour produire un changement conceptuel. On a adopt\'e une perspective m\'eta-analytique pour r\'ealiser cette analyse interdisciplinaire. Les r\'esultats provenant des donn\'ees accumul\'ees ont identifi\'e des strat\'egies sp\'ecifiques en lecture et des approches particuli\`eres dans l'enseignement scientifique s'\'etant r\'ev\'el\'ees efficaces dans la production d'un changement conceptuel. Ces proc\'edures efficaces ont pour \'el\'ement commun de provoquer un conflit conceptuel. Les r\'esultats de l'analyse et l'examen minutieux des recherches soul\`event des questions relatives \`a la d\'efinition de construction et \`a la mesure du changement conceptuel. /// [Spanish] Numerosas investigaciones se han llevado a cabo en la ense\~nanza/aprendizaje de la lectura y de la ciencia para evaluar los efectos de varias intervenciones did\'acticas sobre errores de concepto. Estos estudios han producido resultados dispares e inconclusos. El prop\'osito de este proyecto fue, por lo tanto, sintetizar cuantitativamente la investigaci\'on experimental y cuasi experimental dise\~nada para producir un cambio conceptual. Se us\'o una perspectiva meta-anal\'itica para hacer un an\'alisis interdisciplinario. Los resultados de la evidencia acumulada identificaron estrategias espec\'ificas en la ense\~nanza/aprendizaje de la lectura y abordajes particulares en el caso de la ciencia que fueron efectivos para producir un cambio conceptual. Estos procedimientos efectivos ten\'ian un elemento en com\'un para producir el cambio conceptual. Los resultados de los an\'alisis y la observaci\'on minuciosa de la investigaci\'on en estas disciplinas plantean interrogantes acerca de la definici\'on de constructos y la medici\'on del cambio conceptual. /// [German] Zahlreiche untersuchungen im Lese- und Wissenschaftsunterricht sind durchgef\"uhrt worden, um die Auswirkungen verschiedener Lernhilfen auf Verstehensschwierigkeiten zu testen. Diese Studien erbrachten jedoch disparate und nicht schl\"ussige Resultate. Die Absicht dieses Projektes war daher, die experimentellen und quasi experimentell gest\"utzten Forschungen, die einen konzeptuellen Wechsel herbeif\"uhren wollen, zusammenzuschlie\ss en. Unter metaanalytischer Perspektive wurde eine interdisziplin\"are Analyse durchgef\"uhrt. Resultate dieser gesammelten Erkenntnisse konnten spezifische Strategien des Leseunterrichts und spezielle Herangehensweisen des wissenschaftlichen Unterrichts darstellen, die einen wirksamen Wechsel von Konzepten herbeif\"uhrten. Gemeinsam war diesen wirksamen Prozeduren, da\ss{} sie konzeptuelle Konflikte erzeugten. Ergebnisse der Analyse und Untersuchung der beiden Wissenschaftsdisziplinen stellten weiterhin Fragen hinsichtlich einer Definition und Messung des Konzeptwechsels.},
  annotation = {00702},
  file = {/Users/igormoreno/Zotero/storage/IYPU5WUE/Guzzetti et al. - 1993 - Promoting Conceptual Change in Science A Comparat.pdf}
}

@inproceedings{haaranenSearchEmotionalDesign2015,
  title = {In {{Search}} of the {{Emotional Design Effect}} in {{Programming}}},
  booktitle = {2015 {{IEEE}}/{{ACM}} 37th {{IEEE International Conference}} on {{Software Engineering}}},
  author = {Haaranen, Lassi and Ihantola, Petri and Sorva, Juha and Vihavainen, Arto},
  year = {2015},
  month = may,
  pages = {428--434},
  publisher = {{IEEE}},
  address = {{Florence, Italy}},
  doi = {10.1109/ICSE.2015.175},
  urldate = {2020-06-22},
  isbn = {978-1-4799-1934-5},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/JTC8FV9R/Haaranen et al - 2015 - In Search of the Emotional Design Effect in Programming.pdf}
}

@inproceedings{habermanActivatingBlackBoxes2001,
  title = {Activating \&\#x201c;Black Boxes\&\#x201d; Instead of Opening \&\#x201c;Zipper\&\#x201d; - a Method of Teaching Novices Basic {{CS}} Concepts},
  booktitle = {Proceedings of the 6th Annual Conference on {{Innovation}} and Technology in Computer Science Education},
  author = {Haberman, Bruria and Kolikant, Yifat Ben-David},
  year = {2001},
  month = jun,
  series = {{{ITiCSE}} '01},
  pages = {41--44},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/377435.377464},
  urldate = {2021-01-08},
  abstract = {In this paper we implement and evaluate of a unique instructional method for teaching basic concepts in computer science. This method is based on introducing a new concept through activating "black boxes" that demonstrate the properties of the concept and its role in the computing process. We used the "black box"-based instructional method to teach basic concepts of computation to novice high-school students. Later we conducted research aimed at assessing the effectiveness of this method on novice students' perceptions of basic concepts in computation. Research results indicated that students who learned according to the "black box"-based approach gained a better understanding of the basic computational model, compared to students who learned according to the traditional "zipper" approach.},
  isbn = {978-1-58113-330-1},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/84BIW2JH/Haberman e Kolikant - 2001 - Activating &#x201c;black boxes&#x201d; instead of .pdf}
}

@article{habermannIntroductoryEducationComputer1991,
  title = {Introductory Education in Computer Science},
  author = {Habermann, A. Nico},
  year = {1991},
  month = jan,
  journal = {Education and Computing},
  volume = {7},
  number = {1-2},
  pages = {73--86},
  issn = {01679287},
  doi = {10.1016/S0167-9287(05)80083-4},
  urldate = {2018-11-06},
  abstract = {There is room for improvement in the way introductory computer science is taught. In general, most of the available time is spent on teaching programming language syntax and very little on studying examples of good programs. The assertion approach to program verification has in practice resulted in a technique that resembles assembly code programming of more than 30 years ago. This practice has also encouraged the view that each new program is an invention that must be developed from scratch. In addition, the student's attention is largely directed towards the how of the technique and hardly towards learning the proven facts. In this paper, it is argued that the introduction to programming can be improved in several ways: by starting with a systems view that encourages students to study good examples and to reuse existing programs, by judging program quality relative to similar programs and program abstractions, and by building up a coherent body of knowledge that students can apply in program design and implementation.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/IX9VQSBI/Habermann - 1991 - Introductory education in computer science.pdf}
}

@article{haglundUnderstandingStudentsFailure2021,
  title = {Understanding {{Students}}' {{Failure}} to Use {{Functions}} as a {{Tool}} for {{Abstraction}} \textendash{} {{An Analysis}} of {{Questionnaire Responses}} and {{Lab Assignments}} in a {{CS1 Python Course}}},
  author = {Haglund, Pontus and Str{\"o}mb{\"a}ck, Filip and Mannila, Linda},
  year = {2021},
  month = dec,
  journal = {Informatics in Education},
  volume = {20},
  number = {4},
  pages = {583--614},
  issn = {1648-5831, 2335-8971},
  doi = {10.15388/infedu.2021.26},
  urldate = {2023-03-16},
  abstract = {Controlling complexity through the use of abstractions is a critical part of problem solving in programming. Thus, becoming proficient with procedural and data abstraction through the use of user-defined functions is important. Properly using functions for abstraction involves a number of other core concepts, such as parameter passing, scope and references, which are known to be difficult. Therefore, this paper aims to study students' proficiency with these core concepts, and students' ability to apply procedural and data abstraction to solve problems. We collected data from two years of an introductory Python course, both from a questionnaire and from two lab assignments. The data shows that students had difficulties with the core concepts, and a number of issues solving problems with abstraction. We also investigate the impact of using a visualization tool when teaching the core concepts.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/IRWD2PNU/Haglund et al. - 2021 - Understanding Students’ Failure to use Functions a.pdf}
}

@article{haglundUnderstandingStudentsFailure2021a,
  title = {Understanding {{Students}}' {{Failure}} to Use {{Functions}} as a {{Tool}} for {{Abstraction}} \textendash{} {{An Analysis}} of {{Questionnaire Responses}} and {{Lab Assignments}} in a {{CS1 Python Course}}},
  author = {Haglund, Pontus and Str{\"o}mb{\"a}ck, Filip and Mannila, Linda},
  year = {2021},
  month = dec,
  journal = {Informatics in Education},
  volume = {20},
  number = {4},
  pages = {583--614},
  issn = {1648-5831, 2335-8971},
  doi = {10.15388/infedu.2021.26},
  urldate = {2023-03-16},
  abstract = {Controlling complexity through the use of abstractions is a critical part of problem solving in programming. Thus, becoming proficient with procedural and data abstraction through the use of user-defined functions is important. Properly using functions for abstraction involves a number of other core concepts, such as parameter passing, scope and references, which are known to be difficult. Therefore, this paper aims to study students' proficiency with these core concepts, and students' ability to apply procedural and data abstraction to solve problems. We collected data from two years of an introductory Python course, both from a questionnaire and from two lab assignments. The data shows that students had difficulties with the core concepts, and a number of issues solving problems with abstraction. We also investigate the impact of using a visualization tool when teaching the core concepts.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/WJB3VSTB/Haglund et al. - 2021 - Understanding Students’ Failure to use Functions a.pdf}
}

@inproceedings{haidryIdentifyingDomainSpecificCognitive2017,
  title = {Identifying {{Domain-Specific Cognitive Strategies}} for {{Software Engineering}}},
  booktitle = {Proceedings of the 2017 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Haidry, Shifa-e-Zehra and Falkner, Katrina and Szabo, Claudia},
  year = {2017},
  month = jun,
  pages = {206--211},
  publisher = {{ACM}},
  address = {{Bologna Italy}},
  doi = {10.1145/3059009.3059032},
  urldate = {2021-06-14},
  abstract = {Due to the rapidly changing nature of today's work environment, software engineering (SE) students are required to have self-regulated learning (SRL) and problem solving skills. Previous research suggests that training students in the use of domain-specific cognitive strategies and using scaffolded instruction for strategy training improves students' SRL and problem solving task performance. In order to identify SE-specific cognitive strategies, we conducted a survey of advanced-level SE students. We then conducted a pre-test and post-test experiment with one control and two treatment groups, to analyze the effectiveness of identified strategies in improving students' task performance. The control group was not exposed to any strategies, while one treatment group was instructed verbally in the use of strategies and the other was trained using a newly developed scaffolded strategy training module. The results of the experiment demonstrate significant improvement in post-test task performance for both treatment groups, with a further increase in performance for those undertaking the training module.},
  isbn = {978-1-4503-4704-4},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/KFIJBR9C/Haidry et al. - 2017 - Identifying Domain-Specific Cognitive Strategies f.pdf}
}

@article{haladynaReviewMultipleChoiceItemWriting2002,
  title = {A {{Review}} of {{Multiple-Choice Item-Writing Guidelines}} for {{Classroom Assessment}}},
  author = {Haladyna, Thomas M. and Downing, Steven M. and Rodriguez, Michael C.},
  year = {2002},
  month = jul,
  journal = {Applied Measurement in Education},
  volume = {15},
  number = {3},
  pages = {309--333},
  issn = {0895-7347, 1532-4818},
  doi = {10.1207/S15324818AME1503_5},
  urldate = {2019-01-27},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/CHTWNPQC/Haladyna et al - 2002 - A Review of Multiple-Choice Item-Writing Guidelines for Classroom Assessment.pdf}
}

@inproceedings{halaszAnalogyConsideredHarmful1982,
  title = {Analogy Considered Harmful},
  booktitle = {Proceedings of the 1982 Conference on {{Human}} Factors in Computing Systems  - {{CHI}} '82},
  author = {Halasz, Frank and Moran, Thomas P.},
  year = {1982},
  pages = {383--386},
  publisher = {{ACM Press}},
  address = {{Gaithersburg, Maryland, United States}},
  doi = {10.1145/800049.801816},
  urldate = {2020-06-22},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/ZK2THJLJ/Halasz and Moran - 1982 - Analogy considered harmful.pdf}
}

@article{halldenConceptionsContextsInterpretation2007,
  title = {Conceptions and {{Contexts}}: {{On}} the {{Interpretation}} of {{Interview}} and {{Observational Data}}},
  shorttitle = {Conceptions and {{Contexts}}},
  author = {Halld{\'e}n, Ola and Haglund, Liza and Str{\"o}mdahl, Helge},
  year = {2007},
  month = jan,
  journal = {Educational Psychologist},
  volume = {42},
  number = {1},
  pages = {25--40},
  issn = {0046-1520, 1532-6985},
  doi = {10.1080/00461520709336916},
  urldate = {2020-10-06},
  langid = {english},
  keywords = {To Read},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/M5XXT693/Halldén et al. - 2007 - Conceptions and Contexts On the Interpretation of.pdf}
}

@article{hallgrenComputingInterRaterReliability2012,
  title = {Computing {{Inter-Rater Reliability}} for {{Observational Data}}: {{An Overview}} and {{Tutorial}}},
  shorttitle = {Computing {{Inter-Rater Reliability}} for {{Observational Data}}},
  author = {Hallgren, Kevin A.},
  year = {2012},
  journal = {Tutorials in quantitative methods for psychology},
  volume = {8},
  number = {1},
  pages = {23--34},
  issn = {1913-4126},
  urldate = {2021-01-17},
  abstract = {Many research designs require the assessment of inter-rater reliability (IRR) to demonstrate consistency among observational ratings provided by multiple coders. However, many studies use incorrect statistical procedures, fail to fully report the information necessary to interpret their results, or do not address how IRR affects the power of their subsequent analyses for hypothesis testing. This paper provides an overview of methodological issues related to the assessment of IRR with a focus on study design, selection of appropriate statistics, and the computation, interpretation, and reporting of some commonly-used IRR statistics. Computational examples include SPSS and R syntax for computing Cohen's kappa and intra-class correlations to assess IRR.},
  pmcid = {PMC3402032},
  pmid = {22833776},
  annotation = {02677},
  file = {/Users/igormoreno/Zotero/storage/RAZ78QLQ/Hallgren - 2012 - Computing Inter-Rater Reliability for Observational Data.pdf}
}

@article{hallQualitativeTeamworkIssues2005,
  title = {Qualitative {{Teamwork Issues}} and {{Strategies}}: {{Coordination Through Mutual Adjustment}}},
  shorttitle = {Qualitative {{Teamwork Issues}} and {{Strategies}}},
  author = {Hall, Wendy A. and Long, Bonita and Bermbach, Nicole and Jordan, Sharalyn and Patterson, Kathryn},
  year = {2005},
  month = mar,
  journal = {Qualitative Health Research},
  volume = {15},
  number = {3},
  pages = {394--410},
  issn = {1049-7323, 1552-7557},
  doi = {10.1177/1049732304272015},
  urldate = {2023-03-28},
  abstract = {Multidisciplinary research teams that include faculty, students, and volunteers can be challenging and enriching for all participants. Although such teams are becoming commonplace, minimal guidance is available about strategies to enhance team effectiveness. In this article, the authors highlight strategies to guide qualitative teamwork through coordination of team members and tasks based on mutual adjustment. Using a grounded theory exemplar, they focus on issues of (a) building the team, (b) developing reflexivity and theoretical sensitivity, (c) tackling analytic and methodological procedures, and (d) developing dissemination guidelines. Sharing information, articulating project goals and elements, acknowledging variation in individual goals, and engaging in reciprocity and respectful collaboration are key elements of mutual adjustment. The authors summarize conclusions about the costs and benefits of the process.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/Y3TXH57L/Hall et al. - 2005 - Qualitative Teamwork Issues and Strategies Coordi.pdf}
}

@article{hamariBadgesIncreaseUser2017,
  title = {Do Badges Increase User Activity? {{A}} Field Experiment on the Effects of Gamification},
  shorttitle = {Do Badges Increase User Activity?},
  author = {Hamari, Juho},
  year = {2017},
  month = jun,
  journal = {Computers in Human Behavior},
  volume = {71},
  pages = {469--478},
  issn = {07475632},
  doi = {10.1016/j.chb.2015.03.036},
  urldate = {2023-06-27},
  abstract = {During recent years, the practice of adding game design to non-game services has gained a relatively large amount of attention. Popular discussion connects gamification to increased user engagement, service profitability, goal commitment and the overall betterment of various behavioral outcomes. However, there is still an absence of a coherent and ample body of empirical evidence that would confirm such expectations. To this end, this paper reports the results of a 2 year (1 \th{} 1 year e betweengroup) field experiment in gamifying a service by implementing a game mechanic called `badges'. During the experiment a pre-implementation group (N {$\frac{1}{4}$} 1410) was monitored for 1 year. After the implementation, the post-implementation (the gamified condition) group (N {$\frac{1}{4}$} 1579) was monitored for another full year. Results show that users in the gamified condition were significantly more likely to post trade proposals, carry out transactions, comment on proposals and generally use the service in a more active way.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/7LKUDDPH/Hamari - 2017 - Do badges increase user activity A field experime.pdf}
}

@article{hamariBadgesIncreaseUser2017a,
  title = {Do Badges Increase User Activity? {{A}} Field Experiment on the Effects of Gamification},
  shorttitle = {Do Badges Increase User Activity?},
  author = {Hamari, Juho},
  year = {2017},
  month = jun,
  journal = {Computers in Human Behavior},
  volume = {71},
  pages = {469--478},
  issn = {07475632},
  doi = {10.1016/j.chb.2015.03.036},
  urldate = {2023-06-27},
  abstract = {During recent years, the practice of adding game design to non-game services has gained a relatively large amount of attention. Popular discussion connects gamification to increased user engagement, service profitability, goal commitment and the overall betterment of various behavioral outcomes. However, there is still an absence of a coherent and ample body of empirical evidence that would confirm such expectations. To this end, this paper reports the results of a 2 year (1 \th{} 1 year e betweengroup) field experiment in gamifying a service by implementing a game mechanic called `badges'. During the experiment a pre-implementation group (N {$\frac{1}{4}$} 1410) was monitored for 1 year. After the implementation, the post-implementation (the gamified condition) group (N {$\frac{1}{4}$} 1579) was monitored for another full year. Results show that users in the gamified condition were significantly more likely to post trade proposals, carry out transactions, comment on proposals and generally use the service in a more active way.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/FNDVKZBI/Hamari - 2017 - Do badges increase user activity A field experime.pdf}
}

@article{hamariMeasuringFlowGamification2014,
  title = {Measuring Flow in Gamification: {{Dispositional Flow Scale-2}}},
  shorttitle = {Measuring Flow in Gamification},
  author = {Hamari, Juho and Koivisto, Jonna},
  year = {2014},
  month = nov,
  journal = {Computers in Human Behavior},
  volume = {40},
  pages = {133--143},
  issn = {07475632},
  doi = {10.1016/j.chb.2014.07.048},
  urldate = {2023-06-27},
  abstract = {This paper measures flow in the context of gamification and investigates the psychometric properties of the Dispositional Flow Scale-2 (DFS-2). We employ data gathered from users of an exercise gamification service (N = 200). The results show that the original DFS-2 factorial structure does result in a similar model fit as the original work. However, we also present a factorial respecification that satisfies more recent model fit thresholds. Beyond validating the original DFS-2 instrument in the context of gamification, the psychometric analysis and the respecifications suggest that the components of flow divide into highly correlated conditions of flow (which were also found to be more salient in the context of gamification: autotelic experience, balance of skill and challenge, control, clear goals, and feedback) and into possible outcomes (merging action-awareness, concentration, loss of sense of time, and loss of selfconsciousness) from achieving flow.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/GJZX5LVA/Hamari and Koivisto - 2014 - Measuring flow in gamification Dispositional Flow.pdf}
}

@article{hamariWhyPeopleUse2015,
  title = {Why Do People Use Gamification Services?},
  author = {Hamari, Juho and Koivisto, Jonna},
  year = {2015},
  month = aug,
  journal = {International Journal of Information Management},
  volume = {35},
  number = {4},
  pages = {419--431},
  issn = {02684012},
  doi = {10.1016/j.ijinfomgt.2015.04.006},
  urldate = {2023-06-27},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/5JFIQC6Y/Hamari and Koivisto - 2015 - Why do people use gamification services.pdf}
}

@book{hambletonFundamentalsItemResponse1991,
  title = {Fundamentals of {{Item Response Theory}}},
  author = {Hambleton, Ronald K. and Swaminathan, Hariharan and Rogers, H. Jane},
  year = {1991},
  publisher = {{SAGE}},
  abstract = {By using familiar concepts from classical measurement methods and basic statistics, this book introduces the basics of item response theory (IRT) and explains the application of IRT methods to problems in test construction, identification of potentially biased test items, test equating and computerized-adaptive testing. The book also includes a thorough discussion of alternative procedures for estimating IRT parameters and concludes with an exploration of new directions in IRT research and development.},
  googlebooks = {cmJU9SHCzecC},
  isbn = {978-0-8039-3647-8},
  langid = {english},
  keywords = {Psychology / General,Social Science / Research},
  annotation = {00000}
}

@article{hameerTeachingArtFunctional2019,
  title = {Teaching the Art of Functional Programming Using Automated Grading (Experience Report)},
  author = {Hameer, Aliya and Pientka, Brigitte},
  year = {2019},
  month = jul,
  journal = {Proceedings of the ACM on Programming Languages},
  volume = {3},
  number = {ICFP},
  pages = {115:1--115:15},
  doi = {10.1145/3341719},
  urldate = {2021-12-16},
  abstract = {Online programming platforms have immense potential to improve students' educational experience. They make programming more accessible, as no installation is required; and automatic grading facilities provide students with immediate feedback on their code, allowing them to to fix bugs and address errors in their understanding right away. However, these graders tend to focus heavily on the functional correctness of a solution, neglecting other aspects of students' code and thereby causing students to miss out on a significant amount of valuable feedback. In this paper, we recount our experience in using the Learn-OCaml online programming platform to teach functional programming in a second-year university course on programming languages and paradigms. Moreover, we explore how to leverage Learn-OCaml's automated grading infrastructure to make it easy to write more expressive graders that give students feedback on properties of their code beyond simple input/output correctness, in order to effectively teach elements of functional programming style. In particular, we describe our extensions to the Learn-OCaml platform that evaluate students on test quality and code style. By providing these tools and a suite of our own homework problems and associated graders, we aim to promote functional programming education, enhance students' educational experience, and make teaching and learning typed functional programming more accessible to instructors and students alike, in our community and beyond.},
  keywords = {automated grading,functional programming,OCaml,online programming platforms,programming education,programming style,test-driven development},
  file = {/Users/igormoreno/Zotero/storage/NGSUB5YT/Hameer and Pientka - 2019 - Teaching the art of functional programming using automated grading (experience.pdf}
}

@article{hammerMisconceptionsPPrimsHow1996,
  title = {Misconceptions or {{P-Prims}}: {{How May Alternative Perspectives}} of {{Cognitive Structure Influence Instructional Perceptions}} and {{Intentions}}?},
  author = {Hammer, David},
  year = {1996},
  journal = {The Journal of the Learning Sciences},
  volume = {5},
  number = {2},
  eprint = {1466772},
  eprinttype = {jstor},
  pages = {97--127},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/FWCQUYIM/Hammer - 1996 - Misconceptions or P-Prims.pdf}
}

@article{hamoudaBasicRecursionConcept2017,
  title = {A Basic Recursion Concept Inventory},
  author = {Hamouda, Sally and Edwards, Stephen H. and Elmongui, Hicham G. and Ernst, Jeremy V. and Shaffer, Clifford A.},
  year = {2017},
  month = apr,
  journal = {Computer Science Education},
  volume = {27},
  number = {2},
  pages = {121--148},
  issn = {0899-3408, 1744-5175},
  doi = {10.1080/08993408.2017.1414728},
  urldate = {2019-09-27},
  langid = {english},
  keywords = {To Read},
  file = {/Users/igormoreno/Zotero/storage/LZLBRPE3/Hamouda et al. - 2017 - A basic recursion concept inventory.pdf}
}

@article{hamoudaBTRecurTutorTutorialPracticing2020,
  ids = {hamoudaBTRecurTutorTutorialPracticing2020a},
  title = {{{BTRecurTutor}}: A Tutorial for Practicing Recursion in Binary Trees},
  shorttitle = {{{BTRecurTutor}}},
  author = {Hamouda, Sally and Edwards, Stephen H. and Elmongui, Hicham G. and Ernst, Jeremy V. and Shaffer, Clifford A.},
  year = {2020},
  month = jan,
  journal = {Computer Science Education},
  volume = {0},
  number = {0},
  pages = {1--33},
  publisher = {{Routledge}},
  issn = {0899-3408},
  doi = {10.1080/08993408.2020.1714533},
  urldate = {2020-07-02},
  abstract = {Background and Context Recursion in binary trees has proven to be a hard topic. There was not much research on enhancing student understanding of this topic. Objective We present a tutorial to enhance learning through practice of recursive operations in binary trees, as it is typically taught post-CS2. Method We identified the misconceptions students have in recursive operations on binary trees. We designed a code writing exam question to measure those misconceptions. We built a tutorial that trains students on avoiding those misconceptions through the use of a semantic code analyzer that detects misconceptions and provides appropriate feedback. Findings Our results show an improvement in student performance when using the tutorial along with the practice exercises, and even more improvement when the same exercises are used with a semantic code analyzer. Implications The best way to use our tutorial to enhance student performance on advanced recursion is to allow students solving the tutorial exercises with the the semantic feedback.},
  keywords = {auto-graded Exercises,binary Trees,misconceptions,Recursion},
  file = {/Users/igormoreno/Zotero/storage/KWPI5NKB/Hamouda et al. - 2020 - BTRecurTutor a tutorial for practicing recursion .pdf;/Users/igormoreno/Zotero/storage/UCYZCGD4/Hamouda et al - 2020 - BTRecurTutor.pdf;/Users/igormoreno/Zotero/storage/2FURPCVK/08993408.2020.html}
}

@article{hamoudaCribSheetsExam2016,
  title = {Crib Sheets and Exam Performance in a Data Structures Course},
  author = {Hamouda, Sally and Shaffer, Clifford A.},
  year = {2016},
  month = jan,
  journal = {Computer Science Education},
  volume = {26},
  number = {1},
  pages = {1--26},
  issn = {0899-3408},
  doi = {10.1080/08993408.2016.1140427},
  urldate = {2018-11-09},
  abstract = {In this paper, we study the relationship between the use of ``crib sheets'' or ``cheat sheets'' and performance on in-class exams. Our extensive survey of the existing literature shows that it is not decisive on the questions of when or whether crib sheets actually help students to either perform better on an exam or better learn the material. We report on our own detailed analysis for a body of crib sheets created for the final exam in a junior-level Data Structures and Algorithms course. We wanted to determine whether there is any feature of the crib sheets that correlates to good exam scores. Exam performance was compared against a number of potential indicators for quality in a crib sheet. We have found that students performed significantly better on questions at the comprehension level of Bloom's taxonomy when their crib sheet contained good information on the topic, while performance on questions at higher levels of the taxonomy did not show correlation to crib sheet contents. We have also seen that students at certain levels of performance on the final exam (specifically, medium-to-high performance) did relatively better on certain questions than other students at that performance level when they had good coverage of that question's topic on their crib sheet.},
  keywords = {cheat sheets,Crib sheets,data structures and algorithms,exam performance},
  file = {/Users/igormoreno/Zotero/storage/86VMDT6L/08993408.2016.html}
}

@inproceedings{hamoudaEnhancingLearningRecursion2015,
  title = {Enhancing {{Learning}} of {{Recursion}}},
  author = {Hamouda, Sally},
  year = {2015},
  keywords = {ForAndrea,Recursion},
  file = {/Users/igormoreno/Zotero/storage/UCNSR9KV/Hamouda - 2015 - Enhancing Learning of Recursion.pdf}
}

@article{hamoudaRecurTutorInteractiveTutorial2018,
  title = {{{RecurTutor}}: {{An Interactive Tutorial}} for {{Learning Recursion}}},
  shorttitle = {{{RecurTutor}}},
  author = {Hamouda, Sally and Edwards, Stephen H. and Elmongui, Hicham G. and Ernst, Jeremy V. and Shaffer, Clifford A.},
  year = {2018},
  month = nov,
  journal = {ACM Transactions on Computing Education},
  volume = {19},
  number = {1},
  pages = {1:1--1:25},
  doi = {10.1145/3218328},
  urldate = {2020-07-02},
  abstract = {Recursion is one of the most important and hardest topics in lower division computer science courses. As it is an advanced programming skill, the best way to learn it is through targeted practice exercises. But the best practice problems are time consuming to manually grade by an instructor. As a consequence, students historically have completed only a small number of recursion programming exercises as part of their coursework. We present a new way for teaching such programming skills. Students view examples and visualizations, then practice a wide variety of automatically assessed, small-scale programming exercises that address the sub-skills required to learn recursion. The basic recursion tutorial (RecurTutor) teaches material typically encountered in CS2 courses. Students who used RecurTutor had significantly better grades on recursion exam questions than did students who used typical instruction. Students who experienced RecurTutor spent significantly more time on solving recursive programming exercises than students who experienced typical instruction, and came out with a significantly higher confidence level.},
  keywords = {eTextbook,interactive online tutorial,misconceptions,Recursion,To Read},
  file = {/Users/igormoreno/Zotero/storage/DCFVBERS/Hamouda et al - 2018 - RecurTutor.pdf}
}

@article{haoUnderstandingEffectiveDesign2021,
  title = {Towards Understanding the Effective Design of Automated Formative Feedback for Programming Assignments},
  author = {Hao, Qiang and Smith IV, David H. and Ding, Lu and Ko, Amy and Ottaway, Camille and Wilson, Jack and Arakawa, Kai H. and Turcan, Alistair and Poehlman, Timothy and Greer, Tyler},
  year = {2021},
  month = jan,
  journal = {Computer Science Education},
  pages = {1--23},
  issn = {0899-3408, 1744-5175},
  doi = {10.1080/08993408.2020.1860408},
  urldate = {2021-08-17},
  abstract = {Background and Context: automated feedback for programming assignments has great potential in promoting just-in-time learning, but there has been little work investigating the design of feedback in this context.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/N3QVFY98/Hao et al. - 2021 - Towards understanding the effective design of auto.pdf}
}

@article{hardenAMEEGuideNo2001,
  title = {{{AMEE Guide No}}. 21: {{Curriculum}} Mapping: A Tool for Transparent and Authentic Teaching and Learning},
  shorttitle = {{{AMEE Guide No}}. 21},
  author = {Harden, R.M.},
  year = {2001},
  month = jan,
  journal = {Medical Teacher},
  volume = {23},
  number = {2},
  pages = {123--137},
  issn = {0142-159X, 1466-187X},
  doi = {10.1080/01421590120036547},
  urldate = {2018-11-10},
  abstract = {The curriculum is a sophisticated blend of educational strategies, course content, learning outcomes, educational experiences, assessment, the educational environment and the individual students' learning style, personal timetable and programme of work. Curriculum mapping can help both staff and students by displaying these key elements of the curriculum, and the relationships between them. Students can identify what, when, where and how they can learn. Staff can be clear about their role in the big picture. The scope and sequence of student learning is made explicit, links with assessment are clarified and curriculum planning becomes more effective and efficient. In this way the curriculum is more transparent to all the stakeholders including the teachers, the students, the curriculum developer, the manager, the public and the researcher. The windows through which the curriculum map can be explored may include: (1) the expected learning outcomes; (2) curriculum content or areas of expertise covered; (3) student assessment; (4) learning opportunities; (5) learning location; (6) learning resources; (7) timetable; (8) staff; (9) curriculum management; (10) students. Nine steps are described in the development of a curriculum map and practical suggestions are made as to how curriculum maps can be introduced in practice to the benefit of all concerned. The key to a really effective integrated curriculum is to get teachers to exchange information about what is being taught and to coordinate this so that it reflects the overall goals of the school. This can be achieved through curriculum mapping, which has become an essential tool for the implementation and development of a curriculum. Faced with curricula which are becoming more centralized and less departmentally based, and with curricula including both core and optional elements, the teacher may find that the curriculum map is the glue which holds the curriculum together.},
  langid = {english},
  keywords = {Curriculus},
  file = {/Users/igormoreno/Zotero/storage/6WINJJI6/Harden - 2001 - AMEE Guide No. 21 Curriculum mapping a tool for .pdf}
}

@inproceedings{hardenSpecificationLanguageMatching2021,
  title = {A {{Specification Language}} for {{Matching Mistake Patterns}} with {{Feedback}}},
  booktitle = {Proceedings of the 52nd {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Harden, Jesse and Gusukuma, Luke and Bart, Austin Cory and Kafura, Dennis},
  year = {2021},
  month = mar,
  pages = {555--561},
  publisher = {{ACM}},
  address = {{Virtual Event USA}},
  doi = {10.1145/3408877.3432481},
  urldate = {2021-05-24},
  abstract = {Pattern-based feedback detects incorrect code patterns in students' programs and provides feedback that can be personalized to the details of the matched code. Currently, a high level of instructor effort is required because the pattern detection must be expressed using complex programmatic interfaces. A specification language for pattern-based feedback is presented that mitigates this cost. Examples from actual student code illustrate the language's design and expressiveness. The language's implementation and testing is briefly described. Reflections are given on the the language design, where it is effectively used, and lessons learned from experience with its use. While our implementation is targeted at Python, other programming languages could be targeted using a similar approach.},
  isbn = {978-1-4503-8062-1},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/UU7DMSKR/Harden et al. - 2021 - A Specification Language for Matching Mistake Patt.pdf}
}

@article{hardimanLearningUnderstandBalance1986,
  title = {Learning to {{Understand}} the {{Balance Beam}}},
  author = {Hardiman, Pamela Thibodeau and Pollatsek, Alexander and Well, Arnold D.},
  year = {1986},
  journal = {Cognition and Instruction},
  volume = {3},
  number = {1},
  eprint = {3233605},
  eprinttype = {jstor},
  pages = {63--86},
  langid = {english},
  keywords = {Piaget},
  file = {/Users/igormoreno/Zotero/storage/USZFNP33/Hardiman et al - 1986 - Learning to Understand the Balance Beam.pdf}
}

@techreport{hardtOAuthAuthorizationFramework2012,
  type = {Request for {{Comments}}},
  title = {The {{OAuth}} 2.0 {{Authorization Framework}}},
  author = {Hardt, Dick},
  year = {2012},
  month = oct,
  number = {RFC 6749},
  institution = {{Internet Engineering Task Force}},
  doi = {10.17487/RFC6749},
  urldate = {2023-05-24},
  abstract = {The OAuth 2.0 authorization framework enables a third-party application to obtain limited access to an HTTP service, either on behalf of a resource owner by orchestrating an approval interaction between the resource owner and the HTTP service, or by allowing the third-party application to obtain access on its own behalf. This specification replaces and obsoletes the OAuth 1.0 protocol described in RFC 5849. [STANDARDS-TRACK]},
  file = {/Users/igormoreno/Zotero/storage/SBR8ZYEE/Hardt - 2012 - The OAuth 2.0 Authorization Framework.pdf}
}

@phdthesis{haringComputationalSimulationAbstract2011,
  type = {Bachelor {{Thesis}}},
  title = {Computational {{Simulation}} of an {{Abstract Artistic Style}}: {{Malevich}}},
  author = {Haring, Mirjam E},
  year = {2011},
  month = jun,
  abstract = {This paper describes how abstract art can be approached in an algorithmic way, by constructing a formal language that characterizes the art style. Malevich's Suprematism is the art movement that is focused on in this paper. By analysing Malevich's paintings, a formal language is constructed that can generate similar images. The formal language describes the individual objects and their joint composition. The formal language is used to make a generative computer program that is able to construct and output new images. To evaluate the results of the program, these outputted images are compared to Malevich's paintings.},
  langid = {english},
  school = {University of Amsterdam},
  file = {/Users/igormoreno/Zotero/storage/WYW6KBCN/Haring - 2011 - Computational Simulation of an Abstract Artistic Style.pdf}
}

@book{hartmannInformatikunterrichtPlanenUnd2006,
  title = {{Informatikunterricht planen und durchf\"uhren}},
  author = {Hartmann, Werner and N{\"a}f, Michael and Reichert, Raimond},
  year = {2006},
  series = {{eXamen.press}},
  publisher = {{Springer-Verlag}},
  address = {{Berlin Heidelberg}},
  urldate = {2019-05-09},
  abstract = {Was soll im Informatikunterricht gelehrt werden und wie? Illustriert an konkreten Beispielen wird auf zentrale Aspekte bei der Planung und Durchf\"uhrung von Informatikunterricht eingegangen:\textbullet{} Auswahl von Unterrichtsinhalten in einem kurzlebigen Umfeld \textbullet{} Gewichtung von Konzept- und Produktwissen \textbullet{} Geeignete Unterrichtsmethoden bei heterogenen Vorkenntnissen der Lernenden \textbullet{} Unterrichtstechniken zur Veranschaulichung abstrakter Sachverhalte \textbullet{} Gestaltung praktischer \"Ubungen am Rechner.Das gut lesbare und praxisorientierte Buch richtet sich an Informatiklehrer in Schule und Berufsschule sowie Lehramtskandidaten der Informatik.Die eigene Unterrichtst\"atigkeit der Autoren und ihre Erfahrung im Rahmen von Lehrveranstaltungen zur Didaktik der Informatik an der ETH Z\"urich, der P\"adagogischen Hochschule Bern, verschiedenen Gymnasien und in innerbetrieblichen Fortbildungen flie\ss en in das Buch ein und machen es zu einem praxisnahen Ratgeber f\"ur Informatiklehrpersonen.},
  isbn = {978-3-540-34484-1},
  langid = {ngerman},
  file = {/Users/igormoreno/Zotero/storage/G8MP375K/Hartmann et al - 2006 - Informatikunterricht planen und durchführen.pdf;/Users/igormoreno/Zotero/storage/DEB7UGCJ/9783540344841.html}
}

@book{harveyComputerScienceLogo1997,
  title = {Computer {{Science Logo Style}}: {{Beyond Programming}}},
  shorttitle = {Computer {{Science Logo Style}}},
  author = {Harvey, Brian},
  year = {1997},
  month = mar,
  series = {Exploring with {{LOGO}}},
  edition = {2},
  volume = {3},
  publisher = {{MIT Press}},
  address = {{Cambridge, MA, USA}},
  isbn = {978-0-262-58150-9},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/S9EHBCAN/6 Artificial Intelligence.pdf}
}

@book{harveyComputerScienceLogo1997a,
  title = {Computer {{Science Logo Style}}: {{Advanced Techniques}}},
  shorttitle = {Computer {{Science Logo Style}}},
  author = {Harvey, Brian},
  year = {1997},
  month = mar,
  series = {Exploring with {{LOGO}}},
  edition = {2},
  volume = {2},
  publisher = {{MIT Press}},
  address = {{Cambridge, MA, USA}},
  isbn = {978-0-262-58149-3},
  langid = {english}
}

@book{harveyComputerScienceLogo1997b,
  title = {Computer {{Science Logo Style}}: {{Symbolic Computing}}},
  shorttitle = {Computer {{Science Logo Style}}},
  author = {Harvey, Brian},
  year = {1997},
  month = mar,
  series = {Exploring with {{LOGO}}},
  edition = {2},
  volume = {1},
  publisher = {{MIT Press}},
  address = {{Cambridge, MA, USA}},
  isbn = {978-0-262-58148-6},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/3NM4IJDJ/07 Introduction to Recursion.pdf;/Users/igormoreno/Zotero/storage/64DZ8ET8/04 Predicates.pdf;/Users/igormoreno/Zotero/storage/65QQPZZP/10 Turtle Geometry.pdf;/Users/igormoreno/Zotero/storage/6A9V7J4T/12 Example Playfair Cipher.pdf;/Users/igormoreno/Zotero/storage/CJFI58WG/05 Functions of Functions.pdf;/Users/igormoreno/Zotero/storage/FHLWAP2U/03 Variables.pdf;/Users/igormoreno/Zotero/storage/GRA9RTRQ/00 Frontmatter.pdf;/Users/igormoreno/Zotero/storage/HY6MD9VZ/08 Practical Recursion the Leap of Faith.pdf;/Users/igormoreno/Zotero/storage/J3BXXUH3/09 How Recursion Works.pdf;/Users/igormoreno/Zotero/storage/L8IJ6NSZ/06 Example Tic-Tac-Toe.pdf;/Users/igormoreno/Zotero/storage/P9GF8IG8/13 Planning.pdf;/Users/igormoreno/Zotero/storage/PQ4JGDRX/11 Recursion Operations.pdf;/Users/igormoreno/Zotero/storage/T5HZMALF/01 Exploration.pdf;/Users/igormoreno/Zotero/storage/TNVWI7ZT/02 Procedures.pdf;/Users/igormoreno/Zotero/storage/VRUJESFP/14 Example Pitcher Problem Solver.pdf;/Users/igormoreno/Zotero/storage/ZMSTKE5R/15 Debugging.pdf}
}

@article{hasanMisconceptionsCertaintyResponse1999,
  title = {Misconceptions and the {{Certainty}} of {{Response Index}} ({{CRI}})},
  author = {Hasan, Saleem and Bagayoko, Diola and Kelley, Ella L.},
  year = {1999},
  month = sep,
  journal = {Physics Education},
  volume = {34},
  number = {5},
  pages = {294--299},
  publisher = {{IOP Publishing}},
  issn = {0031-9120},
  doi = {10.1088/0031-9120/34/5/304},
  urldate = {2021-09-14},
  abstract = {We describe a simple and novel method for identifying misconceptions. This approach utilizes the Certainty of Response Index (CRI) in conjunction with answers to multiple choice questions.},
  langid = {english}
}

@misc{HaskellSymposium2012,
  title = {Haskell {{Symposium}} 2012. {{Brent Yorgey}}: {{Monoids}} - Theme and Variations - {{YouTube}}},
  urldate = {2021-12-29},
  howpublished = {https://www.youtube.com/watch?v=X-8NCkD2vOw\&ab\_channel=MalcolmWallace},
  file = {/Users/igormoreno/Zotero/storage/WW649KS2/watch.html}
}

@inproceedings{hassanExploringReversetracingQuestions2021,
  title = {Exploring 'reverse-Tracing' {{Questions}} as a {{Means}} of {{Assessing}} the {{Tracing Skill}} on {{Computer-based CS}} 1 {{Exams}}},
  booktitle = {Proceedings of the 17th {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Hassan, Mohammed and Zilles, Craig},
  year = {2021},
  month = aug,
  series = {{{ICER}} 2021},
  pages = {115--126},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3446871.3469765},
  urldate = {2021-08-18},
  abstract = {In this paper, we perform a comparative analysis using a within-subjects `think-aloud' protocol of introductory programming students solving tracing problems in both paper-based and computer-based formats. We demonstrate that, on computer-based exams with compiler/interpreter access, students can achieve significantly higher scores on tracing problems than they do on similar paper-based questions, through brute-force execution of the provided code. Furthermore, we characterize the students' usage of machine execution as they solve computer-based tracing problems. We, then, suggest ``reverse-tracing'' questions, where a block of code is provided and students must identify an input that will produce a specified output, as a potential alternative means of assessing the same skill as tracing questions on such computer-based exams. Our initial investigation suggests correctly-designed reverse-tracing problems on computer-based exams more closely track a student's performance on similar questions in a paper-based format. In addition, we find that the thought process while solving tracing and reverse-tracing problems is similar, but not identical.},
  isbn = {978-1-4503-8326-4},
  keywords = {computer exams,CS 1,reverse-tracing,tracing},
  file = {/Users/igormoreno/Zotero/storage/JDDV7PQQ/Hassan and Zilles - 2021 - Exploring &#x2018;reverse-tracing&#x2019; Questions as a Means of Assessing the.pdf}
}

@article{hauswirth2017if,
  title = {If You Have Parents, You Can Learn Recursion.},
  author = {Hauswirth, Matthias},
  year = {2017},
  month = oct,
  journal = {Bulletin of EATCS},
  volume = {3},
  number = {123},
  pages = {11},
  abstract = {Recursion is a common phenomenon in nature and a basic building block of computation, however, recursion is rarely taught in schools. We argue that, when approached the right way, recursion can and should be taught to every child.},
  copyright = {All rights reserved},
  file = {/Users/igormoreno/Zotero/storage/C9SR8I9M/Hauswirth - 2017 - If you have parents, you can learn recursion.pdf}
}

@inproceedings{hauswirthIdentifyingMisconceptionsActive2017,
  title = {Identifying {{Misconceptions}} with {{Active Recall}} in a {{Blended Learning System}}},
  booktitle = {Data {{Driven Approaches}} in {{Digital Education}}},
  author = {Hauswirth, Matthias and Adamoli, Andrea},
  editor = {Lavou{\'e}, {\'E}lise and Drachsler, Hendrik and Verbert, Katrien and Broisin, Julien and {P{\'e}rez-Sanagust{\'i}n}, Mar},
  year = {2017},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {416--421},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-66610-5_36},
  abstract = {Active recall is a pedagogical technique that improves learning. In this paper we investigate a second benefit of active recall: its use to identify student misconceptions, early on, even before students first solve quizzes, assignments, or exams. We describe our approach to collect recall statements in a blended learning system and perform a small pilot study which shows that using active recall in a programming course can uncover rich sets of student misconceptions about programming.},
  isbn = {978-3-319-66610-5},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/FS8SZHGZ/Hauswirth e Adamoli - 2017 - Identifying Misconceptions with Active Recall in a.pdf}
}

@article{hauswirthLearnProgramProgram2016,
  title = {Learn to {{Program}}? {{Program}} to {{Learn}}!},
  author = {Hauswirth, Matthias},
  year = {2016},
  journal = {Bulletin of EATCS},
  volume = {1},
  number = {119},
  copyright = {All rights reserved},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/MTQNGHM5/Hauswirth - 2016 - Learn to Program Program to Learn!.pdf}
}

@inproceedings{hauswirthMetacognitiveCalibrationWhen2017,
  title = {Metacognitive Calibration When Learning to Program},
  booktitle = {Proceedings of the 17th {{Koli Calling International Conference}} on {{Computing Education Research}}},
  author = {Hauswirth, Matthias and Adamoli, Andrea},
  year = {2017},
  month = nov,
  series = {Koli {{Calling}} '17},
  pages = {50--59},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3141880.3141904},
  urldate = {2021-01-13},
  abstract = {Learning to program is hard. In this paper we investigate the use of metacognitive techniques to help students in an introductory programming course. Metacognition is an important ingredient to learning. We focus on metacognitive calibration, a learner's ability to assess their own understanding. We do this in an innovative blended learning environment used in two instances of a second-semester undergraduate programming course, using two vastly different pedagogical approaches. We collect traces of self-assessment and help seeking behaviors and analyze them to better understand the metacognitive tactics and their relation to programming student performance.},
  isbn = {978-1-4503-5301-4},
  keywords = {help-seeking,judgement of learning,learning to program,metacognition,metacognitive calibration,self-assessment},
  annotation = {00009},
  file = {/Users/igormoreno/Zotero/storage/89TSU45B/Hauswirth e Adamoli - 2017 - Metacognitive calibration when learning to program.pdf}
}

@incollection{hauswirthOperatorsExpressions2020,
  title = {Operators and {{Expressions}}},
  booktitle = {Computer {{Science}} in {{K-12}}: {{An A}} to {{Z}} Handbook on Teaching Programming},
  author = {Hauswirth, Matthias and Grover, Shuchi},
  editor = {Grover, Shuchi},
  year = {2020},
  month = jun,
  pages = {158--170},
  publisher = {{Edfinity}},
  copyright = {All rights reserved},
  isbn = {978-1-73466-270-2},
  langid = {english},
  annotation = {00000}
}

@inproceedings{hauswirthSolveEvaluateInforma2009,
  title = {Solve \&amp; Evaluate with Informa: A {{Java-based}} Classroom Response System for Teaching {{Java}}},
  shorttitle = {Solve \&amp; Evaluate with Informa},
  booktitle = {Proceedings of the 7th {{International Conference}} on {{Principles}} and {{Practice}} of {{Programming}} in {{Java}}},
  author = {Hauswirth, Matthias and Adamoli, Andrea},
  year = {2009},
  month = aug,
  series = {{{PPPJ}} '09},
  pages = {1--10},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1596655.1596657},
  urldate = {2021-06-25},
  abstract = {This paper describes the use of clickers in a Java programming course. However, instead of using ordinary hardware clickers, we use software clickers, implemented in Java, that allow for much richer problem types than the traditional multiple-choice question. The problem types we introduce in this paper give students a much higher degree of freedom in solving a problem, and thus more opportunities for making mistakes. We look at mistakes as learning opportunities, and we introduce a pedagogical approach that allows students to learn from mistakes of their peers. We finish with a case study and evaluation of our implementation of these ideas in an undergraduate Java programming course.},
  isbn = {978-1-60558-598-7},
  keywords = {classroom clickers,collaborative learning},
  file = {/Users/igormoreno/Zotero/storage/VY27FITZ/Hauswirth and Adamoli - 2009 - Solve &amp; evaluate with informa a Java-based cl.pdf}
}

@article{hauswirthTeachingJavaProgramming2013,
  title = {Teaching {{Java}} Programming with the {{Informa}} Clicker System},
  author = {Hauswirth, Matthias and Adamoli, Andrea},
  year = {2013},
  month = may,
  journal = {Science of Computer Programming},
  series = {Special Section: {{Principles}} and {{Practice}} of {{Programming}} in {{Java}} 2009/2010 \& {{Special}} Section: {{Self-Organizing Coordination}}},
  volume = {78},
  number = {5},
  pages = {499--520},
  issn = {0167-6423},
  doi = {10.1016/j.scico.2011.06.006},
  urldate = {2021-06-25},
  abstract = {This paper describes the use of clickers in a Java programming course. However, instead of using ordinary hardware clickers, we use software clickers, implemented in Java, that allow for much richer problem types than the traditional multiple-choice question. The problem types we introduce in this paper give students a much higher degree of freedom in solving a problem, and thus more opportunities for making mistakes. We look at mistakes as learning opportunities, and we introduce a pedagogical approach that allows students to learn from mistakes of their peers. We finish with a case study and an evaluation of our approach based on the detailed analysis of its use in two semesters of an undergraduate Java programming course.},
  langid = {english},
  keywords = {Java,Learning,Programming skills,Teaching},
  file = {/Users/igormoreno/Zotero/storage/YGAGMDYM/Hauswirth and Adamoli - 2013 - Teaching Java programming with the Informa clicker.pdf;/Users/igormoreno/Zotero/storage/9LHP2RHR/S0167642311001468.html}
}

@article{havilandWhatNewAcquiring1974,
  title = {What's New? {{Acquiring New}} Information as a Process in Comprehension},
  shorttitle = {What's New?},
  author = {Haviland, Susan E. and Clark, Herbert H.},
  year = {1974},
  month = oct,
  journal = {Journal of Verbal Learning and Verbal Behavior},
  volume = {13},
  number = {5},
  pages = {512--521},
  issn = {0022-5371},
  doi = {10.1016/S0022-5371(74)80003-4},
  urldate = {2018-12-02},
  abstract = {Linguistically, sentences contain both Given information (what the listener is expected to know already) and New information (what the listener is not expected to know already). According to a proposed Given-New Strategy, the listener, in comprehending a sentence, first searches memory for antecedent information that matches the sentence's Given information; he then revises memory by attaching the New information to that antecedent. To provide evidence for this strategy, we presented subjects with pairs of sentences, where the first (the context sentence) provided a context for the second (the target sentence). The subjects were required to press a button when they felt they understood the target sentences. Consistnet with the proposed strategy, Experiment I showed that a target sentence with a definite noun phrase presupposing existence took less time to comprehend when its Given information had a direct antecedent in the context sentence than when it did not. Experiment II ruled out a repetition explanation for Experiment I, and Experiment III demonstrated the same phenomenon for target sentences containing the adverbs still, again, too, and either.},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/7BEX5L2S/Haviland and Clark - 1974 - What's new Acquiring New information as a process.pdf;/Users/igormoreno/Zotero/storage/MY2LYYXM/S0022537174800034.html}
}

@article{hawkinsEfficiencyComplexityGrammars,
  title = {Efficiency and {{Complexity}} in {{Grammars}}: {{Three General Principles}}},
  author = {Hawkins, John A},
  pages = {34},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/E2LC7LDK/Hawkins - Efficiency and Complexity in Grammars Three Gener.pdf}
}

@book{hawkinsEfficiencyComplexityGrammars2004,
  title = {Efficiency and {{Complexity}} in {{Grammars}}},
  author = {Hawkins, John A.},
  year = {2004},
  publisher = {{Oxford University Press}},
  address = {{Oxford}},
  doi = {10.1093/acprof:oso/9780199252695.001.0001},
  urldate = {2021-10-10},
  abstract = {This book addresses a question fundamental to any discussion of grammatical theory and grammatical variation: to what extent can principles of grammar be explained through language use? The book argues that there is a profound correspondence between performance data and the fixed conventions of grammars. Preferences and patterns found in the one, the book shows, are reflected in constraints and variation patterns in the other. The theoretical consequences of the proposed `performance-grammar correspondence hypothesis' are far-reaching \textemdash{} for current grammatical formalisms, for the innateness hypothesis, and for psycholinguistic models of performance and learning. Drawing on empirical generalizations and insights from language typology, generative grammar, psycholinguistics, and historical linguistics, this book demonstrates that the assumption that grammars are immune to performance is false. It presents detailed empirical case studies and arguments for an alternative theory in which performance has shaped the conventions of grammars and thus the variation patterns found in the world's languages. The innateness of language, the book argues, resides primarily in the mechanisms human beings have for processing and learning it.},
  isbn = {978-0-19-925269-5},
  langid = {english},
  keywords = {grammatical theory,grammatical variation,innateness,innateness hypothesis,language use,patterns,preferences,psycholinguistic models}
}

@article{hayesProblemTopologySolution1965,
  title = {Problem Topology and the Solution Process},
  author = {Hayes, John R.},
  year = {1965},
  month = oct,
  journal = {Journal of Verbal Learning and Verbal Behavior},
  volume = {4},
  number = {5},
  pages = {371--379},
  issn = {0022-5371},
  doi = {10.1016/S0022-5371(65)80074-3},
  urldate = {2018-12-02},
  abstract = {In three experiments, Ss solved problems in which they were required to chain together ``in their heads'' facts committed to memory. Solution time was found to increase with the length of the problem, with the number of blind alleys, and with the length of blind alleys. The increases in solution time were more-than-proportional to the increases in problem length. Analysis of the solution process showed that blind alley entrances decreased and rate of progress accelerated as S approached solution. The more-than-proportional increases in solution time with problem length were attributed to the terminal acceleration. Evidence was presented that two types of planning were involved in the terminal accelerations.},
  file = {/Users/igormoreno/Zotero/storage/HBQ3E3CN/Hayes - 1965 - Problem topology and the solution process.pdf;/Users/igormoreno/Zotero/storage/U2BWGXFH/S0022537165800743.html}
}

@article{haynesExplainingRecursionUnsophisticated1995,
  title = {Explaining Recursion to the Unsophisticated},
  author = {Haynes, S. M.},
  year = {1995},
  month = sep,
  journal = {ACM SIGCSE Bulletin},
  volume = {27},
  number = {3},
  pages = {3--6},
  issn = {00978418},
  doi = {10.1145/209849.209850},
  urldate = {2018-11-30},
  abstract = {This paper addresses the topic of explaining recursion to beginning programmers. It briefly presents the common approaches, then describes an extension to those methods called the activation tree.},
  langid = {english},
  keywords = {RecursionChapter},
  file = {/Users/igormoreno/Zotero/storage/P8EEI8BA/Haynes - 1995 - Explaining recursion to the unsophisticated.pdf}
}

@article{hazzanAssessingAbstractionSkills2016,
  title = {Assessing Abstraction Skills},
  author = {Hazzan, Orit and Kramer, Jeff},
  year = {2016},
  month = dec,
  journal = {Communications of the ACM},
  volume = {59},
  number = {12},
  pages = {43--45},
  issn = {00010782},
  doi = {10.1145/2926712},
  urldate = {2018-10-02},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/GCZDKLQH/Hazzan and Kramer - 2016 - Assessing abstraction skills.pdf}
}

@book{hazzanGuideTeachingComputer2011,
  title = {Guide to Teaching Computer Science: An Activity-Based Approach},
  shorttitle = {Guide to Teaching Computer Science},
  author = {Hazzan, Orit and Lapidot, Tami and Ragonis, Noa},
  year = {2011},
  publisher = {{Springer}},
  address = {{London ; New York}},
  isbn = {978-0-85729-442-5 978-0-85729-443-2},
  langid = {english},
  lccn = {QA76.27 .H39 2011},
  keywords = {Active learning,Computer science,Study and teaching,To Read},
  annotation = {OCLC: ocn706626353},
  file = {/Users/igormoreno/Zotero/storage/BCE2MV7R/Hazzan et al - 2011 - Guide to teaching computer science.pdf}
}

@book{hazzanGuideTeachingComputer2014,
  title = {Guide to {{Teaching Computer Science}}: {{An Activity-Based Approach}}},
  shorttitle = {Guide to {{Teaching Computer Science}}},
  author = {Hazzan, Orit and Lapidot, Tami and Ragonis, Noa},
  year = {2014},
  month = sep,
  edition = {2011 edition},
  publisher = {{Springer}},
  address = {{Place of publication not identified}},
  abstract = {This guide presents a conceptual framework and detailed implementation guidelines for general computer science (CS) teaching. It is applicable to all levels of CS education and not limited to any one specific curriculum, programming language or paradigm.},
  isbn = {978-1-4471-6069-4},
  langid = {english}
}

@article{hazzanHowEstablishComputer2010,
  title = {How to {{Establish}} a {{Computer Science Teacher Preparation Program}} at {{Your University}}?: {{The ECSTPP Workshop}}},
  shorttitle = {How to {{Establish}} a {{Computer Science Teacher Preparation Program}} at {{Your University}}?},
  author = {Hazzan, Orit and {Gal-Ezer}, Judith and Ragonis, Noa},
  year = {2010},
  month = mar,
  journal = {ACM Inroads},
  volume = {1},
  number = {1},
  pages = {35--39},
  issn = {2153-2184},
  doi = {10.1145/1721933.1721949},
  urldate = {2019-05-16},
  abstract = {This paper presents a workshop on the establishment of computer science teacher preparation programs. The workshop is designed for the potential initiators of such programs---computer scientists and computer science curriculum developers-who do have computer science teaching experience, either in academia or in the high school, but lack knowledge about the actual construction of such programs. We suggest that such a workshop may stimulate the establishment of additional computer science teacher preparation programs, meeting the need identified in 2007 by the CSTA.},
  keywords = {computer science education,computer science teacher preparation,methods of teaching computer science course,practicum,research in computer science education,Strong},
  file = {/Users/igormoreno/Zotero/storage/ITT35AY5/Hazzan et al - 2010 - How to Establish a Computer Science Teacher Preparation Program at Your.pdf}
}

@inproceedings{hazzanPracticumComputerScience2004,
  title = {The {{Practicum}} in {{Computer Science Education}}: {{Bridging Gaps Between Theoretical Knowledge}} and {{Actual Performance}}},
  shorttitle = {The {{Practicum}} in {{Computer Science Education}}},
  booktitle = {Working {{Group Reports}} from {{ITiCSE}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Hazzan, Orit and Lapidot, Tami},
  year = {2004},
  series = {{{ITiCSE-WGR}} '04},
  pages = {47--51},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1044550.1041655},
  urldate = {2019-05-16},
  abstract = {Loading...},
  keywords = {computer science education,methods of teaching computer science course,practicum,teacher preparation},
  file = {/Users/igormoreno/Zotero/storage/66K6IHCX/Hazzan and Lapidot - 2004 - The Practicum in Computer Science Education.pdf}
}

@article{hazzanReflectionsTeachingAbstraction2008,
  title = {Reflections on Teaching Abstraction and Other Soft Ideas},
  author = {Hazzan, Orit},
  year = {2008},
  month = jun,
  journal = {ACM SIGCSE Bulletin},
  volume = {40},
  number = {2},
  pages = {40},
  issn = {00978418},
  doi = {10.1145/1383602.1383631},
  urldate = {2018-10-02},
  abstract = {This essay relies on my research works about abstraction conducted over the past decade. It addresses the importance of increasing students' awareness to the concept of abstraction and other soft ideas and suggests several approaches for the teaching of soft ideas in general and of the concept of abstraction in particular.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/CQC3ZMRC/Hazzan - 2008 - Reflections on teaching abstraction and other soft ideas.pdf}
}

@article{hegartyDynamicVisualizationsLearning2004,
  title = {Dynamic Visualizations and Learning: Getting to the Difficult Questions},
  shorttitle = {Dynamic Visualizations and Learning},
  author = {Hegarty, Mary},
  year = {2004},
  month = jun,
  journal = {Learning and Instruction},
  series = {Dynamic {{Visualisations}} and {{Learning}}},
  volume = {14},
  number = {3},
  pages = {343--351},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2004.06.007},
  urldate = {2018-11-06},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/E4GCJQAG/Hegarty - 2004 - Dynamic visualizations and learning getting to th.pdf;/Users/igormoreno/Zotero/storage/RGGZSHZR/S0959475204000362.html}
}

@phdthesis{hellerKognitiveAnforderungenExemplarischer2015,
  type = {{Bachelor Thesis}},
  title = {{Kognitive Anforderungen exemplarischer Aufgaben des Informatik-Biber-Wettbewerbs}},
  author = {Heller, Melanie},
  year = {2015},
  month = feb,
  abstract = {Der Informatik-Biber ist ein internationaler Informatik-Wettbewerb f\"ur Kinder und Jugendliche, der im Jahr 2004 in Litauen als experimenteller Versuch gestartet wurde. ''Ziel des Wettbewerbs ist es, das Interesse an Informatik durch eine erste attraktive Begegnung mit den Kompetenzen dieses Faches zu wecken.'' [PoDa] Unter allen Fragen des Biber-Wettbewerbs hat man Fragegruppen gefunden, die in verschiedenen Homogenit\"atstests gut abgeschnitten haben. [HuM\"u14] Diese Fragen wurden im Zuge dieser Arbeit im Hinblick auf psychometrische Konstrukte analysiert und anschlie\ss end von zwei Kindern aus der entsprechenden Altersgruppe bearbeitet, um eine qualitative Analyse der Interviews durchzuf\"uhren. Dabei wurden kognitive Prozesse, die die Kinder beim Bearbeiten durchlaufen, herausgearbeitet.},
  langid = {ngerman},
  school = {Technische Universit\"at M\"unchen},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/BW5RUDFZ/Heller - 2015 - Kognitive Anforderungen exemplarischer Aufgaben des Informatik-Biber-Wettbewerbs.pdf}
}

@inproceedings{helminenJypeProgramVisualization2010,
  title = {Jype - a Program Visualization and Programming Exercise Tool for {{Python}}},
  booktitle = {Proceedings of the 5th International Symposium on {{Software}} Visualization - {{SOFTVIS}} '10},
  author = {Helminen, Juha and Malmi, Lauri},
  year = {2010},
  pages = {153},
  publisher = {{ACM Press}},
  address = {{Salt Lake City, Utah, USA}},
  doi = {10.1145/1879211.1879234},
  urldate = {2020-06-22},
  abstract = {Based on research into learning programming and a review of program visualization research, we designed an educational software tool that aims to target students' apparent fragile knowledge of elementary programming which manifests as difficulties in tracing and writing even simple programs. Most existing tools build on a single supporting technology and focus on one aspect of learning. For example, visualization tools support the development of a conceptual-level understanding of how programs work, and automatic assessment tools give feedback on submitted tasks. We implemented a combined tool that closely integrates programming tasks with visualizations of program execution and thus lets students practice writing code and more easily transition to visually tracing it in order to locate programming errors. In this paper we present Jype, a web-based tool that provides an environment for visualizing the line-by-line execution of Python programs and for solving programming exercises with support for immediate automatic feedback and an integrated visual debugger. Moreover, the debugger allows stepping back in the visualization of the execution as if executing in reverse. Jype is built for Python, when most research in programming education support tools revolves around Java.},
  isbn = {978-1-4503-0028-5},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/4YIUVQRC/Helminen and Malmi - 2010 - Jype - a program visualization and programming exercise tool for Python.pdf}
}

@inproceedings{hempelDeuceLightweightUser2018,
  title = {Deuce: {{A Lightweight User Interface}} for {{Structured Editing}}},
  shorttitle = {Deuce},
  booktitle = {Proceedings of the 40th {{International Conference}} on {{Software Engineering}}},
  author = {Hempel, Brian and Lubin, Justin and Lu, Grace and Chugh, Ravi},
  year = {2018},
  month = may,
  eprint = {1707.00015},
  primaryclass = {cs},
  pages = {654--664},
  doi = {10.1145/3180155.3180165},
  urldate = {2023-01-21},
  abstract = {We present a structure-aware code editor, called Deuce, that is equipped with direct manipulation capabilities for invoking automated program transformations. Compared to traditional refactoring environments, Deuce employs a direct manipulation interface that is tightly integrated within a text-based editing workflow. In particular, Deuce draws (i) clickable widgets atop the source code that allow the user to structurally select the unstructured text for subexpressions and other relevant features, and (ii) a lightweight, interactive menu of potential transformations based on the current selections. We implement and evaluate our design with mostly standard transformations in the context of a small functional programming language. A controlled user study with 21 participants demonstrates that structural selection is preferred to a more traditional text-selection interface and may be faster overall once users gain experience with the tool. These results accord with Deuce's aim to provide human-friendly structural interactions on top of familiar text-based editing.},
  archiveprefix = {arxiv},
  keywords = {Computer Science - Software Engineering},
  file = {/Users/igormoreno/Zotero/storage/UXDU22DW/Hempel et al - 2018 - Deuce.pdf;/Users/igormoreno/Zotero/storage/TZRZWR3G/1707.html}
}

@inproceedings{hempelSemiAutomatedSVGProgramming2016,
  title = {Semi-{{Automated SVG Programming}} via {{Direct Manipulation}}},
  booktitle = {Proceedings of the 29th {{Annual Symposium}} on {{User Interface Software}} and {{Technology}}},
  author = {Hempel, Brian and Chugh, Ravi},
  year = {2016},
  series = {{{UIST}} '16},
  pages = {379--390},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2984511.2984575},
  urldate = {2019-01-27},
  abstract = {Direct manipulation interfaces provide intuitive and interactive features to a broad range of users, but they often exhibit two limitations: the built-in features cannot possibly cover all use cases, and the internal representation of the content is not readily exposed. We believe that if direct manipulation interfaces were to (a) use general-purpose programs as the representation format, and (b) expose those programs to the user, then experts could customize these systems in powerful new ways and non-experts could enjoy some of the benefits of programmable systems. In recent work, we presented a prototype SVG editor called Sketch-n-Sketch that offered a step towards this vision. In that system, the user wrote a program in a general-purpose lambda-calculus to generate a graphic design and could then directly manipulate the output to indirectly change design parameters (i.e. constant literals) in the program in real-time during the manipulation. Unfortunately, the burden of programming the desired relationships rested entirely on the user. In this paper, we design and implement new features for Sketch-n-Sketch that assist in the programming process itself. Like typical direct manipulation systems, our extended Sketch-n-Sketch now provides GUI-based tools for drawing shapes, relating shapes to each other, and grouping shapes together. Unlike typical systems, however, each tool carries out the user's intention by transforming their general-purpose program. This novel, semi-automated programming workflow allows the user to rapidly create high-level, reusable abstractions in the program while at the same time retaining direct manipulation capabilities. In future work, our approach may be extended with more graphic design features or realized for other application domains.},
  isbn = {978-1-4503-4189-9},
  keywords = {direct manipulation,LearnToAbstract,live programming,svg,To Read},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/RZFVEDDZ/Hempel and Chugh - 2016 - Semi-Automated SVG Programming via Direct Manipulation.pdf}
}

@inproceedings{hempelSemiAutomatedSVGProgramming2016a,
  title = {Semi-{{Automated SVG Programming}} via {{Direct Manipulation}}},
  booktitle = {Proceedings of the 29th {{Annual Symposium}} on {{User Interface Software}} and {{Technology}}},
  author = {Hempel, Brian and Chugh, Ravi},
  year = {2016},
  month = oct,
  eprint = {1608.02829},
  primaryclass = {cs},
  pages = {379--390},
  doi = {10.1145/2984511.2984575},
  urldate = {2023-01-21},
  abstract = {Direct manipulation interfaces provide intuitive and interactive features to a broad range of users, but they often exhibit two limitations: the built-in features cannot possibly cover all use cases, and the internal representation of the content is not readily exposed. We believe that if direct manipulation interfaces were to (a) use general-purpose programs as the representation format, and (b) expose those programs to the user, then experts could customize these systems in powerful new ways and non-experts could enjoy some of the benefits of programmable systems. In recent work, we presented a prototype SVG editor called Sketch-n-Sketch that offered a step towards this vision. In that system, the user wrote a program in a general-purpose lambda-calculus to generate a graphic design and could then directly manipulate the output to indirectly change design parameters (i.e. constant literals) in the program in real-time during the manipulation. Unfortunately, the burden of programming the desired relationships rested entirely on the user. In this paper, we design and implement new features for Sketch-n-Sketch that assist in the programming process itself. Like typical direct manipulation systems, our extended Sketch-n-Sketch now provides GUI-based tools for drawing shapes, relating shapes to each other, and grouping shapes together. Unlike typical systems, however, each tool carries out the user's intention by transforming their general-purpose program. This novel, semi-automated programming workflow allows the user to rapidly create high-level, reusable abstractions in the program while at the same time retaining direct manipulation capabilities. In future work, our approach may be extended with more graphic design features or realized for other application domains.},
  archiveprefix = {arxiv},
  keywords = {Computer Science - Graphics,Computer Science - Human-Computer Interaction,Computer Science - Programming Languages,D.2.6,D.3.3,H.5.2},
  file = {/Users/igormoreno/Zotero/storage/GGPWPFRF/Hempel and Chugh - 2016 - Semi-Automated SVG Programming via Direct Manipulation.pdf;/Users/igormoreno/Zotero/storage/492WWE43/1608.html}
}

@inproceedings{hempelSketchnSketchOutputDirectedProgramming2019,
  title = {Sketch-n-{{Sketch}}: {{Output-Directed Programming}} for {{SVG}}},
  shorttitle = {Sketch-n-{{Sketch}}},
  booktitle = {Proceedings of the 32nd {{Annual ACM Symposium}} on {{User Interface Software}} and {{Technology}}},
  author = {Hempel, Brian and Lubin, Justin and Chugh, Ravi},
  year = {2019},
  month = oct,
  eprint = {1907.10699},
  primaryclass = {cs},
  pages = {281--292},
  doi = {10.1145/3332165.3347925},
  urldate = {2023-01-21},
  abstract = {For creative tasks, programmers face a choice: Use a GUI and sacrifice flexibility, or write code and sacrifice ergonomics? To obtain both flexibility and ease of use, a number of systems have explored a workflow that we call output-directed programming. In this paradigm, direct manipulation of the program's graphical output corresponds to writing code in a general-purpose programming language, and edits not possible with the mouse can still be enacted through ordinary text edits to the program. Such capabilities provide hope for integrating graphical user interfaces into what are currently text-centric programming environments. To further advance this vision, we present a variety of new output-directed techniques that extend the expressive power of Sketch-n-Sketch, an output-directed programming system for creating programs that generate vector graphics. To enable output-directed interaction at more stages of program construction, we expose intermediate execution products for manipulation and we present a mechanism for contextual drawing. Looking forward to output-directed programming beyond vector graphics, we also offer generic refactorings through the GUI, and our techniques employ a domain-agnostic provenance tracing scheme. To demonstrate the improved expressiveness, we implement a dozen new parametric designs in Sketch-n-Sketch without text-based edits. Among these is the first demonstration of building a recursive function in an output-directed programming setting.},
  archiveprefix = {arxiv},
  keywords = {Computer Science - Graphics,Computer Science - Human-Computer Interaction,Computer Science - Programming Languages},
  file = {/Users/igormoreno/Zotero/storage/YGNUYE2P/Hempel et al - 2019 - Sketch-n-Sketch.pdf;/Users/igormoreno/Zotero/storage/AGURCWED/1907.html}
}

@inproceedings{hendersonFunctionalGeometry1982,
  title = {Functional Geometry},
  booktitle = {Proceedings of the 1982 {{ACM}} Symposium on {{LISP}} and Functional Programming},
  author = {Henderson, Peter},
  year = {1982},
  month = aug,
  series = {{{LFP}} '82},
  pages = {179--187},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/800068.802148},
  urldate = {2022-01-10},
  abstract = {A method of describing pictures is introduced. The equations, which describe the appearance of a picture, also form a purely functional program which can be used to compute the set of lines necessary to plot the picture on a graphical device. The method is illustrated by using it to describe the structure of one of the woodcuts of Maurits Escher.},
  isbn = {978-0-89791-082-8},
  file = {/Users/igormoreno/Zotero/storage/CXZAAC3J/funcgeo.pdf}
}

@book{hennessyComputerArchitectureQuantitative2012,
  title = {Computer {{Architecture}}: {{A Quantitative Approach}}},
  author = {Hennessy, John L. and Patterson, David A.},
  year = {2012},
  edition = {5},
  publisher = {{Morgan Kaufman Publishers}},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/6PUKXS7U/Hennessy and Patterson - 2012 - Computer Architecture.pdf}
}

@inproceedings{henzStepperFunctionalJavaScript2021,
  title = {A Stepper for a Functional {{JavaScript}} Sublanguage},
  booktitle = {Proceedings of the 2021 {{ACM SIGPLAN International Symposium}} on {{SPLASH-E}}},
  author = {Henz, Martin and Tan, Thomas and Chua, Zachary and Jung, Peter and Tan, Yee-Jian and Zhang, Xinyi and Zhao, Jingjing},
  year = {2021},
  month = oct,
  series = {{{SPLASH-E}} 2021},
  pages = {71--81},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3484272.3484968},
  urldate = {2022-03-28},
  abstract = {The first two chapters of the introductory computer science textbook Structure and Interpretation of Computer Programs, JavaScript Adaptation (SICP JS), use a subset of JavaScript called Source \textsection 2. The book introduces the reduction-based ``substitution model'' as a first mental model for the evaluation of Source \textsection 2 programs. To support the learner in adopting this mental model, we built an algebraic stepper\textemdash a tool for visualizing the evaluation of Source \textsection 2 programs according to the model. As a sublanguage of JavaScript, Source \textsection 2 differs from other purely functional programming languages by using a statement-oriented syntax, with statement sequences, return statements, and block-scoped declarations. For the purpose of this tool description, we distill these distinguishing features\textemdash along with explicit recursion\textemdash into a Source \textsection 2 sublanguage that we call Source \textsection 0, and focus on a stepper for this language. We formalize the substitution model of Source \textsection 0 as a lambda-calculus-style reduction semantics that handles explicit recursion by term graph rewriting and faithfully implements the JavaScript specification, when restricted to that language. Our implementation of the stepper represents term graphs by persistent data structures that maximize sharing and enable random access to all steps. This work presents the first reduction-based semantics for a JavaScript sublanguage and the first algebraic stepper for a language with return statements and block-scoped declarations. The tool supports the learner with step-level explanations, redex highlighting, and function-level skipping and can also be used for teaching the applicative-order-reduction lambda calculus.},
  isbn = {978-1-4503-9089-7},
  keywords = {education,functional languages,JavaScript,lambda calculus,programming environments,semantics,stepper,term graph rewriting},
  file = {/Users/igormoreno/Zotero/storage/MGX25DTH/Henz et al. - 2021 - A stepper for a functional JavaScript sublanguage.pdf}
}

@inproceedings{henzStepperFunctionalJavaScript2021a,
  title = {A Stepper for a Functional {{JavaScript}} Sublanguage},
  booktitle = {Proceedings of the 2021 {{ACM SIGPLAN International Symposium}} on {{SPLASH-E}}},
  author = {Henz, Martin and Tan, Thomas and Chua, Zachary and Jung, Peter and Tan, Yee-Jian and Zhang, Xinyi and Zhao, Jingjing},
  year = {2021},
  month = oct,
  series = {{{SPLASH-E}} 2021},
  pages = {71--81},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3484272.3484968},
  urldate = {2022-11-28},
  abstract = {The first two chapters of the introductory computer science textbook Structure and Interpretation of Computer Programs, JavaScript Adaptation (SICP JS), use a subset of JavaScript called Source \textsection 2. The book introduces the reduction-based ``substitution model'' as a first mental model for the evaluation of Source \textsection 2 programs. To support the learner in adopting this mental model, we built an algebraic stepper\textemdash a tool for visualizing the evaluation of Source \textsection 2 programs according to the model. As a sublanguage of JavaScript, Source \textsection 2 differs from other purely functional programming languages by using a statement-oriented syntax, with statement sequences, return statements, and block-scoped declarations. For the purpose of this tool description, we distill these distinguishing features\textemdash along with explicit recursion\textemdash into a Source \textsection 2 sublanguage that we call Source \textsection 0, and focus on a stepper for this language. We formalize the substitution model of Source \textsection 0 as a lambda-calculus-style reduction semantics that handles explicit recursion by term graph rewriting and faithfully implements the JavaScript specification, when restricted to that language. Our implementation of the stepper represents term graphs by persistent data structures that maximize sharing and enable random access to all steps. This work presents the first reduction-based semantics for a JavaScript sublanguage and the first algebraic stepper for a language with return statements and block-scoped declarations. The tool supports the learner with step-level explanations, redex highlighting, and function-level skipping and can also be used for teaching the applicative-order-reduction lambda calculus.},
  isbn = {978-1-4503-9089-7},
  keywords = {education,functional languages,JavaScript,lambda calculus,programming environments,semantics,stepper,term graph rewriting},
  file = {/Users/igormoreno/Zotero/storage/9M97N5UG/Henz et al. - 2021 - A stepper for a functional JavaScript sublanguage.pdf}
}

@inproceedings{herbertStakeholderledCurriculumRedesign2013,
  title = {Stakeholder-Led Curriculum Redesign},
  booktitle = {Proceedings of the {{Fifteenth Australasian Computing Education Conference}} - {{Volume}} 136},
  author = {Herbert, Nicole and Dermoudy, Julian and Ellis, Leonie and {Cameron-Jones}, Mike and Chinthammit, Winyu and Lewis, Ian and {de Salas}, Kristy and Springer, Matthew},
  year = {2013},
  month = jan,
  series = {{{ACE}} '13},
  pages = {51--58},
  publisher = {{Australian Computer Society, Inc.}},
  address = {{AUS}},
  urldate = {2020-09-22},
  abstract = {The University of Tasmania is undertaking a 'green-fields' replacement of its existing undergraduate ICT offerings. As part of the process over thirty industry members and educators were interviewed to gain their advice on what should be included in the only bachelors level ICT degree offered in Tasmania from 2014. This paper reports on lessons learned in ICT curriculum review and in the identification of desired graduate skills and knowledge for future employment. With a strong trend towards utilising outsourcing and off-shoring for software and system development, industry members indicated that there is no room in the ICT industry of the future for personnel who cannot relate to customers and who lack the business acumen to be able to undertake analysis at the commencement of a project or integration at its conclusion. The review identified strong demand for graduates to be ICT professionals with generic professional skills (such as communication and teamwork) along with other non-technical skills (such as business analysis, sourcing and integration) in addition to the traditional domain skills (including programming and databases). Employers desired graduates with a broad range of ICT knowledge but with a depth of competency in at least one ICT technical area. A summary of the outcomes, including likely degree content, is provided.},
  isbn = {978-1-921770-21-0},
  keywords = {ICT curriculum,ICT graduates,ICT industry},
  annotation = {00011},
  file = {/Users/igormoreno/Zotero/storage/JQSRGPMS/Herbert et al - 2013 - Stakeholder-led curriculum redesign.pdf}
}

@inproceedings{hermanAffordancesConstraintsDiagrams2017,
  title = {The {{Affordances}} and {{Constraints}} of {{Diagrams}} on {{Students}}' {{Reasoning}} about {{State Machines}}},
  booktitle = {Proceedings of the 2017 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Herman, Geoffrey L. and Choi, Dong San},
  year = {2017},
  month = aug,
  pages = {173--181},
  publisher = {{ACM}},
  address = {{Tacoma Washington USA}},
  doi = {10.1145/3105726.3106172},
  urldate = {2020-06-22},
  abstract = {While the concept of state is foundational to computing, students possess a myriad of misconceptions about it and the role it plays within computing systems. Research on students' misconceptions reveals that their ability to use conceptually appropriate information varies based on the task they are performing and the representational tools they are provided. Critically, the tacit information in these representations influences this process, hindering or helping students. In this paper, we present a qualitative research study, in which we interviewed 24 students as they transformed finite state machines into synchronous, sequential logic circuits. We found that students generally had profound skill with procedures. However, their ability to reason about the four components of state, next-state, inputs, and outputs, were constrained by the representations that they were given or created themselves. Conversely, the order in which students produced their drawings provided complementary insights into students conceptual understanding. These findings revealed that students possess conceptions of computers as input-output systems rather than state-based systems. We suggest potential interventions and future research based on these findings.},
  isbn = {978-1-4503-4968-0},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/Q5LHWTII/Herman and Choi - 2017 - The Affordances and Constraints of Diagrams on Students' Reasoning about State.pdf}
}

@inproceedings{hermansHedyGradualLanguage2020,
  title = {Hedy: {{A Gradual Language}} for {{Programming Education}}},
  shorttitle = {Hedy},
  booktitle = {Proceedings of the 2020 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Hermans, Felienne},
  year = {2020},
  month = aug,
  series = {{{ICER}} '20},
  pages = {259--270},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3372782.3406262},
  urldate = {2021-10-18},
  abstract = {One of the aspects of programming that learners often struggle with is the syntax of programming languages: remembering the right commands to use and combining those into a working program. Prior research demonstrated that students submit source code with syntax errors in 73\% of cases and even the best students do so in 50\% of cases. An analysis of 37 million compilations by 250.000 students found that the most common error was a syntax error, which occurred in almost 800.000 compilations. It was also found that Java and Perl are not easier to understand than a programming language with randomly generated keywords, stressing the difficulties that novices face in understanding syntax. This paper presents Hedy: a new way of teaching the syntax of a programming language to novices, inspired by educational methods by which punctuation is taught to children. Hedy starts as a simple programming language without any syntactic elements such as brackets, colons or indentation. The rules slowly and gradually change until the novices are programming in Python. Hedy is evaluated on 9714 programs.},
  isbn = {978-1-4503-7092-9},
  keywords = {gradual programming,hedy,programming education,python},
  file = {/Users/igormoreno/Zotero/storage/ENZY38IP/Hermans - 2020 - Hedy.pdf}
}

@inproceedings{hermansThinkingOutBox2018,
  title = {Thinking out of the Box: Comparing Metaphors for Variables in Programming Education},
  shorttitle = {Thinking out of the Box},
  booktitle = {Proceedings of the 13th {{Workshop}} in {{Primary}} and {{Secondary Computing Education}} on - {{WiPSCE}} '18},
  author = {Hermans, Felienne and Swidan, Alaaeddin and Aivaloglou, Efthimia and Smit, Marileen},
  year = {2018},
  pages = {1--8},
  publisher = {{ACM Press}},
  address = {{Potsdam, Germany}},
  doi = {10.1145/3265757.3265765},
  urldate = {2020-06-22},
  abstract = {When teaching novices programming, misconceptions can occur. Misconception are incorrect beliefs about certain programming concept. For example, some novices think that a variable can hold multiple values, in the case of two consecutive assignment statements, such as x = 5; x = 7. While explaining variables introductory materials often use the metaphor of a box for a variable, which might contribute to the `multiple values' hypothesis. To investigate this, we design and run a controlled experiment with 496 novice programmers, both children and adults. Half of our participants receive an introductory programming lesson in which we explain a variable as a box, while the other half of participants receive the explanation of a variable as being a label. They are subsequently questioned about their understanding of variables. Our results show that, for the simple questions involving one assignment, the box group performs better. However, for questions involving the misconception \textemdash{} with two consecutive assignment statements \textemdash{} the label group outperforms the box group. This however primarily occurs when considering variables of type string, for integers subjects interpret the statements as numeric values to be added.},
  isbn = {978-1-4503-6588-8},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/DC3WRH3C/Hermans et al - 2018 - Thinking out of the box.pdf}
}

@inproceedings{hertzTracebasedTeachingEarly2013,
  title = {Trace-Based Teaching in Early Programming Courses},
  booktitle = {Proceeding of the 44th {{ACM}} Technical Symposium on {{Computer}} Science Education - {{SIGCSE}} '13},
  author = {Hertz, Matthew and Jump, Maria},
  year = {2013},
  pages = {561},
  publisher = {{ACM Press}},
  address = {{Denver, Colorado, USA}},
  doi = {10.1145/2445196.2445364},
  urldate = {2020-06-22},
  abstract = {Students in introductory programming courses struggle with building the mental models that correctly describe concepts such as variables, subroutine calls, and dynamic memory usage. This struggle leads to lowered student learning outcomes and, it has been argued, the high failure and dropout rates commonly seen in these courses. We will show that accurately modeling what is occurring in memory and requiring students to trace code using this model improves student performance and increases retention.},
  isbn = {978-1-4503-1868-6},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/4CD4G23B/Hertz and Jump - 2013 - Trace-based teaching in early programming courses.pdf}
}

@article{hewEngagingAsianStudents2016,
  title = {Engaging {{Asian}} Students through Game Mechanics: {{Findings}} from Two Experiment Studies},
  shorttitle = {Engaging {{Asian}} Students through Game Mechanics},
  author = {Hew, Khe Foon and Huang, Biyun and Chu, Kai Wah Samuel and Chiu, Dickson K.W.},
  year = {2016},
  month = jan,
  journal = {Computers \& Education},
  volume = {92--93},
  pages = {221--236},
  issn = {03601315},
  doi = {10.1016/j.compedu.2015.10.010},
  urldate = {2023-06-27},
  abstract = {There is an increasing interest in using game mechanics to foster user engagement in many real-world contexts. Many previous studies, however, focused on investigating user perceptions, while some experiment studies lacked control groups. Additionally, many studies in the higher education context focused on the discipline of Computer Science and Information Technology, and involved participants mainly in Europe or North America. In this paper, we report the effects of game mechanics on student cognitive and behavioral engagements through two experiment studies conducted in an Asian university. In Study 1, we employed a randomized experiment-control group design. The experiment group (n {$\frac{1}{4}$} 11) attended an education-related course on Designing Questionnaire that incorporated the use of game mechanics (points, badges, and leader board), as well as course activities informed by the Self-Determination theory of motivation. The control group (n {$\frac{1}{4}$} 11) attended the same course and activities taught by the same instructor but without the game mechanics. In a subsequent semester, we repeated the research with a larger cohort of students (Study 2) through a quasi-experiment design (n {$\frac{1}{4}$} 20 experiment, and n {$\frac{1}{4}$} 22 control group). The deployment of game mechanics produced greater student contribution in the discussion forums, but no significant difference on students' recall of factual knowledge. However, we found that the use of game mechanics had a positive effect on motivating students to engage with more difficult tasks, and that the quality of artifacts produced by participants in the experimental groups were higher than those in the control groups.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/3ELJTQTK/Hew et al. - 2016 - Engaging Asian students through game mechanics Fi.pdf}
}

@article{hidalgo-cespedesEffectsOralMetaphors2018,
  title = {Effects of Oral Metaphors and Allegories on Programming Problem Solving},
  author = {{Hidalgo-C{\'e}spedes}, Jeisson and {Mar{\'i}n-Ravent{\'o}s}, Gabriela and {Lara-Villagr{\'a}n}, Vladimir and {Villalobos-Fern{\'a}ndez}, Luis},
  year = {2018},
  month = jul,
  journal = {Computer Applications in Engineering Education},
  volume = {26},
  number = {4},
  pages = {852--871},
  issn = {10613773},
  doi = {10.1002/cae.21927},
  urldate = {2020-06-22},
  abstract = {Metaphors of ordinary concepts are intensively used in computer science for naming abstract concepts and for designing users interfaces. Metaphors are mappings from a source domain (e.g., a stream) to a target domain (e.g., a sequence of bytes). Typically computing phenomena are explained using incoherent discourses at the source domain, formed by metaphors taken from a diversity of origins. Nonetheless, versatility of metaphors allows for the creation of coherent discourses in the origin domain that map the target computing discourse, and we call them allegories. The limited number of existing studies about this topic has compared only textual allegories, visual allegories, and the traditional unconnected metaphors. Although their findings are heterogeneous, equal effectiveness is the most frequent empirical result between these three types of metaphors. Furthermore, we have not found any study about oral allegories, in spite of oral being the most used modality for metaphors in computer science education. This article experimentally compares the effects of oral allegories and oral metaphors on a complex problem-solving task. As in previous studies, our results did not find any significant differences on support or detriment of oral allegories. Our results support new metaphor theories posing that the context significantly influences the metaphors' efficacy, and encourages future research about the interaction between context and allegories.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/JKPB5873/Hidalgo-Céspedes et al - 2018 - Effects of oral metaphors and allegories on programming problem solving.pdf}
}

@inproceedings{hidalgo-cespedesLearningPrinciplesProgram2016,
  ids = {hidalgo-cespedesLearningPrinciplesProgram2016a},
  title = {Learning Principles in Program Visualizations: {{A}} Systematic Literature Review},
  shorttitle = {Learning Principles in Program Visualizations},
  booktitle = {2016 {{IEEE Frontiers}} in {{Education Conference}} ({{FIE}})},
  author = {{Hidalgo-Cespedes}, Jeisson and {Marin-Raventos}, Gabriela and {Lara-Villagran}, Vladimir},
  year = {2016},
  month = oct,
  pages = {1--9},
  publisher = {{IEEE}},
  address = {{Erie, PA, USA}},
  doi = {10.1109/FIE.2016.7757692},
  urldate = {2020-06-22},
  abstract = {Program visualizations help students understand the runtime behavior of other programs. They are educational tools to complement lectures or replace inefficient static drawings. A recent survey found 46 program visualizations developed from 1979 to 2012 reported that their effectiveness is unclear. They also evaluated learner engagement strategies implemented by visualization systems, but other learning principles were not considered. Learning principles are potential key factors in the success of program visualization as learning tools.},
  isbn = {978-1-5090-1790-4},
  langid = {english},
  keywords = {To Read},
  file = {/Users/igormoreno/Zotero/storage/WD2YMH5M/Hidalgo-Cespedes et al - 2016 - Learning principles in program visualizations.pdf;/Users/igormoreno/Zotero/storage/YPPVNT56/Hidalgo-Cespedes et al - 2016 - Learning principles in program visualizations.pdf}
}

@inproceedings{hidalgo-cespedesStudentUnderstandingNotional2015,
  title = {{Student understanding of the C++ notional machine through traditional teaching with conceptual contraposition and program memory tracing}},
  booktitle = {{2015 Latin American Computing Conference (CLEI)}},
  author = {{Hidalgo-Cespedes}, Jeisson and {Marin-Raventos}, Gabriela and {Lara-Villagran}, Vladimir},
  year = {2015},
  month = oct,
  pages = {1--8},
  publisher = {{IEEE}},
  address = {{Arequipa, Peru}},
  doi = {10.1109/CLEI.2015.7360049},
  urldate = {2020-06-22},
  abstract = {In order to learn a programming language, a correct understanding of its notional machine is mandatory. Students acquire that comprehension mainly through visual and verbal explanations provided by professors, books, videos, and other instructional materials. This research applied the conceptual contraposition technique and program memory tracing technique to the prevalent teaching method in our country: the lecture. The understanding of the C++ notional machine was evaluated on students of a Programming II (CS2) course that implemented the mentioned methods. Results revealed that these techniques applied to the lecture are insufficient to help students develop satisfactory mental models of the C++ notional machine.},
  isbn = {978-1-4673-9143-6},
  langid = {spanish},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/2FGLNPGE/Hidalgo-Cespedes et al - 2015 - Student understanding of the C++ notional machine through traditional teaching.pdf}
}

@article{hidalgo-cespedesUnderstandingNotionalMachines2016,
  title = {Understanding {{Notional Machines}} through {{Traditional Teaching}} with {{Conceptual Contraposition}} and {{Program Memory Tracing}}},
  author = {{Hidalgo-C{\'e}spedes}, Jeisson and Mar{\'i}n, Gabriela and {Lara-Villagr{\'a}n}, Vladimir},
  year = {2016},
  month = aug,
  journal = {CLEI Electronic Journal},
  issn = {0717-5000},
  doi = {10.19153/cleiej.19.2.2},
  urldate = {2020-06-22},
  abstract = {A correct understanding about how computers run code is mandatory in order to effectively learn to program. Lectures have historically been used in programming courses to teach how computers execute code, and students are assessed through traditional evaluation methods, such as exams. Constructivism learning theory objects to students' passiveness during lessons, and traditional quantitative methods for evaluating a complex cognitive process such as understanding. Constructivism proposes complimentary techniques, such as conceptual contraposition and colloquies. We enriched lectures of a ``Programming II'' (CS2) course combining conceptual contraposition with program memory tracing, then we evaluated students' understanding of programming concepts through colloquies. Results revealed that these techniques applied to the lecture are insufficient to help students develop satisfactory mental models of the C++ notional machine, and colloquies behaved as the most comprehensive traditional evaluations conducted in the course.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/YUTA9JE7/Hidalgo-Céspedes et al - 2016 - Understanding Notional Machines through Traditional Teaching with Conceptual.pdf}
}

@article{higginsAutomatedAssessmentExperiences2005,
  title = {Automated Assessment and Experiences of Teaching Programming},
  author = {Higgins, Colin A. and Gray, Geoffrey and Symeonidis, Pavlos and Tsintsifas, Athanasios},
  year = {2005},
  month = sep,
  journal = {Journal on Educational Resources in Computing},
  volume = {5},
  number = {3},
  pages = {5--es},
  issn = {1531-4278},
  doi = {10.1145/1163405.1163410},
  urldate = {2020-07-22},
  abstract = {This article reports on the design, implementation, and usage of the CourseMarker (formerly known as CourseMaster) courseware Computer Based Assessment (CBA) system at the University of Nottingham. Students use CourseMarker to solve (programming) exercises and to submit their solutions. CourseMarker returns immediate results and feedback to the students. Educators author a variety of exercises that benefit the students while offering practical benefits. To date, both educators and students have been hampered by CBA software that has been constructed to assess text-based or multiple-choice answers only. Although there exist a few CBA systems with some capability to automatically assess programming coursework, none assess Java programs and none are as flexible, architecture-neutral, robust, or secure as the CourseMarker CBA system.},
  keywords = {Computer-based assessment,formative and summative assessment,online assessment},
  file = {/Users/igormoreno/Zotero/storage/2RCLR2S9/Higgins et al. - 2005 - Automated assessment and experiences of teaching p.pdf}
}

@inproceedings{hillApplyingAbstractionMaster2008,
  title = {Applying {{Abstraction}} to {{Master Complexity}}},
  booktitle = {Proceedings of the {{2Nd International Workshop}} on {{The Role}} of {{Abstraction}} in {{Software Engineering}}},
  author = {Hill, Jonathan H. and Houle, Bernice J. and Merritt, Susan M. and Stix, Allen},
  year = {2008},
  series = {{{ROA}} '08},
  pages = {15--21},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1370164.1370169},
  urldate = {2018-10-02},
  abstract = {Aptitude for managing abstraction may be a distinguishing characteristic of computer science majors. If this is so, and if this aptitude can be recognized among potential majors, those who are well suited for computer science but have not considered it as a major can be made aware of the possibility. Abstraction, as a human ability, is comprised of two complementary aspects: clearing away details to build simplifications and deriving generalizations that illuminate essentials. Agreement exists that this ability may be nurtured through instruction and experience, but that it rests upon a natural aptitude that is possessed by few. Agreement exists that this natural aptitude is assessable, although no instrument yet exists for measuring it efficiently among prospective computer science majors who have not begun computer science coursework. This paper deals with a study done at New York's Pace University to test undergraduate students across a range of majors for abstraction ability},
  isbn = {978-1-60558-028-9},
  keywords = {abstraction,cognition,computer science education,discipline,testing},
  file = {/Users/igormoreno/Zotero/storage/D8NGR8XC/Hill et al - 2008 - Applying Abstraction to Master Complexity.pdf}
}

@inproceedings{hinckleRelationshipGenderExperiential2020,
  title = {The {{Relationship}} of {{Gender}}, {{Experiential}}, and {{Psychological Factors}} to {{Achievement}} in {{Computer Science}}},
  booktitle = {Proceedings of the 2020 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Hinckle, Madeline and Rachmatullah, Arif and Mott, Bradford and Boyer, Kristy Elizabeth and Lester, James and Wiebe, Eric},
  year = {2020},
  month = jun,
  pages = {225--231},
  publisher = {{ACM}},
  address = {{Trondheim Norway}},
  doi = {10.1145/3341525.3387403},
  urldate = {2021-06-14},
  abstract = {Computer science (CS) is widely recognized as a field with a significant gender gap despite the growing prevalence of computing. Several factors including CS attitudes, exposure to CS, experience with computer programming, and confidence in using computers are understood to be correlated with the low participation of women in CS. These factors also play an important role in students' interest in CS careers and are particularly crucial during secondary school. However, there is a dearth of research that examines differences in how these factors are inter-correlated for younger students (ages 11-13). The purpose of this study was to generate and test a statistical model that demonstrates the inter-correlation amongst these factors with respect to gender. A total of 260 middle school students participated in this study. Four instruments measuring students' CS attitudes, confidence in using computers, CS conceptual understanding, and prior experience with CS-related activities were used. Structural equation modeling was utilized to test the hypothesized model. The findings showed that previous participation in CS-related activities had a significant direct effect on CS attitudes and confidence in using computers, but the effect on students' CS conceptual understanding was indirect. We also found that in a female specific model, previous participation had a significantly stronger direct effect on CS attitudes compared to its effect in a male specific model. The importance of providing more CS-related experience, especially to female students, as well as suggestions on activities that promote gender equity in the field are discussed.},
  isbn = {978-1-4503-6874-2},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/524BB2MB/Hinckle et al. - 2020 - The Relationship of Gender, Experiential, and Psyc.pdf}
}

@article{hinzeConjugateHylomorphismsMother2015,
  title = {Conjugate {{Hylomorphisms}} -- {{Or}}: {{The Mother}} of {{All Structured Recursion Schemes}}},
  shorttitle = {Conjugate {{Hylomorphisms}} -- {{Or}}},
  author = {Hinze, Ralf and Wu, Nicolas and Gibbons, Jeremy},
  year = {2015},
  month = jan,
  journal = {ACM SIGPLAN Notices},
  volume = {50},
  number = {1},
  pages = {527--538},
  issn = {0362-1340},
  doi = {10.1145/2775051.2676989},
  urldate = {2021-01-22},
  abstract = {The past decades have witnessed an extensive study of structured recursion schemes. A general scheme is the hylomorphism, which captures the essence of divide-and-conquer: a problem is broken into sub-problems by a coalgebra; sub-problems are solved recursively; the sub-solutions are combined by an algebra to form a solution. In this paper we develop a simple toolbox for assembling recursive coalgebras, which by definition ensure that their hylo equations have unique solutions, whatever the algebra. Our main tool is the conjugate rule, a generic rule parametrized by an adjunction and a conjugate pair of natural transformations. We show that many basic adjunctions induce useful recursion schemes. In fact, almost every structured recursion scheme seems to arise as an instance of the conjugate rule. Further, we adapt our toolbox to the more expressive setting of parametrically recursive coalgebras, where the original input is also passed to the algebra. The formal development is complemented by a series of worked-out examples in Haskell.},
  keywords = {adjunctions,hylomorphisms,recursion schemes},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/VN73YVUZ/Hinze et al. - 2015 - Conjugate Hylomorphisms -- Or The Mother of All S.pdf}
}

@article{hinzeGenericHaskellPractice2003,
  title = {Generic {{Haskell}}: {{Practice}} and {{Theory}}},
  shorttitle = {Generic {{Haskell}}},
  author = {Hinze, Ralf},
  year = {2003},
  volume = {2793},
  urldate = {2020-08-18},
  langid = {british},
  annotation = {00132},
  file = {/Users/igormoreno/Zotero/storage/MMQE7CFY/publication1166-abstract.html}
}

@inproceedings{hinzeReasonIsomorphically2010,
  title = {Reason Isomorphically!},
  booktitle = {Proceedings of the 6th {{ACM SIGPLAN}} Workshop on {{Generic}} Programming},
  author = {Hinze, Ralf and James, Daniel WH},
  year = {2010},
  pages = {85--96},
  annotation = {00007},
  file = {/Users/igormoreno/Zotero/storage/WXKKHG9A/Hinze and James - 2010 - Reason isomorphically!.pdf;/Users/igormoreno/Zotero/storage/ZRCPPIU3/1863495.html}
}

@inproceedings{hinzeUnifyingStructuredRecursion2013,
  title = {Unifying Structured Recursion Schemes},
  booktitle = {Proceedings of the 18th {{ACM SIGPLAN}} International Conference on {{Functional}} Programming},
  author = {Hinze, Ralf and Wu, Nicolas and Gibbons, Jeremy},
  year = {2013},
  month = sep,
  series = {{{ICFP}} '13},
  pages = {209--220},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2500365.2500578},
  urldate = {2021-01-22},
  abstract = {Folds over inductive datatypes are well understood and widely used. In their plain form, they are quite restricted; but many disparate generalisations have been proposed that enjoy similar calculational benefits. There have also been attempts to unify the various generalisations: two prominent such unifications are the 'recursion schemes from comonads' of Uustalu, Vene and Pardo, and our own 'adjoint folds'. Until now, these two unified schemes have appeared incompatible. We show that this appearance is illusory: in fact, adjoint folds subsume recursion schemes from comonads. The proof of this claim involves standard constructions in category theory that are nevertheless not well known in functional programming: Eilenberg-Moore categories and bialgebras.},
  isbn = {978-1-4503-2326-0},
  keywords = {adjunctions,bialgebras,comonads,distributive laws,recursion schemes},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/W52T7WXY/Hinze et al. - 2013 - Unifying structured recursion schemes.pdf}
}

@inproceedings{hinzeUnifyingStructuredRecursion2013a,
  title = {Unifying Structured Recursion Schemes},
  booktitle = {Proceedings of the 18th {{ACM SIGPLAN}} International Conference on {{Functional}} Programming},
  author = {Hinze, Ralf and Wu, Nicolas and Gibbons, Jeremy},
  year = {2013},
  month = sep,
  series = {{{ICFP}} '13},
  pages = {209--220},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2500365.2500578},
  urldate = {2022-01-06},
  abstract = {Folds over inductive datatypes are well understood and widely used. In their plain form, they are quite restricted; but many disparate generalisations have been proposed that enjoy similar calculational benefits. There have also been attempts to unify the various generalisations: two prominent such unifications are the 'recursion schemes from comonads' of Uustalu, Vene and Pardo, and our own 'adjoint folds'. Until now, these two unified schemes have appeared incompatible. We show that this appearance is illusory: in fact, adjoint folds subsume recursion schemes from comonads. The proof of this claim involves standard constructions in category theory that are nevertheless not well known in functional programming: Eilenberg-Moore categories and bialgebras.},
  isbn = {978-1-4503-2326-0},
  keywords = {adjunctions,bialgebras,comonads,distributive laws,recursion schemes},
  file = {/Users/igormoreno/Zotero/storage/C3A48Z4F/Hinze et al. - 2013 - Unifying structured recursion schemes.pdf}
}

@article{hoareAxiomaticBasisComputer1969,
  title = {An {{Axiomatic Basis}} for {{Computer Programming}}},
  author = {Hoare, C. A. R.},
  year = {1969},
  month = oct,
  journal = {Communications of the ACM},
  volume = {12},
  number = {10},
  pages = {576--580},
  issn = {0001-0782},
  doi = {10.1145/363235.363259},
  urldate = {2018-12-01},
  abstract = {In this paper an attempt is made to explore the logical foundations of computer programming by use of techniques which were first applied in the study of geometry and have later been extended to other branches of mathematics. This involves the elucidation of sets of axioms and rules of inference which can be used in proofs of the properties of computer programs. Examples are given of such axioms and rules, and a formal proof of a simple theorem is displayed. Finally, it is argued that important advantage, both theoretical and practical, may follow from a pursuance of these topics.},
  keywords = {axiomatic method,formal language definition,machine-independent programming,program documentation,programming language design,theory of programming' proofs of programs},
  annotation = {07292},
  file = {/Users/igormoreno/Zotero/storage/XRG2NRJ7/Hoare - 1969 - An Axiomatic Basis for Computer Programming.pdf}
}

@article{hoareProofCorrectnessData1972,
  title = {Proof of Correctness of Data Representations},
  author = {Hoare, C. A.},
  year = {1972},
  month = dec,
  journal = {Acta Informatica},
  volume = {1},
  number = {4},
  pages = {271--281},
  issn = {0001-5903},
  doi = {10.1007/BF00289507},
  urldate = {2020-10-07},
  abstract = {A powerful method of simplifying the proofs of program correctness is suggested; and some new light is shed on the problem of functions with side-effects.},
  annotation = {01648},
  file = {/Users/igormoreno/Zotero/storage/EAB723PV/Hoare - 1972 - Proof of correctness of data representations.pdf}
}

@inproceedings{hodovanGrammarinatorGrammarbasedOpen2018,
  title = {Grammarinator: A Grammar-Based Open Source Fuzzer},
  shorttitle = {Grammarinator},
  booktitle = {Proceedings of the 9th {{ACM SIGSOFT International Workshop}} on {{Automating TEST Case Design}}, {{Selection}}, and {{Evaluation}}},
  author = {Hodov{\'a}n, Ren{\'a}ta and Kiss, {\'A}kos and Gyim{\'o}thy, Tibor},
  year = {2018},
  pages = {45--48},
  annotation = {00016},
  file = {/Users/igormoreno/Zotero/storage/JXS9JPD7/Hodován et al. - 2018 - Grammarinator a grammar-based open source fuzzer.pdf;/Users/igormoreno/Zotero/storage/SMQWRHVW/3278186.html}
}

@article{hogenboomComputerizedAdaptiveAssessment2022,
  title = {Computerized Adaptive Assessment of Understanding of Programming Concepts in Primary School Children},
  author = {Hogenboom, Sally A. M. and Hermans, Felienne F. J. and {Van der Maas}, Han L. J.},
  year = {2022},
  month = oct,
  journal = {Computer Science Education},
  volume = {32},
  number = {4},
  pages = {418--448},
  issn = {0899-3408, 1744-5175},
  doi = {10.1080/08993408.2021.1914461},
  urldate = {2023-03-16},
  abstract = {Background and Context. Valid assessment of understanding of programming concepts in primary school children is essential to implement and improve programming education.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/JFSJNB55/Hogenboom et al. - 2022 - Computerized adaptive assessment of understanding .pdf}
}

@article{hogenboomComputerizedAdaptiveAssessment2022a,
  title = {Computerized Adaptive Assessment of Understanding of Programming Concepts in Primary School Children},
  author = {Hogenboom, Sally A. M. and Hermans, Felienne F. J. and {Van der Maas}, Han L. J.},
  year = {2022},
  month = oct,
  journal = {Computer Science Education},
  volume = {32},
  number = {4},
  pages = {418--448},
  issn = {0899-3408, 1744-5175},
  doi = {10.1080/08993408.2021.1914461},
  urldate = {2023-03-16},
  abstract = {Background and Context. Valid assessment of understanding of programming concepts in primary school children is essential to implement and improve programming education.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/4Y98VT5A/Hogenboom et al. - 2022 - Computerized adaptive assessment of understanding .pdf}
}

@book{hohpe37ThingsOne2019,
  title = {37 {{Things One Architect Knows About IT Transformation}}},
  author = {Hohpe, Gregor},
  year = {2019},
  month = may,
  langid = {english},
  annotation = {00003},
  file = {/Users/igormoreno/Zotero/storage/UX9UG6QC/Hohpe - 2019 - 37 Things One Architect Knows About IT Transformation.pdf}
}

@incollection{holcombe30ComputationalModelling2005,
  title = {30 {{Computational}} Modelling of Creativity in Abstract Art},
  booktitle = {Studies in {{Multidisciplinarity}}},
  author = {Holcombe, Mike and Smith, Samantha and Merewood, Rowan and Swingeford, Andy},
  editor = {Malcolm, Grant},
  year = {2005},
  month = jan,
  series = {Multidisciplinary {{Approaches}} to {{Visual Representations}} and {{Interpretations}}},
  volume = {2},
  pages = {407--424},
  publisher = {{Elsevier}},
  doi = {10.1016/S1571-0831(04)80058-3},
  urldate = {2022-12-29},
  abstract = {Artistic creativity is studied through the construction of computational models of a number of well-known modern artists. In particular, the work of Piet Mondrian, M.C. Escher and Paul Klee are suitable vehicles for investigation since their work is accompanied by extensive writings describing the ideas and motivation behind their compositions. In particular, we have tried to abstract from their theories, rules that describe the construction process or the properties that their finished artefacts posses in order to create software programs that can articulate these rules. In this way, we are able to simulate either automatically or with user interaction, the process of creating works of art of a similar genre and satisfying the properties desired by the artist. Since the rules are bound to be considerably more complex than those currently exposed, we are looking to use machine-learning techniques to develop more sophisticated agents, which may behave more closely like the actual artist.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/EZKMUWKR/Holcombe et al. - 2005 - 30 Computational modelling of creativity in abstra.pdf;/Users/igormoreno/Zotero/storage/3XVYAE49/S1571083104800583.html}
}

@inproceedings{hollandAvoidingObjectMisconceptions1997,
  ids = {hollandAvoidingObjectMisconceptions1997a},
  title = {Avoiding {{Object Misconceptions}}},
  booktitle = {Proceedings of the {{Twenty-eighth SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  author = {Holland, Simon and Griffiths, Robert and Woodman, Mark},
  year = {1997},
  series = {{{SIGCSE}} '97},
  pages = {131--134},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/268084.268132},
  urldate = {2019-10-30},
  abstract = {This paper identifies and describes a number of misconceptions observed in students learning about object technology. It identifies simple, concrete, measures course designers and teachers can take to avoid these misconceptions arising. The context for this work centres on an introductory undergraduate course and a postgraduate course. Both these courses are taught by distance education. These courses both use Smalltalk as an introduction to object technology. More particularly, the undergraduate course uses Smalltalk as a first programming language.Distance education can limit the amount and speed of individual feedback that can be given in the early stages of learning. For this reason, particular attention has been paid to characterizing measures for avoiding elementary misconceptions seen in beginning learners. At the same time we also address some misconceptions observed in postgraduate students. The pedagogical issues discussed are of particular importance when devising an extended series of examples for teaching or assessment, or when designing a visual microworld to be used for teaching purposes.},
  isbn = {978-0-89791-889-3},
  annotation = {00207},
  file = {/Users/igormoreno/Zotero/storage/P7JI3ZFF/Holland et al. - 1997 - Avoiding object misconceptions.pdf;/Users/igormoreno/Zotero/storage/VSTFA8AE/Holland et al - 1997 - Avoiding Object Misconceptions.pdf;/Users/igormoreno/Zotero/storage/KAPP7XD8/268084.html}
}

@inproceedings{hollidayCS1AssessmentUsing2004,
  title = {{{CS1}} Assessment Using Memory Diagrams},
  booktitle = {Proceedings of the 35th {{SIGCSE}} Technical Symposium on {{Computer}} Science Education},
  author = {Holliday, Mark A. and Luginbuhl, David},
  year = {2004},
  month = mar,
  series = {{{SIGCSE}} '04},
  pages = {200--204},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/971300.971373},
  urldate = {2023-04-14},
  abstract = {Understanding the execution of an object-oriented program can be a challenge for a student starting a CS1 course. We believe that a type of diagram that we call a memory diagram can aid the student in understanding object-oriented programming and can assist the instructor in assessing the student's understanding.Memory diagrams focus on how, in an abstract sense, the memory of the machine changes as the program executes. Though memory diagrams are a simple idea, by careful use of shape and placement, a number of key points about the meaning of a program fragment can be conveyed visually. We have found a correlation between a student's ability to construct these diagrams and that student's comprehension of object-oriented concepts. We feel that this correlation indicates that memory diagrams can be used as an assessment technique that, in turn, can be used to improve student learning.},
  isbn = {978-1-58113-798-9},
  keywords = {computer science education,CS1,Java,memory diagrams,object-oriented programming,student assessment},
  file = {/Users/igormoreno/Zotero/storage/EGWQ72AK/Holliday and Luginbuhl - 2004 - CS1 assessment using memory diagrams.pdf}
}

@article{holligIndividualizingGamifiedSystems2020,
  title = {Individualizing Gamified Systems: {{The}} Role of Trait Competitiveness and Leaderboard Design},
  shorttitle = {Individualizing Gamified Systems},
  author = {H{\"o}llig, Christoph E. and Tumasjan, Andranik and Welpe, Isabell M.},
  year = {2020},
  month = jan,
  journal = {Journal of Business Research},
  volume = {106},
  pages = {288--303},
  issn = {01482963},
  doi = {10.1016/j.jbusres.2018.10.046},
  urldate = {2023-06-27},
  abstract = {The success of gamified systems depends on how user characteristics and behavior interact with system design. Prior research, however, has largely neglected this user-system interaction, thus limiting our understanding of gamification design. To addresses this limitation in the current literature, we investigate how users' trait competitiveness is related to the usage intention of a competitive gamified system. Based on our theoretical model, we hypothesize and test both direct and indirect effects (through perceived enjoyment), as well as whether and how system design moderates the effects of trait competitiveness. Results from structural equation modeling demonstrate an indirect-only mediated relationship between trait competitiveness and usage intention through perceived enjoyment. Moreover, we show evidence, that this mediated relationship interacts with system design, such that the relationship is strengthened when a team-based vs. a player-based leaderboard is employed. Our findings show the importance of designing gamified systems that provide appropriate user-system fit.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/B3W4LBUI/Höllig et al. - 2020 - Individualizing gamified systems The role of trai.pdf}
}

@article{hollingsworthAutomaticGradersProgramming1960,
  title = {Automatic Graders for Programming Classes},
  author = {Hollingsworth, Jack},
  year = {1960},
  month = oct,
  journal = {Communications of the ACM},
  volume = {3},
  number = {10},
  pages = {528--529},
  issn = {00010782},
  doi = {10.1145/367415.367422},
  urldate = {2019-09-27},
  file = {/Users/igormoreno/Zotero/storage/3CRWERWH/Hollingsworth - 1960 - Automatic graders for programming classes.pdf}
}

@book{hollnagelHandbookCognitiveTask2003,
  title = {Handbook of Cognitive Task Design},
  editor = {Hollnagel, Erik},
  year = {2003},
  series = {Human Factors and Ergonomics},
  publisher = {{Lawrence Erlbaum Publishers}},
  address = {{Mahwah, N.J}},
  isbn = {978-0-8058-4003-2},
  langid = {english},
  lccn = {TA167 .H35 2003},
  keywords = {Cognition,{Handbooks, manuals, etc},Human-machine systems,Task analysis},
  file = {/Users/igormoreno/Zotero/storage/FJGUX5JI/Hollnagel - 2003 - Handbook of cognitive task design.pdf}
}

@inproceedings{holsappleDesigningDesignerEvidenceOriented2022,
  title = {Designing {{Designer}}: {{The Evidence-Oriented Design Process}} of a {{Pedagogical Interactive Graphics Python Library}}},
  shorttitle = {Designing {{Designer}}},
  booktitle = {Proceedings of the 53rd {{ACM Technical Symposium}} on {{Computer Science Education V}}. 1},
  author = {Holsapple, Kristina and Bart, Austin Cory},
  year = {2022},
  month = feb,
  series = {{{SIGCSE}} 2022},
  pages = {85--91},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3478431.3499363},
  urldate = {2022-07-07},
  abstract = {As a solution to the challenge of motivating and retaining undergraduate introductory computer science students, game development and image manipulation are popular motivational contexts in introductory computer science (CS1) classrooms. However, there has been little research on how to empirically make the required code libraries friendly for novice learners. This work explores how novice preconceptions of vocabulary and code structure should affect Designer (https://krishols.github.io/designer), our new pedagogical interactive graphics Python library. Preconceptions were measured through two successive surveys. Survey responses were analyzed for differences between survey version and students' prior programming experience. Although specific preconceptions varied based on students' degrees of prior programming experience, students do tend to prefer simple vocabulary. Motivated to fill a gap in the libraries available for early Python education, these results were used to guide the development of Designer. Alongside the library, this work provides three successive CS1 lesson plans developed using the Use-Modify-Create lesson progression. Future work is in progress to measure and improve the usability of Designer and its resources through further collaboration with students, to ultimately create a truly novice friendly game and graphics API.},
  isbn = {978-1-4503-9070-5},
  keywords = {api design,cs1,evidence-oriented design,game development,interactive graphics,python},
  file = {/Users/igormoreno/Zotero/storage/6IDYDCTY/Holsapple and Bart - 2022 - Designing Designer The Evidence-Oriented Design P.pdf}
}

@inproceedings{holtSequenceStructuredSubsets1974,
  title = {A {{Sequence}} of {{Structured Subsets}} of {{PL}}/{{I}}},
  booktitle = {Proceedings of the {{Fourth SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  author = {Holt, Richard C. and Wortman, David B.},
  year = {1974},
  series = {{{SIGCSE}} '74},
  pages = {129--132},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/800183.810456},
  urldate = {2019-07-13},
  abstract = {This paper gives a brief introduction to a sequence of subsets of the PL/I language that has been designed for the purpose of teaching introductory computer, programming. The six subsets, called SP/1, SP/2, ..., SP/6, restrict PL/I to language features which the authors feel encourage good programming habits. Each subset introduces new language features while retaining features introduced in earlier subsets.},
  annotation = {00011},
  file = {/Users/igormoreno/Zotero/storage/DX2WES6Q/Holt and Wortman - 1974 - A Sequence of Structured Subsets of PLI.pdf}
}

@inproceedings{holtStateStudentModelling1994,
  title = {The {{State}} of {{Student Modelling}}},
  booktitle = {Student {{Modelling}}: {{The Key}} to {{Individualized Knowledge-Based Instruction}}},
  author = {Holt, Peter and Dubs, Shelli and Jones, Marlene and Greer, Jim},
  editor = {Greer, Jim E. and McCalla, Gordon I.},
  year = {1994},
  series = {{{NATO ASI Series}}},
  pages = {3--35},
  publisher = {{Springer}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-662-03037-0_1},
  abstract = {This review of the field of student modelling covers the basic concepts of overlays, bugs, and various more recent modelling representations. The function of student modelling is analyzed within the context of the original intelligent tutoring system architectures and more recent elaborations of that architecture such as intelligent learning environments and case-based tutorial systems. The authors explore issues surrounding cognitive modelling and model building. The contributions to student modelling from various research areas are outlined. It is concluded that student modelling is a vital research area underpinning future developments in intelligent learning environments and tutoring systems.},
  isbn = {978-3-662-03037-0},
  langid = {english},
  keywords = {bugs,diagnosis,learning environment,mental models,student modeling},
  annotation = {00197},
  file = {/Users/igormoreno/Zotero/storage/RAEZLSSA/Holt et al. - 1994 - The State of Student Modelling.pdf}
}

@inproceedings{homerGracefulDialects2014,
  title = {Graceful {{Dialects}}},
  booktitle = {{{ECOOP}} 2014 \textendash{} {{Object-Oriented Programming}}},
  author = {Homer, Michael and Jones, Timothy and Noble, James and Bruce, Kim B. and Black, Andrew P.},
  editor = {Jones, Richard},
  year = {2014},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {131--156},
  publisher = {{Springer}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-662-44202-9_6},
  abstract = {Programming languages are enormously diverse, both in their essential concepts and in their accidental aspects. This creates a problem when teaching programming. To let students experience the diversity of essential concepts, the students must also be exposed to an overwhelming variety of accidental and irrelevant detail: the accidental differences between the languages are likely to obscure the teaching point.The dialect system of the Grace programming language allows instructors to tailor and vary the language to suit their courses, while staying within the same stylistic, syntactic and semantic framework, as well as permitting authors to define advanced internal domain-specific languages. The dialect system achieves this power though a combination of well-known language features: lexical nesting, lambda expressions, multi-part method names, optional typing, and pluggable checkers. Grace's approach to dialects is validated by a series of case studies, including both extensions and restrictions of the base language.},
  isbn = {978-3-662-44202-9},
  langid = {english},
  keywords = {domain-specific languages,error reporting,Grace,graphical microworlds,language variants,object-oriented programming,pluggable checkers},
  file = {/Users/igormoreno/Zotero/storage/TTUQNLRM/Homer et al. - 2014 - Graceful Dialects.pdf}
}

@misc{HomotopyTypeTheory,
  title = {Homotopy {{Type Theory}}},
  journal = {Bartosz Milewski's Programming Cafe},
  urldate = {2021-04-12},
  abstract = {Posts about Homotopy Type Theory written by Bartosz Milewski},
  howpublished = {https://bartoszmilewski.com/category/homotopy-type-theory/},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/V783TY5S/homotopy-type-theory.html}
}

@book{horstmannBigJavaEarly2019,
  title = {Big {{Java}}. {{Early}} Objects},
  author = {Horstmann, Cay S.},
  year = {2019},
  edition = {Seventh edition},
  publisher = {{John Wiley \& Sons, Inc}},
  address = {{Hoboken, NJ}},
  abstract = {"This book is an introduction to Java and computer programming that focuses on the essentials--and on effective learning. The book is designed to serve a wide range of student interests and abilities and is suitable for a first course in programming for computer scientists, engineers, and students in other disciplines. No prior programming experience is required, and only a modest amount of high school algebra is needed"--},
  isbn = {978-1-119-49944-2 978-1-119-49909-1},
  langid = {english},
  lccn = {QA76.73.J38},
  keywords = {Java (Computer program language)},
  file = {/Users/igormoreno/Zotero/storage/9MQRZEQE/Horstmann - 2019 - Big Java. Early objects.pdf}
}

@article{hortonInvestigationEffectivenessConcept1993b,
  title = {An Investigation of the Effectiveness of Concept Mapping as an Instructional Tool},
  author = {Horton, Phillip B. and McConney, Andrew A. and Gallo, Michael and Woods, Amanda L. and Senn, Gary J. and Hamelin, Denis},
  year = {1993},
  journal = {Science Education},
  volume = {77},
  number = {1},
  pages = {95--111},
  issn = {1098-237X},
  doi = {10.1002/sce.3730770107},
  urldate = {2023-08-27},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/NARSXXMH/Horton et al. - 1993 - An investigation of the effectiveness of concept m.pdf;/Users/igormoreno/Zotero/storage/TARA6PYN/sce.html}
}

@inproceedings{hosseiniAnimatedExamplesPractice2016,
  title = {Animated {{Examples}} as {{Practice Content}} in a {{Java Programming Course}}},
  booktitle = {Proceedings of the 47th {{ACM Technical Symposium}} on {{Computing Science Education}} - {{SIGCSE}} '16},
  author = {Hosseini, Roya and Sirki{\"a}, Teemu and Guerra, Julio and Brusilovsky, Peter and Malmi, Lauri},
  year = {2016},
  pages = {540--545},
  publisher = {{ACM Press}},
  address = {{Memphis, Tennessee, USA}},
  doi = {10.1145/2839509.2844639},
  urldate = {2020-06-22},
  abstract = {Code examples are commonly used learning resources that help students grasp various programming structures and concepts. However, example code usually requires explanations about what each line or part of the code does. Otherwise, students may find it difficult to follow an example. In this paper, we compare two types of code examples that use different techniques to describe important concepts in the code: annotated and animated examples. The former displays an explanation for a subset of lines in plain text, whereas the latter visualizes code execution. We studied the use and impact of these enhanced examples, provided as non-mandatory practice content, in three introductory Java courses. Our results suggest that animated examples are more engaging and have a positive impact on students' learning. As compared to annotated examples, students spent more time with animated examples and more likely completed them. Also, a positive relationship was found between the number of explored animated examples and the overall course grade.},
  isbn = {978-1-4503-3685-7},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/TU5ZU3NS/Hosseini et al - 2016 - Animated Examples as Practice Content in a Java Programming Course.pdf}
}

@article{hosseiniJavaParserFineGrainedConcept,
  title = {{{JavaParser}}: {{A Fine-Grained Concept Indexing Tool}} for {{Java Problems}}},
  author = {Hosseini, Roya and Brusilovsky, Peter},
  pages = {4},
  abstract = {The multi-concept nature of problems in the programming language domain requires fine-grained indexing which is critical for sequencing purposes. In this paper, we propose an approach for extracting this set of concepts in a reliable automated way using the JavaParser tool. To demonstrate the importance of fine-grained sequencing, we provide an example of how this information can be used for problem sequencing during exam preparation.},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/GLUJJ2CI/Hosseini e Brusilovsky - JavaParser A Fine-Grained Concept Indexing Tool f.pdf}
}

@inproceedings{hosseiniPCEXInteractiveProgram2018,
  title = {{{PCEX}}: {{Interactive Program Construction Examples}} for {{Learning Programming}}},
  shorttitle = {{{PCEX}}},
  booktitle = {Proceedings of the 18th {{Koli Calling International Conference}} on {{Computing Education Research}}},
  author = {Hosseini, Roya and Akhuseyinoglu, Kamil and Petersen, Andrew and Schunn, Christian D. and Brusilovsky, Peter},
  year = {2018},
  month = nov,
  pages = {1--9},
  publisher = {{ACM}},
  address = {{Koli Finland}},
  doi = {10.1145/3279720.3279726},
  urldate = {2021-06-14},
  abstract = {A sizable body of research on instructional practices supports the use of worked examples for acquiring cognitive skills in domains such as mathematics and physics. Although examples are also important in the domain of programming, existing research on programming examples is limited. Program examples are used by instructors to achieve two important goals: to explain program behavior and to demonstrate program construction patterns. Program behavior examples are used to demonstrate the semantics of various program constructs (i.e., what is happening inside a program or an algorithm when it is executed). Program construction examples illustrate how to construct a program that achieves a specific purpose. While both functions of program examples are important for learning, most of the example-focused research in computer science education focused on technologies for augmenting program behavior examples such as program visualization, tracing tables, etc. In contrast, advanced technologies for presenting program construction examples were rarely explored. This work introduces interactive Program Construction Examples (PCEX) to begin a systematic exploration of worked-out program construction examples in the domain of computer science education. A classroom evaluation and analysis of the survey data demonstrated that the usage of PCEX examples is associated with better student's learning and performance.},
  isbn = {978-1-4503-6535-2},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/KKPCQ6RL/Hosseini et al. - 2018 - PCEX Interactive Program Construction Examples fo.pdf}
}

@misc{howardBryceDallasHoward1654526742,
  title = {Bryce {{Dallas Howard}}: {{How}} to Preserve Your Private Life in the Age of Social Media | {{TED Talk}}},
  shorttitle = {Bryce {{Dallas Howard}}},
  author = {Howard, Bryce Dallas},
  year = {1654526742},
  urldate = {2022-06-17},
  abstract = {Growing up in the public eye, multi-hyphenate creator Bryce Dallas Howard experienced the familiar pressure to share her life with the world on social media. But with her mother's steadfast guidance, Howard learned to set personal boundaries and savor the beauty of private moments. In this personal talk, she draws on three generations of family wisdom to remind us that "a private life makes a public life worth living."}
}

@misc{HOWTOApplyGet,
  title = {{{HOWTO}}: {{Apply}} for and Get into Grad School in Science, Engineering, Mathematics and Computer Science: {{Tip}}, Tricks, Hints and Mistakes},
  urldate = {2020-06-06},
  howpublished = {http://matt.might.net/articles/how-to-apply-and-get-in-to-graduate-school-in-science-mathematics-engineering-or-computer-science/},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/LN2H4DAH/how-to-apply-and-get-in-to-graduate-school-in-science-mathematics-engineering-or-computer-scien.html}
}

@inproceedings{hristovaIdentifyingCorrectingJava2003,
  title = {Identifying and Correcting {{Java}} Programming Errors for Introductory Computer Science Students},
  booktitle = {Proceedings of the 34th {{SIGCSE}} Technical Symposium on {{Computer}} Science Education},
  author = {Hristova, Maria and Misra, Ananya and Rutter, Megan and Mercuri, Rebecca},
  year = {2003},
  month = jan,
  series = {{{SIGCSE}} '03},
  pages = {153--156},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/611892.611956},
  urldate = {2021-01-09},
  abstract = {Programming in Java can be a daunting task for introductory students, one that is only compounded by the cryptic compiler error messages they see when they first start to write actual code. This article details a project conducted by faculty and advanced students in the creation of an educational tool for Java programming, called Expresso. This paper discusses some existing programming tools, explains their drawbacks, and describes why Expresso is different. We also include a detailed list of typical errors made by novice programmers, used in the construction of the Expresso tool.},
  isbn = {978-1-58113-648-7},
  keywords = {CS1,Java,logic,programming,semantics,syntax},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/WIF7M2RQ/Hristova et al. - Identifying and Correcting Java Programming Errors.pdf;/Users/igormoreno/Zotero/storage/XQTUWMPW/Hristova et al. - 2003 - Identifying and correcting Java programming errors.pdf;/Users/igormoreno/Zotero/storage/5P23K2AM/792548.html}
}

@book{hromkovicEinfachInformatikProgrammieren2021,
  title = {Einfach {{Informatik}}: {{Programmieren Robotik}}},
  author = {Hromkovi{\v c}, Juraj},
  year = {2021},
  edition = {Draft},
  publisher = {{Klett}},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/HMFCLAY9/Hromkovič - 2021 - Einfach Informatik.pdf}
}

@article{hromkovicvHowConvinceTeachers2017,
  title = {How to Convince Teachers to Teach Computer Science Even If Informatics Was Never a Part of Their Own Studies},
  author = {Hromkovic{\textasciicaron}, Juraj and Lacher, Regula},
  year = {2017},
  month = oct,
  journal = {Bulletin of EATCS},
  volume = {3},
  number = {123},
  pages = {6},
  abstract = {Computer science is becoming a common, mandatory subject in curricula of educational systems in ever more countries. The implementation is everything, but simple. Computer science is the only subject that teachers of primary schools have to teach, but never studied themselves. The widely spread, but wrong idea that computer science is about using a computer or about working with social media makes this process still more complicated, with the risk that the next generation of teachers also does not get proper training. In this article, we show how to explain the goals of computer science education to the teachers in such a way that they understand the contributions of computer science to the understanding of the world and to the growth of intellectual abilities of their pupils, and that they focus on teaching fundamental, and therefore stable concepts of informatics instead of operating instructions for short-term applications. The following text is an explanation and an offer to teachers who are experienced in teaching, but do not have any idea what computer science is about, except that it has "something to do with computers".},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/Z296ZQRF/Hromkovicˇ and Lacher - 2017 - How to convince teachers to teach computer science even if informatics was.pdf}
}

@inproceedings{hromkovicXLogoOnlineSinglePageBrowserBased2017,
  title = {{{XLogoOnline}}: {{A Single-Page}}, {{Browser-Based Programming Environment}} for {{Schools Aiming}} at {{Reducing Cognitive Load}} on {{Pupils}}},
  shorttitle = {{{XLogoOnline}}},
  booktitle = {Informatics in {{Schools}}: {{Focus}} on {{Learning Programming}}},
  author = {Hromkovi{\v c}, Juraj and Serafini, Giovanni and Staub, Jacqueline},
  editor = {Dagien{\.e}, Valentina and Hellas, Arto},
  year = {2017},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {219--231},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-71483-7_18},
  abstract = {For more than twelve years, our chair has been introducing primary school children to algorithmic thinking by teaching them how to program in Logo. The key element of the proposed didactic approach consists in reducing the extraneous cognitive load on the pupils. We developed and stepwise refined the required teaching materials that allow for introducing only a few instructions in a programming language, which is gradually extended simply relying on modular design. XLogoOnline is our new browser-based, single-page programming environment for schools which is perfectly attuned to our curriculum. We argue that the platform reduces the extraneous cognitive load on the pupils thanks to a heavily-simplified workflow, appropriate for young children, and present evaluations that confirm high usability and acceptance across ages.},
  isbn = {978-3-319-71483-7},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/9X27HZK2/Hromkovič et al. - 2017 - XLogoOnline A Single-Page, Browser-Based Programm.pdf}
}

@inproceedings{hsiaoLessonsLearnedStudents2016,
  title = {Lessons {{Learned}} from {{Students}}' {{Cheat Sheets}}: {{Generic Models}} for {{Designing Programming Study Guides}}},
  shorttitle = {Lessons {{Learned}} from {{Students}}' {{Cheat Sheets}}},
  booktitle = {2016 {{IEEE}} 16th {{International Conference}} on {{Advanced Learning Technologies}} ({{ICALT}})},
  author = {Hsiao, I. and L{\'o}pez, C.},
  year = {2016},
  month = jul,
  pages = {209--211},
  doi = {10.1109/ICALT.2016.91},
  abstract = {We survey across generations of work in authorized cheat sheets, and emphasize on extracting generic features for designing one. We construct generic models to address cognitive aspects of learning and focus on the content of knowledge components in the domain of programming language learning. We evaluate the models with real classroom study data and found that the amount of notes on a cheat sheet is associated with gains in students' declarative knowledge, but not procedural knowledge. We also discovered that working in creating new cheat sheets can help students to achieve better exam grades accumulatively beyond and above the effect of their performance in a prior exam. We discuss how these findings can guide the design of technology-based study guides.},
  keywords = {cheat sheet,cognition,cognitive aspect,Computer languages,computer science education,exam preparation,Feature extraction,Modeling,Organizations,procedural knowledge,programming,programming language learning,programming languages,Programming profession,Psychology,student cheat sheet,student declarative knowledge,study guide,technology-based study guide},
  file = {/Users/igormoreno/Zotero/storage/73IZHFDG/Hsiao and López - 2016 - Lessons Learned from Students' Cheat Sheets.pdf;/Users/igormoreno/Zotero/storage/F4PN47S3/7756960.html}
}

@inproceedings{hsiaoWebbasedParameterizedQuestions2008,
  title = {Web-Based Parameterized Questions for Object-Oriented Programming},
  author = {Hsiao, I-Han and Brusilovsky, Peter and Sosnovsky, Sergey},
  year = {2008},
  month = jan,
  abstract = {Web-based questions for assessment and self-assessment of students' knowledge are important components of modern E-Learning. Parameterized questions allow to enhance the value of Web-based questions while also decreasing the authoring costs. This paper discusses the problems of implementation and evaluation of online parameterized questions for the domain of object-oriented programming. We present QuizJET \textendash{} a system supporting authoring, delivery, and automatic assessment of parameterized online quizzes and questions\textemdash aimed at teaching a non-formula-based domain, Java programming language. The classroom evaluation of QuizJET demonstrated that by working with the system students were able to improve their scores on in-class weekly quizzes. We have also observed a significant relation between the amount of work and the success rate of students and their scores on the final exam.},
  file = {/Users/igormoreno/Zotero/storage/Z52C2E72/Hsiao et al. - 2008 - Web-based parameterized questions for object-orien.pdf}
}

@article{hsuHowDoesGamification2018,
  title = {How Does Gamification Improve User Experience? {{An}} Empirical Investigation on the Antecedences and Consequences of User Experience and Its Mediating Role},
  shorttitle = {How Does Gamification Improve User Experience?},
  author = {Hsu, Chia-Lin and Chen, Mu-Chen},
  year = {2018},
  month = jul,
  journal = {Technological Forecasting and Social Change},
  volume = {132},
  pages = {118--129},
  issn = {00401625},
  doi = {10.1016/j.techfore.2018.01.023},
  urldate = {2023-06-27},
  abstract = {Given the growing commercial importance of the ``user experience'', better application of gamification. Thus, this study aims at exploring the antecedents and consequences of user experience and its mediating role in an online gamification context. Specifically, this study uses structural equation modeling to test the causal relationships among perceived mobility, utilitarian and hedonic features, user experience, perceived benefits (selfbenefit and social benefit), types of perceived value (information value, experiential value, social value, and transaction value), and brand equity (perceived quality, brand loyalty, brand associations, and brand trust) in an online gamification context. Results show that perceived mobility has a significant impact on utilitarian and hedonic features, while perceived mobility and utilitarian and hedonic features influence user experience, which in turn, affects perceived benefits, types of perceived value, and brand equity. Additionally, the mediating effect of user experience is also confirmed in this study. In summary, the findings of this study can help website managers improve their users' perception of benefits, value, and brand equity more effectively and act as a guide to research and development (R\&D) of gamification to obtain competitive advantage in the online context.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/L8HNSDWL/Hsu and Chen - 2018 - How does gamification improve user experience An .pdf}
}

@article{hsuWebsiteFeaturesMatter2017,
  title = {Do Website Features Matter in an Online Gamification Context? {{Focusing}} on the Mediating Roles of User Experience and Attitude},
  shorttitle = {Do Website Features Matter in an Online Gamification Context?},
  author = {Hsu, Chia-Lin and Chen, Yen-Chun and Yang, Tai-Ning and Lin, Wei-Ko},
  year = {2017},
  month = jul,
  journal = {Telematics and Informatics},
  volume = {34},
  number = {4},
  pages = {196--205},
  issn = {07365853},
  doi = {10.1016/j.tele.2017.01.009},
  urldate = {2023-06-27},
  abstract = {The purposes of this study are mainly to investigate the relationships among website features (i.e. utilitarian and hedonic features), user experience, perceived value (i.e. information value, experiential value, social value, and transaction value), user attitude, and behavioral intentions (i.e. intention to use and word-of-mouth intention), and additionally the mediating effects of user experience and attitude are also explored in this study in an online gamification context. Specifically, this study applies a structural equation model to test the causal relationships among those website features, user experience, perceived value, user experience, and behavioral intentions in an online gamification context. Results show that both utilitarian features and hedonic features have significant impact on users' experience, which in turn affects their perception of value and attitude. Users' perceptions of information and transaction value also significantly affect their attitude, and in turn affect their behavioral intentions. Besides, the mediating effects of user experience and attitude are also confirmed in this study. To summarize, the findings of this study can help website managers improve their users' perceptions of value and attitude more effectively and act as a guide for research and development (R\&D) of gamification to acquire competitive advantage and further evoke desired behavioral intentions.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/KSJX2KT9/Hsu et al. - 2017 - Do website features matter in an online gamificati.pdf}
}

@article{huangImplementingTheorydrivenGamification2018,
  title = {Implementing a Theory-Driven Gamification Model in Higher Education Flipped Courses: {{Effects}} on out-of-Class Activity Completion and Quality of Artifacts},
  shorttitle = {Implementing a Theory-Driven Gamification Model in Higher Education Flipped Courses},
  author = {Huang, Biyun and Hew, Khe Foon},
  year = {2018},
  month = oct,
  journal = {Computers \& Education},
  volume = {125},
  pages = {254--272},
  issn = {03601315},
  doi = {10.1016/j.compedu.2018.06.018},
  urldate = {2023-06-27},
  abstract = {Flipped learning can provide more in-class time for students to practice and apply knowledge and to receive feedback from peers and teachers. However, empirical studies have reported several problems that may occur with flipped classroom activities, including the failure of students to access out-of-class learning materials. Students who do not complete out-of-class work benefit little from the subsequent in-class discussion and problem-solving activities. This study offers a new contribution by exploring whether gamification could be a strategy to motivate students to participate in more out-of-class activities without forfeiting quality of work. We applied crucial aspects of five motivation theories to propose a goal-access-feedback-challenge-collaboration (GAFCC) gamification design model. We then implemented and tested this theory-driven model in two quasi-experimental studies involving postgraduate students. Collective results from the two experiments revealed that (a) the GAFCC class completed significantly more pre- and postclass activities than the control class and (b) the GAFCC class produced higher quality work than the control class. Participants' perceptions of gamification were also collected through interviews, and reported in this study. This evidence supports a call for further research into the use of the GAFCC model in flipped classroom implementation.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/H4DZWS6M/Huang and Hew - 2018 - Implementing a theory-driven gamification model in.pdf}
}

@article{hubbardPositiveEffectInclass2018,
  title = {The Positive Effect of In-Class Clicker Questions on Later Exams Depends on Initial Student Performance Level but Not Question Format},
  author = {Hubbard, Joanna K. and Couch, Brian A.},
  year = {2018},
  month = may,
  journal = {Computers \& Education},
  volume = {120},
  pages = {1--12},
  issn = {03601315},
  doi = {10.1016/j.compedu.2018.01.008},
  urldate = {2018-11-06},
  abstract = {Active learning strategies have been increasingly adopted in higher education across many science, technology, engineering, and math (STEM) disciplines. Audience response systems, or clickers, are useful tools that allow instructors to incorporate active learning into large-enrollment courses. Clickers engage students during class and provide real-time feedback that can allow both students and the instructor to identify and correct misconceptions. Many instructors that implement clickers also implement peer instruction, where students vote individually, discuss the question with their peers, and then revote. While this strategy has been shown to improve conceptual understanding, the effects of specific factors, such as question format and student performance level, on learning gains remains unclear. We designed a study in which students in an introductory biology course engaged in clickers with peer discussion during class. We incorporated a treatment in which one section of the course answered a given clicker question in a multiple-choice (MC) format and another section of the same course answered the same question in a multiple-true-false (MTF) format. Students subsequently answered an isomorphic exam question 1\textendash 3 weeks later. We observed that both clicker question formats had similar effects on later exam performance. While clickers had an overall positive effect on student exam performance, we found that this effect was significantly greater in higher-performing students, with lower-performing students showing little-to-no benefit. We also found that the initial response rates within peer discussion groups influenced whether students changed to the correct answer. These findings demonstrate that students interact with and benefit from clicker questions in different ways and highlights the importance of considering how different students might be affected by active learning strategies.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/LAPP2YBF/Hubbard and Couch - 2018 - The positive effect of in-class clicker questions on later exams depends on.pdf}
}

@inproceedings{hubwieserAnalysisLearningObjectives2008,
  title = {Analysis of {{Learning Objectives}} in {{Object Oriented Programming}}},
  booktitle = {Informatics {{Education}} - {{Supporting Computational Thinking}}},
  author = {Hubwieser, Peter},
  editor = {Mittermeir, Roland T. and Sys{\l}o, Maciej M.},
  year = {2008},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {142--150},
  publisher = {{Springer Berlin Heidelberg}},
  abstract = {The paper presents an analysis of the learning objectives that have to be achieved in order to learn Object Oriented Programming. By using the prerequisite relation between these objectives we develop a sequence of concepts for a textbook. The article is closed by some considerations concerning the electronic management of learning objectives using ontologies.},
  isbn = {978-3-540-69924-8},
  langid = {english},
  keywords = {Educational Objective,Instructional Objective,Learn Objective,Metacognitive Knowledge,Prerequisite Relation},
  annotation = {00021},
  file = {/Users/igormoreno/Zotero/storage/QZSTMUBZ/Hubwieser - 2008 - Analysis of Learning Objectives in Object Oriented Programming.pdf}
}

@inproceedings{hubwieserCompetencyBasedTesting2017,
  title = {Towards Competency Based Testing and Feedback: {{Competency}} Definition and Measurement in the Field of Algorithms \& Data Structures},
  shorttitle = {Towards Competency Based Testing and Feedback},
  booktitle = {2017 {{IEEE Global Engineering Education Conference}} ({{EDUCON}})},
  author = {Hubwieser, Peter and Berges, Marc and Striewe, Michael and Goedicke, Michael},
  year = {2017},
  month = apr,
  pages = {517--526},
  publisher = {{IEEE}},
  address = {{Athens, Greece}},
  doi = {10.1109/EDUCON.2017.7942896},
  urldate = {2020-06-22},
  abstract = {At least since the first PISA surveys, the intentions of education are increasingly expressed in terms of competencies instead of learning goals. In consequence, learning outcomes should be measured in terms of these intended competencies as well. This holds for large-scale investigations like PISA as well as for the very small scale that is represented by the examinations that a single teaching person performs with his/her students. Yet, to assure validity, competency measurement requires proper models for competency structure and levels, which are based on empirical research. The goal of this project is to identify a set of relevant competencies in the domain of object-oriented programming (OOP), to develop a suitable competency model to represent their structure and to construct proper corresponding test instruments. This paper describes a study on the outcomes of several assignments that represents one step of this process with focus on the subdomain of data structures. The data were collected during an introductory lecture on programming in the winter term 2015/16. We analyzed the student solutions of three miniprojects that deal with the implementation of abstract data, applying a specific e-assessment system to score the students' solutions. To find suitable item sets that could be used for the definition and measurement of certain competencies, different methodologies were applied that are based on classical test theory as well as on contemporary Item Response Analysis. Up to now, several suitable item sets for the competencies were identified, which are required to implement and operate 1- and 2- dim arrays, linked lists, and binary trees.},
  isbn = {978-1-5090-5467-1},
  langid = {english},
  keywords = {ForAndrea},
  file = {/Users/igormoreno/Zotero/storage/2WVM52J5/Hubwieser et al - 2017 - Towards competency based testing and feedback.pdf}
}

@book{hubwieserDidaktikInformatikGrundlagen2007,
  title = {{Didaktik der Informatik: Grundlagen, Konzepte, Beispiele}},
  shorttitle = {{Didaktik der Informatik}},
  author = {Hubwieser, Peter},
  year = {2007},
  month = sep,
  edition = {3., \"uberarb. u. erw. Aufl. 2007},
  publisher = {{Springer}},
  address = {{Berlin Heidelberg}},
  abstract = {Der zeitgem\"a\ss e Ansatz f\"ur den Informatikunterricht: Im ersten Teil erkl\"art der Autor wichtige lernpsychologische Grundlagen sowie allgemeine didaktische Prinzipien. Er gibt konkrete Hinweise f\"ur die Unterrichtsplanung und -durchf\"uhrung. Im zweiten Teil folgt seine Begr\"undung f\"ur ein Pflichtfach "Informatik" vor dem Hintergrund einer differenzierten Informationsgesellschaft. Aus diesen \"Uberlegungen leitet er einen Ansatz f\"ur den Unterricht ab, der \"uber die Schulung reiner Programmierfertigkeiten hinausgeht. Konkrete Unterrichtspl\"ane verdeutlichen in dieser 3., \"uberarbeiteten und erweiterten Auflage die praktische Vermittlung der Lerninhalte.},
  isbn = {978-3-540-72477-3},
  langid = {ngerman},
  annotation = {00170}
}

@book{hudakHaskellSchoolExpression2000,
  title = {The {{Haskell School}} of {{Expression}}: {{Learning Functional Programming Through Multimedia}}},
  shorttitle = {The {{Haskell School}} of {{Expression}}},
  author = {Hudak, Paul},
  year = {2000},
  month = feb,
  edition = {1},
  publisher = {{Cambridge University Press}},
  doi = {10.1017/CBO9780511818073},
  urldate = {2022-01-18},
  isbn = {978-0-521-64338-2 978-0-511-81807-3 978-0-521-64408-2},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/IXJ329D4/Hudak - 2000 - The Haskell School of Expression Learning Functio.pdf;/Users/igormoreno/Zotero/storage/V3WL6KKY/Hudak - 2000 - The Haskell School of Expression Learning Functio.pdf}
}

@inproceedings{huDerivingStructuralHylomorphisms1996,
  title = {Deriving Structural Hylomorphisms from Recursive Definitions},
  booktitle = {Proceedings of the First {{ACM SIGPLAN}} International Conference on {{Functional}} Programming},
  author = {Hu, Zhenjiang and Iwasaki, Hideya and Takeichi, Masato},
  year = {1996},
  month = jun,
  series = {{{ICFP}} '96},
  pages = {73--82},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/232627.232637},
  urldate = {2022-01-06},
  abstract = {In functional programming, small programs are often glued together to construct a complex program. Program fusion is an optimizing process whereby these small programs are fused into a single one and intermediate data structures are removed. Recent work has made it clear that this process is especially successful if the recursive definitions are expressed in terms of hylomorphisms. In this paper, we propose an algorithm which can automatically turn all practical recursive definitions into structural hylomorphisms making program fusion be easily applied.},
  isbn = {978-0-89791-770-4},
  file = {/Users/igormoreno/Zotero/storage/ME9GWZ4I/Hu et al. - 1996 - Deriving structural hylomorphisms from recursive d.pdf}
}

@article{hughesWhyFunctionalProgramming1989,
  title = {Why {{Functional Programming Matters}}},
  author = {Hughes, J.},
  year = {1989},
  month = feb,
  journal = {The Computer Journal},
  volume = {32},
  number = {2},
  pages = {98--107},
  issn = {0010-4620, 1460-2067},
  doi = {10.1093/comjnl/32.2.98},
  urldate = {2021-12-20},
  abstract = {As software becomes more and more complex, it is more and more important to structure it well. Well-structured software is easy to write and to debug, and provides a collection of modules that can be reused to reduce future programming costs. In this paper we show that two features of functional languages in particular, higher-order functions and lazy evaluation, can contribute significantly to modularity. As examples, we manipulate lists and trees, program several numerical algorithms, and implement the alpha-beta heuristic (an algorithm from Artificial Intelligence used in game-playing programs). We conclude that since modularity is the key to successful programming, functional programming offers important advantages for software development.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/C27URPQE/Hughes - 1989 - Why Functional Programming Matters.pdf}
}

@article{hughesWhyFunctionalProgramming1989a,
  title = {Why {{Functional Programming Matters}}},
  author = {Hughes, J.},
  year = {1989},
  month = feb,
  journal = {The Computer Journal},
  volume = {32},
  number = {2},
  pages = {98--107},
  issn = {0010-4620, 1460-2067},
  doi = {10.1093/comjnl/32.2.98},
  urldate = {2022-01-06},
  abstract = {As software becomes more and more complex, it is more and more important to structure it well. Well-structured software is easy to write and to debug, and provides a collection of modules that can be reused to reduce future programming costs. In this paper we show that two features of functional languages in particular, higher-order functions and lazy evaluation, can contribute significantly to modularity. As examples, we manipulate lists and trees, program several numerical algorithms, and implement the alpha-beta heuristic (an algorithm from Artificial Intelligence used in game-playing programs). We conclude that since modularity is the key to successful programming, functional programming offers important advantages for software development.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/XDTKNRNT/Hughes - 1989 - Why Functional Programming Matters.pdf}
}

@book{humbertDidaktikInformatik2006,
  title = {{Didaktik der Informatik}},
  author = {Humbert, Ludger},
  year = {2006},
  month = oct,
  edition = {2},
  publisher = {{Vieweg+Teubner Verlag}},
  address = {{Wiesbaden}},
  abstract = {Klar und fundiert f\"uhrt dieses Buch in die Grundlagen der Didaktik der Informatik ein. Neben dem theoretischen R\"ustzeug bietet es praxiserprobte Materialien f\"ur die Lehrerausbildung. Zahlreiche \"Ubungsaufgaben mit L\"osungen helfen den Stoff zu vertiefen und bereiten auf die praktische Lehrt\"atigkeit vor.},
  isbn = {978-3-8351-0112-8},
  langid = {ngerman},
  file = {/Users/igormoreno/Zotero/storage/AM85T3LC/Humbert - 2006 - Didaktik der Informatik.pdf}
}

@article{hundhausenMetaStudyAlgorithmVisualization2002,
  title = {A {{Meta-Study}} of {{Algorithm Visualization Effectiveness}}},
  author = {Hundhausen, CHRISTOPHER D. and Douglas, SARAH A. and Stasko, JOHN T.},
  year = {2002},
  month = jun,
  journal = {Journal of Visual Languages \& Computing},
  volume = {13},
  number = {3},
  pages = {259--290},
  issn = {1045-926X},
  doi = {10.1006/jvlc.2002.0237},
  urldate = {2023-06-09},
  abstract = {Algorithm visualization (AV) technology graphically illustrates how algorithms work. Despite the intuitive appeal of the technology, it has failed to catch on in mainstream computer science education. Some have attributed this failure to the mixed results of experimental studies designed to substantiate AV technology's educational effectiveness. However, while several integrative reviews of AV technology have appeared, none has focused specifically on the software's effectiveness by analyzing this body of experimental studies as a whole. In order to better understand the effectiveness of AV technology, we present a systematic meta-study of 24 experimental studies. We pursue two separate analyses: an analysis ofindependent variables , in which we tie each study to a particular guiding learning theory in an attempt to determine which guiding theory has had the most predictive success; and an analysis of dependent variables, which enables us to determine which measurement techniques have been most sensitive to the learning benefits of AV technology. Our most significant finding is that how students use AV technology has a greater impact on effectiveness than what AV technology shows them. Based on our findings, we formulate an agenda for future research into AV effectiveness.},
  langid = {english},
  keywords = {Algorithm visualization,Empirical studies of effectiveness,Literature reviews,Meta-analysis,Software visualization},
  file = {/Users/igormoreno/Zotero/storage/HGDK545P/Hundhausen et al. - 2002 - A Meta-Study of Algorithm Visualization Effectiven.pdf;/Users/igormoreno/Zotero/storage/UKPKQTLE/S1045926X02902375.html}
}

@article{hundhausenMetaStudySoftwareVisualization,
  title = {A {{Meta-Study}} of {{Software Visualization Effectiveness}}},
  author = {Hundhausen, Christopher D},
  pages = {53},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/8NJXN6GC/Hundhausen - A Meta-Study of Software Visualization Effectiveness.pdf}
}

@article{hunsuMetaanalysisEffectsAudience2016,
  title = {A Meta-Analysis of the Effects of Audience Response Systems (Clicker-Based Technologies) on Cognition and Affect},
  author = {Hunsu, Nathaniel J. and Adesope, Olusola and Bayly, Dan James},
  year = {2016},
  month = mar,
  journal = {Computers \& Education},
  volume = {94},
  pages = {102--119},
  issn = {03601315},
  doi = {10.1016/j.compedu.2015.11.013},
  urldate = {2018-11-06},
  abstract = {Audience Response Systems (ARS) are thought to be a good way of using technology to increase engagement in the classroom and have been widely adopted by many instructors seeking to improve academic performance through student engagement. While researchers have examined the degree to which they promote cognitive and non-cognitive learning outcomes in the classroom, most of their findings are largely mixed and inconclusive. This meta-analysis seeks to resolve the conflicting findings. Specifically, the metaanalysis compared classrooms that did, and did not use ARS-based technologies on different cognitive and non-cognitive learning outcomes to examine the potential effects of using ARS. Overall, we found small but significant effects of using ARS-based technologies on a number of desirable cognitive and non-cognitive learning outcomes. Further analysis revealed that knowledge domain, class size, and the use of clicker questions, are among factors that significantly moderated the summary effect sizes observed among the studies in the meta-analysis. These findings hold significant implication for the implementation of clicker-based technologies in the classroom.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/LGWMQA5Y/Hunsu et al - 2016 - A meta-analysis of the effects of audience response systems (clicker-based.pdf}
}

@article{hunterWhatFundamentalInformation1987,
  title = {What Is Fundamental in an Information Age? {{A}} Focus on Curriculum},
  shorttitle = {What Is Fundamental in an Information Age?},
  author = {Hunter, Beverly},
  year = {1987},
  month = jan,
  journal = {Education and Computing},
  volume = {3},
  number = {1-2},
  pages = {63--73},
  issn = {01679287},
  doi = {10.1016/S0167-9287(87)80513-7},
  urldate = {2018-11-06},
  abstract = {Systematic reassessment of both overt and covert curriculum content and methods is needed in response to broader social change involved in the information revolution. The educational system in the United States is mo\textasciitilde ng (unevenly) through three overlapping stages of curriculum change: (1) focus on technology, (2) integration of technology into curriculum, and (3) focus on fundamental change in curriculum. Indicators of the current state of change in elementary and secondary schools include state education agency mandates, teacher-oriented publications, past and present surveys of computer use in schools, teacher attitudes, private industry initiatives, and recommendations of national study groups and commissions.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/9KS7AIBZ/Hunter - 1987 - What is fundamental in an information age A focus.pdf}
}

@misc{huttonEssentialsFunctionalProgramming2017,
  title = {Essentials: {{Functional Programming}}'s {{Y Combinator}} - {{Computerphile}}},
  shorttitle = {Essentials},
  year = {2017},
  month = aug,
  urldate = {2020-11-12},
  abstract = {Encoding recursion in the Lambda calculus, one of Professor Graham Hutton's favourite functions.  Lambda Calculus: https://youtu.be/eis11j\_iGMs  Professor Brailsford on 'Pointers': Coming Soon! Many thanks to Microsoft Research UK for their support with the 'Essentials' mini-series. http://www.facebook.com/computerphile https://twitter.com/computer\_phile This video was filmed and edited by Sean Riley. Computer Science at the University of Nottingham: http://bit.ly/nottscomputer Computerphile is a sister project to Brady Haran's Numberphile. More at http://www.bradyharan.com},
  collaborator = {Hutton, Graham},
  annotation = {00000}
}

@misc{huttonLambdaCalculusComputerphile2017,
  title = {Lambda {{Calculus}} - {{Computerphile}}},
  year = {2017},
  month = jan,
  urldate = {2020-11-12},
  abstract = {The basis of almost all functional programming, Professor Graham Hutton explains Lambda Calculus. http://www.facebook.com/computerphile https://twitter.com/computer\_phile This video was filmed and edited by Sean Riley. Computer Science at the University of Nottingham: http://bit.ly/nottscomputer Computerphile is a sister project to Brady Haran's Numberphile. More at http://www.bradyharan.com},
  collaborator = {Hutton, Graham},
  annotation = {00000}
}

@article{hwangEffectsIntegratedConcept2014,
  title = {Effects of an Integrated Concept Mapping and Web-Based Problem-Solving Approach on Students' Learning Achievements, Perceptions and Cognitive Loads},
  author = {Hwang, Gwo-Jen and Kuo, Fan-Ray and Chen, Nian-Shing and Ho, Hsueh-Ju},
  year = {2014},
  month = feb,
  journal = {Computers \& Education},
  volume = {71},
  pages = {77--86},
  issn = {03601315},
  doi = {10.1016/j.compedu.2013.09.013},
  urldate = {2018-11-06},
  abstract = {Although students could effectively search for web data with proper keywords and select web pages related to the studied core issue, however summarizing or organizing the retrieved information remains a difficult task for them. Concept mapping is known to be an effective knowledge construction tool for helping learners organize important concepts related to a core issue. To address the problem, an integrated concept mapping and web-based problem-solving environment, CM-Quest, has been developed; moreover, an experiment has been conducted to evaluate the effectiveness of the approach on students' learning performance, learning satisfaction and cognitive load in an elementary school social studies course. The results show that the concept map-integrated approach can significantly enhance the students' web-based problem-solving performance, although the students showed lower degrees of technology acceptance and learning satisfaction in comparison with the conventional web-based problemsolving approach. Moreover, it is found that the students in the concept mapping group revealed higher cognitive loads than those in the control group, which could be the factor contributing to the lower technology acceptance degree and learning satisfaction. As a consequence, it is concluded that the integrated concept mapping and web-based problem-solving approach is helpful to students in guiding them to learn in a more effective way. On the other hand, it remains an open issue to find a suitable way of integrating concept maps into the learning process without introducing too much extra cognitive load so as to promote students' acceptance degree of using technology for better learning.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/B4QNXNBG/Hwang et al - 2014 - Effects of an integrated concept mapping and web-based problem-solving approach.pdf}
}

@misc{icfpvideoGenericDiff3Algebraic2016,
  title = {Generic Diff3 for {{Algebraic Datatypes}}},
  author = {{ICFP Video}},
  year = {2016},
  month = sep,
  urldate = {2022-03-11}
}

@misc{icfpvideoTypedirectedDiffingStructured2018,
  title = {Type-Directed Diffing of Structured Data},
  author = {{ICFP Video}},
  year = {2018},
  month = jan,
  urldate = {2022-03-11},
  abstract = {Speaker: Wouter Swierstra}
}

@article{igarashiFeatherweightJavaMinimal2001,
  title = {Featherweight {{Java}}: A Minimal Core Calculus for {{Java}} and {{GJ}}},
  shorttitle = {Featherweight {{Java}}},
  author = {Igarashi, Atsushi and Pierce, Benjamin C. and Wadler, Philip},
  year = {2001},
  month = may,
  journal = {ACM Transactions on Programming Languages and Systems},
  volume = {23},
  number = {3},
  pages = {396--450},
  issn = {0164-0925},
  doi = {10.1145/503502.503505},
  urldate = {2022-08-02},
  abstract = {Several recent studies have introduced lightweight versions of Java: reduced languages in which complex features like threads and reflection are dropped to enable rigorous arguments about key properties such as type safety. We carry this process a step further, omitting almost all features of the full language (including interfaces and even assignment) to obtain a small calculus, Featherweight Java, for which rigorous proofs are not only possible but easy. Featherweight Java bears a similar relation to Java as the lambda-calculus does to languages such as ML and Haskell. It offers a similar computational "feel," providing classes, methods, fields, inheritance, and dynamic typecasts with a semantics closely following Java's. A proof of type safety for Featherweight Java thus illustrates many of the interesting features of a safety proof for the full language, while remaining pleasingly compact. The minimal syntax, typing rules, and operational semantics of Featherweight Java make it a handy tool for studying the consequences of extensions and variations. As an illustration of its utility in this regard, we extend Featherweight Java with generic classes in the style of GJ (Bracha, Odersky, Stoutamire, and Wadler) and give a detailed proof of type safety. The extended system formalizes for the first time some of the key features of GJ.},
  keywords = {Compilation,generic classes,Java,language design,language semantics},
  file = {/Users/igormoreno/Zotero/storage/SQGF3U3N/Igarashi et al. - 2001 - Featherweight Java a minimal core calculus for Ja.pdf}
}

@article{ihantolaAutomatedAssessmentProgramming,
  title = {Automated {{Assessment}} of {{Programming Assignments}}: {{Visual Feedback}}, {{Assignment Mobility}}, and {{Assessment}} of {{Students}}' {{Testing Skills}}},
  author = {Ihantola, Petri},
  pages = {93},
  abstract = {The main objective of this thesis is to improve the automated assessment of programming assignments from the perspective of assessment tool developers. We have developed visual feedback on functionality of students' programs and explored methods to control the level of detail in visual feedback. We have found that visual feedback does not require major changes to existing assessment platforms. Most modern platforms are web based, creating an opportunity to describe visualizations in JavaScript and HTML embedded into textual feedback. Our preliminary results on the effectiveness of automatic visual feedback indicate that students perform equally well with visual and textual feedback. However, visual feedback based on automatically extracted object graphs can take less time to prepare than textual feedback of good quality. We have also developed programming assignments that are easier to port from one server environment to another by performing assessment on the client-side. This not only makes it easier to use the same assignments in different server environments but also removes the need for sandboxing the execution of students' programs. The approach will likely become more important in the future together with interactive study materials becoming more popular. Client-side assessment is more suitable for self-studying material than for grading because assessment results sent by a client are often too easy to falsify. Testing is an important part of programming and automated assessment should also cover students' self-written tests. We have analyzed how students behave when they are rewarded for structural test coverage (e.g. line coverage) and found that this can lead students to write tests with good coverage but with poor ability to detect faulty programs. Mutation analysis, where a large number of (faulty) programs are automatically derived from the program under test, turns out to be an effective way to detect tests otherwise fooling our assessment systems. Applying mutation analysis directly for grading is problematic because some of the derived programs are equivalent with the original and some assignments or solution strategies generate more equivalent mutants than others.},
  langid = {english},
  keywords = {To Read},
  file = {/Users/igormoreno/Zotero/storage/3VNXPUVT/Ihantola - Automated Assessment of Programming Assignments V.pdf}
}

@inproceedings{ihantolaEducationalDataMining2015,
  title = {Educational {{Data Mining}} and {{Learning Analytics}} in {{Programming}}: {{Literature Review}} and {{Case Studies}}},
  shorttitle = {Educational {{Data Mining}} and {{Learning Analytics}} in {{Programming}}},
  booktitle = {Proceedings of the 2015 {{ITiCSE}} on {{Working Group Reports}} - {{ITICSE-WGR}} '15},
  author = {Ihantola, Petri and Rivers, Kelly and Rubio, Miguel {\'A}ngel and Sheard, Judy and Skupas, Bronius and Spacco, Jaime and Szabo, Claudia and Toll, Daniel and Vihavainen, Arto and Ahadi, Alireza and Butler, Matthew and B{\"o}rstler, J{\"u}rgen and Edwards, Stephen H. and Isohanni, Essi and Korhonen, Ari and Petersen, Andrew},
  year = {2015},
  pages = {41--63},
  publisher = {{ACM Press}},
  address = {{Vilnius, Lithuania}},
  doi = {10.1145/2858796.2858798},
  urldate = {2019-09-27},
  isbn = {978-1-4503-4146-2},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/JK8UXDUF/Ihantola et al - 2015 - Educational Data Mining and Learning Analytics in Programming.pdf}
}

@inproceedings{ihantolaReviewRecentSystems2010,
  ids = {ihantolaReviewRecentSystems2010a},
  title = {Review of Recent Systems for Automatic Assessment of Programming Assignments},
  booktitle = {Proceedings of the 10th {{Koli Calling International Conference}} on {{Computing Education Research}} - {{Koli Calling}} '10},
  author = {Ihantola, Petri and Ahoniemi, Tuukka and Karavirta, Ville and Sepp{\"a}l{\"a}, Otto},
  year = {2010},
  pages = {86--93},
  publisher = {{ACM Press}},
  address = {{Berlin, Germany}},
  doi = {10.1145/1930464.1930480},
  urldate = {2019-09-27},
  isbn = {978-1-4503-0520-4},
  langid = {english},
  keywords = {To Read},
  file = {/Users/igormoreno/Zotero/storage/BIE7VX8E/Ihantola et al - 2010 - Review of recent systems for automatic assessment of programming assignments.pdf;/Users/igormoreno/Zotero/storage/VU3QRS67/Ihantola et al. - 2010 - Review of recent systems for automatic assessment .pdf}
}

@inproceedings{ihantolaTestDataGeneration2006,
  title = {Test Data Generation for Programming Exercises with Symbolic Execution in {{Java PathFinder}}},
  booktitle = {Proceedings of the 6th {{Baltic Sea}} Conference on {{Computing}} Education Research: {{Koli Calling}} 2006},
  author = {Ihantola, Petri},
  year = {2006},
  month = feb,
  series = {Baltic {{Sea}} '06},
  pages = {87--94},
  publisher = {{Association for Computing Machinery}},
  address = {{Uppsala, Sweden}},
  doi = {10.1145/1315803.1315819},
  urldate = {2020-07-22},
  abstract = {Automatic assessment of programming exercises is typically based on testing approach. Most automatic assessment frameworks execute tests and evaluate test results automatically, but the test data generation is not automated. No matter that such test data generation techniques and tools are available. We have researched how the Java PathFinder software model checker can be adopted to the specific needs of test data generation in automatic assessment. Practical problems considered are: How to derive test data directly from students' programs (i.e. without annotation) and how to visualize and how to abstract test data automatically for students? Interesting outcomes of our research are that with minor refinements generalized symbolic execution with lazy initialization (a test data generation algorithm implemented in PathFinder) can be used to construct test data directly from students' programs without annotation, and that intermediate results of the same algorithm can be used to provide novel visualizations of the test data.},
  isbn = {978-1-4503-7838-3},
  keywords = {automatic assessment,symbolic execution,test data generation},
  file = {/Users/igormoreno/Zotero/storage/SRGXEY5I/Ihantola - 2006 - Test data generation for programming exercises wit.pdf}
}

@article{ihantolaTwoDimensionalParsonPuzzles2011,
  title = {Two-{{Dimensional Parson}}'s {{Puzzles}}: {{The Concept}}, {{Tools}}, and {{First Observations}}},
  shorttitle = {Two-{{Dimensional Parson}}'s {{Puzzles}}},
  author = {Ihantola, Petri and Karavirta, Ville},
  year = {2011},
  journal = {Journal of Information Technology Education: Innovations in Practice},
  volume = {10},
  pages = {119--132},
  issn = {2165-3151, 2165-316X},
  doi = {10.28945/1394},
  urldate = {2019-09-27},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/Q5G82P9U/Ihantola and Karavirta - 2011 - Two-Dimensional Parson’s Puzzles The Concept, Too.pdf}
}

@inproceedings{impagliazzoCC2020ProjectComputing2018,
  title = {The {{CC2020}} Project \textemdash{} Computing Curricula Guidelines for the 2020s},
  booktitle = {2018 {{IEEE Global Engineering Education Conference}} ({{EDUCON}})},
  author = {Impagliazzo, John and Pears, Arnold Neville},
  year = {2018},
  month = apr,
  pages = {2021--2024},
  issn = {2165-9567},
  doi = {10.1109/EDUCON.2018.8363484},
  abstract = {This paper provides an overview of a worldwide project to chart the future of computing education on a global scale. The Computing Curricular 2020 (CC2020) initiative engages a task force of thirty-six professionals from sixteen countries and six continents in the task of producing resources that map the computing and educational advances that have occurred since the publication of its predecessor, CC2005. The results of the initiative will be futuristic in the sense that it will be a durable portfolio of resources useful to educational institutions, governments, industry, students, and the public on a global scale. This paper summarizes the status and approaches developed by the CC2020 taskforce, a digest of the content anticipated in the resources delivered as well as suggestions for their use.},
  keywords = {CC2005,CC2020,CC2020 taskforce,CC2020-Authors,computer science education,Computing curricula,Computing Curricular 2020 initiative,curricula guidelines,curricular guidelines,Education,educational advances,educational courses,educational institutions,Force,global computing education,global scale,Guidelines,Industries,Information technology,sixteen countries,Task analysis,task force,Tools,worldwide project},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/PH4DYICF/Impagliazzo and Pears - 2018 - The CC2020 project — computing curricula guidelines for the 2020s.pdf;/Users/igormoreno/Zotero/storage/HV3U8BFV/8363484.html}
}

@inproceedings{impagliazzoInnovativeComputingCurricula2018,
  title = {Innovative {{Computing Curricula}} and the {{CC2020 Project}}},
  booktitle = {2018 {{IEEE Frontiers}} in {{Education Conference}} ({{FIE}})},
  author = {Impagliazzo, John and Parrish, Allen and Clear, Alison},
  year = {2018},
  month = oct,
  pages = {1--2},
  publisher = {{IEEE}},
  address = {{San Jose, CA, USA}},
  doi = {10.1109/FIE.2018.8658622},
  urldate = {2020-09-22},
  isbn = {978-1-5386-1174-6},
  langid = {english},
  keywords = {CC2020-Authors},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/P8GUF8KF/Impagliazzo et al - 2018 - Innovative Computing Curricula and the CC2020 Project.pdf}
}

@misc{innosuisseInnosuisseInnovationProjects2019,
  title = {Innosuisse Innovation Projects},
  author = {{Innosuisse}},
  year = {2019},
  month = may,
  urldate = {2022-03-16},
  abstract = {How to get your innovations off the ground}
}

@inproceedings{ipeirotisQualityManagementAmazon2010,
  title = {Quality Management on {{Amazon Mechanical Turk}}},
  booktitle = {Proceedings of the {{ACM SIGKDD Workshop}} on {{Human Computation}} - {{HCOMP}} '10},
  author = {Ipeirotis, Panagiotis G. and Provost, Foster and Wang, Jing},
  year = {2010},
  pages = {64},
  publisher = {{ACM Press}},
  address = {{Washington DC}},
  doi = {10.1145/1837885.1837906},
  urldate = {2021-07-06},
  abstract = {Crowdsourcing services, such as Amazon Mechanical Turk, allow for easy distribution of small tasks to a large number of workers. Unfortunately, since manually verifying the quality of the submitted results is hard, malicious workers often take advantage of the verification difficulty and submit answers of low quality. Currently, most requesters rely on redundancy to identify the correct answers. However, redundancy is not a panacea. Massive redundancy is expensive, increasing significantly the cost of crowdsourced solutions. Therefore, we need techniques that will accurately estimate the quality of the workers, allowing for the rejection and blocking of the low-performing workers and spammers.},
  isbn = {978-1-4503-0222-7},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/EU9W7D89/Ipeirotis et al. - 2010 - Quality management on Amazon Mechanical Turk.pdf}
}

@misc{IPhone,
  title = {{iPhone}},
  journal = {Apple (Schweiz)},
  urldate = {2022-09-09},
  abstract = {Leistungsstark. Sch\"on. Robust. Sieh dir das neue iPhone 14 Pro, iPhone 14 Pro Max, iPhone 14, iPhone 14 Plus und iPhone SE an.},
  howpublished = {https://www.apple.com/chde/iphone/},
  langid = {nswissgerman},
  file = {/Users/igormoreno/Zotero/storage/6CPE3C8S/iphone.html}
}

@article{iversonNotationToolThought,
  title = {Notation as a {{Tool}} of {{Thought}}},
  author = {Iverson, Kenneth E},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/E2YNQDWL/Iverson - Notation as a Tool of Thought.pdf}
}

@inproceedings{izuCanNoviceProgrammers2018,
  title = {Can {{Novice Programmers Write C Functions}}?},
  booktitle = {2018 {{IEEE International Conference}} on {{Teaching}}, {{Assessment}}, and {{Learning}} for {{Engineering}} ({{TALE}})},
  author = {Izu, Cruz and Dinh, Peter},
  year = {2018},
  month = dec,
  pages = {965--970},
  publisher = {{IEEE}},
  address = {{Wollongong, NSW}},
  doi = {10.1109/TALE.2018.8615375},
  urldate = {2020-06-22},
  abstract = {This work has analysed the solutions submitted by 301 students to a practical exam question from a CS1 course that covered C functions. We have focused on the ability of students to declare the function header correctly and to return a value to the main program. The analysis of exam's solutions showed that most students could write a function definition with the given name and number of parameters. Most mistakes were usually related to type, either in the function return value or in the input parameter. Besides, some students were inconsistent in that they declared a correct ``int'' function but instead of returning a value, they printed either the result or a message describing the output. It is worth noticing 16\% of students developed a solution inside the main program instead of attempting to write a separate function, which indicates they have trouble understanding and writing modular code.},
  isbn = {978-1-5386-6522-0},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/I6ZAZ9WA/Izu and Dinh - 2018 - Can Novice Programmers Write C Functions.pdf}
}

@inproceedings{izuFosteringProgramComprehension2019,
  title = {Fostering {{Program Comprehension}} in {{Novice Programmers}} - {{Learning Activities}} and {{Learning Trajectories}}},
  booktitle = {Proceedings of the {{Working Group Reports}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Izu, Cruz and Schulte, Carsten and Aggarwal, Ashish and Cutts, Quintin and Duran, Rodrigo and Gutica, Mirela and Heinemann, Birte and Kraemer, Eileen and Lonati, Violetta and Mirolo, Claudio and Weeda, Renske},
  year = {2019},
  month = dec,
  pages = {27--52},
  publisher = {{ACM}},
  address = {{Aberdeen Scotland Uk}},
  doi = {10.1145/3344429.3372501},
  urldate = {2020-06-22},
  abstract = {This working group asserts that Program Comprehension (ProgComp) plays a critical part in the process of writing programs. For example, this paper is written from a basic draft that was edited and revised until it clearly presented our idea. Similarly, a program is written incrementally, with each step tested, debugged and extended until the program achieves its goal. Novice programmers should develop program comprehension skills as they learn to code so that they are able both to read and reason about code created by others, and to reflect on their code when writing, debugging or extending it. To foster such competencies our group identified two main goals: (g1) to collect and define learning activities that explicitly address key components of program comprehension and (g2) to define tentative theoretical learning trajectories that will guide teachers as they select and sequence those learning activities in their CS0/CS1/CS2 or K-12 courses.},
  isbn = {978-1-4503-7567-2},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/BMRJEU5F/Izu et al - 2019 - Fostering Program Comprehension in Novice Programmers - Learning Activities and.pdf}
}

@inproceedings{izuInsightProgrammerAcquisition2019,
  title = {Up or {{Down}}?: {{An Insight}} into {{Programmer}}'s {{Acquisition}} of {{Iteration Skills}}},
  shorttitle = {Up or {{Down}}?},
  booktitle = {Proceedings of the 50th {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Izu, Cruz and Pope, Cheryl and Weerasinghe, Amali},
  year = {2019},
  month = feb,
  pages = {941--947},
  publisher = {{ACM}},
  address = {{Minneapolis MN USA}},
  doi = {10.1145/3287324.3287350},
  urldate = {2020-06-22},
  abstract = {Iteration is one of the basic programming constructs taught in a CS1 course. Students learn to use loops by being exposed to a range of loop examples, initially with scalar values and then over composite data such as vectors. When writing a finite loop to iterate over a vector, we can iterate upwards or downwards. In many cases, the order does not change the outcome; however, for some tasks it is important to consider which direction is most suitable before writing a solution. For example, if we want to shift the elements of a vector one position to the right (left), we should choose a downward (upward) loop. However, when we asked undergraduate students to implement the shift right task, most of them used an upward loop. This outcome indicates the students didn't consider the loop direction before coding the iterative task.},
  isbn = {978-1-4503-5890-3},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/PM759P8Y/Izu et al - 2019 - Up or Down.pdf}
}

@inproceedings{izuProgramComprehensionIdentifying2019,
  title = {Program {{Comprehension}}: {{Identifying Learning Trajectories}} for {{Novice Programmers}}},
  shorttitle = {Program {{Comprehension}}},
  booktitle = {Proceedings of the 2019 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Izu, Cruz and Schulte, Carsten and Aggarwal, Ashish and Cutts, Quintin and Duran, Rodrigo and Gutica, Mirela and Heinemann, Birte and Kraemer, Eileen and Lonati, Violetta and Mirolo, Claudio and Weeda, Renske},
  year = {2019},
  month = jul,
  pages = {261--262},
  publisher = {{ACM}},
  address = {{Aberdeen Scotland Uk}},
  doi = {10.1145/3304221.3325531},
  urldate = {2020-06-22},
  abstract = {This working group asserts that Program Comprehension (PC) plays a critical part in the writing process. For example, this abstract is written from a basic draft that we have edited and revised until it clearly presents our idea. Similarly, a program is written in an incremental manner, with each step being tested, debugged and extended until the program achieves its goal.},
  isbn = {978-1-4503-6895-7},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/2N5H3AIT/Izu et al - 2019 - Program Comprehension.pdf}
}

@book{j.-m.hocPsychologyProgramming1990,
  title = {Psychology of {{Programming}}},
  editor = {{J.-M. Hoc} and {T.R.G. Green} and {R. Samur\c{c}ay} and {D.J. Gilmore}},
  year = {1990},
  file = {/Users/igormoreno/Zotero/storage/2KXVVQHU/ch2-1.pdf;/Users/igormoreno/Zotero/storage/2XY4WLVB/ch3-3.pdf;/Users/igormoreno/Zotero/storage/5CSKAI8D/part2-intro.pdf;/Users/igormoreno/Zotero/storage/74MA6XY5/part3-intro.pdf;/Users/igormoreno/Zotero/storage/7HFTCJN4/ch4-2.pdf;/Users/igormoreno/Zotero/storage/84FG6N82/ch2-2.pdf;/Users/igormoreno/Zotero/storage/9UA7YCU9/ch1-4.pdf;/Users/igormoreno/Zotero/storage/DY8DA2UK/ch3-1.pdf;/Users/igormoreno/Zotero/storage/FGV7XK7X/ch4-1.pdf;/Users/igormoreno/Zotero/storage/HWKJZCX6/ch1-5.pdf;/Users/igormoreno/Zotero/storage/J5GY9NI6/ch1-3.pdf;/Users/igormoreno/Zotero/storage/JGHR47XY/ch1-1.pdf;/Users/igormoreno/Zotero/storage/M9YHHEXL/ch3-2.pdf;/Users/igormoreno/Zotero/storage/P69ALUPG/part1-intro.pdf;/Users/igormoreno/Zotero/storage/R85HVK9S/ch1-2.pdf;/Users/igormoreno/Zotero/storage/USX9ZW8M/ch2-4.pdf;/Users/igormoreno/Zotero/storage/WVPHDKV6/ch2-3.pdf;/Users/igormoreno/Zotero/storage/Y4PCUP3K/ch2-5.pdf}
}

@article{jackBroadConceptionComputation,
  title = {The Broad Conception of Computation: {{PROD}}},
  author = {Jack, B},
  pages = {27},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/RYCMKSDV/Jack - The broad conception of computation.pdf}
}

@book{jacksonEssenceSoftware2021,
  title = {The {{Essence}} of {{Software}}},
  author = {Jackson, Daniel},
  year = {Tue, 11/16/2021 - 12:00},
  publisher = {{Princeton University Press}},
  urldate = {2021-12-04},
  abstract = {A revolutionary concept-based approach to thinking about, designing, and interacting with software},
  isbn = {978-0-691-22538-8},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/MUX3GNXV/EROSS-Presentation.pdf;/Users/igormoreno/Zotero/storage/U7VY9SWB/the-essence-of-software.html}
}

@inproceedings{jacksonIdentifyingTopJava2005,
  title = {Identifying {{Top Java Errors}} for {{Novice Programmers}}},
  booktitle = {Proceedings {{Frontiers}} in {{Education}} 35th {{Annual Conference}}},
  author = {Jackson, J. and Cobb, M. and Carver, C.},
  year = {2005},
  month = oct,
  pages = {24--27},
  publisher = {{IEEE}},
  address = {{USA}},
  issn = {2377-634X},
  doi = {10.1109/FIE.2005.1611967},
  abstract = {All freshmen at the United States Military Academy take an introductory programming course. We use a custom-built integrated development environment to help teach Java. During previous work, we implemented an integrated semantic and syntax error pre-processing system to help novice programmers decipher the otherwise cryptic compiler error messages in order for them to focus more on design issues than implementation issues. The syntactic errors that we checked were gathered by an informal survey of the current and former faculty members teaching the course. We noticed over the course of the year that there were discrepancies between the errors that the instructors had identified and the errors that the students were encountering. In response, we developed a real-time, automated error collection system that logged 100\% of the Java errors in a central database that all users, students and faculty alike, encountered while using the integrated development environment over the course of a semester. This paper discusses the implementation and results of our system as well as the implications for novice programmers},
  keywords = {automated error collection system,computer aided instruction,Computer errors,computer science education,Databases,Education,educational aids,educational institutions,Educational institutions,Information technology,Information Technology,integrated development environment,introductory programming course,Java,Java errors,Lab-on-a-chip,novice programmers,Program processors,Programming,Programming profession,Real time systems,syntactic errors,Syntax Errors,United States Military Academy},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/HRUBL96V/Jackson et al. - 2005 - Identifying Top Java Errors for Novice Programmers.pdf;/Users/igormoreno/Zotero/storage/9KMFWKMZ/1611967.html}
}

@article{jacksonInteractiveWordWalls2013,
  title = {Interactive {{Word Walls}}},
  author = {Jackson, Julie and Narvaez, Rose},
  year = {2013},
  journal = {Science and Children},
  volume = {51},
  number = {1},
  eprint = {43176074},
  eprinttype = {jstor},
  pages = {42--49},
  issn = {0036-8148},
  urldate = {2019-10-31},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/SFLVHPTP/Jackson and Narvaez - 2013 - Interactive Word Walls.pdf}
}

@book{jacksonPrinciplesProgramDesign1975,
  title = {Principles of Program Design},
  author = {Jackson, M A},
  year = {1975},
  series = {A.{{P}}.{{I}}.{{C}}. {{Studies}} in {{Data Processing}}},
  number = {12},
  publisher = {{Academic Press}},
  address = {{London}},
  abstract = {In this volume the author describes and explains a rational method of designing computer programs, adopting a practical, step-by-step approach and thus differing from may writers who have treated the subject with a heavy reliance on intuition and inspiration.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/U9P9GX8P/Jackson - 1975 - Principles of program design.pdf}
}

@book{jacobsGettingResultsCurriculum2004,
  title = {Getting {{Results}} with {{Curriculum Mapping}}},
  author = {Jacobs, Heidi Hayes},
  year = {2004},
  month = nov,
  edition = {Illustrated Edition},
  publisher = {{ASCD}},
  address = {{Alexandria, Va}},
  abstract = {Curriculum maps are among the simplest yet most effective tools for improving teaching and learning. Because they require people to draw explicit connections between content, skills, and assessment measures, these maps help ensure that all aspects of a lesson are aligned not only with each other, but also with mandated standards and tests.In Getting Results with Curriculum Mapping, Heidi Hayes Jacobs and her coauthors offer a wide range of perspectives on how to get the most out of the curriculum mapping process in districts and schools. In addition to detailed examples of maps from schools across the United States, the authors offer concrete advice on such critical issues as* Preparing educators to implement mapping procedures, * Using software to create unique mapping databases, * Integrating decision-making structures and staff development initiatives through mapping, * Helping school communities adjust to new curriculum review processes, and* Making mapping an integral part of literacy training.Teachers, administrators, staff developers, and policymakers alike will find this book an essential guide to curriculum mapping and a vital resource for spearheading school improvement efforts.},
  isbn = {978-0-87120-999-3},
  langid = {english},
  annotation = {00261}
}

@book{jacobsMappingBigPicture1997,
  title = {Mapping the {{Big Picture}}: {{Integrating Curriculum}} and {{Assessment K-12}}},
  shorttitle = {Mapping the {{Big Picture}}},
  author = {Jacobs, Heidi Hayes},
  year = {1997},
  month = may,
  edition = {1st Edition},
  publisher = {{Association for Supervision \& Curriculum Development}},
  address = {{Alexandria, Va}},
  abstract = {Teachers have always used the school calendar to plan instruction. Using a standard word-processing program, they can now collect real-time information about what is actually taught to create curriculum maps. These maps provide a clear picture of what is happening in their classes at specific points during the school year.The benefits of this kind of mapping are obvious for integrating curriculum: When curriculum maps are developed for every grade level, educators see not only the details of each map but also the "big picture" for that school or district. They can see where subjects already come together\textemdash and where they don't, but probably should.In Mapping the Big Picture, Heidi Hayes Jacobs describes a seven-step process for creating and working with curriculum maps, from data collection to ongoing curriculum review. She discusses the importance of asking essential questions and of designing assessments that reflect what teachers know about the students in their care. She also offers a viable alternative to the curriculum committees that are part of almost every U.S. school district. The book concludes with more than 20 sample curriculum maps from real schools, all of which were developed using the process described in this book.},
  isbn = {978-0-87120-286-4},
  langid = {english},
  annotation = {00002}
}

@article{jacobsTutorialCoAlgebras1997,
  title = {A {{Tutorial}} on ({{Co}}){{Algebras}} and ({{Co}}){{Induction}}},
  author = {Jacobs, Bart and Rutten, Jan},
  year = {1997},
  journal = {EATCS Bulletin},
  volume = {62},
  pages = {62--222},
  abstract = {. Algebraic structures which are generated by a collection of constructors--- like natural numbers (generated by a zero and a successor) or finite lists and trees--- are of well-established importance in computer science. Formally, they are initial algebras. Induction is used both as a definition principle, and as a proof principle for such structures. But there are also important dual "coalgebraic" structures, which do not come equipped with constructor operations but with what are sometimes called "destructor" operations (also called observers, accessors, transition maps, or mutators). Spaces of infinite data (including, for example, infinite lists, and non-well-founded sets) are generally of this kind. In general, dynamical systems with a hidden, black-box state space, to which a user only has limited access via specified (observer or mutator) operations, are coalgebras of various kinds. Such coalgebraic systems are common in computer science. And "coinduction" is the appropriate te...},
  file = {/Users/igormoreno/Zotero/storage/GFDDE2AS/Jacobs and Rutten - 1997 - A Tutorial on (Co)Algebras and (Co)Induction.pdf;/Users/igormoreno/Zotero/storage/A6IIHX5C/summary.html}
}

@article{jafarVisualAnalyticsApproach2017,
  title = {A {{Visual Analytics Approach}} to {{Gain}} Insights into the {{Structure}} of {{Computing Curricula}}},
  author = {Jafar, Musa and Waguespack, Leslie J and Babb, Jeffry S},
  year = {2017},
  journal = {Information Systems},
  pages = {20},
  abstract = {In their effort to keep the computing curriculum relevant, competitive, and reflective of market needs and provide clear benchmarks for accreditation, the computing societies propose curriculum guidelines for degree granting programs to define and promulgate their disciplinary vision. It is difficult to develop a comprehensive understanding of the scope of computing curricula or the orientation of any particular curriculum within that scope due to the curricular complexity (i.e. Bodies of Knowledge, Areas of Knowledge, taxonomy of topics, levels of coverage, learning outcomes, professional competencies). Visual analytics tools (tableau, ggplot, d3js, etc.) as well as visual analytics methods (tree-maps, heatmaps, network graphs, text-analytics, bar-charts, etc.) can offer an interactive, holistic representation to aid in analyzing the structure/content of a computing curriculum, assessing proposed changes, and benchmarking an individual offering in a given academic institution against published guidelines. As a sample data set we explore the results of a research project based upon U.S. job postings during the period of 1999 through 2012. Our purpose is to demonstrate the potential of visualization techniques to reveal and analyze the evolving demand for different computing skill areas and desired depth of competency.},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/RW77GPU8/Jafar et al. - 2017 - A Visual Analytics Approach to Gain insights into .pdf}
}

@article{jahnIndividualizedGamificationElements2021,
  title = {Individualized Gamification Elements: {{The}} Impact of Avatar and Feedback Design on Reuse Intention},
  shorttitle = {Individualized Gamification Elements},
  author = {Jahn, Katharina and Kordyaka, Bastian and Machulska, Alla and Eiler, Tanja Joan and Gruenewald, Armin and Klucken, Tim and Brueck, Rainer and Gethmann, Carl Friedrich and Niehaves, Bjoern},
  year = {2021},
  month = jun,
  journal = {Computers in Human Behavior},
  volume = {119},
  pages = {106702},
  issn = {07475632},
  doi = {10.1016/j.chb.2021.106702},
  urldate = {2023-06-27},
  abstract = {Gamification is often equipped with the promise to increase motivation and performance. However, research explaining which gamification design elements are effective and the mechanisms through which these effects can be explained is still at an early stage. By drawing on the three psychological needs \textendash{} competence, autonomy, and social relatedness \textendash{} proposed by self-determination theory, we develop a model to explain the effects of feedback and avatar design on reuse. We test these effects with a 2 (avatar similarity: low vs. high) \texttimes{} 2 (embodied feedback: no feedback vs. embodied feedback) \texttimes{} 2 (status feedback: no feedback vs. score and leaderboard) + 1 (control group) experiment. Additionally, we use structural equation modeling to test the derived model. Our results support evidence that different forms of feedback and avatar design influence reuse by satisfying the three psychological needs. Furthermore, our findings also reveal that autonomy for decision freedom is negatively related to reuse intention, which disagrees with existing research and may provide insights into why results on gamification elements are inconsistent.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/LFAYVLY7/Jahn et al. - 2021 - Individualized gamification elements The impact o.pdf}
}

@misc{janewaiteUnpluggedComputingSemantic2020,
  title = {Unplugged Computing and Semantic Waves},
  author = {{Jane Waite}},
  year = {2020},
  month = jun,
  urldate = {2021-04-04},
  abstract = {Learn from and discuss with leading researchers in computing education: http://rpf.io/fyt-rs\hspace{0pt} Find out more about us: http://rpf.io/fyt\hspace{0pt} *** Young people \&amp; parents ***  Learn about coding with us live through Digital Making at Home: http://rpf.io/fyt-dmah\hspace{0pt} Create coding projects with our step-by-step guides in 25+ languages: http://rpf.io/fyt-op\hspace{0pt} Discover our free, volunteer-run coding clubs near you Code Club in schools in the UK, ROI, USA: http://rpf.io/fyt-cc\hspace{0pt} Code Club in schools all over the world: http://rpf.io/fyt-cci\hspace{0pt} CoderDojo in community spaces all over the world: http://rpf.io/fyt-cd\hspace{0pt}  Send your programs to space in the European Astro Pi Challenge: http://rpf.io/fyt-ap\hspace{0pt} Share your creation with the world in the Coolest Projects tech showcase: http://rpf.io/fyt-cp\hspace{0pt} *** Teachers \&amp; educators *** Build your teaching skills with our free online courses: http://rpf.io/fyt-oc\hspace{0pt} Read our free magazine for computing educators, Hello World: http://rpf.io/fyt-hw\hspace{0pt} Set up a Code Club in your school In the UK, ROI, USA: http://rpf.io/fyt-cc\hspace{0pt} All over the world: http://rpf.io/fyt-cci\hspace{0pt} Support your learners to run their own science experiments in space as part of the European Astro Pi Challenge: http://rpf.io/fyt-ap\hspace{0pt} *** You can help make computing accessible to more young people across the globe *** Volunteer at a coding club near you: http://rpf.io/fyt-vol\hspace{0pt} Join our community of volunteer translators: http://rpf.io/fyt-tr\hspace{0pt} Donate to sustain our work: http://rpf.io/fyt-don\hspace{0pt} *** Interested in the Raspberry Pi computer? *** For videos related to our products, subscribe to the Raspberry Pi computer channel: http://rpf.io/ytsub\hspace{0pt} Buy a Raspberry Pi from one of our Approved Resellers: http://rpf.io/fyt-prod\hspace{0pt} Join a community event run by Raspberry Pi enthusiasts: http://rpf.io/fyt-jam\hspace{0pt} The Raspberry Pi Foundation is a global nonprofit that works to put the power of computing and digital making into the hands of people all over the world. We do this so that more people are able to harness the power of computing and digital technologies for work, to solve problems that matter to them, and to express themselves creatively. This video's copyright is held by the Raspberry Pi Foundation, and the video is dual licensed under the YouTube Standard license and Creative Commons CC BY-SA 4.0 license.}
}

@article{jansenConstituentStructureMathematical2000,
  title = {Constituent {{Structure}} in {{Mathematical Expressions}}},
  author = {Jansen, Anthony and Marriott, Kim and Yelland, Gregory},
  year = {2000},
  month = jul,
  journal = {Proceedings of the 22th Annual Meeting of the Cognitive Science Society},
  volume = {22},
  abstract = {Previous research has suggested that human perception of mathematical expressions is based on syntactic structure.},
  file = {/Users/igormoreno/Zotero/storage/F43QG486/Jansen et al. - 2000 - Constituent Structure in Mathematical Expressions.pdf}
}

@article{jeongTenYearsComputerSupported2019,
  title = {Ten {{Years}} of {{Computer-Supported Collaborative Learning}}: {{A}} Meta-Analysis of {{CSCL}} in {{STEM}} Education during 2005-2014},
  shorttitle = {Ten {{Years}} of {{Computer-Supported Collaborative Learning}}},
  author = {Jeong, Heisawn and {Hmelo-Silver}, Cindy E. and Jo, Kihyun},
  year = {2019},
  month = jun,
  journal = {Educational Research Review},
  pages = {100284},
  issn = {1747938X},
  doi = {10.1016/j.edurev.2019.100284},
  urldate = {2019-07-02},
  abstract = {The goal of this paper is to report on a meta-analysis about the effects of Computer-Supported Collaborative Learning (CSCL) in STEM education. The analysis is based on 316 outcomes from 143 studies that examined the effects of CSCL published between 2005 and 2014. Our analysis showed that the overall effect size of STEM CSCL was .51, a moderate but notable effect size in educational research. The effect was greatest on the process outcomes, followed by knowledge outcomes, and affective outcomes. The sizes of the effects were moderated by types of technology and pedagogies, levels of learners, and learning domains. Moderators further interacted so that effects of technology and pedagogy varied depending on the modes of collaboration, learner levels, and domains of learning. The current study demonstrates the overall advantage of CSCL in STEM education and highlights a need to develop a need to understand how these variables may interact to contribute to CSCL effectiveness.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/H9CSG7CA/Jeong et al - 2019 - Ten Years of Computer-Supported Collaborative Learning.pdf}
}

@misc{jeremygibbonsHowDesignCoprograms2018,
  title = {How to Design Co-Programs},
  author = {{jeremygibbons}},
  year = {2018},
  month = nov,
  journal = {Patterns in Functional Programming},
  urldate = {2021-01-22},
  abstract = {I recently attended the Matthias Felleisen Half-Time Show, a symposium held in Boston on 3rd November in celebration of Matthias's 60th birthday. I was honoured to be able to give a talk ther\ldots},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/PT9F2AEY/how-to-design-co-programs.html}
}

@misc{jeremygibbonsRichardBird194320222022,
  title = {Richard {{Bird}}, 1943-2022},
  author = {{jeremygibbons}},
  year = {2022},
  month = jun,
  journal = {Patterns in Functional Programming},
  urldate = {2023-10-17},
  abstract = {My mentor, colleague, and friend Richard Bird died in April 2022 after a long battle with cancer. I wrote an obituary of him for The Guardian, his favoured newspaper; this post is a hybrid of that \ldots},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/S4WSLD55/richard-bird.html}
}

@misc{jeremygibbonsStoryFar2010,
  title = {The Story so Far},
  author = {{jeremygibbons}},
  year = {2010},
  month = sep,
  journal = {Patterns in Functional Programming},
  urldate = {2023-10-17},
  abstract = {What's the story so far?},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/N78CZ29Q/story-so-far.html}
}

@article{jodoiDevelopingActivelearningApp2021,
  title = {Developing an Active-Learning App to Improve Critical Thinking: Item Selection and Gamification Effects},
  shorttitle = {Developing an Active-Learning App to Improve Critical Thinking},
  author = {Jodoi, Kota and Takenaka, Nobu and Uchida, Satoru and Nakagawa, Shiina and Inoue, Narahiko},
  year = {2021},
  month = nov,
  journal = {Heliyon},
  volume = {7},
  number = {11},
  pages = {e08256},
  issn = {24058440},
  doi = {10.1016/j.heliyon.2021.e08256},
  urldate = {2023-06-27},
  abstract = {Critical thinking (CT) is widely recognized as an important skill and attitude in this modern world, but few apps (web-based or installed on devices) have been developed to effectively train it. There is also little research on what kind of content to put into such apps and in what order, if the content is a series of reasoning questions that are intended as CT exercises. Therefore, this research project, consisting of two studies, tries to demonstrate how exercise questions can be presented to learners to sustain their motivation to work on multiple-choice CT questions. In Study 1, question banks were drawn from popular workbooks for CT and verbal reasoning. The questions were ranked in terms of difficulty based on the participation of university students (N {$\frac{1}{4}$} 73).},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/GE3GKD2Q/Jodoi et al. - 2021 - Developing an active-learning app to improve criti.pdf}
}

@mastersthesis{joellindholmDrASTAttributeDebugger2016,
  title = {{{DrAST}} - {{An}} Attribute Debugger for {{JastAdd}}},
  author = {{Joel Lindholm} and {Johan Thorsberg}},
  year = {2016},
  month = apr,
  urldate = {2021-06-07},
  school = {Lund University},
  file = {/Users/igormoreno/Zotero/storage/TVXY442N/Joel Lindholm and Johan Thorsberg - 2016 - DrAST - An attribute debugger for JastAdd.pdf}
}

@article{johnMeasuringPrevalenceQuestionable2012,
  title = {Measuring the {{Prevalence}} of {{Questionable Research Practices With Incentives}} for {{Truth Telling}}},
  author = {John, Leslie K. and Loewenstein, George and Prelec, Drazen},
  year = {2012},
  month = may,
  journal = {Psychological Science},
  volume = {23},
  number = {5},
  pages = {524--532},
  issn = {0956-7976, 1467-9280},
  doi = {10.1177/0956797611430953},
  urldate = {2021-06-08},
  abstract = {Cases of clear scientific misconduct have received significant media attention recently, but less flagrantly questionable research practices may be more prevalent and, ultimately, more damaging to the academic enterprise. Using an anonymous elicitation format supplemented by incentives for honest reporting, we surveyed over 2,000 psychologists about their involvement in questionable research practices. The impact of truth-telling incentives on self-admissions of questionable research practices was positive, and this impact was greater for practices that respondents judged to be less defensible. Combining three different estimation methods, we found that the percentage of respondents who have engaged in questionable practices was surprisingly high. This finding suggests that some questionable practices may constitute the prevailing research norm.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/IQWC6S2U/John et al. - 2012 - Measuring the Prevalence of Questionable Research .pdf}
}

@article{johnson-lairdMentalModelsCognitive1980,
  title = {Mental Models in Cognitive Science},
  author = {{Johnson-Laird}, P. N.},
  year = {1980},
  month = jan,
  journal = {Cognitive Science},
  volume = {4},
  number = {1},
  pages = {71--115},
  issn = {0364-0213},
  doi = {10.1016/S0364-0213(81)80005-5},
  urldate = {2018-12-02},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/ZTX78SXP/Johnson-Laird - 1980 - Mental models in cognitive science.pdf;/Users/igormoreno/Zotero/storage/UHPSQF9N/S0364021381800055.html}
}

@article{johnson-lairdProceduralSemantics1977,
  title = {Procedural Semantics},
  author = {{Johnson-Laird}, Philip N.},
  year = {1977},
  month = jan,
  journal = {Cognition},
  volume = {5},
  number = {3},
  pages = {189--214},
  issn = {0010-0277},
  doi = {10.1016/0010-0277(77)90001-4},
  urldate = {2018-12-02},
  abstract = {The aim of this paper is to present an outline of a theory of semantics based on the analogy between natural and computer programming languages. A unified model of the comprehension and production of sentences is described in order to illustrate the central ``compile and execute'' metaphor underlying prodecural semantics. The role of general knowledge within the lexicon, and the mechanism mediating selectional restrictions, are re-analyzed in the light of the procedural theory. R\'esum\'e Le but de cet article est de pr\'esenter le sch\'ema d'une th\'eorie s\'emantique fond\'ee sur l'analogie entre le langage naturel et le langage programmation de l'ordinateur. On d\'ecrit un mod\'ele unique de compr\'ehension et de perception de phrases pour illustrer la m\'etaphore centrale ``compiler et executer'' qui sous-tend les s\'emantiques des m\'ethodes. On r\'eanalyse \'a la lumi\'ere de la th\'eorie des m\'ethodes (procedural theory) le r\^ole de la connaissance g\'en\'erale interne au lexique et du m\'ecanisme arbitrant les restrictions s\'electives.},
  file = {/Users/igormoreno/Zotero/storage/PWCC58AX/Johnson-Laird - 1977 - Procedural semantics.pdf;/Users/igormoreno/Zotero/storage/F52TFCC4/0010027777900014.html}
}

@article{johnson-lairdPsychologySyllogisms1978,
  title = {The Psychology of Syllogisms},
  author = {{Johnson-Laird}, Philip N and Steedman, Mark},
  year = {1978},
  month = jan,
  journal = {Cognitive Psychology},
  volume = {10},
  number = {1},
  pages = {64--99},
  issn = {0010-0285},
  doi = {10.1016/0010-0285(78)90019-1},
  urldate = {2018-12-02},
  file = {/Users/igormoreno/Zotero/storage/EK537YJR/Johnson-Laird and Steedman - 1978 - The psychology of syllogisms.pdf;/Users/igormoreno/Zotero/storage/5RXL2RV6/0010028578900191.html}
}

@article{johnson-lairdTheoreticalAnalysisInsight1970,
  title = {A Theoretical Analysis of Insight into a Reasoning Task},
  author = {{Johnson-Laird}, P. N and Wason, P. C},
  year = {1970},
  month = may,
  journal = {Cognitive Psychology},
  volume = {1},
  number = {2},
  pages = {134--148},
  issn = {0010-0285},
  doi = {10.1016/0010-0285(70)90009-5},
  urldate = {2018-12-02},
  abstract = {An information-processing analysis of insight into a singularly deceptive and difficult deductive problem is presented. Two models are described. The first represents an economical explanation of the Ss initial responses but is difficult to reconcile with their subsequent responses induced by certain remedial procedures. The second model does take account of such responses and shows how insight into the correct solution is correlated with the awareness that tests for falsification are more appropriate than tests for verification. The relevance of the experimental results and the explanatory model are discussed in relation to wider issues.},
  file = {/Users/igormoreno/Zotero/storage/L7VHFH6N/Johnson-Laird and Wason - 1970 - A theoretical analysis of insight into a reasoning task.pdf;/Users/igormoreno/Zotero/storage/DC3IHZQA/0010028570900095.html}
}

@inproceedings{johnsonAnalysisStudentMisconceptions2020,
  title = {Analysis of {{Student Misconceptions}} Using {{Python}} as an {{Introductory Programming Language}}},
  booktitle = {Proceedings of the 4th {{Conference}} on {{Computing Education Practice}} 2020},
  author = {Johnson, Fionnuala and McQuistin, Stephen and O'Donnell, John},
  year = {2020},
  month = jan,
  pages = {1--4},
  publisher = {{ACM}},
  address = {{Durham United Kingdom}},
  doi = {10.1145/3372356.3372360},
  urldate = {2020-06-22},
  abstract = {Python has become a popular language for the delivery of introductory programming courses. Two reasons for this are Python's convenience and syntactic simplicity, giving a low entry barrier for beginners and the ability to solve complex problems with short snippets of code. However, students exhibit widespread misconceptions about the meaning of basic language constructs, inhibiting their ability to solve problems and damaging their understanding of fundamental concepts. In this paper, we document our observations of level 1 university students over several years, as well as surveys probing the nature of their misconceptions. We analyze the misconceptions in relation to a notional machine model for Python, and show that many students form inadequate and brittle mental models of the language. Our results indicate that one of the major sources of misunderstanding is the heavy use of overloading in Python. Overloading hides the complexity of algorithms and data structures, often leading students to write code that involves mutability, sharing, copying, side effects, coroutines, concurrency, and lazy evaluation \textendash{} and none of those topics are accessible to students who haven't yet mastered basic assignments, conditionals, and looping. We suggest that Python, when taught alone, is insufficient as an introductory language: students can gain a firmer grasp of programming fundamentals when Python is presented alongside a complementary low level language that makes a notional machine clear and explicit.},
  isbn = {978-1-4503-7729-4},
  langid = {english},
  annotation = {00001},
  file = {/Users/igormoreno/Zotero/storage/KKIYAFQY/Johnson et al - 2020 - Analysis of Student Misconceptions using Python as an Introductory Programming.pdf}
}

@book{johnTeachingQualityLearning2011,
  title = {Teaching {{For Quality Learning At University}}},
  author = {John, Biggs and Catherine, Tang},
  year = {2011},
  month = sep,
  publisher = {{McGraw-Hill Education (UK)}},
  abstract = {This best-selling book explains the concept of constructive alignment in education and aids implementation of this at multiple levels.},
  googlebooks = {XhjRBrDAESkC},
  isbn = {978-0-335-24275-7},
  langid = {english},
  keywords = {\_tablet,Education / Professional Development,Strong,To Read},
  file = {/Users/igormoreno/Zotero/storage/EQQQIYWD/John and Catherine - 2011 - Teaching For Quality Learning At University.pdf}
}

@techreport{jonesComputingSchoolInternational2011,
  title = {Computing at {{School}}: {{International}} Comparisons},
  author = {Jones, Simon Peyton},
  year = {2011},
  month = nov,
  abstract = {This briefing note summarises how computing (i.e. computer science) is taught at (high) school in other countries. We focus especially on what computer science qualifications are available to students.},
  langid = {english},
  annotation = {00007  Version 5},
  file = {/Users/igormoreno/Zotero/storage/GUYAVWU3/Jones - 2011 - Computing at School.pdf}
}

@article{jonesConceptualModelsProgramming1993,
  title = {Conceptual Models of Programming Environments: How Learners Use the Glass Box},
  shorttitle = {Conceptual Models of Programming Environments},
  author = {Jones, Ann},
  year = {1993},
  journal = {Instructional Science},
  volume = {21},
  number = {6},
  pages = {473--500},
  issn = {0020-4277, 1573-1952},
  doi = {10.1007/BF00118559},
  urldate = {2020-06-22},
  abstract = {The first part of this paper reviews the criteria offered by du Boulay, O'Shea and Monk (1981) for designinga conceptualmodel ofa programming environmentforteachingnovicesprogramming. It argues that although the criteria offered, namely simplicity and visibility, are helpful, these criteria alone are not sufficientas they do not address the choice of which aspects of the conceptual model are to be presented to the learner. In order to address this issue it is necessary to carve up the conceptual model differently and to distinguishdifferentaspects. Oneimportantaspectfornovicesis a functional view,asthis will help them develop programming plans. A new complementary categorisalionis offered which offers three views of the conceptual model: namelystate,procedure andfunction, and adds a new criterion, namely consistency. Two languages designed for novices using the general criteria of du Boulay, O'Shea and Monk are then analysedin detail, ftrsflyusing du Boulay et al.'s criteria, and secondlyusing the proposed categorisation. Data from novices learning to program in the two languages shows that although the languages had been satisfactorilydesignedaccording to du Boulay et al.'s criteria, a number oflearning difficultiesremained, which were satisfactorily accounted for by the new categorisafion.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/SWEX462L/Jones - 1993 - Conceptual models of programming environments how.pdf}
}

@article{jonesTacklingAwkwardSquad,
  title = {Tackling the {{Awkward Squad}}: Monadic Input/Output, Concurrency, Exceptions, and Foreign-Language Calls in {{Haskell}}},
  author = {Jones, Simon PEYTON},
  abstract = {Functional programming may be beautiful, but to write real applications we must grapple with awkward real-world issues: input/output, robustness, concurrency, and interfacing to programs written in other languages.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/RAHR4LFG/Jones - Tackling the Awkward Squad monadic inputoutput, .pdf}
}

@inproceedings{jonesTypeClassesFunctional2000,
  ids = {goos_type_2000},
  title = {Type {{Classes}} with {{Functional Dependencies}}},
  booktitle = {Programming {{Languages}} and {{Systems}}},
  author = {Jones, Mark P.},
  editor = {Smolka, Gert},
  year = {2000},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {230--244},
  publisher = {{Springer Berlin Heidelberg}},
  doi = {10.1007/3-540-46425-5_15},
  abstract = {Type classes in Haskell allow programmers to define functions that can be used on a set of different types, with a potentially different implementation in each case. For example, type classes are used to support equality and numeric types, and for monadic programming. A commonly requested extension to support `multiple parameters' allows a more general interpretation of classes as relations on types, and has many potentially useful applications. Unfortunately, many of these examples do not work well in practice, leading to ambiguities and inaccuracies in inferred types and delaying the detection of type errors.This paper illustrates the kind of problems that can occur with multiple parameter type classes, and explains how they can be resolved by allowing programmers to specify explicit dependencies between the parameters. A particular novelty of this paper is the application of ideas from the theory of relational databases to the design of type systems.},
  isbn = {978-3-540-46425-9},
  langid = {english},
  keywords = {Functional Dependency,Parameter Class,Relational Database,Type Class,Type Variable},
  annotation = {00354},
  file = {/Users/igormoreno/Zotero/storage/D8WAYR6L/Jones - 2000 - Type Classes with Functional Dependencies.pdf;/Users/igormoreno/Zotero/storage/KEKLJMBX/Jones - 2000 - Type Classes with Functional Dependencies.pdf}
}

@article{joniMyProgramRuns1986,
  title = {But {{My Program Runs}}! {{Discourse Rules}} for {{Novice Programmers}}},
  author = {Joni, Saj-Nicole A. and Soloway, Elliot},
  year = {1986},
  month = feb,
  journal = {Journal of Educational Computing Research},
  volume = {2},
  number = {1},
  pages = {95--125},
  issn = {0735-6331, 1541-4140},
  doi = {10.2190/6E5W-AR7C-NX76-HUT2},
  urldate = {2022-01-12},
  abstract = {In this article, we present an approach to critiquing and correcting novice programs that ``work'' (that is, they have correct I/O behavior for all input from the problem space), but are poorly constructed. Poorly constructed working code is often produced by beginning programming students, and it is important but difficult to teach them why some working code is better than others. Traditional explanations of these problems often rest on some kind of efficiency principle. We shall argue that using efficiency as a guiding principle in critiquing working code is inappropriate for novice programmers. Instead, we develop an approach to critiquing working but poorly constructed novice programs based on the principle of program readability. That is, we base our critique of working code on its ability to communicate to program readers.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/A5KJB7XS/Joni e Soloway - 1986 - But My Program Runs! Discourse Rules for Novice Pr.pdf}
}

@inproceedings{jordineMobiledeviceBasedSerious2014,
  title = {A Mobile-Device Based Serious Gaming Approach for Teaching and Learning {{Java}} Programming},
  booktitle = {2014 {{IEEE Frontiers}} in {{Education Conference}} ({{FIE}}) {{Proceedings}}},
  author = {Jordine, Tobias and Liang, Ying and Ihler, Edmund},
  year = {2014},
  month = oct,
  pages = {1--5},
  issn = {2377-634X},
  doi = {10.1109/FIE.2014.7044206},
  abstract = {Most first year computer science students would find that learning object-oriented programming is hard. Serious games have ever been used as one approach to handle this problem. But most of them cannot be played with mobile devices. This obviously does not suit the era of mobile computing that intends to allow students to learn programming skills in anytime anywhere. To enhance mobile teaching and learning, a research project started over a year ago and aims to create a mobile device based serious gaming approach along with a serious game for enhancing mobile teaching and learning for Java programming. So far the project has completed a literature review for understanding existing work and identifying problems in this area, conducted a survey for eliciting students' requirements for mobile gaming approach, and then established a mobile-device based serious gaming approach with a developed prototype of the game. This paper introduces the project, presents its details and discusses its current results. It is expected that the presented project will be helpful and useful to bring more efficient approaches with new mobile games into teaching object-oriented programming and to enhance students' learning experiences.},
  keywords = {computer aided instruction,computer science education,computer science student,Education,educational courses,Games,Java,Java programming,Land mobile radio,mobile computing,mobile device,mobile learning,mobile teaching,object-oriented programming,Programming profession,serious game,serious games (computing),serious gaming},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/85NSKZRM/Jordine et al. - 2014 - A mobile-device based serious gaming approach for .pdf;/Users/igormoreno/Zotero/storage/F7F3UK5U/7044206.html}
}

@book{jorgh.siekmannComputationalLogic2014,
  title = {Computational {{Logic}}},
  author = {{J\"org H. Siekmann}},
  year = {2014},
  series = {Handbook of the {{History}} of {{Logic}}},
  volume = {9},
  file = {/Users/igormoreno/Zotero/storage/6HQ7H4IU/02 - Contributors_2014_Handbook-of-the-History-of-Logic.pdf;/Users/igormoreno/Zotero/storage/6W2UWIEH/06 - What-is-a-logical-system--An-evolutionary-vie_2014_Handbook-of-the-History-o.pdf;/Users/igormoreno/Zotero/storage/9QGS94US/07 - History-of-Interactive-Theorem-Proving_2014_Handbook-of-the-History-of-Logic.pdf;/Users/igormoreno/Zotero/storage/A9U55VBC/16 - Logic-and-Databases--A-History-of-Deductive-_2014_Handbook-of-the-History-of.pdf;/Users/igormoreno/Zotero/storage/AN754JUS/00 - Copyright_2014_Handbook-of-the-History-of-Logic.pdf;/Users/igormoreno/Zotero/storage/AY22E7LN/11 - Computerising-Mathematical-Text_2014_Handbook-of-the-History-of-Logic.pdf;/Users/igormoreno/Zotero/storage/IDQHZUUH/13 - Degrees-of-Unsolvability_2014_Handbook-of-the-History-of-Logic.pdf;/Users/igormoreno/Zotero/storage/JEKLKNET/10 - Possibilistic-Logic---An-Overview_2014_Handbook-of-the-History-of-Logic.pdf;/Users/igormoreno/Zotero/storage/M4EEFRWF/15 - Logic-Programming_2014_Handbook-of-the-History-of-Logic.pdf;/Users/igormoreno/Zotero/storage/PBJKDCRZ/17 - Logics-for-Intelligent-Agents-and-Multi-Agen_2014_Handbook-of-the-History-of.pdf;/Users/igormoreno/Zotero/storage/PKLW822G/05 - Logic-and-the-development-of-the-compute_2014_Handbook-of-the-History-of-Log.pdf;/Users/igormoreno/Zotero/storage/Q9RUPAGG/04 - Computational-Logic_2014_Handbook-of-the-History-of-Logic.pdf;/Users/igormoreno/Zotero/storage/QMCN4XLZ/12 - Concurrency-Theory--A-Historical-Perspective-on-Co_2014_Handbook-of-the-Hist.pdf;/Users/igormoreno/Zotero/storage/R5BJSV4F/08 - Automation-of-Higher-Order-Logic_2014_Handbook-of-the-History-of-Logic.pdf;/Users/igormoreno/Zotero/storage/RI9MFK8I/19 - Logics-for-the-Semantic-Web_2014_Handbook-of-the-History-of-Logic.pdf;/Users/igormoreno/Zotero/storage/TZ562VF8/01 - Editorial-Note_2014_Handbook-of-the-History-of-Logic.pdf;/Users/igormoreno/Zotero/storage/VUAX5GVH/18 - Description-Logics_2014_Handbook-of-the-History-of-Logic.pdf;/Users/igormoreno/Zotero/storage/XCSZESTU/14 - Computational-Complexity_2014_Handbook-of-the-History-of-Logic.pdf;/Users/igormoreno/Zotero/storage/XCUYIGEG/20 - Index_2014_Handbook-of-the-History-of-Logic.pdf;/Users/igormoreno/Zotero/storage/Y8BG4TEF/09 - Equational-Logic-and-Rewriting_2014_Handbook-of-the-History-of-Logic.pdf}
}

@inproceedings{josefguggemosMEASURINGCOMPUTATIONALTHINKING2019,
  title = {{{MEASURING COMPUTATIONAL THINKING}} - {{ADAPTING A PERFORMANCE TEST AND A SELF-ASSESSMENT INSTRUMENT FOR GERMAN-SPEAKING COUNTRIES}}},
  booktitle = {Proceedings of the 16th {{International Conference}} on {{Cognition}} and {{Exploratory Learning}} in {{Digital Age}} ({{CELDA}} 2019)},
  author = {Josef Guggemos, Josef Guggemos and Sabine Seufert, Sabine Seufert and {Marcos Rom{\'a}n-Gonz{\'a}lez}, Marcos Rom{\'a}n-Gonz{\'a}lez},
  year = {2019},
  month = nov,
  pages = {183--191},
  publisher = {{IADIS Press}},
  doi = {10.33965/celda2019_201911L023},
  urldate = {2023-03-14},
  abstract = {Far-reaching technological changes are shaping our society and the ways in which we work. A key 21st-century skill for taking advantage of those changes may be computational thinking (CT). CT aims at enabling humans to carry out more effective problem solving by utilizing concepts of computing and computer technology. For a successful integration of CT into curricula, however, it is important to take assessment into account. We review two instruments that capture CT: the Computational Thinkig Test (CTt), a performance test, and the Computational Thinking Scales (CTS), that relies on self-assessment. We have adapted both instruments from English to German. Using a sample of 202 upper-secondary students from Switzerland, we provide further evidence on the validity of both instruments. To this end, we apply item response theory and confirmatory factor analysis. Furthermore, we evaluate the relationship between CTt and CTS. Both instruments show good properties and may be suitable for assessing CT in German-speaking countries at the secondary level.},
  isbn = {978-989-8533-93-7},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/MF8ZPJCI/Josef Guggemos et al. - 2019 - MEASURING COMPUTATIONAL THINKING - ADAPTING A PERF.pdf}
}

@book{josephd.novakLearningHowLearn1984,
  title = {Learning {{How}} to {{Learn}}},
  author = {{Joseph D. Novak} and {D. Bob Gowin}},
  year = {1984},
  month = sep,
  urldate = {2021-03-15},
  abstract = {For almost a century, educational theory and practice have been influenced by the view of behavioural psychologists that learning is synonymous with behaviour change. In this book, the authors argue for the practical importance of an alternate view, that learning is synonymous with a change in the meaning of experience. They develop their theory of the conceptual nature of knowledge and describe classroom-tested strategies for helping students to construct new and more powerful meanings and to integrate thinking, feeling, and acting. In their research, they have found consistently that standard educational practices that do not lead learners to grasp the meaning of tasks usually fail to give them confidence in their abilities. It is necessary to understand why and how new information is related to what one already knows. All those concerned with the improvement of education will find something of interest in Learning How to Learn.},
  isbn = {978-0-521-31926-3},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/H99GFVSU/learning-how-learn.html}
}

@misc{jul12GradualTypingTheory2019,
  title = {Gradual {{Typing}} from {{Theory}} to {{Practice}}},
  author = {on Jul 12, Sam Tobin-Hochstadt and {2019}},
  year = {2019},
  month = jul,
  journal = {SIGPLAN Blog},
  urldate = {2022-11-21},
  abstract = {From its beginning 15 years ago, gradual typing is now part of everyday development practice for massive code bases at companies from Facebook to Microsoft to Stripe to Dropbox, all of which have d\ldots},
  langid = {american},
  file = {/Users/igormoreno/Zotero/storage/YLBGRDTS/gradual-typing-theory-practice.html}
}

@inproceedings{kaczmarczykIdentifyingStudentMisconceptions2010,
  ids = {kaczmarczykIdentifyingStudentMisconceptions2010a},
  title = {Identifying Student Misconceptions of Programming},
  booktitle = {Proceedings of the 41st {{ACM}} Technical Symposium on {{Computer}} Science Education - {{SIGCSE}} '10},
  author = {Kaczmarczyk, Lisa C. and Petrick, Elizabeth R. and East, J. Philip and Herman, Geoffrey L.},
  year = {2010},
  pages = {107},
  publisher = {{ACM Press}},
  address = {{Milwaukee, Wisconsin, USA}},
  doi = {10.1145/1734263.1734299},
  urldate = {2018-10-22},
  abstract = {Computing educators are often baffled by the misconceptions that their CS1 students hold. We need to understand these misconceptions more clearly in order to help students form correct conceptions. This paper describes one stage in the development of a concept inventory for Computing Fundamentals: investigation of student misconceptions in a series of core CS1 topics previously identified as both important and difficult. Formal interviews with students revealed four distinct themes, each containing many interesting misconceptions. Three of those misconceptions are detailed in this paper: two misconceptions about memory models, and data assignment when primitives are declared. Individual misconceptions are related, but vary widely, thus providing excellent material to use in the development of the CI. In addition, CS1 instructors are provided immediate usable material for helping their students understand some difficult introductory concepts.},
  isbn = {978-1-4503-0006-3},
  langid = {english},
  keywords = {Misconceptions Proposal,proposedByIgor},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/DSNHJH9F/Kaczmarczyk et al. - 2010 - Identifying student misconceptions of programming.pdf;/Users/igormoreno/Zotero/storage/J3937ZDD/Kaczmarczyk et al - 2010 - Identifying student misconceptions of programming.pdf;/Users/igormoreno/Zotero/storage/4VHWR5HT/1734263.html}
}

@article{kafaiCraftsOrientedApproachComputing2014,
  title = {A {{Crafts-Oriented Approach}} to {{Computing}} in {{High School}}: {{Introducing Computational Concepts}}, {{Practices}}, and {{Perspectives}} with {{Electronic Textiles}}},
  shorttitle = {A {{Crafts-Oriented Approach}} to {{Computing}} in {{High School}}},
  author = {Kafai, Yasmin B. and Lee, Eunkyoung and Searle, Kristin and Fields, Deborah and Kaplan, Eliot and Lui, Debora},
  year = {2014},
  month = mar,
  journal = {ACM Transactions on Computing Education},
  volume = {14},
  number = {1},
  pages = {1:1--1:20},
  doi = {10.1145/2576874},
  urldate = {2020-10-14},
  abstract = {In this article, we examine the use of electronic textiles (e-textiles) for introducing key computational concepts and practices while broadening perceptions about computing. The starting point of our work was the design and implementation of a curriculum module using the LilyPad Arduino in a pre-AP high school computer science class. To understand students' learning, we analyzed the structure and functionality of their circuits and program code as well as their design approaches to making and debugging their e-textile creations and their views of computing. We also studied students' changing perceptions of computing. Our discussion addresses the need for and design of scaffolded challenges and the potential for using crafts materials and activities such as e-textiles for designing introductory courses that can broaden participation in computing.},
  keywords = {education,Electronic textiles,K-12},
  annotation = {00174},
  file = {/Users/igormoreno/Zotero/storage/ZRNQ3GUN/Kafai et al - 2014 - A Crafts-Oriented Approach to Computing in High School.pdf}
}

@article{kahnemanSubjectiveProbabilityJudgment1972,
  title = {Subjective Probability: {{A}} Judgment of Representativeness},
  shorttitle = {Subjective Probability},
  author = {Kahneman, Daniel and Tversky, Amos},
  year = {1972},
  month = jul,
  journal = {Cognitive Psychology},
  volume = {3},
  number = {3},
  pages = {430--454},
  issn = {0010-0285},
  doi = {10.1016/0010-0285(72)90016-3},
  urldate = {2018-12-02},
  abstract = {This paper explores a heuristic\textemdash representativeness\textemdash according to which the subjective probability of an event, or a sample, is determined by the degree to which it: (i) is similar in essential characteristics to its parent population; and (ii) reflects the salient features of the process by which it is generated. This heuristic is explicated in a series of empirical examples demonstrating predictable and systematic errors in the evaluation of uncertain events. In particular, since sample size does not represent any property of the population, it is expected to have little or no effect on judgment of likelihood. This prediction is confirmed in studies showing that subjective sampling distributions and posterior probability judgments are determined by the most salient characteristic of the sample (e.g., proportion, mean) without regard to the size of the sample. The present heuristic approach is contrasted with the normative (Bayesian) approach to the analysis of the judgment of uncertainty.},
  file = {/Users/igormoreno/Zotero/storage/KW2C2BCA/Kahneman and Tversky - 1972 - Subjective probability A judgment of representati.pdf;/Users/igormoreno/Zotero/storage/XA7CIQE9/0010028572900163.html}
}

@inproceedings{kahneyWhatNoviceProgrammers1983,
  ids = {kahneyWhatNoviceProgrammers1983a},
  title = {What Do Novice Programmers Know about Recursion},
  booktitle = {Proceedings of the {{SIGCHI Conference}} on {{Human Factors}} in {{Computing Systems}}},
  author = {Kahney, Hank},
  year = {1983},
  month = dec,
  series = {{{CHI}} '83},
  pages = {235--239},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/800045.801618},
  urldate = {2020-10-04},
  abstract = {Recent research into differences between novice and expert computer programmers has provided evidence that experts know more than novices, and what they know is better organized. The conclusion is only as interesting as it is intuitive. This paper reports an experiment which was designed to determine precisely what novice programmers understand about the behaviour of recursive procedures, and exactly how their understanding differs from an expert's understanding of the process. The results show that different novices understand, or misunderstand, different things. Implications of the findings are discussed with respect to other research into novice and expert programming performance.},
  isbn = {978-0-89791-121-4},
  annotation = {00131},
  file = {/Users/igormoreno/Zotero/storage/XRKCYZ8P/Kahney - 1983 - What do novice programmers know about recursion.pdf;/Users/igormoreno/Zotero/storage/YAQGFXCF/Kahney - 1983 - What do novice programmers know about recursion.pdf;/Users/igormoreno/Zotero/storage/XHA9BGI4/800045.html}
}

@incollection{kahnGeneralizingRemovingDetail2000,
  title = {Generalizing by {{Removing Detail}}: {{How Any Program Can Be Created}} by {{Working}} with {{Examples}}},
  booktitle = {Your {{Wish}} Is {{My Command}}: {{Programming By Example}}},
  author = {Kahn, Ken and Lieberman, Henry},
  year = {2000},
  pages = {17},
  publisher = {{Morgan Kaufman Publishers}},
  abstract = {A long-standing goal of the programming by demonstration research community is to enable people to construct programs by showing how the desired programs should work on sample inputs. A major challenge is how to make the programs general. Heuristics and inference can generalize recorded actions on sample data in narrow domains but have yet to be much help in general purpose programming. This paper describes a programming system called ToonTalk\textregistered{} [Kahn 96, Kahn 00] that takes a different approach. In ToonTalk the programmer generalizes recorded actions by explicitly removing details. Children as young as 6 have constructed a wide variety of programs in this manner [Playground 00].},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/PU8LM3RW/Kahn and Lieberman - 2000 - Generalizing by Removing Detail.pdf}
}

@article{kahnToonTalkAnimatedProgramming1996,
  title = {{{ToonTalk}} -- {{An Animated Programming Environment}} for {{Children}}},
  author = {Kahn, Ken},
  year = {1996},
  journal = {The Journal of Visual Languages and Computing},
  volume = {7},
  number = {2},
  keywords = {Abstraction,Children,Computer Programming,Concurrent Programming,Video Games},
  file = {/Users/igormoreno/Zotero/storage/VS35I7IG/Kahn - 1996 - ToonTalk -- An Animated Programming Environment for Children.pdf}
}

@inproceedings{kaijanahoConceptAnalysisProgramming2017,
  ids = {kaijanahoConceptAnalysisProgramming2017a},
  title = {Concept {{Analysis}} in {{Programming Language Research}}: {{Done Well It}} Is {{All Right}}},
  shorttitle = {Concept {{Analysis}} in {{Programming Language Research}}},
  booktitle = {Proceedings of the 2017 {{ACM SIGPLAN International Symposium}} on {{New Ideas}}, {{New Paradigms}}, and {{Reflections}} on {{Programming}} and {{Software}}},
  author = {Kaijanaho, Antti-Juhani},
  year = {2017},
  series = {Onward! 2017},
  pages = {246--259},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3133850.3133868},
  urldate = {2019-07-12},
  abstract = {Programming language research is becoming method conscious. Rigorous mathematical or empirical evaluation is often demanded, which is a good thing. However, I argue in this essay that concept analysis is a legitimate research approach in programming languages, with important limitations. It can be used to sharpen vague concepts, and to expose distinctions that have previously been overlooked, but it does not demonstrate the superiority of one language design over another. Arguments and counter-arguments are essential to successful concept analysis, and such thoughtful conversations should be published more.},
  isbn = {978-1-4503-5530-8},
  keywords = {argumentation,concept analysis,non-empirical research,philosophy,programming language research,research methodology,To Read},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/3PWHAUBP/Kaijanaho - 2017 - Concept analysis in programming language research.pdf;/Users/igormoreno/Zotero/storage/3V2NRPRC/Kaijanaho - 2017 - Concept Analysis in Programming Language Research.pdf}
}

@article{kaijanahoEvidencebasedProgrammingLanguage2015,
  title = {Evidence-Based Programming Language Design : A Philosophical and Methodological Exploration},
  shorttitle = {Evidence-Based Programming Language Design},
  author = {Kaijanaho, Antti-Juhani},
  year = {2015},
  journal = {Jyv\"askyl\"a studies in computing},
  number = {222},
  publisher = {{University of Jyv\"askyl\"a}},
  urldate = {2020-11-09},
  abstract = {Background: Programming language design is not usually informed by empirical  studies. In other fields similar problems have inspired an evidence-based paradigm  of practice. Such a paradigm is practically inevitable in language design, as well.  Aims: The content of evidence-based programming design (EB-PLD) is explored,  as is the concept of evidence in general. Additionally, the extent of evidence  potentially useful for EB-PLD is mapped, and the appropriateness of Cohen's  kappa for evaluating coder agreement in a secondary study is evaluated. Method:  Philosophical analysis and explication are used to clarify the unclear. A systematic mapping study was conducted to map out the existing body of evidence.  Results: Evidence is a report of observations that affects the strength of an argument. There is some but not much evidence. EB-PLD is a five-step process for  resolving uncertainty about design problems. Cohen's kappa is inappropriate for  coder agreement evaluation in systematic secondary studies. Conclusions: Coder  agreement evaluation should use Scott's pi, Fleiss' kappa, or Krippendorff's alpha. EB-PLD is worthy of further research, although its usefulness was out of  scope here.},
  copyright = {openAccess},
  isbn = {9789513963880},
  langid = {english},
  annotation = {00024  Accepted: 2015-11-17T10:33:20Z},
  file = {/Users/igormoreno/Zotero/storage/KXELNWAG/Kaijanaho - 2015 - Evidence-based programming language design.pdf;/Users/igormoreno/Zotero/storage/DS4KZLAY/47698.html}
}

@inproceedings{kailaProgrammingMaturityFinnish2017,
  title = {About {{Programming Maturity}} in {{Finnish High Schools}}: {{A Comparison Between High School}} and {{University Students}}' {{Programming Skills}}},
  shorttitle = {About {{Programming Maturity}} in {{Finnish High Schools}}},
  booktitle = {Proceedings of the 2017 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Kaila, Erkki and Lind{\'e}n, Rolf and Lokkila, Erno and Laakso, Mikko-Jussi},
  year = {2017},
  month = jun,
  pages = {122--127},
  publisher = {{ACM}},
  address = {{Bologna Italy}},
  doi = {10.1145/3059009.3059021},
  urldate = {2020-06-22},
  abstract = {In this study, we compare students' ability to learn and master a variety of computer programming concepts in two different student groups. The first group consists of 64 university level students with various backgrounds (adult control), and the second group consists of 40 Finnish junior high school students of age 15 (adolescent treatment group). Neither group had significant prior programming experience. Both groups were taught a similar semester-long introductory course on Python programming, using the same learning management system (LMS). We find that for almost all of the concepts, both groups perform equally well, but students in the adolescent treatment group perform significantly worse when learning the concepts of loop structures and repetition. The results are further compared to the lecture surveys that were collected from the junior high school course to further explain the causes of the findings. Based on the results and the teaching methods that are presented in this paper, we are able to show that adolescent junior high school students and adult university students have similar abilities to learn abstract computer science concepts using a fully functional programming environment.},
  isbn = {978-1-4503-4704-4},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/HSE2QWHL/Kaila et al - 2017 - About Programming Maturity in Finnish High Schools.pdf}
}

@article{kaleliogluNewWayTeaching2015,
  title = {A New Way of Teaching Programming Skills to {{K-12}} Students: {{Code}}.Org},
  shorttitle = {A New Way of Teaching Programming Skills to {{K-12}} Students},
  author = {Kalelio{\u g}lu, Filiz},
  year = {2015},
  month = nov,
  journal = {Computers in Human Behavior},
  volume = {52},
  pages = {200--210},
  issn = {0747-5632},
  doi = {10.1016/j.chb.2015.05.047},
  urldate = {2018-12-02},
  abstract = {This study attempts to investigate the effect of teaching code.org site on reflective thinking skills towards problem solving. More specifically, this study attempts to investigate whether there is a gender difference in terms of students' reflective thinking skills towards problem solving. This triangulation study was conducted with 32 primary school students. The quantitative part of the study was conducted in pre-test/post-test comparison design of quasi-experimental design. The scores of reflective problem solving skills were gathered through the reflective thinking skill scale towards problem solving and the students' performances in the code-org site were examined. In the qualitative part of the research, after the five-week experimental process, focus group interviews were conducted with ten students and a reflection paper from the IT teacher was analysed. According to the t-test results, teaching programming to primary school students in the code.org site did not cause any differences in reflective thinking skills towards problem solving. However, there is a slight increment in the means of female students' reflective thinking skills towards problem solving over the males' reflective thinking skills towards problem solving. On the other hand, qualitative data provided more information about the students' experiences. Students developed a positive attitude towards programming, and female students showed that they were as successful as their male counterparts, and that programming could be part of their future plans.},
  keywords = {Elementary education,Improving classroom teaching,Programming and programming languages},
  file = {/Users/igormoreno/Zotero/storage/6DDIVJFY/Kalelioğlu - 2015 - A new way of teaching programming skills to K-12 students.pdf;/Users/igormoreno/Zotero/storage/PIFCHVKL/S0747563215004288.html}
}

@misc{kalidazadBetterExplainedMathLessons,
  title = {{{BetterExplained}} \textendash{} {{Math}} Lessons That Click},
  author = {{Kalid Azad}},
  urldate = {2021-03-15},
  howpublished = {https://betterexplained.com/},
  file = {/Users/igormoreno/Zotero/storage/4GRV76JC/betterexplained.com.html}
}

@inproceedings{kalliaComputingTeachersPerspectives2017,
  title = {Computing {{Teachers}}' {{Perspectives}} on {{Threshold Concepts}}: {{Functions}} and {{Procedural Abstraction}}},
  shorttitle = {Computing {{Teachers}}' {{Perspectives}} on {{Threshold Concepts}}},
  booktitle = {Proceedings of the 12th {{Workshop}} on {{Primary}} and {{Secondary Computing Education}}},
  author = {Kallia, Maria and Sentance, Sue},
  year = {2017},
  month = nov,
  pages = {15--24},
  publisher = {{ACM}},
  address = {{Nijmegen Netherlands}},
  doi = {10.1145/3137065.3137085},
  urldate = {2020-06-22},
  abstract = {With the introduction of the new computing curriculum in England, teachers are facing many challenges, among them the teaching of computer programming. Literature suggests that the conceptual understanding of this subject contributes to its difficulty and that threshold concepts, as a source of troublesome knowledge, have a significant role in this. This paper explores computing teachers' perspectives on the Threshold Concept framework and suggests potential threshold concepts in the area of Functions and, more generally, in Procedural Abstraction. A study was conducted, using the Delphi method, including both computing teachers with experience teaching at upper secondary/high school and computing teachers with experience practicing programming in a professional environment for more than 7 years. The results indicate that the majority of the participants support that the Threshold Concept framework can explain students' difficulties in programming and agreed on 11 potential threshold concepts in the area of Functions and Procedural Abstraction. The participants focused more on the troublesome characteristic of threshold concepts and less on the transformative and integrative. Most of the participants also specified that they would change the way they teach a concept if they knew that this is a threshold one. Finally, the paper discusses the findings and how these will shape our future research.},
  isbn = {978-1-4503-5428-8},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/89SVZ4FZ/Kallia and Sentance - 2017 - Computing Teachers' Perspectives on Threshold Concepts.pdf}
}

@inproceedings{kalliaLearningUseFunctions2019,
  title = {Learning to Use {{Functions}}: {{The Relationship Between Misconceptions}} and {{Self-Efficacy}}},
  shorttitle = {Learning to Use {{Functions}}},
  booktitle = {Proceedings of the 50th {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Kallia, Maria and Sentance, Sue},
  year = {2019},
  month = feb,
  pages = {752--758},
  publisher = {{ACM}},
  address = {{Minneapolis MN USA}},
  doi = {10.1145/3287324.3287377},
  urldate = {2020-06-22},
  abstract = {Computer programming is one of the most researched subjects within computer science education; within this much attention has been focused on exploring the difficulties and common misconceptions that students experience when learning to program. The study reported here has two aims: firstly, to investigate students' misconceptions around functions by setting up a programming test of advancing difficulty and complexity based on the Bloom and Solo taxonomies, and secondly, to explore the impact that misconceptions have on students' self-efficacy in programming, along with students' self-evaluation and self-efficacy in computer science. Our study revealed seven misconceptions in the area of functions, three of which have never before been reported in the literature, to our knowledge. Additionally, the results suggest that misconceptions do not only prohibit students' progress and learning but have a significant impact on students' self-efficacy in programming.},
  isbn = {978-1-4503-5890-3},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/HFZICPW7/Kallia and Sentance - 2019 - Learning to use Functions The Relationship Betwee.pdf}
}

@phdthesis{kallioTrainingStudentsScientific1998,
  title = {Training of Students' Scientific Reasoning Skills},
  author = {Kallio, Eeva},
  year = {1998},
  school = {University of Jyv\"askyl\"a},
  keywords = {formal reasoning,Piaget,postformal reasoning,scientific reasoning,traditions of the sciences,training study,university students},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/LSQCZID8/Kallio - 1998 - Training of students' scientific reasoning skills.pdf}
}

@article{kalyugaInstructingGeneralizedKnowledge2011,
  title = {Instructing in Generalized Knowledge Structures to Develop Flexible Problem Solving Skills},
  author = {Kalyuga, Slava and Hanham, Jos{\'e}},
  year = {2011},
  month = jan,
  journal = {Computers in Human Behavior},
  series = {Current {{Research Topics}} in {{Cognitive Load Theory}}},
  volume = {27},
  number = {1},
  pages = {63--68},
  issn = {0747-5632},
  doi = {10.1016/j.chb.2010.05.024},
  urldate = {2018-11-06},
  abstract = {In contrast to routine knowledge and skills, flexible problem solving is associated with the ability to apply one's knowledge structures in relatively new situations. In the absence of specific knowledge-based guidance, such processes could be very cognitively demanding. This paper suggests that learning flexible problem solving skills could be enhanced by explicitly instructing learners in generalized forms of schematic knowledge structures that are applicable to a greater variety of problems. The paper presents results of an experimental study that has investigated this approach in learning the operation of a technical device, and discusses implications of these results for the design of computer-based instruction.},
  keywords = {Cognitive load,Flexible problem solving,General-to-specific approach to instruction,Generalized schemas,Technical training,Transfer of knowledge},
  file = {/Users/igormoreno/Zotero/storage/VSEU9MSX/Kalyuga and Hanham - 2011 - Instructing in generalized knowledge structures to develop flexible problem.pdf;/Users/igormoreno/Zotero/storage/5XGZ54U6/S0747563210001640.html}
}

@article{kalyugaKnowledgeElaborationCognitive2009,
  title = {Knowledge Elaboration: {{A}} Cognitive Load Perspective},
  shorttitle = {Knowledge Elaboration},
  author = {Kalyuga, Slava},
  year = {2009},
  month = oct,
  journal = {Learning and Instruction},
  series = {Cognitive Load in Interactive Knowledge Construction},
  volume = {19},
  number = {5},
  pages = {402--410},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2009.02.003},
  urldate = {2018-11-06},
  abstract = {The process of knowledge elaboration is considered from the perspective of cognitive load theory. This theory assumes that the available knowledge structures in long-term memory (LTM) are used to organize and guide cognitive processing in complex learning. Accordingly, the role of external instructional guidance in the process of knowledge elaboration could be described as providing a substitute for knowledge structures missing from LTM. Thus, the executive guidance in complex learning environments is shared between the person (based on his/her LTM knowledge structures) and another expert or instructional means. This article analyzes instructional implications of this assumption. Adaptive learning environments are suggested for tailoring knowledge elaboration processes to changing characteristics of individual learners. Means for identifying and predicting the learner's LTM-based executive guidance are proposed so that they can be utilized in the building of adaptive learning environments.},
  keywords = {Adaptive learning environments,Cognitive load theory,Executive guidance,Metacognition},
  file = {/Users/igormoreno/Zotero/storage/MPL9WX22/Kalyuga - 2009 - Knowledge elaboration A cognitive load perspectiv.pdf;/Users/igormoreno/Zotero/storage/NJRG84HF/S0959475209000176.html}
}

@inproceedings{kaminSpecialPurposeLanguagePictureDrawing1997,
  title = {A {{Special-Purpose Language}} for {{Picture-Drawing}}},
  booktitle = {Proceedings of the {{Conference}} on {{Domain-Specific Languages}}},
  author = {Kamin, Samuel N and Hyatt, David},
  year = {1997},
  pages = {15},
  publisher = {{USENIX}},
  address = {{Santa Barbara, California, USA}},
  abstract = {Special purpose languages are typically characterized by a type of primitive data and domain-speci c operations on this data. One approach to special purpose language design is to embed the data and operations of the language within an existing functional language. The data can be de ned using the type constructions provided by the functional language, and the special purpose language then inherits all of the features of the more general language. In this paper we outline a domain-speci c language, FPIC, for the representation of two-dimensional pictures. The primitive data and operations are de ned in ML. We outline the operations provided by the language, illustrate the power of the language with examples, and discuss the design process.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/AMEEGZ3Y/Kamin and Hyatt - A Special-Purpose Language for Picture-Drawing.pdf}
}

@misc{kaneLearningTeachingInitial,
  title = {Learning about {{Teaching}}: {{Initial Findings}} from the {{Measures}} of {{Effective Teaching Project}}},
  author = {Kane, Thomas J. and Cantrell, Steven},
  publisher = {{MET Project}},
  file = {/Users/igormoreno/Zotero/storage/YCWIY7B8/Kane and Cantrell - Learning about Teaching.pdf}
}

@inproceedings{kangOmnicodeNoviceOrientedLive2017,
  title = {Omnicode: {{A Novice-Oriented Live Programming Environment}} with {{Always-On Run-Time Value Visualizations}}},
  shorttitle = {Omnicode},
  booktitle = {Proceedings of the 30th {{Annual ACM Symposium}} on {{User Interface Software}} and {{Technology}}},
  author = {Kang, Hyeonsu and Guo, Philip J.},
  year = {2017},
  month = oct,
  pages = {737--745},
  publisher = {{ACM}},
  address = {{Qu\'ebec City QC Canada}},
  doi = {10.1145/3126594.3126632},
  urldate = {2020-06-22},
  abstract = {Visualizations of run-time program state help novices form proper mental models and debug their code. We push this technique to the extreme by posing the following question: What if a live programming environment for an imperative language always displays the entire history of all run-time values for all program variables all the time? To explore this question, we built a prototype live IDE called Omnicode (``Omniscient Code'') that continually runs the user's Python code and uses a scatterplot matrix to visualize the entire history of all of its numerical values, along with meaningful numbers derived from other data types. To filter the visualizations and hone in on specific points of interest, the user can brush and link over the scatterplots or select portions of code. They can also zoom in to view detailed stack and heap visualizations at each execution step. An exploratory study on 10 novice programmers discovered that they found Omnicode to be useful for debugging, forming mental models, explaining their code to others, and discovering moments of serendipity that would not have been likely within an ordinary IDE.},
  isbn = {978-1-4503-4981-9},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/ILWTPXAQ/Kang and Guo - 2017 - Omnicode A Novice-Oriented Live Programming Envir.pdf}
}

@article{kaoBreakingConceptBoundaries2008,
  title = {Breaking Concept Boundaries to Enhance Creative Potential: {{Using}} Integrated Concept Maps for Conceptual Self-Awareness},
  shorttitle = {Breaking Concept Boundaries to Enhance Creative Potential},
  author = {Kao, G and Lin, S and Sun, C},
  year = {2008},
  month = dec,
  journal = {Computers \& Education},
  volume = {51},
  number = {4},
  pages = {1718--1728},
  issn = {03601315},
  doi = {10.1016/j.compedu.2008.05.003},
  urldate = {2018-11-06},
  abstract = {The authors address the role of computer support for building conceptual self-awareness\textemdash that is, enabling students to think outside of concept boundaries in hope of enhancing creative potential. Based on meta-cognition theory, we developed an integrated concept mapping system (ICMSys) to improve users' conceptual self-awareness in addition to applying concept mapping techniques in traditional learning scenarios. Since the ICMSys accommodates different perspectives, selected ideas made by peers are retained with the help of integrated concept map (ICMap) representations used as stimuli for reflective thinking. Results from a case study with 32 information management undergraduates indicate: (a) increased levels of conceptual self-awareness, (b) evidence of conceptual improvement in the students' redrawn concept maps, (c) that ICMap viewing frequency exerted a positive impact on level of conceptual self-awareness, and (d) a significant correlation between level of conceptual self-awareness in redrawn personal concept maps and actual conceptual changes as determined by three experts. We describe student perceptions of the ICMSys in terms of comprehension practicality and conceptual self-awareness, and give suggestions for future research.},
  langid = {english},
  keywords = {To Read},
  file = {/Users/igormoreno/Zotero/storage/T4TQHARG/Kao et al - 2008 - Breaking concept boundaries to enhance creative potential.pdf}
}

@inproceedings{karachaliasGADTsMeetTheir2015,
  ids = {karachalias_gadts_2015},
  title = {{{GADTs}} Meet Their Match: Pattern-Matching Warnings That Account for {{GADTs}}, Guards, and Laziness},
  shorttitle = {{{GADTs}} Meet Their Match},
  booktitle = {Proceedings of the 20th {{ACM SIGPLAN International Conference}} on {{Functional Programming}}},
  author = {Karachalias, Georgios and Schrijvers, Tom and Vytiniotis, Dimitrios and Jones, Simon Peyton},
  year = {2015},
  month = aug,
  series = {{{ICFP}} 2015},
  pages = {424--436},
  publisher = {{Association for Computing Machinery}},
  address = {{Vancouver, BC, Canada}},
  doi = {10.1145/2784731.2784748},
  urldate = {2020-06-07},
  abstract = {For ML and Haskell, accurate warnings when a function definition has redundant or missing patterns are mission critical. But today's compilers generate bogus warnings when the programmer uses guards (even simple ones), GADTs, pattern guards, or view patterns. We give the first algorithm that handles all these cases in a single, uniform framework, together with an implementation in GHC, and evidence of its utility in practice.},
  isbn = {978-1-4503-3669-7},
  keywords = {Generalized Algebraic Data Types,Haskell,OutsideIn(X),pattern matching},
  annotation = {00015},
  file = {/Users/igormoreno/Zotero/storage/D2CKT3KF/Karachalias et al. - 2015 - GADTs Meet Their Match Pattern-matching Warnings .pdf;/Users/igormoreno/Zotero/storage/ML2EH9DU/Karachalias et al. - 2015 - GADTs meet their match pattern-matching warnings .pdf}
}

@article{karavirtaCreatingEngagingOnline2016,
  title = {Creating {{Engaging Online Learning Material}} with the {{JSAV JavaScript Algorithm Visualization Library}}},
  author = {Karavirta, Ville and Shaffer, Clifford A.},
  year = {2016},
  month = apr,
  journal = {IEEE Transactions on Learning Technologies},
  volume = {9},
  number = {2},
  pages = {171--183},
  issn = {1939-1382},
  doi = {10.1109/TLT.2015.2490673},
  urldate = {2018-10-06},
  abstract = {Data Structures and Algorithms are a central part of Computer Science. Due to their abstract and dynamic nature, they are a difficult topic to learn for many students. To alleviate these learning difficulties, instructors have turned to algorithm visualizations (AV) and AV systems. Research has shown that especially engaging AVs can have an impact on student learning of DSA topics. Until recently, most AV systems were Java-based systems. But, the popularity of Java has declined and is being supplanted by HTML5 and JavaScript content online. In this paper, we present JSAV: the JavaScript AV development library. JSAV goes beyond traditional AV library support for displaying standard data structures components, to provide functionality to simplify creation of AVs on many engagement levels including interactive exercises. We describe the growing body of content created with JSAV and summarize our three years of experience and research results from using JSAV to build content that supports CS education.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/986JIW6Y/Karavirta and Shaffer - 2016 - Creating Engaging Online Learning Material with the JSAV JavaScript Algorithm.pdf}
}

@inproceedings{karpierzMisconceptionsConceptInventory2014,
  title = {Misconceptions and {{Concept Inventory Questions}} for {{Binary Search Trees}} and {{Hash Tables}}},
  booktitle = {Proceedings of the 45th {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Karpierz, Kuba and Wolfman, Steven A.},
  year = {2014},
  series = {{{SIGCSE}} '14},
  pages = {109--114},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2538862.2538902},
  urldate = {2019-10-29},
  abstract = {In this paper, we triangulate evidence for five misconceptions concerning binary search trees and hash tables. In addition, we design and validate multiple-choice concept inventory questions to measure the prevalence of four of these misconceptions. We support our conclusions with quantitative analysis of grade data and closed-ended problems, and qualitative analysis of interview data and open-ended problems. Instructors and researchers can inexpensively measure the impact of pedagogical changes on these misconceptions by using these questions in a larger concept inventory.},
  isbn = {978-1-4503-2605-6},
  keywords = {concept inventory,data structures,misconceptions,Misconceptions Proposal},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/HMHTRLC9/Karpierz and Wolfman - 2014 - Misconceptions and Concept Inventory Questions for Binary Search Trees and Hash.pdf}
}

@article{kartoshkinaApplyingCognitiveTask2014,
  title = {Applying Cognitive Task Analysis Methodology in Educational Research},
  author = {Kartoshkina, Yuliya and Hunter, Cheryl},
  year = {2014},
  journal = {IOSR Journal of Research \& Method in Education (IOSRJRME)},
  volume = {4},
  number = {5},
  pages = {51--57},
  issn = {2320737X, 23207388},
  doi = {10.9790/7388-04515157},
  urldate = {2018-12-28},
  abstract = {Effective teaching is a valuable skill that is hard to learn and understand by just simply observing someone teach. One of the ways to gain better insight into how this skill is being developed is to explore teachers' cognitive processes. Cognitive Task Analysis (CTA) methodology developed to study the cognition of experts performing challenging tasks can be a useful tool to gain this insight. This paper will review the underlying theoretical assumptions of this methodology and suggest how one could apply CTA to educational research.},
  langid = {english},
  keywords = {To Read},
  file = {/Users/igormoreno/Zotero/storage/BWYWE8B4/Kartoshkina and Hunter - 2014 - Applying cognitive task analysis methodology in educational research.pdf}
}

@inproceedings{katsPureDeclarativeSyntax2010,
  title = {Pure and Declarative Syntax Definition: Paradise Lost and Regained},
  booktitle = {Onward!},
  author = {Kats, Lennart C L and Visser, Eelco and Wachsmuth, Guido},
  year = {2010},
  month = oct,
  pages = {15},
  publisher = {{ACM}},
  address = {{Reno, NV, USA}},
  abstract = {Syntax definitions are pervasive in modern software systems, and serve as the basis for language processing tools like parsers and compilers. Mainstream parser generators pose restrictions on syntax definitions that follow from their implementation algorithm. They hamper evolution, maintainability, and compositionality of syntax definitions. The pureness and declarativity of syntax definitions is lost. We analyze how these problems arise for different aspects of syntax definitions, discuss their consequences for language engineers, and show how the pure and declarative nature of syntax definitions can be regained.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/FQQ7MWN9/Kats et al. - Pure and declarative syntax definition paradise l.pdf}
}

@article{katzeffEffectDifferentConceptual1988,
  title = {The Effect of Different Conceptual Models upon Reasoning in a Database Query Writing Task},
  author = {Katzeff, Cecilia},
  year = {1988},
  month = jan,
  journal = {International Journal of Man-Machine Studies},
  volume = {29},
  number = {1},
  pages = {37--62},
  issn = {00207373},
  doi = {10.1016/S0020-7373(88)80030-0},
  urldate = {2020-06-22},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/9A9LG5GU/Katzeff - 1988 - The effect of different conceptual models upon reasoning in a database query.pdf}
}

@article{kayExaminingBenefitsChallenges2009,
  title = {Examining the Benefits and Challenges of Using Audience Response Systems: {{A}} Review of the Literature},
  shorttitle = {Examining the Benefits and Challenges of Using Audience Response Systems},
  author = {Kay, Robin H. and LeSage, Ann},
  year = {2009},
  month = nov,
  journal = {Computers \& Education},
  volume = {53},
  number = {3},
  pages = {819--827},
  issn = {03601315},
  doi = {10.1016/j.compedu.2009.05.001},
  urldate = {2018-11-06},
  abstract = {Audience response systems (ARSs) permit students to answer electronically displayed multiple choice questions using a remote control device. All responses are instantly presented, in chart form, then reviewed and discussed by the instructor and the class. A brief history of ARSs is offered including a discussion of the 26 labels used to identify this technology. Next a detailed review of 67 peer-reviewed papers from 2000 to 2007 is offered presenting the benefits and challenges associated with the use of an ARS. Key benefits for using ARSs include improvements to the classroom environment (increases in attendance, attention levels, participation and engagement), learning (interaction, discussion, contingent teaching, quality of learning, learning performance), and assessment (feedback, formative, normative). The biggest challenges for teachers in using ARSs are time needed to learn and set up the ARS technology, creating effective ARS questions, adequate coverage of course material, and ability to respond to instantaneous student feedback. Student challenges include adjusting to a new method of learning, increased confusion when multiple perspectives are discussed, and negative reactions to being monitored. It is concluded that more systematic, detailed research is needed in a broader range of contexts.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/FGU5PHJT/Kay and LeSage - 2009 - Examining the benefits and challenges of using audience response systems.pdf}
}

@inproceedings{kazemitabaarCodeStructDesignEvaluation2022,
  title = {{{CodeStruct}}: {{Design}} and {{Evaluation}} of an {{Intermediary Programming Environment}} for {{Novices}} to {{Transition}} from {{Scratch}} to {{Python}}},
  shorttitle = {{{CodeStruct}}},
  booktitle = {Interaction {{Design}} and {{Children}}},
  author = {Kazemitabaar, Majeed and Chyhir, Viktar and Weintrop, David and Grossman, Tovi},
  year = {2022},
  month = jun,
  series = {{{IDC}} '22},
  pages = {261--273},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3501712.3529733},
  urldate = {2022-07-01},
  abstract = {Transitioning from block-based programming environments to conventional text-based programming languages is a challenge faced by many learners as they progress in their computer science education. In this paper, we introduce CodeStruct, a new intermediary programming environment for novices designed to support children who have prior experience with block-based programming to ease the eventual transition to text-based programming. We describe the development of CodeStruct and its key design features. We then present the results from a two-week long programming class with 26 high school students (ages 12-16; M=14 years) investigating how CodeStruct supported learners in transitioning from Scratch to Python. Our findings reveal how learners used the scaffolds designed into CodeStruct to support their transition from blocks to text, and that transitioning to CodeStruct reduced completion time (1.98x) and help requests (4.63x) when compared to transitioning directly to Python. Finally, learners that used CodeStruct, performed equally well (and slightly better in 10/16 programming activities) in their final transition to fully text-based Python programming.},
  isbn = {978-1-4503-9197-9},
  keywords = {block-based programming,blocks-to-text transition,high school computer science education},
  file = {/Users/igormoreno/Zotero/storage/M26G6K9J/Kazemitabaar et al. - 2022 - CodeStruct Design and Evaluation of an Intermedia.pdf}
}

@book{keckPedagogicalGrammar,
  title = {Pedagogical {{Grammar}}},
  author = {Keck, Casey|Kim},
  journal = {z.190},
  publisher = {{John Benjamins Publishing Company}},
  urldate = {2021-10-10},
  abstract = {This book provides a comprehensive overview of pedagogical grammar research and explores its implications for the teaching of grammar in second language classrooms.},
  isbn = {978-90-272-6931-7},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/2K8PERFH/z.html}
}

@book{keeleyMathematicsFormativeAssessment2011,
  title = {Mathematics {{Formative Assessment}}, {{Volume}} 1},
  author = {Keeley, Page and Tobey, Cheryl Rose},
  year = {2011},
  month = sep,
  series = {Corwin {{Mathematics Series}}},
  urldate = {2019-10-31},
  abstract = {75 Practical Strategies for Linking Assessment, Instruction, and Learning},
  isbn = {978-1-4129-6812-6},
  langid = {american},
  keywords = {To Read},
  file = {/Users/igormoreno/Zotero/storage/TLCG5E5T/Keeley and Tobey - 2011 - Mathematics Formative Assessment, Volume 1.pdf;/Users/igormoreno/Zotero/storage/BK3DRCBW/book232921.html}
}

@book{keeleyMathematicsFormativeAssessment2017,
  title = {Mathematics {{Formative Assessment}}, {{Volume}} 2: 50 {{More Practical Strategies}} for {{Linking Assessment}}, {{Instruction}}, and {{Learning}}},
  shorttitle = {Mathematics {{Formative Assessment}}, {{Volume}} 2},
  author = {Keeley, Page D. and Tobey, Cheryl Rose},
  year = {2017},
  month = jan,
  edition = {1 edition},
  publisher = {{Corwin}},
  address = {{Thoudand Oaks, Calif}},
  abstract = {This one-of-a-kind resource helps you build a bridge between your students' initial ideas and correct mathematical thinking. Includes an annotated reference guide.},
  isbn = {978-1-5063-1139-5},
  langid = {english},
  keywords = {To Read},
  file = {/Users/igormoreno/Zotero/storage/46BUZM46/Contents.pdf;/Users/igormoreno/Zotero/storage/ZHBM6R95/Keeley and Tobey - 2017 - Mathematics Formative Assessment, Volume 2 50 Mor.pdf}
}

@book{keeleyScienceCurriculumTopic2019,
  title = {Science {{Curriculum Topic Study}}: {{Bridging}} the {{Gap Between Three-Dimensional Standards}}, {{Research}}, and {{Practice}}},
  shorttitle = {Science {{Curriculum Topic Study}}},
  author = {Keeley, Page D. and Tugel, Joyce},
  year = {2019},
  month = oct,
  edition = {Second edition},
  publisher = {{Corwin}},
  address = {{Thousand Oaks, California}},
  abstract = {Making scientific literacy happen within the new vision of science teaching and learning.~ Engage students in using and applying disciplinary content, scientific and engineering practices, and crosscutting concepts within curricular topics, and they will develop a scientifically-based and coherent view of the natural and designed world. ~ The latest edition of this best-seller will help you make the shifts needed to reflect current practices in curriculum, instruction, and assessment. The book includes: \textbullet{} An increased emphasis on STEM \textbullet{} 103 separate curriculum topic study guides \textbullet{} Connections to content knowledge, curricular and instructional implications, concepts and specific ideas, research on student learning, K-12 articulation, and assessment},
  isbn = {978-1-4522-4464-8},
  langid = {english}
}

@book{keeleyUncoveringStudentIdeas2011,
  title = {Uncovering Student Ideas in Life Science},
  author = {Keeley, Page},
  year = {2011},
  publisher = {{NSTA Press}},
  address = {{Arlington, Va}},
  isbn = {978-1-936137-17-6},
  langid = {english},
  lccn = {QH315 .K37 2011},
  keywords = {Educational evaluation,Life sciences,Study and teaching,To Read},
  file = {/Users/igormoreno/Zotero/storage/RLLXXWKD/Keeley - 2011 - Uncovering student ideas in life science.pdf}
}

@book{keeleyUncoveringStudentIdeas2018,
  title = {Uncovering {{Student Ideas}} in {{Science}}, {{Volume}} 1, {{Second Edition}}: 25 {{Formative Assessment Probes}}},
  shorttitle = {Uncovering {{Student Ideas}} in {{Science}}, {{Volume}} 1, {{Second Edition}}},
  author = {Keeley, Page},
  year = {2018},
  publisher = {{National Science Teachers Association}},
  doi = {10.2505/9781681405636},
  urldate = {2019-10-29},
  isbn = {978-1-68140-563-6},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/93XU6K2W/Keeley - 2018 - Uncovering Student Ideas in Science, Volume 1, Second Edition.pdf}
}

@misc{keenanDissectMockingbirdGraphical1996,
  title = {To {{Dissect}} a {{Mockingbird}}: {{A Graphical Notation}} for the {{Lambda Calculus}} with {{Animated Reduction}}},
  author = {Keenan, David C},
  year = {1996},
  month = aug,
  urldate = {2021-04-16},
  abstract = {The lambda calculus, and the closely related theory of combinators, are important in the foundations of mathematics, logic and computer science. This paper provides an informal and entertaining introduction by means of an animated graphical notation.},
  howpublished = {https://dkeenan.com/Lambda/},
  file = {/Users/igormoreno/Zotero/storage/Z4WHABU2/Lambda.html}
}

@inproceedings{keenProgramDecompositionComplexity2015,
  title = {Program {{Decomposition}} and {{Complexity}} in {{CS1}}},
  booktitle = {Proceedings of the 46th {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Keen, Aaron and Mammen, Kurt},
  year = {2015},
  month = feb,
  pages = {48--53},
  publisher = {{ACM}},
  address = {{Kansas City Missouri USA}},
  doi = {10.1145/2676723.2677219},
  urldate = {2023-03-16},
  abstract = {Inexperienced and novice programmers in CS 1 are often faced with the expectation that they will be able to decompose a problem into subproblems, solve these subproblems independently, and then recompose these solutions. As with programming in general, decomposition is a skill that benefits from explicit instruction and that must be practiced to see improvement. This paper introduces a term-long project approach to CS 1 that emphasizes program decomposition. Existing software quality metrics are used to assess student decomposition progression through the project and to compare the decomposition skills of students in courses using the term-long project approach against those in courses using a more typical ``stand-alone'' project approach.},
  isbn = {978-1-4503-2966-8},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/G6I7D9XD/Keen and Mammen - 2015 - Program Decomposition and Complexity in CS1.pdf}
}

@inproceedings{keenProgramDecompositionComplexity2015a,
  title = {Program {{Decomposition}} and {{Complexity}} in {{CS1}}},
  booktitle = {Proceedings of the 46th {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Keen, Aaron and Mammen, Kurt},
  year = {2015},
  month = feb,
  pages = {48--53},
  publisher = {{ACM}},
  address = {{Kansas City Missouri USA}},
  doi = {10.1145/2676723.2677219},
  urldate = {2023-03-16},
  abstract = {Inexperienced and novice programmers in CS 1 are often faced with the expectation that they will be able to decompose a problem into subproblems, solve these subproblems independently, and then recompose these solutions. As with programming in general, decomposition is a skill that benefits from explicit instruction and that must be practiced to see improvement. This paper introduces a term-long project approach to CS 1 that emphasizes program decomposition. Existing software quality metrics are used to assess student decomposition progression through the project and to compare the decomposition skills of students in courses using the term-long project approach against those in courses using a more typical ``stand-alone'' project approach.},
  isbn = {978-1-4503-2966-8},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/Y6VMQS7W/Keen and Mammen - 2015 - Program Decomposition and Complexity in CS1.pdf}
}

@article{kelleherLoweringBarriersProgramming2005,
  title = {Lowering the Barriers to Programming: {{A}} Taxonomy of Programming Environments and Languages for Novice Programmers},
  shorttitle = {Lowering the Barriers to Programming},
  author = {Kelleher, Caitlin and Pausch, Randy},
  year = {2005},
  month = jun,
  journal = {ACM Computing Surveys},
  volume = {37},
  number = {2},
  pages = {83--137},
  issn = {0360-0300},
  doi = {10.1145/1089733.1089734},
  urldate = {2022-02-16},
  abstract = {Since the early 1960's, researchers have built a number of programming languages and environments with the intention of making programming accessible to a larger number of people. This article presents a taxonomy of languages and environments designed to make programming more accessible to novice programmers of all ages. The systems are organized by their primary goal, either to teach programming or to use programming to empower their users, and then, by each system's authors' approach, to making learning to program easier for novice programmers. The article explains all categories in the taxonomy, provides a brief description of the systems in each category, and suggests some avenues for future work in novice programming environments and languages.},
  keywords = {computer Science education,Human-computer interaction,learning,literacy,problem solving},
  file = {/Users/igormoreno/Zotero/storage/NYSHFXAY/Kelleher e Pausch - 2005 - Lowering the barriers to programming A taxonomy o.pdf}
}

@article{kellyKansasSilentReading1916,
  title = {The {{Kansas Silent Reading Tests}}},
  author = {Kelly, F. J.},
  year = {1916},
  journal = {Journal of Educational Psychology},
  volume = {7},
  number = {2},
  pages = {63--80},
  publisher = {{Warwick \& York}},
  address = {{US}},
  issn = {1939-2176(Electronic),0022-0663(Print)},
  doi = {10.1037/h0073542},
  abstract = {The tests measured the child's ability to read. Speed and accuracy of comprehension were considered. 48 exercises comprising the three tests were administered on 60 children from different cities and three different grades. An increase in the score by any number of points on the interval scale represented improvement in reading ability. The results indicated that (a) certain children were being promoted from grade to grade without perceptible gains in reading ability (b) wide variations occurred among members of a group taught by a single teacher (c) reading ability possessed by the median child in any grade was superior to the ability possessed by one-third of the children above and below, and (d) wide differences in children from different cities indicated varying practices in them. (PsycINFO Database Record (c) 2016 APA, all rights reserved)},
  keywords = {Childhood Development,Comprehension,Silent Reading},
  file = {/Users/igormoreno/Zotero/storage/ZF6X499U/Kelly - 1916 - The Kansas Silent Reading Tests.pdf;/Users/igormoreno/Zotero/storage/5YZJNQKM/1926-01738-001.html}
}

@article{kellym.mcginnWorkedExampleCreating2015,
  title = {A {{Worked Example}} for {{Creating Worked Examples}}},
  author = {{Kelly M. McGinn} and {Karin E. Lange} and {Julie L. Booth}},
  year = {2015},
  journal = {Mathematics Teaching in the Middle School},
  volume = {21},
  number = {1},
  eprint = {10.5951/mathteacmiddscho.21.1.0026},
  eprinttype = {jstor},
  pages = {26},
  issn = {10720839},
  doi = {10.5951/mathteacmiddscho.21.1.0026},
  urldate = {2018-11-30},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/VTHQAVDQ/Kelly M. McGinn et al - 2015 - A Worked Example for Creating Worked Examples.pdf}
}

@article{kennedyExplorationStudentReasoning,
  title = {An {{Exploration}} of {{Student Reasoning}} about {{Undergraduate Computer Science Concepts}}: {{An Active Learning Technique}} to {{Address Misconceptions}}},
  author = {Kennedy, Cazembe},
  pages = {286},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/MAHLXZQP/Kennedy - An Exploration of Student Reasoning about Undergra.pdf}
}

@article{kennedyFunctionalPearlsDrawing1996,
  title = {Functional {{Pearls}}: {{Drawing}} Trees},
  shorttitle = {Functional {{Pearls}}},
  author = {Kennedy, Andrew J.},
  year = {1996},
  month = may,
  journal = {Journal of Functional Programming},
  volume = {6},
  number = {3},
  pages = {527--534},
  issn = {0956-7968, 1469-7653},
  doi = {10.1017/S0956796800001830},
  urldate = {2021-12-30},
  abstract = {This article describes the application of functional programming techniques to a problem previously studied by imperative programmers, that of drawing general trees automatically. We first consider the nature of the problem and the ideas behind its solution (due to Radack), independent of programming language implementation. We then describe a Standard ML program which reflects the structure of the abstract solution much better than an imperative language implementation. We conclude with an informal discussion on the correctness of the implementation and some changes which improve the algorithm's worst-case time complexity.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/JDWF4R6C/Kennedy - 1996 - Functional Pearls Drawing trees.pdf}
}

@inproceedings{kennedyMisconceptionBasedPeerFeedback2020,
  title = {Misconception-{{Based Peer Feedback}}: {{A Pedagogical Technique}} for {{Reducing Misconceptions}}},
  shorttitle = {Misconception-{{Based Peer Feedback}}},
  booktitle = {Proceedings of the 2020 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Kennedy, Cazembe and Lawson, Aubrey and Feaster, Yvon and Kraemer, Eileen},
  year = {2020},
  month = jun,
  pages = {166--172},
  publisher = {{ACM}},
  address = {{Trondheim Norway}},
  doi = {10.1145/3341525.3387392},
  urldate = {2021-05-31},
  abstract = {Developing high quality pedagogical materials and techniques is a challenging but important task. We leverage prior work identifying student misconceptions and difficulties in introductory computing courses to design misconception-based feedback (MBF) to address these difficulties. In MBF, peers working in pairs use prompts to guide their discussion of a recently completed coding assignment. A human autograder group (HAG) simulates the behavior of a typical autograder program, supplying only test cases and their correct outputs, allowing us to factor out the effect of the medium (computer vs. human). Participants completed conceptual pre-tests and post-tests that asked them to explain their reasoning, and we captured screen and audio recordings of the sessions. Our mixedmethods analysis looked for statistical differences in frequency counts of misconceptions and qualitatively analyzed audio/video data and language used in pre/post-test written responses to look for explanations of these differences. Significant benefits of MBF were seen on questions that required students to comprehend differences between pass-by-value and pass-by-reference.},
  isbn = {978-1-4503-6874-2},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/WKSYFUUZ/Kennedy et al. - 2020 - Misconception-Based Peer Feedback A Pedagogical T.pdf}
}

@inproceedings{kennedyQualitativeObservationsStudent2019,
  title = {Qualitative {{Observations}} of {{Student Reasoning}}: {{Coding}} in the {{Wild}}},
  shorttitle = {Qualitative {{Observations}} of {{Student Reasoning}}},
  booktitle = {Proceedings of the 2019 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Kennedy, Cazembe and Kraemer, Eileen T.},
  year = {2019},
  month = jul,
  pages = {224--230},
  publisher = {{ACM}},
  address = {{Aberdeen Scotland Uk}},
  doi = {10.1145/3304221.3319751},
  urldate = {2023-03-17},
  isbn = {978-1-4503-6895-7},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/3DS4EUMI/Kennedy and Kraemer - 2019 - Qualitative Observations of Student Reasoning Cod.pdf}
}

@inproceedings{kennedyWhatAreThey2018,
  title = {What {{Are They Thinking}}?: {{Eliciting Student Reasoning About Troublesome Concepts}} in {{Introductory Computer Science}}},
  shorttitle = {What {{Are They Thinking}}?},
  booktitle = {Proceedings of the 18th {{Koli Calling International Conference}} on {{Computing Education Research}}},
  author = {Kennedy, Cazembe and Kraemer, Eileen T.},
  year = {2018},
  month = nov,
  pages = {1--10},
  publisher = {{ACM}},
  address = {{Koli Finland}},
  doi = {10.1145/3279720.3279728},
  urldate = {2021-06-01},
  abstract = {Understanding student conceptions and identifying student misconceptions is an important precursor to developing high quality pedagogical materials and approaches. We conducted a pencil-andpaper survey consisting of a demographic questionnaire and 21 content-based questions with 106 students at the start of a second semester course for CS majors (i.e., CS2) at a large public U.S. university with a focus on engineering and science. We then selected the questions that appeared to be most problematic for students and several closely related questions and analyzed the student reasoning for each question and across questions with similar concepts. We found that students exhibited misconceptions related to pass by value versus pass by reference semantics, ``false sharing'' of variables of the same name in different scopes, and believing that global variables may not be accessed from the main function and/or that a global variable may be modified via a local variable of the same name (i.e., in the presence of variable shadowing). Potential explanations for these misconceptions include fragile knowledge, lack of attention to detail, over-attention to newly acquired knowledge, information foraging (abductive reasoning) in the presence of misleading contextual clues, and lack of exposure to the use of global variables beyond the specification of constants.},
  isbn = {978-1-4503-6535-2},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/XRAZFPCX/Kennedy e Kraemer - 2018 - What Are They Thinking Eliciting Student Reasoni.pdf}
}

@article{keoghConceptCartoonsTeaching1999,
  title = {Concept Cartoons, Teaching and Learning in Science: An Evaluation},
  shorttitle = {Concept Cartoons, Teaching and Learning in Science},
  author = {Keogh, Brenda and Naylor, Stuart},
  year = {1999},
  month = apr,
  journal = {International Journal of Science Education},
  volume = {21},
  number = {4},
  pages = {431--446},
  publisher = {{Routledge}},
  issn = {0950-0693},
  doi = {10.1080/095006999290642},
  urldate = {2021-01-15},
  abstract = {Concept cartoons were created in an attempt to develop an innovative teaching and learning strategy which took account of constructivist views on learning in science. The nature and development of concept cartoons is described. The article reports the results of an evaluation of the use of concept cartoons in a range of teaching situations. Data sources were teachers, student teachers and pupils across the primary and secondary age ranges. The data indicate that the response of teachers and learners to the concept cartoons was generally highly positive. Suggestions are put forward for possible mechanisms by which the concept cartoons might be effective.},
  annotation = {00518},
  file = {/Users/igormoreno/Zotero/storage/8U3TRY42/Keogh and Naylor - 1999 - Concept cartoons, teaching and learning in science.pdf;/Users/igormoreno/Zotero/storage/S6WZNU2F/095006999290642.html}
}

@article{keppensConceptMapAssessment2008,
  title = {Concept Map Assessment for Teaching Computer Programming},
  author = {Keppens, Jeroen and Hay, David},
  year = {2008},
  month = mar,
  journal = {Computer Science Education},
  volume = {18},
  number = {1},
  pages = {31--42},
  issn = {0899-3408, 1744-5175},
  doi = {10.1080/08993400701864880},
  urldate = {2019-09-27},
  langid = {english},
  keywords = {To Read},
  file = {/Users/igormoreno/Zotero/storage/BDNGND23/Keppens and Hay - 2008 - Concept map assessment for teaching computer programming.pdf}
}

@article{kernighanPICLanguageTypesetting1981,
  title = {{{PIC--a}} Language for Typesetting Graphics},
  author = {Kernighan, Brian W.},
  year = {1981},
  month = apr,
  journal = {ACM SIGPLAN Notices},
  volume = {16},
  number = {6},
  pages = {92--98},
  issn = {0362-1340},
  doi = {10.1145/872730.806459},
  urldate = {2022-03-09},
  abstract = {PIC is a language for specifying pictures so that they can be typeset as an integral part of a document preparation system. The basic objects in PIC are boxes, lines, arrows, circles, ellipses, arcs and splines, which may be placed anywhere and labeled with arbitrary text. Most of the effort in designing PIC has gone into making it possible to specify the sizes and positions of objects with minimal use of absolute coordinates. This paper describes PIC, with primary emphasis on those aspects of the language that make it easy to use.},
  file = {/Users/igormoreno/Zotero/storage/U64DAYC5/Kernighan - 1981 - PIC&#x2014;a language for typesetting graphics.pdf}
}

@article{kesslerLearningFlowControl1986,
  title = {Learning {{Flow}} of {{Control}}: {{Recursive}} and {{Iterative Procedures}}},
  shorttitle = {Learning {{Flow}} of {{Control}}},
  author = {Kessler, Claudius M. and Anderson, John R.},
  year = {1986},
  month = jun,
  journal = {Human\textendash Computer Interaction},
  volume = {2},
  number = {2},
  pages = {135--166},
  publisher = {{Taylor \& Francis}},
  issn = {0737-0024},
  doi = {10.1207/s15327051hci0202_2},
  urldate = {2020-10-04},
  abstract = {Two experiments were performed to study students' ability to write recursive and iterative programs and transfer between these two skills. Subjects wrote functions to accumulate instances into a list. Problems varied in terms of whether they were recursive or iterative, whether they operated on lists or numbers, whether they accumulated results in forward or backward manner, whether they accumulated on success or failure, and whether they simply skipped or ejected on failure to accumulate. Subjects had real difficulty only with the dimensions concerned with flow of control, namely, recursive versus iterative, and skip versus eject. We found positive transfer from writing iterative functions to writing recursive functions, but not vice versa. A subsequent protocol study revealed subjects had such a poor mental model of recursion that they developed poor learning strategies which hindered their understanding of iteration. It is argued that having an adequate model of the functionality of programming is prerequisite to learning to program, and that it is sensible pedagogical practice to base understanding of recursive flow of control on understanding iterative flow of control.},
  annotation = {00116},
  file = {/Users/igormoreno/Zotero/storage/65P76I96/Kessler and Anderson - 1986 - Learning Flow of Control Recursive and Iterative .pdf;/Users/igormoreno/Zotero/storage/F65P85TW/s15327051hci0202_2.html}
}

@phdthesis{keuningAutomatedFeedbackLearning2020,
  title = {Automated Feedback for Learning Code Refactoring},
  author = {Keuning, Hieke},
  year = {2020},
  isbn = {9789464161274},
  langid = {english},
  annotation = {00001  OCLC: 1200493806},
  file = {/Users/igormoreno/Zotero/storage/4HKHV7MU/Keuning - 2020 - Automated feedback for learning code refactoring.pdf}
}

@inproceedings{keuningCodeQualityIssues2017,
  title = {Code {{Quality Issues}} in {{Student Programs}}},
  booktitle = {Proceedings of the 2017 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Keuning, Hieke and Heeren, Bastiaan and Jeuring, Johan},
  year = {2017},
  month = jun,
  series = {{{ITiCSE}} '17},
  pages = {110--115},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3059009.3059061},
  urldate = {2023-04-25},
  abstract = {Because low quality code can cause serious problems in software systems, students learning to program should pay attention to code quality early. Although many studies have investigated mistakes that students make during programming, we do not know much about the quality of their code. This study examines the presence of quality issues related to program flow, choice of programming constructs and functions, clarity of expressions, decomposition and modularization in a large set of student Java programs. We investigated which issues occur most frequently, if students are able to solve these issues over time and if the use of code analysis tools has an effect on issue occurrence. We found that students hardly fix issues, in particular issues related to modularization, and that the use of tooling does not have much effect on the occurrence of issues.},
  isbn = {978-1-4503-4704-4},
  keywords = {code quality,programming education},
  file = {/Users/igormoreno/Zotero/storage/AJZG29DP/Igor-Keuning et al. - 2017 - Code Quality Issues in Student Programs copy.pdf}
}

@inproceedings{keuningHowTeachersWould2019,
  title = {How {{Teachers Would Help Students}} to {{Improve Their Code}}},
  booktitle = {Proceedings of the 2019 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Keuning, Hieke and Heeren, Bastiaan and Jeuring, Johan},
  year = {2019},
  series = {{{ITiCSE}} '19},
  pages = {119--125},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3304221.3319780},
  urldate = {2019-07-12},
  abstract = {Code quality has been receiving less attention than program correctness in both the practice of and research into programming education. Writing poor quality code might be a sign of carelessness, or not fully understanding programming concepts and language constructs. Teachers play an important role in addressing quality issues, and encouraging students to write better code as early as possible.  In this paper we explore to what extent teachers address code quality in their teaching, which code quality issues they observe and how they would help novices to improve their code. We presented student code of low quality to 30 experienced teachers and asked them which hints they would give and how the student should improve the code step by step. We compare these hints to the output of professional code quality tools.  Although most teachers gave similar hints on reducing the algorithmic complexity and removing clutter, they gave varying subsets of hints on other topics. We found a large variety in how they would solve issues in code. We noticed that professional code quality tools do not point out the algorithmic complexity topics that teachers mention. Finally, we give some general guidelines on how to approach code improvement.},
  isbn = {978-1-4503-6301-3},
  keywords = {code quality,programming education,refactoring},
  annotation = {00003},
  file = {/Users/igormoreno/Zotero/storage/D8N5SMFK/Keuning et al. - 2019 - How Teachers Would Help Students to Improve Their .pdf}
}

@article{keuningSystematicLiteratureReview2019,
  title = {A {{Systematic Literature Review}} of {{Automated Feedback Generation}} for {{Programming Exercises}}},
  author = {Keuning, Hieke and Jeuring, Johan and Heeren, Bastiaan},
  year = {2019},
  month = jan,
  journal = {ACM Transactions on Computing Education},
  volume = {19},
  number = {1},
  pages = {1--43},
  issn = {1946-6226},
  doi = {10.1145/3231711},
  urldate = {2021-08-19},
  abstract = {Formative feedback, aimed at helping students to improve their work, is an important factor in learning. Many tools that offer programming exercises provide automated feedback on student solutions. We have performed a systematic literature review to find out what kind of feedback is provided, which techniques are used to generate the feedback, how adaptable the feedback is, and how these tools are evaluated. We have designed a labelling to classify the tools, and use Narciss' feedback content categories to classify feedback messages. We report on the results of coding a total of 101 tools. We have found that feedback mostly focuses on identifying mistakes and less on fixing problems and taking a next step. Furthermore, teachers cannot easily adapt tools to their own needs. However, the diversity of feedback types has increased over the past decades and new techniques are being applied to generate feedback that is increasingly helpful for students.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/M2VE6LCJ/Keuning et al. - 2019 - A Systematic Literature Review of Automated Feedba.pdf}
}

@inproceedings{keuningSystematicReviewAutomated2016,
  title = {Towards a {{Systematic Review}} of {{Automated Feedback Generation}} for {{Programming Exercises}}},
  booktitle = {Proceedings of the 2016 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}} - {{ITiCSE}} '16},
  author = {Keuning, Hieke and Jeuring, Johan and Heeren, Bastiaan},
  year = {2016},
  pages = {41--46},
  publisher = {{ACM Press}},
  address = {{Arequipa, Peru}},
  doi = {10.1145/2899415.2899422},
  urldate = {2020-12-04},
  abstract = {Formative feedback, aimed at helping students to improve their work, is an important factor in learning. Many tools that offer programming exercises provide automated feedback on student solutions. We are performing a systematic literature review to find out what kind of feedback is provided, which techniques are used to generate the feedback, how adaptable the feedback is, and how these tools are evaluated. We have designed a labelling to classify the tools, and use Narciss' feedback content categories to classify feedback messages. We report on the results of the first iteration of our search in which we coded 69 tools. We have found that tools do not often give feedback on fixing problems and taking a next step, and that teachers cannot easily adapt tools to their own needs.},
  isbn = {978-1-4503-4231-5},
  langid = {english},
  annotation = {00091},
  file = {/Users/igormoreno/Zotero/storage/HYNEVCQG/Keuning et al. - 2016 - Towards a Systematic Review of Automated Feedback .pdf}
}

@inproceedings{keuningTutoringSystemLearn2021,
  title = {A {{Tutoring System}} to {{Learn Code Refactoring}}},
  booktitle = {Proceedings of the 52nd {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Keuning, Hieke and Heeren, Bastiaan and Jeuring, Johan},
  year = {2021},
  month = mar,
  pages = {562--568},
  publisher = {{ACM}},
  address = {{Virtual Event USA}},
  doi = {10.1145/3408877.3432526},
  urldate = {2021-08-18},
  abstract = {In the last few decades, numerous tutoring systems and assessment tools have been developed to support students with learning programming, giving hints on correcting errors, showing which test cases do not succeed, and grading their overall solutions. The focus has been less on helping students write code with good style and quality. There are several professional tools that can help, but they are not targeted at novice programmers.},
  isbn = {978-1-4503-8062-1},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/NSA2EBEE/Keuning et al. - 2021 - A Tutoring System to Learn Code Refactoring.pdf}
}

@inproceedings{khaleelGamificationbasedLearningFramework2017,
  title = {Gamification-Based Learning Framework for a Programming Course},
  booktitle = {2017 6th {{International Conference}} on {{Electrical Engineering}} and {{Informatics}} ({{ICEEI}})},
  author = {Khaleel, Firas Layth and Ashaari, Noraidah Sahari and Wook, Tengku Siti Meriam Tengku and Ismail, Amirah},
  year = {2017},
  month = nov,
  pages = {1--6},
  issn = {2155-6830},
  doi = {10.1109/ICEEI.2017.8312377},
  abstract = {Students occasionally find it difficult to learn new programming languages. Previous work showed that students have experienced ineffective learning, lack of interest towards this course and lack of motivation. The rationale for this is that in previous studies, some researchers have mentioned the use of game elements but none have mentioned a gamification framework that integrates the requirements for learning programming language subjects. Therefore, this study proposed gamification framework that consists of game elements and programming learning requirements. This framework is verified by lecturers and students. The findings shown, the mean score of each combination of programming learning requirements and game elements is more than 4.00.},
  keywords = {computer aided instruction,computer science education,Computers,Education,educational courses,game elements,Game elements,Game Mechanic,Games,Gamification,gamification-based learning framework,Java,Motivation,programming course,Programming Language,programming language subject learning,programming languages,programming learning requirements,Programming profession,serious games (computing)},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/2LWZBYQG/Khaleel et al. - 2017 - Gamification-based learning framework for a progra.pdf;/Users/igormoreno/Zotero/storage/CFUT2H5G/8312377.html}
}

@inproceedings{khalifeThresholdIntroductionProgramming2006,
  title = {Threshold for the Introduction of Programming: Providing Learners with a Simple Computer Model},
  shorttitle = {Threshold for the Introduction of Programming},
  booktitle = {28th {{International Conference}} on {{Information Technology Interfaces}}, 2006.},
  author = {Khalife, J.T.},
  year = {2006},
  pages = {71--76},
  publisher = {{IEEE}},
  address = {{Cavtat/Dubrovnik}},
  doi = {10.1109/ITI.2006.1708454},
  urldate = {2020-06-22},
  isbn = {978-953-7138-05-9},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/NXJI5PHZ/Khalife - 2006 - Threshold for the introduction of programming pro.pdf}
}

@inproceedings{khanData2UScalableReal2016,
  title = {{{Data2U}}: Scalable Real Time Student Feedback in Active Learning Environments},
  shorttitle = {{{Data2U}}},
  booktitle = {Proceedings of the {{Sixth International Conference}} on {{Learning Analytics}} \& {{Knowledge}}},
  author = {Khan, Imran and Pardo, Abelardo},
  year = {2016},
  month = apr,
  pages = {249--253},
  publisher = {{ACM}},
  doi = {10.1145/2883851.2883911},
  urldate = {2019-09-25},
  isbn = {978-1-4503-4190-5},
  file = {/Users/igormoreno/Zotero/storage/DM6TFN3A/Khan and Pardo - 2016 - Data2U.pdf;/Users/igormoreno/Zotero/storage/2Z3CWCMZ/citation.html}
}

@article{kifetewGeneratingValidGrammarbased2017,
  title = {Generating Valid Grammar-Based Test Inputs by Means of Genetic Programming and Annotated Grammars},
  author = {Kifetew, Fitsum Meshesha and Tiella, Roberto and Tonella, Paolo},
  year = {2017},
  journal = {Empirical Software Engineering},
  volume = {22},
  number = {2},
  pages = {928--961},
  publisher = {{Springer}},
  annotation = {00018},
  file = {/Users/igormoreno/Zotero/storage/FLYFRCK6/Kifetew et al. - 2017 - Generating valid grammar-based test inputs by mean.pdf}
}

@article{kigerThematicAnalysisQualitative2020,
  title = {Thematic Analysis of Qualitative Data: {{AMEE Guide No}}. 131},
  shorttitle = {Thematic Analysis of Qualitative Data},
  author = {Kiger, Michelle E. and Varpio, Lara},
  year = {2020},
  month = aug,
  journal = {Medical Teacher},
  volume = {42},
  number = {8},
  pages = {846--854},
  issn = {0142-159X, 1466-187X},
  doi = {10.1080/0142159X.2020.1755030},
  urldate = {2023-03-28},
  abstract = {Thematic analysis is a widely used, yet often misunderstood, method of qualitative data analysis. It is a useful and accessible tool for qualitative researchers, but confusion regarding the method's philosophical underpinnings and imprecision in how it has been described have complicated its use and acceptance among researchers. In this Guide, we outline what thematic analysis is, positioning it in relation to other methods of qualitative analysis, and describe when it is appropriate to use the method under a variety of epistemological frameworks. We also provide a detailed definition of a theme, as this term is often misapplied. Next, we describe the most commonly used six-step framework for conducting thematic analysis, illustrating each step using examples from our own research. Finally, we discuss advantages and disadvantages of this method and alert researchers to pitfalls to avoid when using thematic analysis. We aim to highlight thematic analysis as a powerful and flexible method of qualitative analysis and to empower researchers at all levels of experience to conduct thematic analysis in rigorous and thoughtful way.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/UZLWXS8L/Kiger and Varpio - 2020 - Thematic analysis of qualitative data AMEE Guide .pdf}
}

@inproceedings{kimb.bruceWhyStructuralRecursion2005,
  title = {Why {{Structural Recursion Should Be Taught Before Arrays}} in {{CS}} 1},
  booktitle = {{{SIGCSE}}},
  author = {{Kim B. Bruce} and {Andrea Danyluk} and {Thomas Murtagh}},
  year = {2005},
  month = feb,
  address = {{St. Louis, Missouri, USA}},
  abstract = {The approach to teaching recursion in introductory programming courses has changed little during the transition from procedural to object-oriented languages. It is still common to present recursion late in the course and to focus on traditional, procedural examples such as calculating factorials or solving the Towers of Hanoi puzzle. In this paper, we propose that the shift to object-oriented programming techniques calls for a significant shift in our approach to teaching recursion. First, we argue that in the context of object-oriented programming students should be introduced to examples of simple recursive structures such as linked lists and methods that process them, before being introduced to traditional procedural examples. Second, we believe that this material should be presented before students are introduced to structures such as arrays. In our experience, the early presentation of recursive structures provides the opportunity to reinforce the fundamentals of defining and using classes and better prepares students to appreciate the reasons to use classes to encapsulate access to other data structures when they are presented.},
  file = {/Users/igormoreno/Zotero/storage/GHN6LKQL/Kim B. Bruce et al - 2005 - Why Structural Recursion Should Be Taught Before Arrays in CS 1.pdf}
}

@phdthesis{kimLearnersourcingImprovingLearning2015,
  type = {Thesis},
  title = {Learnersourcing : Improving Learning with Collective Learner Activity},
  shorttitle = {Learnersourcing},
  author = {Kim, Juho},
  year = {2015},
  urldate = {2023-03-09},
  abstract = {Millions of learners today are watching videos on online platforms, such as Khan Academy, YouTube, Coursera, and edX, to take courses and master new skills. But existing video interfaces are not designed to support learning, with limited interactivity and lack of information about learners' engagement and content. Making these improvements requires deep semantic information about video that even state-of-the-art AI techniques cannot fully extract. I take a data-driven approach to address this challenge, using large-scale learning interaction data to dynamically improve video content and interfaces. Specifically, this thesis introduces learnersourcing, a form of crowdsourcing in which learners collectively contribute novel content for future learners while engaging in a meaningful learning experience themselves. I present learnersourcing applications designed for massive open online course videos and how-to tutorial videos, where learners' collective activities 1) highlight points of confusion or importance in a video, 2) extract a solution structure from a tutorial, and 3) improve the navigation experience for future learners. This thesis demonstrates how learnersourcing can enable more interactive, collaborative, and data-driven learning.},
  copyright = {M.I.T. theses are protected by copyright. They may be viewed from this source for any purpose, but reproduction or distribution in any format is prohibited without written permission. See provided URL for inquiries about permission.},
  langid = {english},
  school = {Massachusetts Institute of Technology},
  file = {/Users/igormoreno/Zotero/storage/CHRG6S3M/Kim - 2015 - Learnersourcing  improving learning with collective learner activity.pdf}
}

@article{kimLearningAnalyticsSupport2018,
  title = {Learning Analytics to Support Self-Regulated Learning in Asynchronous Online Courses: {{A}} Case Study at a Women's University in {{South Korea}}},
  shorttitle = {Learning Analytics to Support Self-Regulated Learning in Asynchronous Online Courses},
  author = {Kim, Dongho and Yoon, Meehyun and Jo, Il-Hyun and Branch, Robert Maribe},
  year = {2018},
  month = dec,
  journal = {Computers \& Education},
  volume = {127},
  pages = {233--251},
  issn = {03601315},
  doi = {10.1016/j.compedu.2018.08.023},
  urldate = {2018-11-06},
  abstract = {With the recognition of the importance of self-regulated learning (SRL) in asynchronous online courses, recent research has explored how SRL strategies impact student learning in these learning environments. However, little has been done to examine different patterns of students with different SRL profiles over time, which precludes providing optimal on-going instructional support for individual students. To address the gap in research, we applied learning analytics to analyze log data from 284 undergraduate students enrolled in an asynchronous online statistics course. Specifically, we identified student SRL profiles, and examined the actual student SRL learning patterns.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/YJ3WZE6W/Kim et al - 2018 - Learning analytics to support self-regulated learning in asynchronous online.pdf}
}

@inproceedings{kimPedagogicalAnalysisOnline2017,
  title = {A {{Pedagogical Analysis}} of {{Online Coding Tutorials}}},
  booktitle = {Proceedings of the 2017 {{ACM SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  author = {Kim, Ada S. and Ko, Amy J.},
  year = {2017},
  month = mar,
  pages = {321--326},
  publisher = {{ACM}},
  address = {{Seattle Washington USA}},
  doi = {10.1145/3017680.3017728},
  urldate = {2022-10-31},
  abstract = {Online coding tutorials are increasingly popular among learners, but we still have little knowledge of their quality. To address this gap, we derived several dimensions of pedagogical effectiveness from the learning sciences and education literature and analyzed a large sample of tutorials against these dimensions. We sampled 30 popular and diverse online coding tutorials, and analyzed what and how they taught learners. We found that tutorials largely taught similar content, organized content bottom-up, and provided goal-directed practices with immediate feedback. However, few were tailored to learners' prior coding knowledge and only a few informed learners how to transfer and apply learned knowledge. Based on these results, we discuss strengths and weaknesses of online coding tutorials, opportunities for improvement, and recommend that educators point their students to educational games and interactive tutorials over other tutorial genres.},
  isbn = {978-1-4503-4698-6},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/VT8I8NZG/Kim and Ko - 2017 - A Pedagogical Analysis of Online Coding Tutorials.pdf}
}

@article{kinchinHowQualitativeApproach2000,
  title = {How a Qualitative Approach to Concept Map Analysis Can Be Used to Aid Learning by Illustrating Patterns of Conceptual Development},
  author = {Kinchin, Ian M. and Hay, David B. and Adams, Alan},
  year = {2000},
  month = jan,
  journal = {Educational Research},
  volume = {42},
  number = {1},
  pages = {43--57},
  issn = {0013-1881},
  doi = {10.1080/001318800363908},
  urldate = {2019-09-27},
  abstract = {This paper describes a qualitative approach to analysing students' concept maps. The classification highlights three major patterns which are referred to as 'spoke', 'chain' and 'net' structures. Examples are given from Year 8 science classes. The patterns are interpreted as being indicators of progressive levels of understanding. It is proposed that identification of these differences may help the classroom teacher to focus teaching for more effective learning and may be used as a basis for structuring groups in collaborative settings. This approach to analysing concept maps is of value because it suggests teaching approaches that help students integrate new knowledge and build upon their existing naive concepts. We also refer to the teacher's scheme of work and to the National Curriculum for science in order to consider their influence in the construction of understanding. These ideas have been deliberately offered for early publication to encourage debate and generate feedback. Further work is in progress to better understand how students with different conceptual structures can be most appropriately helped to achieve learning development.},
  keywords = {Collaborative Learning,Concept Mapping,Constructivism,Differentiation,Meaningful Learning,Science Education,To Read},
  file = {/Users/igormoreno/Zotero/storage/9A69AKVK/Kinchin et al - 2000 - How a qualitative approach to concept map analysis can be used to aid learning.pdf;/Users/igormoreno/Zotero/storage/72TT6PJC/001318800363908.html}
}

@article{kirschnerCognitiveLoadTheory2011,
  title = {Cognitive Load Theory and Multimedia Learning, Task Characteristics and Learning Engagement: {{The Current State}} of the {{Art}}},
  shorttitle = {Cognitive Load Theory and Multimedia Learning, Task Characteristics and Learning Engagement},
  author = {Kirschner, Femke and Kester, Liesbeth and Corbalan, Gemma},
  year = {2011},
  month = jan,
  journal = {Computers in Human Behavior},
  series = {Current {{Research Topics}} in {{Cognitive Load Theory}}},
  volume = {27},
  number = {1},
  pages = {1--4},
  issn = {0747-5632},
  doi = {10.1016/j.chb.2010.05.003},
  urldate = {2018-11-06},
  file = {/Users/igormoreno/Zotero/storage/VYH494Y7/Kirschner et al - 2011 - Cognitive load theory and multimedia learning, task characteristics and.pdf;/Users/igormoreno/Zotero/storage/MVC3PT9L/S0747563210001238.html}
}

@article{kirschnerContemporaryCognitiveLoad2011,
  title = {Contemporary Cognitive Load Theory Research: {{The}} Good, the Bad and the Ugly},
  shorttitle = {Contemporary Cognitive Load Theory Research},
  author = {Kirschner, Paul A. and Ayres, Paul and Chandler, Paul},
  year = {2011},
  month = jan,
  journal = {Computers in Human Behavior},
  series = {Current {{Research Topics}} in {{Cognitive Load Theory}}},
  volume = {27},
  number = {1},
  pages = {99--105},
  issn = {0747-5632},
  doi = {10.1016/j.chb.2010.06.025},
  urldate = {2018-11-06},
  abstract = {This paper reviews the 16 contributions of the special issue entitled Current Research in Cognitive Load Theory. Each paper is briefly summarized and some critical comments made. The overall collection is then discussed in terms of the positive contributions they make to the field of learning and instruction, and cognitive load theory in particular (the good), as well as problematical issues such as unresolved explanations and conflicting results (the bad) and the special case of measuring cognitive load (the ugly).},
  file = {/Users/igormoreno/Zotero/storage/8HTCL5TF/Kirschner et al - 2011 - Contemporary cognitive load theory research.pdf;/Users/igormoreno/Zotero/storage/YMFM6JL8/S0747563210002852.html}
}

@article{kirschnerIndividualGroupbasedLearning2009,
  title = {Individual and Group-Based Learning from Complex Cognitive Tasks: {{Effects}} on Retention and Transfer Efficiency},
  shorttitle = {Individual and Group-Based Learning from Complex Cognitive Tasks},
  author = {Kirschner, Femke and Paas, Fred and Kirschner, Paul A.},
  year = {2009},
  month = mar,
  journal = {Computers in Human Behavior},
  series = {Including the {{Special Issue}}: {{State}} of the {{Art Research}} into {{Cognitive Load Theory}}},
  volume = {25},
  number = {2},
  pages = {306--314},
  issn = {0747-5632},
  doi = {10.1016/j.chb.2008.12.008},
  urldate = {2018-11-06},
  abstract = {The effects of individual versus group learning (in triads) on efficiency of retention and transfer test performance in the domain of biology (heredity) among 70 high-school students were investigated. Applying cognitive load theory, the limitations of the working memory capacity at the individual level were considered an important reason to assign complex learning tasks to groups rather than to individuals. It was hypothesized that groups will have more processing capacity available for relating the information elements to each other and by doing so for constructing higher quality cognitive schemata than individuals if the high cognitive load imposed by complex learning tasks could be shared among group members. In contrast, it was expected that individuals who learn from carrying out the same complex tasks would need all available processing capacity for remembering the interrelated information elements, and, consequently, would not be able to allocate resources to working with them. This interaction hypothesis was confirmed by the data on efficiency of retention and transfer test performance; there was a favorable relationship between mental effort and retention test performance for the individual learners as opposed to a favorable relationship between transfer test performance and mental effort for the students who learned in groups.},
  keywords = {Cognitive load,Collaborative learning,Individual learning,Learning efficiency,Task complexity,Transfer performance},
  file = {/Users/igormoreno/Zotero/storage/KT87AWHR/Kirschner et al - 2009 - Individual and group-based learning from complex cognitive tasks.pdf;/Users/igormoreno/Zotero/storage/CZMMLELP/S0747563208002227.html}
}

@article{kirschnerSuperiorityCollaborativeLearning2011,
  title = {Superiority of Collaborative Learning with Complex Tasks: {{A}} Research Note on an Alternative Affective Explanation},
  shorttitle = {Superiority of Collaborative Learning with Complex Tasks},
  author = {Kirschner, Femke and Paas, Fred and Kirschner, Paul A.},
  year = {2011},
  month = jan,
  journal = {Computers in Human Behavior},
  series = {Current {{Research Topics}} in {{Cognitive Load Theory}}},
  volume = {27},
  number = {1},
  pages = {53--57},
  issn = {0747-5632},
  doi = {10.1016/j.chb.2010.05.012},
  urldate = {2018-11-06},
  abstract = {Kirschner, Paas, and Kirschner (2009c) used the theoretical framework of cognitive load to explain why the learning of a group of collaborating individuals was more efficient than that of individuals learning alone with high-complexity tasks but not with low-complexity tasks. The authors argued that collaboration circumvented the limitations of an individual's working memory by creating an expanded cognitive capacity and by allowing for the distribution of cognitive load among group members. Inspired by research on efficacy, this study explored an alternative affective explanation of the results. By measuring the amount of mental effort learners expected to invest in working on a learning task before actually carrying out the task, this study showed that learners who had to collaboratively solve a high-complexity problem expected to invest less mental effort than learners who had to solve the problem alone. When confronted with low-complexity tasks, the expected amount of mental effort did not differ.},
  keywords = {Cognitive load theory,Collaborative learning,Efficacy,Individual learning,Learning efficiency},
  file = {/Users/igormoreno/Zotero/storage/Q6LYG3DX/Kirschner et al - 2011 - Superiority of collaborative learning with complex tasks.pdf;/Users/igormoreno/Zotero/storage/RGL68MFP/S0747563210001494.html}
}

@article{kirshnerVisualSyntaxAlgebra1989,
  title = {The {{Visual Syntax}} of {{Algebra}}},
  author = {Kirshner, David},
  year = {1989},
  journal = {Journal for Research in Mathematics Education},
  volume = {20},
  number = {3},
  eprint = {749516},
  eprinttype = {jstor},
  pages = {274--287},
  issn = {0021-8251},
  doi = {10.2307/749516},
  urldate = {2019-07-13},
  abstract = {A structured system of visual features can be seen to parallel the propositional hierarchy of operations usually associated with the parsing of algebraic expressions. Some students (proportionately more women than men) were found to depend on these visual cues in their syntactic decision making. Others were found to have access to sound propositional rules. Possible causes and consequences of these different syntactic representation styles are discussed.},
  file = {/Users/igormoreno/Zotero/storage/WG92NQ53/Kirshner - 1989 - The Visual Syntax of Algebra.pdf}
}

@inproceedings{kiselyovBacktrackingInterleavingTerminating2005,
  title = {Backtracking, {{Interleaving}}, and {{Terminating Monad Transformers}}: ({{Functional Pearl}})},
  shorttitle = {Backtracking, {{Interleaving}}, and {{Terminating Monad Transformers}}},
  booktitle = {Proceedings of the {{Tenth ACM SIGPLAN International Conference}} on {{Functional Programming}}},
  author = {Kiselyov, Oleg and Shan, Chung-chieh and Friedman, Daniel P. and Sabry, Amr},
  year = {2005},
  series = {{{ICFP}} '05},
  pages = {192--203},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1086365.1086390},
  urldate = {2018-10-18},
  abstract = {We design and implement a library for adding backtracking computations to any Haskell monad. Inspired by logic programming, our library provides, in addition to the operations required by the MonadPlus interface, constructs for fair disjunctions, fair conjunctions, conditionals, pruning, and an expressive top-level interface. Implementing these additional constructs is easy in models of backtracking based on streams, but not known to be possible in continuation-based models. We show that all these additional constructs can be generically and monadically realized using a single primitive msplit. We present two implementations of the library: one using success and failure continuations; and the other using control operators for manipulating delimited continuations.},
  isbn = {978-1-59593-064-4},
  keywords = {continuations,control delimiters,Functional Programming,Haskell,logic programming,Prolog,prospectus,Relational Programming,streams},
  annotation = {00099},
  file = {/Users/igormoreno/Zotero/storage/NKL4FHG6/Kiselyov et al. - 2005 - Backtracking, Interleaving, and Terminating Monad .pdf}
}

@inproceedings{kiselyovPureDeclarativeConstructive2008,
  title = {Pure, Declarative, and Constructive Arithmetic Relations (Declarative Pearl)},
  booktitle = {International {{Symposium}} on {{Functional}} and {{Logic Programming}}},
  author = {Kiselyov, Oleg and Byrd, William E. and Friedman, Daniel P. and Shan, Chung-chieh},
  year = {2008},
  series = {{{FLOPS}} '08},
  pages = {64--80},
  publisher = {{Springer}},
  keywords = {Relational Programming,To Read},
  annotation = {00021},
  file = {/Users/igormoreno/Zotero/storage/HA2TMYL8/Kiselyov et al. - 2008 - Pure, Declarative, and Constructive Arithmetic Rel.pdf;/Users/igormoreno/Zotero/storage/QNV9B3UE/978-3-540-78969-7_7.html}
}

@article{kitchenhamPreliminaryGuidelinesEmpirical2002,
  title = {Preliminary Guidelines for Empirical Research in Software Engineering},
  author = {Kitchenham, B.A. and Pfleeger, S.L. and Pickard, L.M. and Jones, P.W. and Hoaglin, D.C. and El Emam, K. and Rosenberg, J.},
  year = {2002},
  month = aug,
  journal = {IEEE Transactions on Software Engineering},
  volume = {28},
  number = {8},
  pages = {721--734},
  issn = {0098-5589},
  doi = {10.1109/TSE.2002.1027796},
  urldate = {2020-10-15},
  abstract = {\DH Empirical software engineering research needs research guidelines to improve the research and reporting processes. We propose a preliminary set of research guidelines aimed at stimulating discussion among software researchers. They are based on a review of research guidelines developed for medical researchers and on our own experience in doing and reviewing software engineering research. The guidelines are intended to assist researchers, reviewers, and meta-analysts in designing, conducting, and evaluating empirical studies. Editorial boards of software engineering journals may wish to use our recommendations as a basis for developing guidelines for reviewers and for framing policies for dealing with the design, data collection, and analysis and reporting of empirical studies.},
  langid = {english},
  annotation = {01690},
  file = {/Users/igormoreno/Zotero/storage/ALE5EKEG/Kitchenham et al. - 2002 - Preliminary guidelines for empirical research in s.pdf}
}

@article{klahrCognitiveObjectivesLOGO1988,
  title = {Cognitive Objectives in a {{LOGO}} Debugging Curriculum: {{Instruction}}, Learning, and Transfer},
  shorttitle = {Cognitive Objectives in a {{LOGO}} Debugging Curriculum},
  author = {Klahr, David and Carver, Sharon McCoy},
  year = {1988},
  month = jul,
  journal = {Cognitive Psychology},
  volume = {20},
  number = {3},
  pages = {362--404},
  issn = {0010-0285},
  doi = {10.1016/0010-0285(88)90004-7},
  urldate = {2018-12-02},
  abstract = {In this paper we report two studies in which elementary-school children learned a complex computer-programming skill\textemdash how to debug LOGO graphics and list-processing programs\textemdash and then transferred the high-level goal structure of that skill to nonprogramming domains. Instruction, its assessment, and the transfer tasks were all derived from an explicit model of the debugging process, cast as a computer simulation. Debugging skills were acquired over a period of several months as part of a LOGO programming course; the transfer tasks involved correcting written instructions in a variety of domains, including arranging items, allocating resources, and following map routes. Students showed clear improvement in the transfer tasks following instruction in debugging programs, and in the second study, amount of transfer was correlated with the degree of debugging skill acquisition. Our results contrast with many earlier studies that found little transfer of problem-solving skills in general and of high-level programming skills in particular. We suggest that the key to the success of our procedure is the fact that we used an extremely precise computer simulation model of the skills required to debug LOGO graphics and list-processing programs as a concrete manifestation of the notion of ``cognitive objectives''.},
  file = {/Users/igormoreno/Zotero/storage/XNSDQVFP/Klahr and Carver - 1988 - Cognitive objectives in a LOGO debugging curriculum.pdf;/Users/igormoreno/Zotero/storage/8PQ83E7Z/0010028588900047.html}
}

@article{klahrFormalAssessmentProblemsolving1981,
  title = {Formal Assessment of Problem-Solving and Planning Processes in Preschool Children},
  author = {Klahr, David and Robinson, Mitchell},
  year = {1981},
  month = jan,
  journal = {Cognitive Psychology},
  volume = {13},
  number = {1},
  pages = {113--148},
  issn = {0010-0285},
  doi = {10.1016/0010-0285(81)90006-2},
  urldate = {2018-12-02},
  abstract = {While much is known about adult problem-solving, the materials, analyses, and theoretical issues from the adult literature rarely make contact with the tasks typically used to investigate children's thinking. This paper examines the behavior of 4-, 5-, and 6-year-old children attempting to solve a novel variant of the Tower of Hanoi task. Problems varied in difficulty (one to seven moves for the minimum path solution) and in goal type: tower (all objects on one peg) or flat (all pegs occupied). For each problem, children gave verbal statements of their complete solution plan. The Plan Analysis examined performance as a function of goal type and age. Better performance was observed for tower ending problems, and among older children. The Error Analysis revealed that specific error propensities were related to both age and goal type. The Strategic Analysis compared the first move profiles of 6-year-olds to those of several plausible move selection models, and a high degree of correspondence was obtained between specific models and individual children. Young children appear to have rudimentary forms of many of the problem-solving processes previously identified in adults, but they may differ in encoding and representational processes.},
  file = {/Users/igormoreno/Zotero/storage/SM84LJ59/Klahr and Robinson - 1981 - Formal assessment of problem-solving and planning processes in preschool.pdf;/Users/igormoreno/Zotero/storage/EWW2PZIW/0010028581900062.html}
}

@inproceedings{kleinRunYourResearch2012,
  title = {Run Your Research: On the Effectiveness of Lightweight Mechanization},
  shorttitle = {Run Your Research},
  booktitle = {Proceedings of the 39th Annual {{ACM SIGPLAN-SIGACT}} Symposium on {{Principles}} of Programming Languages},
  author = {Klein, Casey and Clements, John and Dimoulas, Christos and Eastlund, Carl and Felleisen, Matthias and Flatt, Matthew and McCarthy, Jay A. and Rafkind, Jon and {Tobin-Hochstadt}, Sam and Findler, Robert Bruce},
  year = {2012},
  month = jan,
  series = {{{POPL}} '12},
  pages = {285--296},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2103656.2103691},
  urldate = {2020-11-12},
  abstract = {Formal models serve in many roles in the programming language community. In its primary role, a model communicates the idea of a language design; the architecture of a language tool; or the essence of a program analysis. No matter which role it plays, however, a faulty model doesn't serve its purpose. One way to eliminate flaws from a model is to write it down in a mechanized formal language. It is then possible to state theorems about the model, to prove them, and to check the proofs. Over the past nine years, PLT has developed and explored a lightweight version of this approach, dubbed Redex. In a nutshell, Redex is a domain-specific language for semantic models that is embedded in the Racket programming language. The effort of creating a model in Redex is often no more burdensome than typesetting it with LaTeX; the difference is that Redex comes with tools for the semantics engineering life cycle.},
  isbn = {978-1-4503-1083-3},
  keywords = {lightweight semantics engineering},
  annotation = {00105},
  file = {/Users/igormoreno/Zotero/storage/ZIJSQGYK/Klein et al. - 2012 - Run your research on the effectiveness of lightwe.pdf}
}

@techreport{knoglerLernenMitConcept2018,
  type = {{Review of a meta analysis}},
  title = {{Lernen mit Concept Maps: Eine Bilanz nach 42 Jahren Forschung | Clearing House Unterricht}},
  shorttitle = {{Lernen mit Concept Maps}},
  author = {Knogler, M and Wiesbeck, A. B. and {CHU Research Group}},
  year = {2018},
  month = jul,
  number = {19},
  institution = {{TUM}},
  urldate = {2021-03-17},
  abstract = {Wie kann man tiefergehendes Verst\"andnis von Inhalten bei Lernenden gezielt f\"ordern? Eine vielversprechende M\"oglichkeit sind sogenannte Concept Maps. Die Lehr-Lernforschung untersucht seit den 1970er Jahren, inwiefern die aktive Besch\"aftigung mit Lerninhalten beim Erstellen von eigenen Concept Maps oder Arbeiten mit vorgefertigten Concept Maps Wissenserwerb und Verst\"andnis von Inhalten f\"ordert. Die Metaanalyse \guillemotright Studying and Constructing Concept Maps: a meta-analysis\guillemotleft{} von Schroeder, Nesbit, Anguino und Adesope (2017) fasst diese Befunde zusammen und zeigt, wie effektiv der Einsatz von Concept Maps im Unterricht im Vergleich zu anderen Methoden ist.},
  langid = {ngerman},
  file = {/Users/igormoreno/Zotero/storage/YD8YAYPJ/Knogler et al. - 2018 - Lernen mit Concept Maps Eine Bilanz nach 42 Jahre.pdf;/Users/igormoreno/Zotero/storage/9BN5S52B/lernen-mit-concept-maps-eine-bilanz-nach-42-jahren-forschung.html}
}

@book{knudsenJava2DGraphics1999,
  title = {Java {{2D Graphics}}},
  author = {Knudsen, Jonathan},
  year = {1999},
  publisher = {{O'Reilly}},
  isbn = {978-1-56592-484-0},
  file = {/Users/igormoreno/Zotero/storage/L38VNI7I/books.html}
}

@article{koedingerAbstractPlanningPerceptual1990,
  title = {Abstract Planning and Perceptual Chunks: {{Elements}} of Expertise in Geometry},
  shorttitle = {Abstract Planning and Perceptual Chunks},
  author = {Koedinger, Kenneth R. and Anderson, John R.},
  year = {1990},
  month = oct,
  journal = {Cognitive Science},
  volume = {14},
  number = {4},
  pages = {511--550},
  issn = {0364-0213},
  doi = {10.1016/0364-0213(90)90008-K},
  urldate = {2018-12-02},
  abstract = {We present a new model of skilled performance in geometry proof problem solving called the Diagram Configuration model (DC). While previous models plan proofs in a step-by-step fashion, we observed that experts plan at a more abstract level: They focus on the key steps and skip the less important ones. DC models this abstract planning behavior by parsing geometry problem diagrams into perceptual chunks, called diagram configurations, which cue relevant schematic knowledge. We provide verbal protocol evidence that DC's schemas correspond with the step-skipping inferences experts make in their initial planning. We compare DC with other models of geometry expertise and then, in the final section, we discuss more general implications of our research. DC's reasoning has important similarities with Larkin's (1988) display-based reasoning approach and Johnson-Laird's (1983) mental model approach. DC's perceptually based schemas are a step towards a unified explanation of (1) experts' superior problem-solving effectiveness, (2) experts' superior problem-state memory, and (3) experts' ability, in certain domains, to solve relatively simple problems by pure forward inferencing. We also argue that the particular and efficient knowledge organization of DC challenges current theories of skill acquisition as it presents an end-state of learning that is difficult to explain within such theories. Finally, we discuss the implications of DC for geometry instruction.},
  file = {/Users/igormoreno/Zotero/storage/RL64KG2Y/Koedinger and Anderson - 1990 - Abstract planning and perceptual chunks Elements .pdf;/Users/igormoreno/Zotero/storage/QRQRRGN8/036402139090008K.html}
}

@book{kohlasInformatikGymnasiumEntwurf2013,
  title = {{informatik@gymnasium: ein Entwurf f\"ur die Schweiz}},
  shorttitle = {{informatikgymnasium}},
  editor = {Kohlas, J{\"u}rg},
  year = {2013},
  publisher = {{Verl. Neue Z\"urcher Zeitung}},
  address = {{Z\"urich}},
  isbn = {978-3-03823-822-5},
  langid = {ngerman},
  file = {/Users/igormoreno/Zotero/storage/3U59C8UH/Kohlas - 2013 - informatik@gymnasium ein Entwurf für die Schweiz.pdf}
}

@incollection{kohnTeachingProgrammingAlgorithmic2018,
  title = {Teaching {{Programming}} and {{Algorithmic Complexity}} with {{Tangible Machines}}},
  booktitle = {Informatics in {{Schools}}. {{Fundamentals}} of {{Computer Science}} and {{Software Engineering}}},
  author = {Kohn, Tobias and Komm, Dennis},
  editor = {Pozdniakov, Sergei N. and Dagien{\.e}, Valentina},
  year = {2018},
  volume = {11169},
  pages = {68--83},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-030-02750-6_6},
  urldate = {2020-06-22},
  abstract = {Understanding the notional machine that conceptually executes a program is a crucial step towards mastery of computer programming. In order to help students build a mental model of the notional machine, visible and tangible computing agents might be of great value, as they provide the student with a conceptual model of who or what is doing the actual work. In addition to programming, the concept of a notional machine is equally important when teaching algorithmic design, complexity theory, or computational thinking. We therefore propose to use a common computing agent as notional machine to not only introduce programming, but also discuss algorithms and their complexity.},
  isbn = {978-3-030-02749-0 978-3-030-02750-6},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/HLBQHRUS/Kohn and Komm - 2018 - Teaching Programming and Algorithmic Complexity with Tangible Machines.pdf}
}

@phdthesis{kohnTeachingPythonProgramming2017,
  title = {Teaching {{Python Programming}} to {{Novices}}: {{Addressing Misconceptions}} and {{Creating}} a {{Development Environment}}},
  shorttitle = {Teaching {{Python Programming}} to {{Novices}}},
  author = {Kohn, Tobias},
  year = {2017},
  pages = {165 p.},
  doi = {10.3929/ETHZ-A-010871088},
  urldate = {2023-05-09},
  collaborator = {Hromkovi{\v c}, Juraj and Manaris, Bill},
  copyright = {http://rightsstatements.org/page/InC-NC/1.0/, info:eu-repo/semantics/openAccess},
  langid = {english},
  school = {ETH Zurich},
  keywords = {COMPUTER SCIENCE EDUCATION AND TRAINING,{Data processing, computer science},info:eu-repo/classification/ddc/004,INFORMATIKAUSBILDUNG,PROGRAMMIERUMGEBUNGEN (SOFTWARE ENGINEERING),PROGRAMMING ENVIRONMENTS (SOFTWARE ENGINEERING),PYTHON (PROGRAMMIERSPRACHEN),PYTHON (PROGRAMMING LANGUAGES),SPECIAL PROGRAMMING METHODS,SPEZIELLE PROGRAMMIERMETHODEN},
  file = {/Users/igormoreno/Zotero/storage/BUGJ6YN3/Kohn - 2017 - Teaching Python Programming to Novices Addressing.pdf}
}

@inproceedings{kohnTellMeWhat2020,
  title = {Tell {{Me What}}'s {{Wrong}}: {{A Python IDE}} with {{Error Messages}}},
  shorttitle = {Tell {{Me What}}'s {{Wrong}}},
  booktitle = {Proceedings of the 51st {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Kohn, Tobias and Manaris, Bill},
  year = {2020},
  month = feb,
  pages = {1054--1060},
  publisher = {{ACM}},
  address = {{Portland OR USA}},
  doi = {10.1145/3328778.3366920},
  urldate = {2020-06-22},
  abstract = {Development environments play a crucial role for novice programmers. Not only do they act as interface to type in and execute programs, but a programming environment is also responsible for reporting errors, managing in- and output when the program is running, or offering the programmer access to the underlying notional machine. In recent years several new educational programming environments for Python have been presented. However, the important issue of reporting errors has rarely been addressed and evaluations often hint that students main issue is the poor quality of Python's error messages. We have therefore written an educational Python environment with enhanced error messages. This paper presents the design and rationale of its three primary features: modifications to Python, enhanced error messages, and the visual debugger.},
  isbn = {978-1-4503-6793-6},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/DMWLUUEH/Kohn and Manaris - 2020 - Tell Me What's Wrong A Python IDE with Error Mess.pdf}
}

@inproceedings{kohnVariableEvaluationExploration2017,
  title = {Variable {{Evaluation}}: An {{Exploration}} of {{Novice Programmers}}' {{Understanding}} and {{Common Misconceptions}}},
  shorttitle = {Variable {{Evaluation}}},
  booktitle = {Proceedings of the 2017 {{ACM SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  author = {Kohn, Tobias},
  year = {2017},
  month = mar,
  pages = {345--350},
  publisher = {{ACM}},
  address = {{Seattle Washington USA}},
  doi = {10.1145/3017680.3017724},
  urldate = {2020-06-22},
  abstract = {For novice programmers one of the most problematic concepts is variable assignment and evaluation. Several questions emerge in the mind of the beginner, such as what does x = 7 + 4 or x = x + 1 really mean? For instance, many students initially think that such statements store the entire calculation in variable x, evaluating the result lazily when actually needed. The common increment pattern x = x + 1 is even believed to be outright impossible.},
  isbn = {978-1-4503-4698-6},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/F2YZV4UZ/Kohn - 2017 - Variable Evaluation an Exploration of Novice Prog.pdf}
}

@article{koivistoDemographicDifferencesPerceived2014,
  title = {Demographic Differences in Perceived Benefits from Gamification},
  author = {Koivisto, Jonna and Hamari, Juho},
  year = {2014},
  month = jun,
  journal = {Computers in Human Behavior},
  volume = {35},
  pages = {179--188},
  issn = {07475632},
  doi = {10.1016/j.chb.2014.03.007},
  urldate = {2023-06-27},
  abstract = {In recent years, ``gamification'' has been proposed as a solution for engaging people in individually and socially sustainable behaviors, such as exercise, sustainable consumption, and education. This paper studies demographic differences in perceived benefits from gamification in the context of exercise. On the basis of data gathered via an online survey (N = 195) from an exercise gamification service Fitocracy, we examine the effects of gender, age, and time using the service on social, hedonic, and utilitarian benefits and facilitating features of gamifying exercise. The results indicate that perceived enjoyment and usefulness of the gamification decline with use, suggesting that users might experience novelty effects from the service. The findings show that women report greater social benefits from the use of gamification. Further, ease of use of gamification is shown to decline with age. The implications of the findings are discussed.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/PP8KF6X8/Koivisto and Hamari - 2014 - Demographic differences in perceived benefits from.pdf}
}

@article{koivistoRiseMotivationalInformation2019,
  title = {The Rise of Motivational Information Systems: {{A}} Review of Gamification Research},
  shorttitle = {The Rise of Motivational Information Systems},
  author = {Koivisto, Jonna and Hamari, Juho},
  year = {2019},
  month = apr,
  journal = {International Journal of Information Management},
  volume = {45},
  pages = {191--210},
  issn = {02684012},
  doi = {10.1016/j.ijinfomgt.2018.10.013},
  urldate = {2023-06-27},
  abstract = {Today, our reality and lives are increasingly game-like, not only because games have become a pervasive part of our lives, but also because activities, systems and services are increasingly gamified. Gamification refers to designing information systems to afford similar experiences and motivations as games do, and consequently, attempting to affect user behavior. In recent years, popularity of gamification has skyrocketed and manifested in growing numbers of gamified applications, as well as a rapidly increasing amount of research. However, this vein of research has mainly advanced without an agenda, theoretical guidance or a clear picture of the field.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/NE3D2BKA/Koivisto and Hamari - 2019 - The rise of motivational information systems A re.pdf}
}

@article{kollingBlueJSystemIts2003,
  title = {The {{BlueJ System}} and Its {{Pedagogy}}},
  author = {K{\"o}lling, Michael and Quig, Bruce and Patterson, Andrew and Rosenberg, John},
  year = {2003},
  month = dec,
  journal = {Computer Science Education},
  volume = {13},
  number = {4},
  pages = {249--268},
  issn = {0899-3408, 1744-5175},
  doi = {10.1076/csed.13.4.249.17496},
  urldate = {2020-06-22},
  abstract = {Many teachers experience serious problems when teaching object-orientation to beginners or professionals. Many of these problems could be overcome or reduced through the use of more appropriate tools. In this paper, we introduce BlueJ, an integrated development environment designed for teaching object-orientation, and discuss how the use of this tool can change the approach to teaching.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/K6BM6VNB/Kölling et al - 2003 - The BlueJ System and its Pedagogy.pdf}
}

@article{kollingGreenfootProgrammingEnvironment2010,
  title = {The {{Greenfoot Programming Environment}}},
  author = {K{\"o}lling, Michael},
  year = {2010},
  month = nov,
  journal = {ACM Transactions on Computing Education},
  volume = {10},
  number = {4},
  pages = {1--21},
  issn = {1946-6226, 1946-6226},
  doi = {10.1145/1868358.1868361},
  urldate = {2020-06-22},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/BZDQL7DJ/Kölling - 2010 - The Greenfoot Programming Environment.pdf}
}

@book{kollingObjectsFirstJava2017,
  title = {Objects {{First With Java}}: {{A Practical Introduction Using BlueJ}}},
  author = {K{\"o}lling, Michael and Barnes, David},
  year = {2017},
  edition = {6th},
  publisher = {{Pearson}},
  abstract = {Objects First with Java: A Practical Introduction is an introduction to object-oriented programming for beginners. The main focus of the book is general object-oriented and programming concepts from a software engineering perspective.},
  isbn = {978-0-13-447736-7},
  file = {/Users/igormoreno/Zotero/storage/EVQ8QWPJ/Kölling e Barnes - Objects First With Java A Practical Introduction .pdf}
}

@article{kongValidatingComputationalThinking2022,
  title = {Validating a Computational Thinking Concepts Test for Primary Education Using Item Response Theory: {{An}} Analysis of Students' Responses},
  shorttitle = {Validating a Computational Thinking Concepts Test for Primary Education Using Item Response Theory},
  author = {Kong, Siu-Cheung and Lai, Ming},
  year = {2022},
  month = oct,
  journal = {Computers \& Education},
  volume = {187},
  pages = {104562},
  issn = {03601315},
  doi = {10.1016/j.compedu.2022.104562},
  urldate = {2023-03-16},
  abstract = {Although instruments for assessing students' computational thinking (CT) concepts in primary education have been developed, they have rarely been validated in terms of item response theory (IRT). We consider IRT to be a rigorous validation tool and apply it to a CT concepts test for primary education involving 13,670 students. A two-parameter logistic model was chosen over other IRT models, as it indicated an acceptable model fit and item fit. The discrimination pa\- rameters indicated that the instrument could effectively distinguish between students with various ability levels. Nominal response modelling in IRT was used to retrieve information from the students' responses, and those with a lower ability level were found to only consider one of the conditions provided, had no understanding of the repetition structure, and might have dif\- ficulties in associating a sprite with its corresponding codes. Based on ability estimates, we also found that the students' ability in terms of CT concepts increased with grades and that boys generally performed slightly better than girls. These results suggest that the instrument can be used to examine the learning achievements of students in terms of CT concepts.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/97UQ2TW8/Kong and Lai - 2022 - Validating a computational thinking concepts test .pdf}
}

@article{kongValidatingComputationalThinking2022a,
  title = {Validating a Computational Thinking Concepts Test for Primary Education Using Item Response Theory: {{An}} Analysis of Students' Responses},
  shorttitle = {Validating a Computational Thinking Concepts Test for Primary Education Using Item Response Theory},
  author = {Kong, Siu-Cheung and Lai, Ming},
  year = {2022},
  month = oct,
  journal = {Computers \& Education},
  volume = {187},
  pages = {104562},
  issn = {03601315},
  doi = {10.1016/j.compedu.2022.104562},
  urldate = {2023-03-16},
  abstract = {Although instruments for assessing students' computational thinking (CT) concepts in primary education have been developed, they have rarely been validated in terms of item response theory (IRT). We consider IRT to be a rigorous validation tool and apply it to a CT concepts test for primary education involving 13,670 students. A two-parameter logistic model was chosen over other IRT models, as it indicated an acceptable model fit and item fit. The discrimination pa\- rameters indicated that the instrument could effectively distinguish between students with various ability levels. Nominal response modelling in IRT was used to retrieve information from the students' responses, and those with a lower ability level were found to only consider one of the conditions provided, had no understanding of the repetition structure, and might have dif\- ficulties in associating a sprite with its corresponding codes. Based on ability estimates, we also found that the students' ability in terms of CT concepts increased with grades and that boys generally performed slightly better than girls. These results suggest that the instrument can be used to examine the learning achievements of students in terms of CT concepts.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/VEUK299U/Kong and Lai - 2022 - Validating a computational thinking concepts test .pdf}
}

@book{konicek-moranTeachingConceptualUnderstanding2016,
  title = {Teaching for {{Conceptual Understanding}} in {{Science}}},
  author = {{Konicek-Moran}, Richard and Keeley, Page},
  year = {2016},
  month = jul,
  publisher = {{NSTA Press}},
  abstract = {What do you get when you bring together two of NSTA's bestselling authors to ponder ways to deepen students' conceptual understanding of science? A fascinating combination of deep thinking about science teaching, field-tested strategies you can use in your classroom immediately, and personal vignettes all educators can relate to and apply themselves.Teaching for Conceptual Understanding in Science is by Richard Konicek-Moran, a researcher and professor who wrote the Everyday Science Mysteries series, and Page Keeley, a practitioner and teacher educator who writes the Uncovering Student Ideas in Science series. Written in an appealing, conversational style, this new book\textbullet explores where science education has been and where it's going;\textbullet emphasizes how knowing the history and nature of science can help you engage in teaching for conceptual understanding and conceptual change; \textbullet stresses the importance of formative assessment as a pathway to conceptual change; and \textbullet provides a bridge between research and practice.This is the kind of thought-provoking book that can truly change the way you teach. Whether you read each chapter in sequence or start by browsing the topics in the vignettes, Konicek-Moran and Keeley will make you think\textemdash really think\textemdash about the major goal of science education in the 21st century: to help students understand science at the conceptual level so they can see its connections to other fields, other concepts, and their own lives.},
  langid = {english},
  keywords = {Strong},
  file = {/Users/igormoreno/Zotero/storage/G9V3ZFJH/Konicek-Moran and Keeley - 2016 - Teaching for Conceptual Understanding in Science.pdf}
}

@inproceedings{koopman32bitCyclicRedundancy2002,
  title = {32-Bit Cyclic Redundancy Codes for {{Internet}} Applications},
  booktitle = {Proceedings {{International Conference}} on {{Dependable Systems}} and {{Networks}}},
  author = {Koopman, P.},
  year = {2002},
  pages = {459--468},
  publisher = {{IEEE Comput. Soc}},
  address = {{Washington, DC, USA}},
  doi = {10.1109/DSN.2002.1028931},
  urldate = {2023-04-16},
  abstract = {Standardized 32-bit Cyclic Redundancy Codes provide fewer bits of guaranteed error detection than they could, achieving a Hamming Distance (HD) of only 4 for maximum-length Ethernet messages, whereas HD=6 is possible. Although research has revealed improved codes, exploring the entire design space has previously been computationally intractable, even for special-purpose hardware. Moreover, no CRC polynomial has yet been found that satisfies an emerging need to attain both HD=6 for 12K bit messages and HD=4 for message lengths beyond 64K bits. This paper presents results from the first exhaustive search of the 32-bit CRC design space. Results from previous research are validated and extended to include identifying all polynomials achieving a better HD than the IEEE 802.3 CRC-32 polynomial. A new class of polynomials is identified that provides HD=6 up to nearly 16K bit and HD=4 up to 114K bit message lengths, providing the best achievable design point that maximizes error detection for both legacy and new applications, including potentially iSCSI and application-implemented error checks.},
  isbn = {978-0-7695-1597-7},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/3R95UDAW/Koopman - 2002 - 32-bit cyclic redundancy codes for Internet applic.pdf}
}

@inproceedings{koppelmanTeachingAbstractionIntroductory2010,
  title = {Teaching Abstraction in Introductory Courses},
  booktitle = {Proceedings of the Fifteenth Annual Conference on {{Innovation}} and Technology in Computer Science Education - {{ITiCSE}} '10},
  author = {Koppelman, Herman and {van Dijk}, Betsy},
  year = {2010},
  pages = {174},
  publisher = {{ACM Press}},
  address = {{Bilkent, Ankara, Turkey}},
  doi = {10.1145/1822090.1822140},
  urldate = {2018-10-02},
  abstract = {Abstraction is viewed as a key concept in computer science. It is not only an important concept but also one that is difficult to master. This paper focuses on the problems that novices experience when they first encounter this concept. Three assignments from introductory courses are analyzed, to understand why abstraction is difficult for novices. This analysis leads to a number of guidelines that can be used by instructors to support novices learning abstraction.},
  isbn = {978-1-60558-729-5},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/IUDZ595W/Koppelman and van Dijk - 2010 - Teaching abstraction in introductory courses.pdf}
}

@article{korbachDifferentiatingDifferentTypes2018,
  title = {Differentiating {{Different Types}} of {{Cognitive Load}}: A {{Comparison}} of {{Different Measures}}},
  shorttitle = {Differentiating {{Different Types}} of {{Cognitive Load}}},
  author = {Korbach, Andreas and Br{\"u}nken, Roland and Park, Babette},
  year = {2018},
  month = jun,
  journal = {Educational Psychology Review},
  volume = {30},
  number = {2},
  pages = {503--529},
  issn = {1573-336X},
  doi = {10.1007/s10648-017-9404-8},
  urldate = {2018-11-09},
  abstract = {Recent studies about learning and instruction use cognitive load measurement to pay attention to the human cognitive resources and to the consumption of these resources during the learning process. In order to validate different measures of cognitive load for different cognitive load factors, the present study compares three different methods of objective cognitive load measurement and one subjective method. An experimental three-group design (N = 78) was used, with exposure to seductive details (extraneous cognitive load factor), mental animation tasks (germane cognitive load factor), or the basic learning instruction (control group). Cognitive load was measured by the rhythm method (Park and Br\"unken 2015), the index of cognitive activity (ICA) (Marshall 2007), and the subjective ratings of mental effort and task difficulty (Paas 1992). Eye-tracking data were used to analyze the attention allocation and as an indicator for cognitive activity. The results show a significantly higher cognitive load for the mental animation group in contrast to the control and the seductive detail group, indicated by rhythm method and subjective ratings, as well as a higher cognitive activity, indicated by eye tracking. Furthermore, the mental animation group shows significantly higher comprehension performance in contrast to the seductive detail group and significantly higher transfer performance in contrast to the control group. The ICA values showed no significant differences in cognitive load. The results provide evidence for the benefits of combining eye-tracking analysis and the results of cognitive load ratings or secondary task performance for a direct and continuous cognitive load assessment and for a differentiating access to the single cognitive load factors.},
  langid = {english},
  keywords = {Cognitive load measurement,Eye tracking,Index of cognitive activity,Rhythm method},
  file = {/Users/igormoreno/Zotero/storage/VB5MM85N/Korbach et al - 2018 - Differentiating Different Types of Cognitive Load.pdf}
}

@article{kordakiDrawingMultirepresentationalComputer2010,
  title = {A Drawing and Multi-Representational Computer Environment for Beginners' Learning of Programming Using {{C}}: {{Design}} and Pilot Formative Evaluation},
  shorttitle = {A Drawing and Multi-Representational Computer Environment for Beginners' Learning of Programming Using {{C}}},
  author = {Kordaki, Maria},
  year = {2010},
  month = jan,
  journal = {Computers \& Education},
  volume = {54},
  number = {1},
  pages = {69--87},
  issn = {0360-1315},
  doi = {10.1016/j.compedu.2009.07.012},
  urldate = {2018-12-02},
  abstract = {This paper presents both the design and the pilot formative evaluation study of a computer-based problem-solving environment (named LECGO: Learning Environment for programming using C using Geometrical Objects) for the learning of computer programming using C by beginners. In its design, constructivist and social learning theories were taken into account. The general design has taken into consideration models of the learning process and subject matter as well as potential learner behaviour in dealing with fundamental tasks. The main emphasis has been placed on the role of: (a) multiple external representations in student learning, (b) motivation, through performing problem-solving activities taken from the familiar and meaningful context of drawing, using simple geometrical objects, (c) the active participation of students in their own learning by using hands-on experience, (d) appropriate feedback on the actions taken by students, to aid their self-correction, and (e) holistic, activity-based, multi-media, multi-representational and multi-layered content for the learning of basic concepts of programming using C. LECGO was pilot evaluated in the field through a qualitative and comparative study where nine 12th grade (18-year-old) students participated. In fact, students faced three similar yet not identical sets of four tasks across three learning environments, namely; paper and pencil (p\textendash p), Turbo C and LECGO. The data emerging from this field evaluation study indicates that students gain better results within LECGO than in both the p\textendash p environment and the typical programming environment of Turbo C, while performing similar activities.},
  keywords = {C,Interactive learning environments,Multiple representation systems,Programming,Secondary education},
  annotation = {00090},
  file = {/Users/igormoreno/Zotero/storage/GKXGP5NJ/Kordaki - 2010 - A drawing and multi-representational computer environment for beginners’.pdf;/Users/igormoreno/Zotero/storage/ZQKVF92W/Kordaki - 2010 - A drawing and multi-representational computer environment for beginners’.pdf;/Users/igormoreno/Zotero/storage/3X2S3EJE/S0360131509001845.html;/Users/igormoreno/Zotero/storage/FB4STXBV/S0360131509001845.html}
}

@article{kosslynImageryPropositionsForm1977,
  title = {Imagery, Propositions, and the Form of Internal Representations},
  author = {Kosslyn, Stephen M. and Pomerantz, James R.},
  year = {1977},
  month = jan,
  journal = {Cognitive Psychology},
  volume = {9},
  number = {1},
  pages = {52--76},
  issn = {0010-0285},
  doi = {10.1016/0010-0285(77)90004-4},
  urldate = {2018-12-02},
  abstract = {This paper has four major sections: First, we review the basic arguments offered by Pylyshyn (Psychological Bulletin, 1973, 80, 1\textendash 24) and others against using imagery as an explanatory construct in psychology. Second, we consider each of these points and find none that speak against any but the most primitive notions of imagery. Third, we review the results of various experiments on imagery. In each case, we compare two explanations of the findings: one which assumes the existence of a surface image manifesting emergent properties, and one which assumes that all internal representations are coded in terms of ``abstract propositions.'' We find imagery hypotheses to be at least as adequate as those based on propositional representation. Finally, we conclude that debate about the ultimate foundations of internal representation is fruitless; the empirical question is whether images have properties that cannot be derived directly from more abstract propositional structures.},
  file = {/Users/igormoreno/Zotero/storage/73UELXBZ/Kosslyn and Pomerantz - 1977 - Imagery, propositions, and the form of internal representations.pdf;/Users/igormoreno/Zotero/storage/LBSR76WU/0010028577900044.html}
}

@article{kotovskyWhatMakesProblems1990,
  title = {What Makes Some Problems Really Hard: {{Explorations}} in the Problem Space of Difficulty},
  shorttitle = {What Makes Some Problems Really Hard},
  author = {Kotovsky, Kenneth and Simon, Herbert A},
  year = {1990},
  month = apr,
  journal = {Cognitive Psychology},
  volume = {22},
  number = {2},
  pages = {143--183},
  issn = {0010-0285},
  doi = {10.1016/0010-0285(90)90014-U},
  urldate = {2018-12-02},
  abstract = {This paper identifies two sources, one larger, one smaller, of the great difficulty encountered by subjects solving the Chinese Ring puzzle. Almost none of our subjects were able to solve the puzzle within 2 h unless they were given a demonstration of how to move, and even with that help only half of the subjects obtained solutions. Discovering how to make moves, rather than other features of the problem search space, was the source of its inordinate difficulty. Evidence for this comes from isomorphs that were designed to ``digitize'' the moves, which in the original version have analog qualities. These digital isomorphs were solvable by almost all subjects, with average solution times of 10 to 25 min, depending on isomorph type. The sense in which these altered problems were isomorphic to the original ones is explored. The isomorphism is defined in terms of an external search space consisting of a graph of nodes which represent states of knowledge, and links between those states which represent legal moves. Subjects' representations of the more difficult problems evolve toward isomorphism as they discover what constitutes a move. The digitized problems still required considerable effort for their solution. The difficulty of these problems in digital form is particularly surprising, given that the problem search space is linear: there is no branching. Hence, size of search space (exponential explosion) was not the source of difficulty here. The linearity of the search space did not prevent the subjects from making a large number of moves in reaching a solution. The average number of moves ranged from 150 to 450 for different isomorphs. In addition, the subjects' move behavior was often dichotomous, consisting of a very large number of nonprogressive, often error-prone moves, followed by a very rapid, often error-free movement to the goal. In our examination of the sources of difficulty for this problem, we also studied the transfer of skill between different isomorphs. The investigation of transfer-of-training showed that problem-representational features such as move-operator compatibility, move difficulty, and the presence or absence of move legality cues determined the amount of transfer.},
  file = {/Users/igormoreno/Zotero/storage/DU2FLSIW/Kotovsky and Simon - 1990 - What makes some problems really hard Explorations.pdf;/Users/igormoreno/Zotero/storage/C8793FJP/001002859090014U.html}
}

@article{kotovskyWhyAreProblems1985,
  title = {Why Are Some Problems Hard? {{Evidence}} from {{Tower}} of {{Hanoi}}},
  shorttitle = {Why Are Some Problems Hard?},
  author = {Kotovsky, K and Hayes, J. R and Simon, H. A},
  year = {1985},
  month = apr,
  journal = {Cognitive Psychology},
  volume = {17},
  number = {2},
  pages = {248--294},
  issn = {0010-0285},
  doi = {10.1016/0010-0285(85)90009-X},
  urldate = {2018-12-02},
  abstract = {This paper analyzes the causes for large differences in difficulty of various isomorphic versions of the Tower of Hanoi problem. Some forms of the problem take 16 times as long to solve, on average, as other versions. Since isomorphism rules out size of task domain as a determinant of relative difficulty, these experiments seek and find causes for the differences in features of the problem representation. Analysis of verbal protocols and the temporal patterning of moves allows the problem-solving behavior to be divided into exploratory and final-path phases. Entry into the final-path phase depends on acquisition of the ability to plan pairs of moves, an achievement made difficult by the working memory load it entails. This memory load can be reduced by automating the rules governing moves, either through problem exploration or training. Once automation has occurred, the solution is obtained very rapidly. Memory load is also proposed as the locus of other differences in difficulty found between various problem representations.},
  file = {/Users/igormoreno/Zotero/storage/MUH33QRL/Kotovsky et al - 1985 - Why are some problems hard.pdf;/Users/igormoreno/Zotero/storage/GR45GQV4/001002858590009X.html}
}

@article{koulouriTeachingIntroductoryProgramming2015,
  title = {Teaching {{Introductory Programming}}: {{A Quantitative Evaluation}} of {{Different Approaches}}},
  shorttitle = {Teaching {{Introductory Programming}}},
  author = {Koulouri, Theodora and Lauria, Stanislao and Macredie, Robert D.},
  year = {2015},
  month = feb,
  journal = {ACM Transactions on Computing Education},
  volume = {14},
  number = {4},
  pages = {1--28},
  issn = {1946-6226, 1946-6226},
  doi = {10.1145/2662412},
  urldate = {2020-11-26},
  langid = {english},
  annotation = {00137},
  file = {/Users/igormoreno/Zotero/storage/YRLHGNZ9/Koulouri et al. - 2015 - Teaching Introductory Programming A Quantitative .pdf}
}

@article{kozmaMaterialFeaturesMultiple2003,
  title = {The Material Features of Multiple Representations and Their Cognitive and Social Affordances for Science Understanding},
  author = {Kozma, R},
  year = {2003},
  month = apr,
  journal = {Learning and Instruction},
  series = {External and {{Internal Representations}} in {{Multimedia Learning}}},
  volume = {13},
  number = {2},
  pages = {205--226},
  issn = {0959-4752},
  doi = {10.1016/S0959-4752(02)00021-X},
  urldate = {2018-11-06},
  abstract = {This article reviews experimental and naturalistic studies conducted by our research group to examine the role of multiple representations in understanding science. It examines the differences between expert chemists and chemistry students in their representational skills and in their use of representations in science laboratories. It describes the way scientists use the material features of multiple representations to support their shared understanding and laboratory practices and contrasts this with the way students use representations. Scientists coordinate features within and across multiple representations to reason about their research and negotiate shared understanding based on underlying entities and processes. Students, on the other hand, have difficulty moving across or connecting multiple representations, so their understanding and discourse are constrained by the features of surface individual representations. Implications are drawn for the design and use of technology-based systems that provide students with coordinated, multiple representations and collaborative activities that afford the development of shared understanding in science. These implications are explored in a pilot study.},
  keywords = {Cognition,Instructional technology,Representations,Science learning,Social cognition},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/L4PQB67M/Kozma - 2003 - The material features of multiple representations and their cognitive and.pdf;/Users/igormoreno/Zotero/storage/3ZYQT3NZ/S095947520200021X.html}
}

@article{kramerAbstractionKeyComputing2007,
  title = {Is Abstraction the Key to Computing?},
  author = {Kramer, Jeff},
  year = {2007},
  month = apr,
  journal = {Communications of the ACM},
  volume = {50},
  number = {4},
  pages = {36--42},
  issn = {00010782},
  doi = {10.1145/1232743.1232745},
  urldate = {2018-10-02},
  langid = {english},
  keywords = {proposedByIgor},
  file = {/Users/igormoreno/Zotero/storage/J82HRA5L/Kramer - 2007 - Is abstraction the key to computing.pdf}
}

@inproceedings{kramerCompetencyStructureModel2016,
  ids = {kramerCompetencyStructureModel2016a},
  title = {A {{Competency Structure Model}} of {{Object-Oriented Programming}}},
  booktitle = {2016 {{International Conference}} on {{Learning}} and {{Teaching}} in {{Computing}} and {{Engineering}} ({{LaTICE}})},
  author = {Kramer, Matthias and Hubwieser, Peter and Brinda, Torsten},
  year = {2016},
  month = mar,
  pages = {1--8},
  doi = {10.1109/LaTiCE.2016.24},
  abstract = {Our project COMMOOP aims to develop a competency structure model and appropriate measurement instruments for the field of object-oriented programming (OOP). We started by reviewing existing literature on competency modelling in other subject areas regarding the development methodology as well as the model structures, identified common structural elements, verified, expanded and refined these based on an extensive literature analysis on theoretical and empirical studies on teaching and learning as well as on psychological aspects in the field of OOP. As theoretically derived candidates for potential competency dimensions we identified (1) OOP content knowledge and skills, (2) mastering representation, (3) cognitive processes and (4) metacognitive processes. This theoretically derived model framework was validated based on various competency descriptions in terms of applicability and completeness. For this purpose, we identified competency descriptions related to OOP in 44 computer science curricula and standards from several countries and compared these with our model. Further, we applied it to a list of competency definitions that was extracted by a working group at the ITiCSE 2015 from 14 case studies on K12 in 12 different countries. Finally, the structure model was aligned with the results of a survey among 59 computer science teachers and teacher students on learning difficulties. At the end, it turned out that our proposed model was quite complete already.},
  keywords = {Analytical models,COMMOOP,competency modelling,competency structure model,Computational modeling,computer science curricula,computer science education,Context,Education,ForAndrea,Mathematical model,metacognitive processes,Object oriented modeling,object-oriented programming,OOP content knowledge,Problem-solving,teaching},
  file = {/Users/igormoreno/Zotero/storage/GH3UJQ7T/Kramer et al - 2016 - A Competency Structure Model of Object-Oriented Programming.pdf;/Users/igormoreno/Zotero/storage/RHC69CJI/Kramer et al - 2016 - A Competency Structure Model of Object-Oriented Programming.pdf;/Users/igormoreno/Zotero/storage/SZVN7TIR/7743143.html}
}

@inproceedings{kramerWayTestInstrument2016,
  title = {On the Way to a Test Instrument for Object-Oriented Programming Competencies},
  booktitle = {Proceedings of the 16th {{Koli Calling International Conference}} on {{Computing Education Research}} - {{Koli Calling}} '16},
  author = {Kramer, Matthias and Tobinski, David A. and Brinda, Torsten},
  year = {2016},
  pages = {145--149},
  publisher = {{ACM Press}},
  address = {{Koli, Finland}},
  doi = {10.1145/2999541.2999544},
  urldate = {2020-06-22},
  abstract = {Modeling and assessing competencies in computer science education is still an up to date topic. Especially regarding object-oriented programming the research data leaves room for further investigations. Based on an existing competency structure model, a first version of a test has been developed, to assess students' abilities to recognize elements of objectoriented programming in given source code. The results lead into the direction that novices tend to search for keywords while more experienced individuals recognize patterns via code structure. Relying on these results, ideas for further item types are presented.},
  isbn = {978-1-4503-4770-9},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/WZ32YMQS/Kramer et al - 2016 - On the way to a test instrument for object-oriented programming competencies.pdf}
}

@article{krathRevealingTheoreticalBasis2021,
  title = {Revealing the Theoretical Basis of Gamification: {{A}} Systematic Review and Analysis of Theory in Research on Gamification, Serious Games and Game-Based Learning},
  shorttitle = {Revealing the Theoretical Basis of Gamification},
  author = {Krath, Jeanine and Sch{\"u}rmann, Linda and Von Korflesch, Harald F.O.},
  year = {2021},
  month = dec,
  journal = {Computers in Human Behavior},
  volume = {125},
  pages = {106963},
  issn = {07475632},
  doi = {10.1016/j.chb.2021.106963},
  urldate = {2023-06-27},
  abstract = {Despite increasing scientific interest in explaining how gamification supports positive affect and motivation, behavior change and learning, there is still a lack of an overview of the current theoretical understanding of the psychological mechanisms of gamification. Previous research has adopted several different angles and remains fragmented. Taking both an observational and explanatory perspective, we examined the theoretical foundations used in research on gamification, serious games and game-based learning through a systematic literature review and then discussed the commonalities of their core assumptions. The overview shows that scientists have used a variety of 118 different theories. Most of them share explicitly formulated or conceptual connections. From their interrelations, we derived basic principles that help explain how gamification works: Gamification can illustrate goals and their relevance, nudge users through guided paths, give users immediate feedback, reinforce good performance and simplify content to manageable tasks. Gamification mechanics can allow users to pursue in\- dividual goals and choose between different progress paths, while the system can adapt complexity to the user's abilities. Social gamification elements may enable social comparison and connect users to support each other and work towards a common goal.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/9GZU6ZMK/Krath et al. - 2021 - Revealing the theoretical basis of gamification A.pdf}
}

@article{krathwohlRevisionBloomTaxonomy2002,
  title = {A {{Revision}} of {{Bloom}}'s {{Taxonomy}}: {{An Overview}}},
  shorttitle = {A {{Revision}} of {{Bloom}}'s {{Taxonomy}}},
  author = {Krathwohl, David R.},
  year = {2002},
  month = nov,
  journal = {Theory Into Practice},
  volume = {41},
  number = {4},
  pages = {212--218},
  issn = {0040-5841, 1543-0421},
  doi = {10.1207/s15430421tip4104_2},
  urldate = {2022-09-02},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/RVEWQ3TZ/Krathwohl - 2002 - A Revision of Bloom's Taxonomy An Overview.pdf}
}

@article{krishnamurthiDevelopingBehavioralConcepts2021,
  title = {Developing {{Behavioral Concepts}} of {{Higher-Order Functions}}},
  author = {Krishnamurthi, Shriram and Fisler, Kathi},
  year = {2021},
  pages = {13},
  abstract = {Motivation. Higher-order functions are a standard and increasingly central component in many kinds of modern programming, including data science and Web development. Yet little research has been devoted to student learning or understanding of this topic.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/TME3D9L3/Krishnamurthi e Fisler - 2021 - Developing Behavioral Concepts of Higher-Order Fun.pdf}
}

@inproceedings{krishnamurthiDevelopingBehavioralConcepts2021a,
  title = {Developing {{Behavioral Concepts}} of {{Higher-Order Functions}}},
  booktitle = {Proceedings of the 17th {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Krishnamurthi, Shriram and Fisler, Kathi},
  year = {2021},
  month = aug,
  series = {{{ICER}} 2021},
  pages = {306--318},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3446871.3469739},
  urldate = {2023-10-31},
  abstract = {Motivation. Higher-order functions are a standard and increasingly central component in many kinds of modern programming, including data science and Web development. Yet little research has been devoted to student learning or understanding of this topic. Objectives. We conducted formative research on how well students are able to correlate higher-order functions with their input\textendash output behavior. We also wanted to evaluate a variety of techniques for assessing their understanding. Method. We created a series of instruments in which students were given either concrete input/output examples or abstracted diagrams of list transformations. Students were asked to cluster or classify these examples by their behavior, sometimes against a concrete list of higher-order functions and sometimes free-form. We administered these over the course of a month, and then once again three months later. Results. We find that students initially have several difficulties with clustering higher-order function examples. With different instruments, we find that students are later able to do quite well, largely avoiding large-scale errors but making several small-scale ones. We also find some evidence of growth in their thinking about these operations. We also find weaknesses in the nature and order of techniques we used. Discussion. Higher-order functions deserve far more attention than they have been paid in the literature on programming education. Their increasing use in several important domains makes this need critical. Our proposed methods for conducting such research are another contribution of this work. Our findings and methods should also be relevant for exploring how students understand libraries and APIs.},
  isbn = {978-1-4503-8326-4},
  keywords = {behavior,classification,clustering,higher-order functions},
  file = {/Users/igormoreno/Zotero/storage/YYAQGNCD/Krishnamurthi and Fisler - 2021 - Developing Behavioral Concepts of Higher-Order Fun.pdf}
}

@misc{krishnamurthiHowNotTeach2022,
  title = {How {{Not}} to {{Teach Recursion}}},
  author = {Krishnamurthi, Shriram},
  year = {2022},
  urldate = {2022-07-28},
  file = {/Users/igormoreno/Zotero/storage/VCZ4VJUH/how-not-to-teach-recursion.html}
}

@inproceedings{krishnamurthiPrinciplesProgrammingLanguages2013,
  title = {From {{Principles}} to {{Programming Languages}} (and {{Back}})},
  booktitle = {Proceedings of the 40th {{Annual ACM SIGPLAN-SIGACT Symposium}} on {{Principles}} of {{Programming Languages}}},
  author = {Krishnamurthi, Shriram},
  year = {2013},
  series = {{{POPL}} '13},
  pages = {233--234},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2429069.2429097},
  urldate = {2018-12-11},
  isbn = {978-1-4503-1832-7},
  keywords = {democracy of languages,semantics engineering},
  file = {/Users/igormoreno/Zotero/storage/XKVDHLHE/Krishnamurthi - 2013 - From Principles to Programming Languages (and Back).pdf}
}

@article{krishnamurthiProblematicPersistentPostSecondary2022,
  title = {Problematic and {{Persistent Post-Secondary}}  {{Program Performance Preconceptions}}},
  author = {Krishnamurthi, Shriram and Lee, Benjamin H and Bahl, Anika and Sloman, Steven A},
  year = {2022},
  pages = {6},
  abstract = {Student conceptions about program ``efficiency'' shape their approach to programming and problem-solving. However, we know very little about the kinds of conceptions students have on entry into post-secondary education. In this paper we present the result of multiple iterations of a study where we ask students to rank programs on efficiency. We find students have several misconceptions across the iterations. We attempt to employ two standard techniques for puncturing people's illusions of understanding, but both have only limited success: students have strongly-held opinions despite their frequent errors. Post-secondary education about program efficiency needs to take much more account of students' pre-conceptions.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/UJDHLZ4Y/Krishnamurthi et al. - 2022 - Problematic and Persistent Post-Secondary  Program.pdf}
}

@article{krishnamurthiProgrammingLanguagesApplication,
  title = {Programming {{Languages}}: {{Application}} and {{Interpretation}}},
  author = {Krishnamurthi, Shriram},
  pages = {229},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/UYCTPWBK/Krishnamurthi - Programming Languages Application and Interpretat.pdf}
}

@incollection{krishnamurthiProgrammingParadigms2019,
  title = {Programming {{Paradigms}} and {{Beyond}}},
  booktitle = {The {{Cambridge Handbook}} of {{Computing Education Research}}},
  author = {Krishnamurthi, Shriram and Fisler, Kathi},
  editor = {Robins, Anthony V. and Fincher, Sally A.},
  year = {2019},
  series = {Cambridge {{Handbooks}} in {{Psychology}}},
  pages = {377--413},
  publisher = {{Cambridge University Press}},
  address = {{Cambridge}},
  doi = {10.1017/9781108654555.014},
  urldate = {2022-02-07},
  abstract = {Programming is a central concern of computer science, so its medium\textemdash programming languages\textemdash should be a focus of computing education. Unfortunately, much of the community lacks useful tools to understand and organize languages, since the standard literature is mired in the ill-defined and even confusing concept of paradigms. This chapter suggests the use of notional machines, i.e., human-accessible operational semantics, as a central organizing concept for understanding languages. It introduces or re-examines several concepts in programming and languages, especially state, whose complexity is understood well in the programming languages literature but is routinely overlooked in computing education. It identifies and provides context for numerous open problems worthy of research focus, some of which are new twists on long-running debates while others have not received the attention in the literature that they deserve.},
  isbn = {978-1-108-49673-5},
  keywords = {Misconceptions Proposal},
  file = {/Users/igormoreno/Zotero/storage/FGZ2NEYQ/Krishnamurthi e Fisler - 2019 - Programming Paradigms and Beyond.pdf;/Users/igormoreno/Zotero/storage/SES8KSDR/Krishnamurthi and Fisler - 2019 - Programming Paradigms and Beyond (Draft).pdf;/Users/igormoreno/Zotero/storage/V46NJA2U/897D03AD2F26D9680F208BE93EBCF09E.html}
}

@article{krishnamurthiTeachingProgrammingLanguages2008,
  title = {Teaching Programming Languages in a Post-Linnaean Age},
  author = {Krishnamurthi, Shriram},
  year = {2008},
  month = nov,
  journal = {ACM SIGPLAN Notices},
  volume = {43},
  number = {11},
  pages = {81--83},
  issn = {0362-1340},
  doi = {10.1145/1480828.1480846},
  urldate = {2020-05-11},
  abstract = {Programming language "paradigms" are a moribund and tedious legacy of a bygone age. Modern language designers pay them no respect, so why do our courses slavishly adhere to them? This paper argues that we should abandon this method of teaching languages, offers an alternative, reconciles an important split in programming language education, and describes a textbook that explores these matters.},
  keywords = {programming languages curriculum},
  annotation = {00015},
  file = {/Users/igormoreno/Zotero/storage/U9DDVUJA/Krishnamurthi - 2008 - Teaching programming languages in a post-linnaean .pdf}
}

@inproceedings{krishnaProblemGeneratorLearn2001,
  title = {A Problem Generator to Learn Expression: Evaluation in {{CSI}}, and Its Effectiveness},
  shorttitle = {A Problem Generator to Learn Expression},
  booktitle = {Proceedings of the Sixth Annual {{CCSC}} Northeastern Conference on {{The}} Journal of Computing in Small Colleges},
  author = {Krishna, Aravind K. and Kumar, Amruth N.},
  year = {2001},
  month = apr,
  series = {{{CCSC}} '01},
  pages = {34--43},
  publisher = {{Consortium for Computing Sciences in Colleges}},
  address = {{Evansville, IN, USA}},
  urldate = {2021-06-06},
  abstract = {Introductory Computer Science students often do not clearly understand the concepts of operator precedence and associativity, and make mistakes when they write and evaluate expressions. In order to help them learn these concepts by solving problems, we have developed an applet that generates problems (henceforth called problet) and corrects the learner's answers. In this paper, we will describe the design and implementation of this problet. We conducted a controlled experiment to assess the effectiveness of using the problet. Results indicate that using the problet improved learning by 18\%. We will describe our experiment and present its results.},
  file = {/Users/igormoreno/Zotero/storage/3BGIR4ZZ/Krishna and Kumar - 2001 - A problem generator to learn expression.pdf}
}

@inproceedings{krishnaraoPrinciplesCurriculumDesign2005,
  title = {Principles of Curriculum Design and Revision: A Case Study in Implementing Computing Curricula {{CC2001}}},
  shorttitle = {Principles of Curriculum Design and Revision},
  booktitle = {Proceedings of the 10th Annual {{SIGCSE}} Conference on {{Innovation}} and Technology in Computer Science Education},
  author = {Krishna Rao, M. R. K. and Junaidu, S. and Maghrabi, T. and Shafique, M. and Ahmed, M. and Faisal, K.},
  year = {2005},
  month = jun,
  series = {{{ITiCSE}} '05},
  pages = {256--260},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1067445.1067515},
  urldate = {2020-09-22},
  abstract = {Our department has recently revisited its computer science program in the light of IEEE/ACM Computing Curricula 2001 (CC2001) recommendations, taking into consideration the ABET's Criteria for Accrediting Computing programs (CAC 04-05). The effort resulted in a revised curriculum. This paper presents the different decisions we made with regard to the curriculum orientation, knowledge units coverage, transition management, and monitoring and assessment. The paper also sheds some light on challenges faced. Tables provided in the paper show that the curriculum successfully implements CC2001 recommendations while satisfying the CAC 04-05.},
  isbn = {978-1-59593-024-8},
  keywords = {CC2001,core technologies,curriculum revision},
  annotation = {00013},
  file = {/Users/igormoreno/Zotero/storage/95DT9KGF/Krishna Rao et al - 2005 - Principles of curriculum design and revision.pdf}
}

@incollection{kuchemannChapterAlgebra1981,
  title = {Chapter 8: {{Algebra}}},
  booktitle = {Children's Understanding of Mathematics: 11-16},
  author = {K{\"u}chemann, D E},
  editor = {Hart, Kathleen M.},
  year = {1981},
  pages = {102--119},
  publisher = {{John Murray, London}},
  abstract = {in Hart K (ed) 1981,},
  langid = {english},
  keywords = {GrowthPattern,Piaget},
  file = {/Users/igormoreno/Zotero/storage/DRSCTUA9/Küchemann - 1981 - Chapter 8.pdf}
}

@article{kuchemannCognitiveDemandSecondary1981,
  title = {Cognitive Demand of Secondary School Mathematics Items},
  author = {K{\"u}chemann, Dietmar},
  year = {1981},
  journal = {Educational Studies in Mathematics},
  volume = {12},
  pages = {301--316},
  abstract = {Items from ten mathematics tests developed at ChelseaCollegeby members of the SSRC sponsored research programme 'Concepts in Secondary school Mathematics and Science' are examined to see whether general dimensions can be found to explain differences and similarities in facility within and across tests.},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/VXJ9KWWY/Küchemann - 1981 - Cognitive demand of secondary school mathematics items.pdf}
}

@article{kuchemannHartEd1981,
  title = {In {{Hart K}} (Ed) 1981, {{Children}}'s Understanding of Mathematics: 11-16. {{John Murray}}, {{London}}.},
  author = {K{\"u}chemann, D E},
  pages = {11},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/HEBRKRBH/Küchemann - in Hart K (ed) 1981, Children's understanding of m.pdf}
}

@book{kuckartzAnalyzingQualitativeData2019,
  title = {Analyzing {{Qualitative Data}} with {{MAXQDA}}: {{Text}}, {{Audio}}, and {{Video}}},
  shorttitle = {Analyzing {{Qualitative Data}} with {{MAXQDA}}},
  author = {Kuckartz, Udo and R{\"a}diker, Stefan},
  year = {2019},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-030-15671-8},
  urldate = {2020-04-22},
  isbn = {978-3-030-15670-1 978-3-030-15671-8},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/K4ILTDDQ/Kuckartz and Rädiker - 2019 - Analyzing Qualitative Data with MAXQDA Text, Audi.pdf}
}

@article{kucukozerDesigningPowerfulLearning2013,
  title = {Designing a Powerful Learning Environment to Promote Durable Conceptual Change},
  author = {K{\"u}{\c c}{\"u}k{\"o}zer, H{\"u}seyin},
  year = {2013},
  month = oct,
  journal = {Computers \& Education},
  volume = {68},
  pages = {482--494},
  issn = {03601315},
  doi = {10.1016/j.compedu.2013.06.012},
  urldate = {2018-11-06},
  abstract = {The purpose of this study was to investigate the long-term effectiveness of a three-dimensional (3D) computer modeling supported predict\textendash observe\textendash explain (POE) strategy on pre-service science teachers' understanding of lunar concepts. Thirty-three preservice teachers participated in the study. A questionnaire was used to assess participants' understanding of the phases of the Moon and eclipses before, after, and 22 months after the instruction. Semi-structured interviews were conducted with six participants before and after the instruction. The results demonstrated that few participants had a scientific understanding about the targeted lunar concepts before the instruction. However, the majority of the participants had a scientific understanding after the instruction indicating that the instructional intervention was quite effective in facilitating conceptual change. The results also demonstrated that twentytwo months after the instruction most participants maintained their scientific conceptual understanding suggesting that the powerful learning environment designed for this study was effective in promoting a durable conceptual change.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/L5UGCRR8/Küçüközer - 2013 - Designing a powerful learning environment to promote durable conceptual change.pdf}
}

@article{kuhlInfluenceTextModality2011,
  title = {The Influence of Text Modality on Learning with Static and Dynamic Visualizations},
  author = {K{\"u}hl, Tim and Scheiter, Katharina and Gerjets, Peter and Edelmann, J{\"o}rg},
  year = {2011},
  month = jan,
  journal = {Computers in Human Behavior},
  series = {Current {{Research Topics}} in {{Cognitive Load Theory}}},
  volume = {27},
  number = {1},
  pages = {29--35},
  issn = {0747-5632},
  doi = {10.1016/j.chb.2010.05.008},
  urldate = {2018-11-06},
  abstract = {In this study we investigated the influence of text modality on learning with static and dynamic visualizations in a dynamic domain, namely the physical principles underlying fish locomotion. A 2\texttimes 2-design with type of visualization (static vs. dynamic) and text modality (spoken vs. written) as independent variables was used. Concerning learning outcomes, it was hypothesized that (1) learners presented with dynamic visualizations would outperform learners presented with static visualizations, (2) learners presented with spoken text would outperform learners presented with written text, and (3) an interaction between type of visualization and modality would occur: the superiority of dynamic over static visualizations was expected to be more pronounced for spoken compared to written text. Subjective cognitive load measures were assessed and expected to mirror the aforementioned pattern of learning outcomes in accordance with Cognitive Load Theory (i.e., higher extraneous cognitive load (ECL) related to lower learning outcomes). For transfer tasks, the first two hypotheses could be confirmed. However, there was no interaction. Moreover, ECL was rated higher by subjects when learning with static compared to dynamic visualizations, but there were no differences for ECL with respect to the text modality. The results are discussed within the framework of Cognitive Load Theory.},
  keywords = {Animation,Cognitive load,Dynamic visualizations,Modality,Multimedia,Static visualizations},
  file = {/Users/igormoreno/Zotero/storage/2VQFV375/Kühl et al - 2011 - The influence of text modality on learning with static and dynamic.pdf;/Users/igormoreno/Zotero/storage/3NSJUFXK/S0747563210001457.html}
}

@article{kuhnConsistentLayoutThematic2008,
  title = {Consistent {{Layout}} for {{Thematic Software Maps}}},
  author = {Kuhn, Adrian and Loretan, Peter and Nierstrasz, Oscar},
  year = {2008},
  month = oct,
  journal = {2008 15th Working Conference on Reverse Engineering},
  eprint = {1209.5490},
  pages = {209--218},
  doi = {10.1109/WCRE.2008.45},
  urldate = {2019-09-25},
  abstract = {Software visualizations can provide a concise overview of a complex software system. Unfortunately, since software has no physical shape, there is no "natural" mapping of software to a two-dimensional space. As a consequence most visualizations tend to use a layout in which position and distance have no meaning, and consequently layout typical diverges from one visualization to another. We propose a consistent layout for software maps in which the position of a software artifact reflects its \textbackslash emph\{vocabulary\}, and distance corresponds to similarity of vocabulary. We use Latent Semantic Indexing (LSI) to map software artifacts to a vector space, and then use Multidimensional Scaling (MDS) to map this vector space down to two dimensions. The resulting consistent layout allows us to develop a variety of thematic software maps that express very different aspects of software while making it easy to compare them. The approach is especially suitable for comparing views of evolving software, since the vocabulary of software artifacts tends to be stable over time.},
  archiveprefix = {arxiv},
  keywords = {Computer Science - Software Engineering},
  file = {/Users/igormoreno/Zotero/storage/6A4MABAE/Kuhn et al - 2008 - Consistent Layout for Thematic Software Maps.pdf;/Users/igormoreno/Zotero/storage/5XT58T49/1209.html}
}

@inproceedings{kuhnEmbeddingSpatialSoftware2010,
  title = {Embedding {{Spatial Software Visualization}} in the {{IDE}}: {{An Exploratory Study}}},
  shorttitle = {Embedding {{Spatial Software Visualization}} in the {{IDE}}},
  booktitle = {Proceedings of the 5th {{International Symposium}} on {{Software Visualization}}},
  author = {Kuhn, Adrian and Erni, David and Nierstrasz, Oscar},
  year = {2010},
  series = {{{SOFTVIS}} '10},
  pages = {113--122},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1879211.1879229},
  urldate = {2019-09-25},
  abstract = {Software visualization can be of great use for understanding and exploring a software system in an intuitive manner. Spatial representation of software is a promising approach of increasing interest. However, little is known about how developers interact with spatial visualizations that are embedded in the IDE. In this paper, we present a pilot study that explores the use of Software Cartography for program comprehension of an unknown system. We investigated whether developers establish a spatial memory of the system, whether clustering by topic offers a sound base layout, and how developers interact with maps. We report our results in the form of observations, hypotheses, and implications. Key findings are a) that developers made good use of the map to inspect search results and call graphs, and b) that developers found the base layout surprising and often confusing. We conclude with concrete advice for the design of embedded software maps.},
  isbn = {978-1-4503-0028-5},
  keywords = {software,To Read,visualization},
  file = {/Users/igormoreno/Zotero/storage/8XNWJPXT/Kuhn et al - 2010 - Embedding Spatial Software Visualization in the IDE.pdf}
}

@article{kuhnImprovingMentalModel2010,
  title = {Towards {{Improving}} the {{Mental Model}} of {{Software Developers}} through {{Cartographic Visualization}}},
  author = {Kuhn, Adrian and Erni, David and Nierstrasz, Oscar},
  year = {2010},
  month = jan,
  journal = {arXiv:1001.2386 [cs]},
  eprint = {1001.2386},
  primaryclass = {cs},
  urldate = {2019-09-25},
  abstract = {Software is intangible and knowledge about software systems is typically tacit. The mental model of software developers is thus an important factor in software engineering. It is our vision that developers should be able to refer to code as being "up in the north", "over in the west", or "down-under in the south". We want to provide developers, and everyone else involved in software development, with a *shared*, spatial and stable mental model of their software project. We aim to reinforce this by embedding a cartographic visualization in the IDE (Integrated Development Environment). The visualization is always visible in the bottom-left, similar to the GPS navigation device for car drivers. For each development task, related information is displayed on the map. In this paper we present CODEMAP, an eclipse plug-in, and report on preliminary results from an ongoing user study with professional developers and students.},
  archiveprefix = {arxiv},
  keywords = {Computer Science - Software Engineering},
  file = {/Users/igormoreno/Zotero/storage/4DUBPG32/Kuhn et al - 2010 - Towards Improving the Mental Model of Software Developers through Cartographic.pdf;/Users/igormoreno/Zotero/storage/Y5797MMF/1001.html}
}

@article{kuhnSoftwareCartographyThematic2010,
  title = {Software {{Cartography}}: Thematic Software Visualization with Consistent Layout},
  shorttitle = {Software {{Cartography}}},
  author = {Kuhn, Adrian and Erni, David and Loretan, Peter and Nierstrasz, Oscar},
  year = {2010},
  journal = {Journal of Software Maintenance and Evolution: Research and Practice},
  pages = {n/a-n/a},
  issn = {1532060X, 15320618},
  doi = {10.1002/smr.414},
  urldate = {2019-09-25},
  abstract = {Software visualizations can provide a concise overview of a complex software system. Unfortunately, as software has no physical shape, there is no `natural' mapping of software to a two-dimensional space. As a consequence most visualizations tend to use a layout in which position and distance have no meaning, and consequently layout typically diverges from one visualization to another. We propose an approach to consistent layout for software visualization, called Software Cartography, in which the position of a software artifact reflects its vocabulary, and distance corresponds to similarity of vocabulary. We use Latent Semantic Indexing (LSI) to map software artifacts to a vector space, and then use Multidimensional Scaling (MDS) to map this vector space down to two dimensions. The resulting consistent layout allows us to develop a variety of thematic software maps that express very different aspects of software while making it easy to compare them. The approach is especially suitable for comparing views of evolving software, as the vocabulary of software artifacts tends to be stable over time. We present a prototype implementation of Software Cartography, and illustrate its use with practical examples from numerous open-source case studies. Copyright \textcopyright{} 2010 John Wiley \& Sons, Ltd.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/SRREPM2U/Kuhn et al - 2010 - Software Cartography.pdf}
}

@article{kuittinenTeachingRolesVariables,
  title = {Teaching {{Roles}} of {{Variables}} in {{Elementary Programming Courses}}},
  author = {Kuittinen, Marja and Sajaniemi, Jorma},
  pages = {5},
  abstract = {Computer programming is a difficult skill for many students and new methods and techniques to help novices to learn programming are needed. This paper presents roles of variables as a new concept that can be used to assist in learning and gives detailed instructions on techniques to present roles to novices. These techniques are based on current learning theories and they have been used in a classroom experiment comparing traditional teaching with rolebased teaching. The results suggest that the introduction of roles provides students a new conceptual framework that enables them to mentally process programs in a way similar to that of good code comprehenders; the use of role-based animation seems to assist in the adoption of role knowledge and expert-like programming skill.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/YMJJC9K2/Kuittinen and Sajaniemi - Teaching Roles of Variables in Elementary Programming Courses.pdf}
}

@techreport{kultusministerkonferenzLandergemeinsameInhaltlicheAnforderungen2008,
  title = {L\"andergemeinsame Inhaltliche {{Anforderungen}} F\"ur Die {{Fachwissenschaften}} Und {{Fachdidaktiken}} in Der {{Lehrerbildung}}},
  author = {{Kultusministerkonferenz}},
  year = {2008},
  month = oct,
  institution = {{Sekretariat der St\"andigen Konferenz der Kultusminister der L\"ander in der Bundesrepublik Deutschland}},
  urldate = {2019-05-16},
  abstract = {Die Kultusministerkonferenz hat in den ,,Eckpunkten f\"ur die gegenseitige Anerkennung von Bachelor- und Masterabschl\"ussen in Studieng\"angen, mit denen die Bildungsvoraussetzungen f\"ur ein Lehramt vermittelt werden`` (Beschluss der Kultusministerkonferenz vom 02.06.2005; sog. Quedlinburger Beschluss) verabredet, die ,,Standards f\"ur die Lehrerbildung: Bildungswissenschaften`` (Beschluss der Kultusministerkonferenz vom 16.12.2004) weiterzuentwickeln. Dar\"uber hinaus wurde die Notwendigkeit gesehen, l\"andergemeinsame inhaltliche Anforderungen f\"ur die Fachwissenschaften und deren Didaktik zu entwickeln. Die Standards f\"ur die Bildungswissenschaften und die Anforderungen f\"ur die Fachwissenschaften und Fachdidaktiken sollen eine Grundlage f\"ur die Akkreditierung und Evaluierung von lehramtsbezogenen Studieng\"angen bilden.},
  file = {/Users/igormoreno/Zotero/storage/WKSZ322R/Kultusministerkonferenz - 2008 - Ländergemeinsame inhaltliche Anforderungen für die Fachwissenschaften und.pdf}
}

@inproceedings{kumarEffectivenessVisualizationLearning2015,
  title = {The {{Effectiveness}} of {{Visualization}} for {{Learning Expression Evaluation}}},
  booktitle = {Proceedings of the 46th {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Kumar, Amruth N.},
  year = {2015},
  month = feb,
  pages = {362--367},
  publisher = {{ACM}},
  address = {{Kansas City Missouri USA}},
  doi = {10.1145/2676723.2677301},
  urldate = {2021-06-01},
  isbn = {978-1-4503-2966-8},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/NBY4GETM/Kumar - 2015 - The Effectiveness of Visualization for Learning Ex.pdf}
}

@inproceedings{kumarEffectivenessVisualizationLearning2016,
  ids = {kumarEffectivenessVisualizationLearning2016a,kumarEffectivenessVisualizationLearning2016b},
  title = {The {{Effectiveness}} of {{Visualization}} for {{Learning Expression Evaluation}}: {{A Reproducibility Study}}},
  shorttitle = {The {{Effectiveness}} of {{Visualization}} for {{Learning Expression Evaluation}}},
  booktitle = {Proceedings of the 2016 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Kumar, Amruth N.},
  year = {2016},
  month = jul,
  pages = {192--197},
  publisher = {{ACM}},
  address = {{Arequipa Peru}},
  doi = {10.1145/2899415.2899427},
  urldate = {2021-06-01},
  abstract = {A study was conducted to reproduce the results of an earlier study on the effectiveness of visualization for learning expression evaluation in a problem-solving software tutor on arithmetic expressions. In the current reproducibility study, data was collected from a software tutor on assignment expressions over six semesters. ANOVA analysis of the amount and speed of learning was conducted with treatment, sex and racial groups as fixed factors. Results include that visualization helped the students learn significantly more concepts, whether the students needed to use the tutor or benefited from using the tutor. However, it only benefited the less-prepared students. It did not help the students learn faster. It benefited both the sexes and traditionally represented as well as underrepresented groups. The current study confirmed almost all the results from the previous study, albeit for a harder topic. One reason why visualization was found to be effective in both these studies may be that the same visualization scheme was used by the students to both view feedback and construct their answers.},
  isbn = {978-1-4503-4231-5},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/3UZ2DNNV/Kumar - 2016 - The Effectiveness of Visualization for Learning Ex.pdf;/Users/igormoreno/Zotero/storage/PH35PYRY/Kumar - 2016 - The Effectiveness of Visualization for Learning Ex.pdf;/Users/igormoreno/Zotero/storage/TCS3WAYT/Kumar - 2016 - The Effectiveness of Visualization for Learning Ex.pdf}
}

@inproceedings{kumarEffectsErrorFlaggingTutor2007,
  title = {The {{Effects}} of {{Error-Flagging}} in a {{Tutor}} on {{Expression Evaluation}}},
  booktitle = {Proceedings of the 2007 Conference on {{Artificial Intelligence}} in {{Education}}: {{Building Technology Rich Learning Contexts That Work}}},
  author = {Kumar, Amruth and Rutigliano, Peter},
  year = {2007},
  month = jun,
  pages = {599--601},
  publisher = {{IOS Press}},
  address = {{NLD}},
  urldate = {2021-06-06},
  abstract = {We evaluated the effect of providing error-flagging as support for error detection, but not error correction while the student is solving a problem. We found that providing error-flagging in addition to demand feedback during practice learning was no more effective than providing only demand feedback when the tutor did not explicitly mention that errors were being flagged. On the other hand, explaining and providing error-flagging without demand feedback during pre-and post-tests resulted in significantly better scores on pre-and post-tests even though error-flagging did not provide any error-correction support.},
  isbn = {978-1-58603-764-2},
  keywords = {Demand Feedback,Error Correction,Error Detection,Error-Flagging,Expression Evaluation},
  file = {/Users/igormoreno/Zotero/storage/8B8RVMMT/Kumar and Rutigliano - 2007 - The Effects of Error-Flagging in a Tutor on Expres.pdf}
}

@article{kumarExplanationStepbystepExecution2021,
  title = {Explanation of Step-by-Step Execution as Feedback for Problems on Program Analysis, and Its Generation in Model-Based Problem-Solving Tutors},
  author = {Kumar, Amruth},
  year = {2021},
  month = jun,
  abstract = {We have been developing problem-solving tutors for programming. The tutors target program analysis tasks - evaluating expressions, predicting the output of programs and debugging programs. As part of the feedback, the tutors provide explanation of the step-by-step execution of programs. In this paper, we will present the pedagogy behind providing such explanation. In order to be able to automatically generate such explanation, we will propose using the principles of Model -Based Reasoning to model the programming domain. We will also propose a two-stage algorithm to automatically generate explanation of the step-by-step execution of programs. We will describe two tutors - on parameter passing and for loops - that provide such explanation. We will describe the evaluation of these tutors that confirms that explanation of the step-by-step execution of programs helps students learn to analyze programs.}
}

@article{kumarGenerationProblemsAnswers2005,
  title = {Generation of Problems, Answers, Grade, and Feedback---Case Study of a Fully Automated Tutor},
  author = {Kumar, Amruth N.},
  year = {2005},
  month = sep,
  journal = {Journal on Educational Resources in Computing},
  volume = {5},
  number = {3},
  pages = {3},
  issn = {1531-4278, 1531-4278},
  doi = {10.1145/1163405.1163408},
  urldate = {2021-06-11},
  abstract = {Researchers and educators have been developing tutors to help students learn by solving problems. The tutors vary in their ability to generate problems, generate answers, grade student answers, and provide feedback. At one end of the spectrum are tutors that depend on hand-coded problems, answers, and feedback. These tutors can be expected to be pedagogically effective, since all the problem-solving content is carefully hand-crafted by a teacher. However, their repertoire is limited. At the other end of the spectrum are tutors that can automatically generate problems, answers, and feedback. They have an unlimited repertoire, but it is not clear that they are effective in helping students learn. Most extant tutors lie somewhere along this spectrum.In this article we examine the feasibility of developing a tutor that can automatically generate problems, generate answers, grade student answers, and provide feedback. We investigate whether such a tutor can help students learn. For our study, we considered a tutor for our Programming Languages course, which covers static and dynamic scope (i.e., static scope of variables and procedures, dynamic scope of variables, and static and dynamic referencing environment of procedures in the context of a language that permits nested procedure definitions). The tutor generates simple and complex problems on each of these five topics, solves the problems, grades the students' answers, and provides feedback about incorrect and missed answers. Our evaluation over two semesters shows that the feedback provided by the tutor helps improve student learning.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/SQ9C7Z2I/Kumar - 2005 - Generation of problems, answers, grade, and feedba.pdf}
}

@inproceedings{kumarResultsEvaluationEffectiveness2005,
  ids = {kumarResultsEvaluationEffectiveness2005a},
  title = {Results from the Evaluation of the Effectiveness of an Online Tutor on Expression Evaluation},
  booktitle = {Proceedings of the 36th {{SIGCSE}} Technical Symposium on {{Computer}} Science Education},
  author = {Kumar, Amruth N.},
  year = {2005},
  month = feb,
  series = {{{SIGCSE}} '05},
  pages = {216--220},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1047344.1047422},
  urldate = {2021-06-06},
  abstract = {Researchers have been developing online tutors for various disciplines, including Computer Science. Educators are increasingly using online tutors to supplement their courses. Are online tutors effective? Can they help students learn? If so, what features contribute to their effectiveness? We will examine these questions in the context of an online tutor that we developed for introductory Computer Science. The tutor is designed to help students learn expression evaluation in C++/Java.We evaluated the tutor over several years, in multiple sections of Computer Science I each year. We used controlled tests with differential treatments, and used pre and post-tests to evaluate the effectiveness of the tutor. Our results show that online tutors indeed help students learn. Students who use the tutor for practice learn better than those who use a printed workbook. Students who receive both graphic visualization and text explanation learn better than those who receive only graphic visualization. Students who use graphic visualization learn better than those who receive no explanation. These results will be of interest to both developers and users of online tutors.},
  isbn = {978-1-58113-997-6},
  keywords = {computer science I,evaluation,expression,feedback,programming,tutor,visualization},
  file = {/Users/igormoreno/Zotero/storage/4NQSEK3G/Kumar - 2005 - Results from the evaluation of the effectiveness o.pdf;/Users/igormoreno/Zotero/storage/96ZDZG5M/Kumar - 2005 - Results from the evaluation of the effectiveness o.pdf;/Users/igormoreno/Zotero/storage/TJLX82IL/Kumar - 2005 - Results from the evaluation of the effectiveness of an online tutor on.pdf}
}

@article{kurdiSystematicReviewAutomatic2020,
  title = {A {{Systematic Review}} of {{Automatic Question Generation}} for {{Educational Purposes}}},
  author = {Kurdi, Ghader and Leo, Jared and Parsia, Bijan and Sattler, Uli and {Al-Emari}, Salam},
  year = {2020},
  month = mar,
  journal = {International Journal of Artificial Intelligence in Education},
  volume = {30},
  number = {1},
  pages = {121--204},
  issn = {1560-4306},
  doi = {10.1007/s40593-019-00186-y},
  urldate = {2020-07-22},
  abstract = {While exam-style questions are a fundamental educational tool serving a variety of purposes, manual construction of questions is a complex process that requires training, experience, and resources. This, in turn, hinders and slows down the use of educational activities (e.g. providing practice questions) and new advances (e.g. adaptive testing) that require a large pool of questions. To reduce the expenses associated with manual construction of questions and to satisfy the need for a continuous supply of new questions, automatic question generation (AQG) techniques were introduced. This review extends a previous review on AQG literature that has been published up to late 2014. It includes 93 papers that were between 2015 and early 2019 and tackle the automatic generation of questions for educational purposes. The aims of this review are to: provide an overview of the AQG community and its activities, summarise the current trends and advances in AQG, highlight the changes that the area has undergone in the recent years, and suggest areas for improvement and future opportunities for AQG. Similar to what was found previously, there is little focus in the current literature on generating questions of controlled difficulty, enriching question forms and structures, automating template construction, improving presentation, and generating feedback. Our findings also suggest the need to further improve experimental reporting, harmonise evaluation metrics, and investigate other evaluation methods that are more feasible.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/JW9NNYMN/Kurdi et al. - 2020 - A Systematic Review of Automatic Question Generati.pdf}
}

@article{kurlandChildrenMentalModels1985,
  title = {Children's {{Mental Models}} of {{Recursive Logo Programs}}},
  author = {Kurland, D. Midian and Pea, Roy D.},
  year = {1985},
  month = may,
  journal = {Journal of Educational Computing Research},
  volume = {1},
  number = {2},
  pages = {235--243},
  issn = {0735-6331, 1541-4140},
  doi = {10.2190/JV9Y-5PD0-MX22-9J4Y},
  urldate = {2018-11-30},
  abstract = {Children who had a year of Logo programming experience were asked t o thinkaloud about what brief Logo recursive programs will do, and then t o predict with a hand-simulation of the programs what the Logo graphics turtle will draw when the program is executed. If discrepancies arose in this last phase, children were asked to explain them. A prevaient but misguided "looping" interpretation of Logo recursion was identified, and this robust mental model persisted even in the face of contradiction between what the program did when executed and t h e child's predictions for what it would do.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/BRCFJ4A9/Kurland and Pea - 1985 - Children's Mental Models of Recursive Logo Programs.pdf}
}

@inproceedings{kurvinenProgrammingMisconceptionsIntroductory2016,
  title = {Programming {{Misconceptions}} in an {{Introductory Level Programming Course Exam}}},
  booktitle = {Proceedings of the 2016 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}} - {{ITiCSE}} '16},
  author = {Kurvinen, Einari and Hellgren, Niko and Kaila, Erkki and Laakso, Mikko-Jussi and Salakoski, Tapio},
  year = {2016},
  pages = {308--313},
  publisher = {{ACM Press}},
  address = {{Arequipa, Peru}},
  doi = {10.1145/2899415.2899447},
  urldate = {2018-10-22},
  abstract = {Learning to program is known to be a difficult task, as the students typically lack the intrinsic motivation and find the new skills required difficult to master. It is hence typical for the educators to try to constantly improve their teaching methods to enhance the quality and outcome of the courses. We have developed an educational tool called ViLLE, which allows us to create interactive and automatically assessed programming exercises easily. In these exercises, the students have a near-toauthentic programming environment with compiler output and error messages provided. The same tool was used in our university's introductory programming course's final exam. In this paper, we analyze students' answers to three different coding exercises in this final exam. Since ViLLE automatically stores the program code when compiled, we have an access to previously unseen amounts of iterations of the exercise instead of just the final submission. The data is analyzed to identify typical misconceptions in programming exercises, and to show how the students gradually improve their answers based on the results and error messages. Finally, we discuss how the results of the analysis can be utilized to tackle these misconceptions during the course.},
  isbn = {978-1-4503-4231-5},
  langid = {english},
  annotation = {00015},
  file = {/Users/igormoreno/Zotero/storage/MFJMAYUF/Kurvinen et al - 2016 - Programming Misconceptions in an Introductory Level Programming Course Exam.pdf}
}

@article{kwonExploringProblemDecomposition2019,
  title = {Exploring Problem Decomposition and Program Development through Block-Based Programs},
  author = {Kwon, Kyungbin and Cheon, Jongpil},
  year = {2019},
  month = apr,
  journal = {International Journal of Computer Science Education in Schools},
  volume = {3},
  number = {1},
  pages = {3--16},
  issn = {2513-8359},
  doi = {10.21585/ijcses.v3i1.54},
  urldate = {2023-03-16},
  abstract = {Although teachers need to assess computational thinking (CT) for computer science education in K-12, it is not easy for them to evaluate students' programs based on the perspective. The purpose of this study was to investigate students' CT skills reflected in their Scratch programs. The context of the study was a middle school coding club where seven students voluntarily participated in a five-week coding activity. A total of eleven Scratch programs were analyzed in two aspects: problem decomposition and program development. Results revealed that students demonstrated proper decompositions of problems, which supported program development processes. However, in some cases, students failed to decompose necessary parts as their projects got sophisticated, which resulted in the failure or errors of programs. Regarding program development, algorythmic thinking had been identified as the area to be improved. Debugging and evaluation of programs were the necessary process students needed to practice. Implications for teaching CT skills were discussed.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/GPV2MH2X/Kwon and Cheon - 2019 - Exploring problem decomposition and program develo.pdf}
}

@article{kwonExploringProblemDecomposition2019a,
  title = {Exploring Problem Decomposition and Program Development through Block-Based Programs},
  author = {Kwon, Kyungbin and Cheon, Jongpil},
  year = {2019},
  month = apr,
  journal = {International Journal of Computer Science Education in Schools},
  volume = {3},
  number = {1},
  pages = {3--16},
  issn = {2513-8359},
  doi = {10.21585/ijcses.v3i1.54},
  urldate = {2023-03-16},
  abstract = {Although teachers need to assess computational thinking (CT) for computer science education in K-12, it is not easy for them to evaluate students' programs based on the perspective. The purpose of this study was to investigate students' CT skills reflected in their Scratch programs. The context of the study was a middle school coding club where seven students voluntarily participated in a five-week coding activity. A total of eleven Scratch programs were analyzed in two aspects: problem decomposition and program development. Results revealed that students demonstrated proper decompositions of problems, which supported program development processes. However, in some cases, students failed to decompose necessary parts as their projects got sophisticated, which resulted in the failure or errors of programs. Regarding program development, algorythmic thinking had been identified as the area to be improved. Debugging and evaluation of programs were the necessary process students needed to practice. Implications for teaching CT skills were discussed.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/GWK5KPIM/Kwon and Cheon - 2019 - Exploring problem decomposition and program develo.pdf}
}

@article{kyewskiGamifyNotGamify2018,
  title = {To Gamify or Not to Gamify? {{An}} Experimental Field Study of the Influence of Badges on Motivation, Activity, and Performance in an Online Learning Course},
  shorttitle = {To Gamify or Not to Gamify?},
  author = {Kyewski, Elias and Kr{\"a}mer, Nicole C.},
  year = {2018},
  month = mar,
  journal = {Computers \& Education},
  volume = {118},
  pages = {25--37},
  issn = {03601315},
  doi = {10.1016/j.compedu.2017.11.006},
  urldate = {2023-06-27},
  abstract = {Over the last few years, the implementation of game elements like badges in non-game environments has become increasingly popular (Butler, 2014). In this study, we tested whether badges, which could be received for successful task performance and specific activities within an e-learning course in a higher education setting, had an impact on students' motivation and performance. In a between-subjects experimental field study, students were randomly assigned to three different conditions (no badges, badges visible to peers, badges only visible to students themselves). The results show that badges have less impact on motivation and performance than is commonly assumed. Independent of condition, students' intrinsic motivation decreased over time. Contrary to expectation, the badges that could only be viewed by the students themselves were evaluated more positively than those that could also be viewed by others.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/EWC6WZD5/Kyewski and Krämer - 2018 - To gamify or not to gamify An experimental field .pdf}
}

@book{l.deefinkCreatingSignificantLearning2003,
  title = {Creating {{Significant Learning Experiences}}: {{An Integrated Approach}} to {{Designing College Courses}}},
  author = {{L. Dee Fink}},
  year = {2003},
  publisher = {{Jossey-Bass}},
  isbn = {0-7879-6055-1},
  annotation = {04277},
  file = {/Users/igormoreno/Zotero/storage/7ILRCY73/LDeeFink_Creating_Significant_Learning_Experi.pdf}
}

@article{lahtinenKickStartActivationNovice2009,
  title = {Kick-{{Start Activation}} to {{Novice Programming}} \textemdash{} {{A Visualization-Based Approach}}},
  author = {Lahtinen, Essi and Ahoniemi, Tuukka},
  year = {2009},
  month = jan,
  journal = {Electronic Notes in Theoretical Computer Science},
  series = {Proceedings of the {{Fifth Program Visualization Workshop}} ({{PVW}} 2008)},
  volume = {224},
  pages = {125--132},
  issn = {1571-0661},
  doi = {10.1016/j.entcs.2008.12.056},
  urldate = {2018-12-02},
  abstract = {In the beginning of learning programming students have misconceptions of what programming is. We have used a kick-start activation in the beginning of an introductory programming course (CS1) to set the record straight. A kick-start activation means introducing the deep structure of programming before the surface structure by making the students solve a certain type of problem in the first lecture. The problem is related to a realistic computer program, simple enough for everyone to understand and allow students to participate in debugging. A visualization-based approach helps making the example more concrete for students. In this article we present the concept kick-start activation and one concrete example. To support the example, we have also developed a visualization using the visualization tool JHAV\'E. We got positive feedback on the example and suggest further development of kick-start activations in order to make the beginning of learning programming more motivating for students.},
  keywords = {Kick-start activation,Novice programmers,Teaching programming,Visualizations},
  file = {/Users/igormoreno/Zotero/storage/IJIJBJTL/Lahtinen and Ahoniemi - 2009 - Kick-Start Activation to Novice Programming — A Visualization-Based Approach.pdf;/Users/igormoreno/Zotero/storage/KFVGBJ52/S1571066108005197.html}
}

@article{laiProgrammingComputerBasedAssessment2022,
  title = {Beyond {{Programming}}: {{A Computer-Based Assessment}} of {{Computational Thinking Competency}}},
  shorttitle = {Beyond {{Programming}}},
  author = {Lai, Rina P. Y.},
  year = {2022},
  month = jun,
  journal = {ACM Transactions on Computing Education},
  volume = {22},
  number = {2},
  pages = {1--27},
  issn = {1946-6226, 1946-6226},
  doi = {10.1145/3486598},
  urldate = {2023-03-16},
  abstract = {Computational Thinking (CT               ), entailing both domain-general and domain-specific skills, is a competency fundamental to computing education and beyond. However, as a cross-domain competency, appropriate assessment design and method remain equivocal. Indeed, the majority of the existing assessments have a predominant focus on measuring programming proficiency and neglecting other contexts in which CT can also be manifested. To broaden the promotion and practice of CT, it is necessary to integrate diverse problem types and item formats using a competency-based assessment method to measure CT. Taking a psychometric approach, this article evaluates a novel computer-based assessment of CT competency, Computational Thinking Challenge. The assessment was administered to 119 British upper secondary school students (               M               = 16.11;               SD               = 1.19) with a range of prior programming experiences. Results from several reliability analyses, a convergent validity analysis, and a Rasch analysis, provided evidence to support the quality of the assessment. Taken together, the study demonstrated the feasibility to expand from traditional assessment methods to integrating multiple contexts, problem types, and item formats in measuring CT competency in a comprehensive manner.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/D5CP9W4Q/Lai - 2022 - Beyond Programming A Computer-Based Assessment of.pdf}
}

@article{laiProgrammingComputerBasedAssessment2022a,
  title = {Beyond {{Programming}}: {{A Computer-Based Assessment}} of {{Computational Thinking Competency}}},
  shorttitle = {Beyond {{Programming}}},
  author = {Lai, Rina P. Y.},
  year = {2022},
  month = jun,
  journal = {ACM Transactions on Computing Education},
  volume = {22},
  number = {2},
  pages = {1--27},
  issn = {1946-6226, 1946-6226},
  doi = {10.1145/3486598},
  urldate = {2023-03-16},
  abstract = {Computational Thinking (CT               ), entailing both domain-general and domain-specific skills, is a competency fundamental to computing education and beyond. However, as a cross-domain competency, appropriate assessment design and method remain equivocal. Indeed, the majority of the existing assessments have a predominant focus on measuring programming proficiency and neglecting other contexts in which CT can also be manifested. To broaden the promotion and practice of CT, it is necessary to integrate diverse problem types and item formats using a competency-based assessment method to measure CT. Taking a psychometric approach, this article evaluates a novel computer-based assessment of CT competency, Computational Thinking Challenge. The assessment was administered to 119 British upper secondary school students (               M               = 16.11;               SD               = 1.19) with a range of prior programming experiences. Results from several reliability analyses, a convergent validity analysis, and a Rasch analysis, provided evidence to support the quality of the assessment. Taken together, the study demonstrated the feasibility to expand from traditional assessment methods to integrating multiple contexts, problem types, and item formats in measuring CT competency in a comprehensive manner.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/YF6B769T/Lai - 2022 - Beyond Programming A Computer-Based Assessment of.pdf}
}

@article{laiTeachersOntologicalPerspectives2022,
  title = {Teachers' {{Ontological Perspectives}} of {{Computational Thinking}} and {{Assessment}}: {{A Text Mining Approach}}},
  shorttitle = {Teachers' {{Ontological Perspectives}} of {{Computational Thinking}} and {{Assessment}}},
  author = {Lai, Rina P.Y.},
  year = {2022},
  month = jun,
  journal = {Journal of Educational Computing Research},
  volume = {60},
  number = {3},
  pages = {661--695},
  issn = {0735-6331, 1541-4140},
  doi = {10.1177/07356331211043547},
  urldate = {2023-03-16},
  abstract = {As a dynamic and multifaceted construct, computational thinking (CT) has proven to be challenging to conceptualize and assess, which impedes the development of a workable ontology framework. To address this issue, the current article describes a novel approach towards understanding the ontological aspects of CT by using text mining and graph-theoretic techniques to elucidate teachers' perspectives collected in an online survey (N {$\frac{1}{4}$} 105). In particular, a hierarchical cluster analysis, a knowledge representation method, was applied to identify sub-groups in CT conceptualization and assessment amongst teachers. Five clusters in conceptualization and two clusters in assessment were identified; several relevant and distinct themes were also extracted. The results suggested that teachers attributed CT as a competence domain, relevant in the problem- solving context, as well as applicable and transferrable to various disciplines. The results also shed light on the importance of using multiple approaches to assess the diversity of CT. Overall, the findings collectively contributed to a comprehensive and multi-perspective representation of CT that refine both theory and practice. The methodology employed in this article has suggested a minor but significant step towards addressing the quintessential questions of ``what is CT?'' and ``how is it evidenced?''.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/VWPVVAKM/Lai - 2022 - Teachers’ Ontological Perspectives of Computationa.pdf}
}

@article{laiTeachersOntologicalPerspectives2022a,
  title = {Teachers' {{Ontological Perspectives}} of {{Computational Thinking}} and {{Assessment}}: {{A Text Mining Approach}}},
  shorttitle = {Teachers' {{Ontological Perspectives}} of {{Computational Thinking}} and {{Assessment}}},
  author = {Lai, Rina P.Y.},
  year = {2022},
  month = jun,
  journal = {Journal of Educational Computing Research},
  volume = {60},
  number = {3},
  pages = {661--695},
  issn = {0735-6331, 1541-4140},
  doi = {10.1177/07356331211043547},
  urldate = {2023-03-16},
  abstract = {As a dynamic and multifaceted construct, computational thinking (CT) has proven to be challenging to conceptualize and assess, which impedes the development of a workable ontology framework. To address this issue, the current article describes a novel approach towards understanding the ontological aspects of CT by using text mining and graph-theoretic techniques to elucidate teachers' perspectives collected in an online survey (N {$\frac{1}{4}$} 105). In particular, a hierarchical cluster analysis, a knowledge representation method, was applied to identify sub-groups in CT conceptualization and assessment amongst teachers. Five clusters in conceptualization and two clusters in assessment were identified; several relevant and distinct themes were also extracted. The results suggested that teachers attributed CT as a competence domain, relevant in the problem- solving context, as well as applicable and transferrable to various disciplines. The results also shed light on the importance of using multiple approaches to assess the diversity of CT. Overall, the findings collectively contributed to a comprehensive and multi-perspective representation of CT that refine both theory and practice. The methodology employed in this article has suggested a minor but significant step towards addressing the quintessential questions of ``what is CT?'' and ``how is it evidenced?''.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/SBTJ2KCH/Lai - 2022 - Teachers’ Ontological Perspectives of Computationa.pdf}
}

@book{lakoffMetaphorsWeLive1980,
  title = {Metaphors {{We Live By}}},
  author = {Lakoff, George and Johnson, Mark},
  year = {1980},
  edition = {1st edition},
  publisher = {{University of Chicago Press}},
  abstract = {The now-classic Metaphors We Live By changed our understanding of metaphor and its role in language and the mind. Metaphor, the authors explain, is a fundamental mechanism of mind, one that allows us to use what we know about our physical and social experience to provide understanding of countless other subjects. Because such metaphors structure our most basic understandings of our experience, they are "metaphors we live by"\textemdash metaphors that can shape our perceptions and actions without our ever noticing them.In this updated edition of Lakoff and Johnson's influential book, the authors supply an afterword surveying how their theory of metaphor has developed within the cognitive sciences to become central to the contemporary understanding of how we think and how we express our thoughts in language.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/AIRUH49X/Lakoff and Johnson - 2008 - Metaphors We Live By.pdf}
}

@misc{LambdaCalculator,
  title = {The {{Lambda Calculator}}},
  urldate = {2021-04-17},
  howpublished = {http://lambdacalculator.com/},
  file = {/Users/igormoreno/Zotero/storage/2RZI2VTM/lambdacalculator.com.html}
}

@article{landersDefiningGamefulExperience2019,
  title = {Defining Gameful Experience as a Psychological State Caused by Gameplay: {{Replacing}} the Term `{{Gamefulness}}' with Three Distinct Constructs},
  shorttitle = {Defining Gameful Experience as a Psychological State Caused by Gameplay},
  author = {Landers, Richard N. and Tondello, Gustavo F. and Kappen, Dennis L. and Collmus, Andrew B. and Mekler, Elisa D. and Nacke, Lennart E.},
  year = {2019},
  month = jul,
  journal = {International Journal of Human-Computer Studies},
  volume = {127},
  pages = {81--94},
  issn = {10715819},
  doi = {10.1016/j.ijhcs.2018.08.003},
  urldate = {2023-06-27},
  abstract = {Background and Aim: Gamefulness is commonly cited as the primary goal of gamification, a family of approaches employed in education, business, healthcare, government, and elsewhere. However, gamefulness is defined imprecisely across the literature. To address this, we present a theory of gamefulness that splits gamefulness into more specific constructs and outlines their effects in a process model. Method: We integrate extant literature from psychology, human-computer interaction, and other fields to define gameful design, systems, and experiences. Most critically, we argue that gameful experience is the core focal construct of this theory and define it as an interactive state occurring when a person perceives non-trivial achievable goals created externally, is motivated to pursue them under an arbitrary set of behavioral rules, and evaluates that motivation as voluntary. Results: We present six resulting propositions: (1) gameful systems lead to gameful experiences, (2) gameful systems impact psychological characteristics, (3) effective gameful design leads to gameful systems, (4) effective gameful systems lead to behavioral change, (5) appropriate behavioral change causes the distal outcomes gamification designers target, and (6) individual differences moderate the effectiveness of gameful systems. Conclusion: Gameful experience theory provides researchers with a unified foundation to study gamification from any social scientific lens. 1. Introduction Gamefulness, a term originally introduced by McGonigal (2011), has since been included as a component of many academic conceptual presentations of gamification. For example, in the most cited definitional paper on gamification, Deterding et al. (2011) present gamefulness as the goal of gamification; in their approach, gameful design utilizes gameful interaction to create gamefulness. Gamefulness, in this view, is the primary outcome of successful gamification. We could interpret this to imply that for gamification to be successful, a gamified intervention must be experienced by its subjects similarly to how those subjects experience games. From this view, any gamification interventions that do not successfully create gamefulness are by definition unsuccessful, or more broadly interpreted, perhaps even ``not gamification.'' Unfortunately, gamefulness is itself typically only loosely defined,},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/ZKAAKU5Z/Landers et al. - 2019 - Defining gameful experience as a psychological sta.pdf}
}

@article{landersEnhancingInstructionalOutcomes2017,
  title = {Enhancing Instructional Outcomes with Gamification: {{An}} Empirical Test of the {{Technology-Enhanced Training Effectiveness Model}}},
  shorttitle = {Enhancing Instructional Outcomes with Gamification},
  author = {Landers, Richard N. and Armstrong, Michael B.},
  year = {2017},
  month = jun,
  journal = {Computers in Human Behavior},
  volume = {71},
  pages = {499--507},
  issn = {07475632},
  doi = {10.1016/j.chb.2015.07.031},
  urldate = {2023-06-27},
  abstract = {Background: Gamification, the use of game elements in non-game contexts, has become a popular technique to improve instructional outcomes in both organizational and educational contexts. In the organizational context, the Technology-Enhanced Training Effectiveness Model [TETEM] provides a framework to understand how technologies, like gamification, can effect change in various instructional outcomes. Specifically, application of TETEM suggests that gamification may not effect change in instructional outcomes when learner attitudes towards game-based learning and experience with video games are low.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/F4F8EJR3/Landers and Armstrong - 2017 - Enhancing instructional outcomes with gamification.pdf}
}

@article{landinMechanicalEvaluationExpressions1964,
  title = {The {{Mechanical Evaluation}} of {{Expressions}}},
  author = {Landin, P. J.},
  year = {1964},
  month = jan,
  journal = {The Computer Journal},
  volume = {6},
  number = {4},
  pages = {308--320},
  issn = {0010-4620, 1460-2067},
  doi = {10.1093/comjnl/6.4.308},
  urldate = {2021-10-14},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/IJGRTNXN/Landin - 1964 - The Mechanical Evaluation of Expressions.pdf}
}

@article{landinNext700Programming1966,
  title = {The {{Next}} 700 {{Programming Languages}}},
  author = {Landin, P. J.},
  year = {1966},
  month = mar,
  journal = {Communications of the ACM},
  volume = {9},
  number = {3},
  pages = {157--166},
  issn = {0001-0782},
  doi = {10.1145/365230.365257},
  urldate = {2018-12-01},
  abstract = {A family of unimplemented computing languages is described that is intended to span differences of application area by a unified framework. This framework dictates the rules about the uses of user-coined names, and the conventions about characterizing functional relationships. Within this framework the design of a specific language splits into two independent parts. One is the choice of written appearances of programs (or more generally, their physical representation). The other is the choice of the abstract entities (such as numbers, character-strings, list of them, functional relations among them) that can be referred to in the language. The system is biased towards ``expressions'' rather than ``statements.'' It includes a nonprocedural (purely functional) subsystem that aims to expand the class of users' needs that can be met by a single print-instruction, without sacrificing the important properties that make conventional right-hand-side expressions easy to construct and understand.},
  annotation = {00801},
  file = {/Users/igormoreno/Zotero/storage/TAK2ZFIH/Landin - 1966 - The Next 700 Programming Languages.pdf}
}

@article{landinNext700Programming1966a,
  title = {The next 700 Programming Languages},
  author = {Landin, P. J.},
  year = {1966},
  month = mar,
  journal = {Communications of the ACM},
  volume = {9},
  number = {3},
  pages = {157--166},
  issn = {0001-0782, 1557-7317},
  doi = {10.1145/365230.365257},
  urldate = {2023-10-02},
  abstract = {ISWlM, and providing certain basic grammatical categories in terms of which all of Isw1\textasciitilde 's more numerous categories can be expressed.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/6X4HTP9D/Landin66.pdf}
}

@article{landyHowAbstractSymbolic2007,
  title = {How Abstract Is Symbolic Thought?},
  author = {Landy, David and Goldstone, Robert L.},
  year = {2007},
  journal = {Journal of Experimental Psychology: Learning, Memory, and Cognition},
  volume = {33},
  number = {4},
  pages = {720--733},
  issn = {1939-1285(Electronic),0278-7393(Print)},
  doi = {10.1037/0278-7393.33.4.720},
  abstract = {In 4 experiments, the authors explored the role of visual layout in rule-based syntactic judgments. Participants judged the validity of a set of algebraic equations that tested their ability to apply the order of operations. In each experiment, a nonmathematical grouping pressure was manipulated to support or interfere with the mathematical convention. Despite the formal irrelevance of these grouping manipulations, accuracy in all experiments was highest when the nonmathematical pressure supported the mathematical grouping. The increase was significantly greater when the correct judgment depended on the order of operator precedence. The result that visual perception impacts rule application in mathematics has broad implications for relational reasoning in general. The authors conclude that formally symbolic reasoning is more visual than is usually proposed. (PsycINFO Database Record (c) 2016 APA, all rights reserved)},
  keywords = {Cognition,Judgment,Mathematics,Reasoning,Symbolism,To Read},
  file = {/Users/igormoreno/Zotero/storage/QRMQN2VA/Landy and Goldstone - 2007 - How abstract is symbolic thought.pdf;/Users/igormoreno/Zotero/storage/ANMXBZRQ/2007-08734-006.html}
}

@inproceedings{langelierVisualizationbasedAnalysisQuality2005,
  title = {Visualization-Based {{Analysis}} of {{Quality}} for {{Large-scale Software Systems}}},
  booktitle = {Proceedings of the 20th {{IEEE}}/{{ACM International Conference}} on {{Automated Software Engineering}}},
  author = {Langelier, Guillaume and Sahraoui, Houari and Poulin, Pierre},
  year = {2005},
  series = {{{ASE}} '05},
  pages = {214--223},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1101908.1101941},
  urldate = {2019-09-25},
  abstract = {We propose an approach for complex software analysis based on visualization. Our work is motivated by the fact that in spite of years of research and practice, software development and maintenance are still time and resource consuming, and high-risk activities. The most important reason in our opinion is the complexity of many phenomena related to software, such as its evolution and its reliability. In fact, there is very little theory explaining them. Today, we have a unique opportunity to empirically study these phenomena, thanks to large sets of software data available through open-source programs and open repositories. Automatic analysis techniques, such as statistics and machine learning, are usually limited when studying phenomena with unknown or poorly-understood influence factors. We claim that hybrid techniques that combine automatic analysis with human expertise through visualization are excellent alternatives to them. In this paper, we propose a visualization framework that supports quality analysis of large-scale software systems. We circumvent the problem of size by exploiting perception capabilities of the human visual system.},
  isbn = {978-1-58113-993-8},
  keywords = {metrics,quality assessment,software visualization},
  file = {/Users/igormoreno/Zotero/storage/3G5C5RE2/Langelier et al - 2005 - Visualization-based Analysis of Quality for Large-scale Software Systems.pdf}
}

@article{lapidotMethodsTeachingComputer2003,
  title = {Methods of {{Teaching}} a {{Computer Science Course}} for {{Prospective Teachers}}},
  author = {Lapidot, Tami and Hazzan, Orit},
  year = {2003},
  month = dec,
  journal = {SIGCSE Bull.},
  volume = {35},
  number = {4},
  pages = {29--34},
  issn = {0097-8418},
  doi = {10.1145/960492.960520},
  urldate = {2019-05-16},
  abstract = {This article focuses on a "Methods of Teaching Computer Science in the High School" course (abbreviated MTCS). It presents the rationale and need for the course, and suggests optional course frameworks and implementations that are not limited to a particular programming language, programming paradigm, level of students, or curriculum.},
  file = {/Users/igormoreno/Zotero/storage/SS3Q4R88/Lapidot and Hazzan - 2003 - Methods of Teaching a Computer Science Course for Prospective Teachers.pdf}
}

@article{larwinAssessingImpactTesting2013,
  title = {Assessing the {{Impact}} of {{Testing Aids}} on {{Post-Secondary Student Performance}}: {{A Meta-Analytic Investigation}}},
  shorttitle = {Assessing the {{Impact}} of {{Testing Aids}} on {{Post-Secondary Student Performance}}},
  author = {Larwin, K.H. and Gorman, J. and Larwin, D.A.},
  year = {2013},
  journal = {Educational Psychology Review},
  volume = {25},
  number = {3},
  pages = {429--443},
  doi = {10.1007/s10648-013-9227-1},
  abstract = {Testing aids, including student-prepared testing aids (a.k.a., cheat sheets or crib notes) and open-textbook exams, are common practice in post-secondary assessment. There is a considerable amount of published research that discusses and investigates the impact of these testing aids. However, the findings of this research are contradictory and inconclusive. The current meta-analytic investigation provides a general measure of the impact of both student-prepared testing aids and the use of open-textbook exams on student exam performance in post-secondary education, while examining variables that may moderate the effects of testing aids on student exam performance. The results indicate that, overall, testing aids can produce a moderate impact on student exam performance, with student-prepared testing aids associated with a larger effect (d=.402) relative to open-textbook exams (d = 0.257). The results are discussed in terms of their implications for college course instructors and for informing the broader debate about the role of testing aids in long-term student learning and mastery of course material. \textcopyright{} 2013 Springer Science+Business Media New York.},
  keywords = {Meta-analysis,Student exam performance,Testing aids},
  file = {/Users/igormoreno/Zotero/storage/C77FVPCH/Larwin et al - 2013 - Assessing the Impact of Testing Aids on Post-Secondary Student Performance.pdf;/Users/igormoreno/Zotero/storage/JF2U9R3R/display.html}
}

@inproceedings{lauCodehoundHelpingInstructors2022,
  title = {Codehound: {{Helping Instructors Track Pedagogical Code Dependencies}} in {{Course Materials}}},
  shorttitle = {Codehound},
  booktitle = {Proceedings of the 2022 {{ACM SIGPLAN International Symposium}} on {{SPLASH-E}}},
  author = {Lau, Sam and Guo, Philip J.},
  year = {2022},
  month = dec,
  series = {{{SPLASH-E}} 2022},
  pages = {1--6},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3563767.3568126},
  urldate = {2023-03-29},
  abstract = {Instructors of programming courses must manage a variety of pedagogical dependencies in their teaching materials. For instance, updating the code used in a single lesson can require cascading changes to other lessons in the course. Currently, they must manually maintain these dependencies across many files, which is tedious and error-prone. To help instructors track pedagogical code dependencies, we created a system called Codehound that uses static analysis to automatically detect where functions are introduced and reused through an entire course. To show how Codehound can be used, we present three usage scenarios inspired by our own experiences teaching large data science courses. These scenarios demonstrate how Codehound can help instructors create new content, collaborate with staff to refactor existing content, and estimate the cost of future course changes.},
  isbn = {978-1-4503-9900-5},
  keywords = {code dependencies,course material management},
  file = {/Users/igormoreno/Zotero/storage/CQ65JWMI/Lau and Guo - 2022 - Codehound Helping Instructors Track Pedagogical C.pdf}
}

@misc{lauSemanticWavesLegitimation2021,
  title = {Semantic {{Waves Legitimation Code Theory LCT}}},
  author = {Lau, William},
  year = {2021},
  month = feb,
  urldate = {2021-04-03},
  abstract = {Download the slides and resources at: http://bit.do/CAS2020WLau\hspace{0pt}}
}

@article{lavoueAnalyzingRelationshipsLearners2021,
  title = {Analyzing the Relationships between Learners' Motivation and Observable Engaged Behaviors in a Gamified Learning Environment},
  author = {Lavou{\'e}, {\'E}lise and Ju, Qinjie and Hallifax, Stuart and Serna, Audrey},
  year = {2021},
  month = oct,
  journal = {International Journal of Human-Computer Studies},
  volume = {154},
  pages = {102670},
  issn = {10715819},
  doi = {10.1016/j.ijhcs.2021.102670},
  urldate = {2023-06-27},
  abstract = {Over the last ten years, gamification has been widely integrated in digital learning environments as a way to increase learners' motivation. However, little is known about engaged behaviors adopted by learners when using gamified learning environments. In this paper, we analyze learners' interactions with a gamified learning environment to study learners' engagement in this particular context and to identify the factors that influence engaged behaviors. We also analyze the complex relationships that exist between learners' engagement and motivation. We conducted a large-scale field study in ecological conditions, involving 257 students (13-14 years' old) in 12 classes, from 4 different middle schools. We identified a model of engagement that distinguishes two types of engaged behaviors: an achievement-oriented engagement for initially intrinsically motivated learners or high achiever learners, and a perfection-oriented engagement for low achiever learners. We show that each type of engaged behavior has a specific impact on the variation in learners' motivation during the learning activity. This model contributes to a better understanding of how gamification can affect learners' engaged behaviors and motivation during the learning activity according to their initial motivation and player profile. These findings open up new perspectives in terms of motivational affordances, as well as the design and dynamic adaptation of gamification based on learners' interaction traces with the learning environment.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/W5Y8N9MS/Lavoué et al. - 2021 - Analyzing the relationships between learners’ moti.pdf}
}

@inproceedings{lawsonProgressionStudentReasoning2018,
  title = {Progression of {{Student Reasoning}} about {{Concurrency}}},
  booktitle = {Proceedings of the 2018 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Lawson, Aubrey},
  year = {2018},
  month = aug,
  pages = {280--281},
  publisher = {{ACM}},
  address = {{Espoo Finland}},
  doi = {10.1145/3230977.3231024},
  urldate = {2020-06-22},
  abstract = {In computing, concurrency refers to the notion that different parts or units of a program or algorithm may be executed out-of-order or in partial order, without affecting the final outcome. I seek to study how students conceptualize concurrency concepts and how these conceptualizations mature over the course of their undergraduate education. Thus far, I have designed an assessment that comprises two natural language problems and administered it to 110 undergraduate students at all four levels of the undergraduate program. I employed a grounded theory analysis to identify the emerging strategies and conceptions, performed open coding of student responses and abstracted emergent categories about student conceptions and problem-solving strategies. I compared these strategies and conceptions across grade levels to explore how student thinking around concurrency changes over the course of a CS education. This analysis will guide the design of a protocol for task-based interviews to further explore student reasoning. Longer term, the goal of my work is to inform the development of educational tools and strategies intended to promote the growth of student conceptions about concurrency.},
  isbn = {978-1-4503-5628-2},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/L5ZKZYKC/Lawson - 2018 - Progression of Student Reasoning about Concurrency.pdf}
}

@article{laythkhaleelEMPIRICALSTUDYGAMIFICATION2019,
  title = {{{AN EMPIRICAL STUDY ON GAMIFICATION FOR LEARNING PROGRAMMING LANGUAGE WEBSITE}}},
  author = {Layth Khaleel, Firas and Sahari Ashaari, Noraidah and Tengku Wook, Tengku Siti Meriam},
  year = {2019},
  month = feb,
  journal = {Jurnal Teknologi},
  volume = {81},
  number = {2},
  issn = {2180-3722, 0127-9696},
  doi = {10.11113/jt.v81.11133},
  urldate = {2020-09-28},
  abstract = {Computer science novice students find it hard to learn and master programming language subjects. In previous work, an investigation was done to confirm this assumption. The finding showed that students experienced ineffective learning, lacked interest towards this course, and lacked motivation. Previous studies have shown that applying Gamification elements in websites engages users. Gamification refers to the use of game elements in a non-game context in order to increase engagement between human and computer. In priory, a gamification-based learning website for programming language course was developed. This study aimed to measure the effectiveness and motivation level of using a Gamification website for programming language learning for first year students. Quantitative research approach was used. The effectiveness of the gamification website was tested using Quasi experiment. Student motivation was measured using ARCS motivation model. The findings showed that there were significant differences in the overall results of student performance (effectiveness and motivation) between the experimental and control groups.},
  langid = {english},
  annotation = {00015},
  file = {/Users/igormoreno/Zotero/storage/Z6YC5S8L/Layth Khaleel et al. - 2019 - AN EMPIRICAL STUDY ON GAMIFICATION FOR LEARNING PR.pdf}
}

@misc{lctcentreforknowledge-buildingSemanticWavesLegitimation,
  title = {Semantic Waves \textendash{} {{Legitimation Code Theory}}},
  author = {{LCT Centre for Knowledge-Building}},
  urldate = {2021-04-03},
  howpublished = {https://legitimationcodetheory.com/practice-and-impact/semantic-waves/},
  langid = {american},
  file = {/Users/igormoreno/Zotero/storage/IP7G5FDU/semantic-waves.html}
}

@article{leadbetterReviewComputerAlgebra1989,
  title = {A Review of Computer Algebra and Its Educational Implications in the Teaching of Mathematics},
  author = {Leadbetter, Peter and Thomas, Peter},
  year = {1989},
  journal = {Education and Computing},
  volume = {5},
  number = {4},
  pages = {243--259},
  issn = {01679287},
  doi = {10.1016/S0167-9287(89)80050-0},
  urldate = {2018-11-06},
  abstract = {Computer algebra, a part of symbolic computation, is attracting a lot of attention as a teaching tool. Potentially, computer algebra systems offer the educator new and exciting ways of presenting mathematical ideas. The latest systems take advantage of the recent advances in microcomputer hardware. This paper describes what computer algebra is, and reviews it likely affect on the teaching of mathematics. The capabilities of the most useful systems are described, followed by brief outlines of the system themselves. The paper concludes with a substantial section covering sources of further information and gives details of the organisations active in this field.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/IJB4V3HG/Leadbetter and Thomas - 1989 - A review of computer algebra and its educational implications in the teaching.pdf}
}

@misc{lebecFlockFunctionsCombinators2017,
  title = {A {{Flock}} of {{Functions}}: {{Combinators}}, {{Lambda Calculus}}, \& {{Church Encodings}} in {{JS}} - {{Part II}}},
  shorttitle = {A {{Flock}} of {{Functions}}},
  year = {2017},
  month = aug,
  urldate = {2021-04-11},
  abstract = {Part 2 of Lebec's Fullstack Academy talk. 🔗 Part I: https://youtu.be/3VQ382QG-y4\hspace{0pt} 🔗 Slides: http://bit.ly/2xpcPKn\hspace{0pt} 🔗 Repo: https://github.com/glebec/lambda-talk\hspace{0pt} A presentation given at Fullstack Academy of Code, by instructor Gabriel Lebec. The Lambda Calculus is a symbol manipulation system which suffices to calculate anything calculable. This branch of pure mathematics forms the backbone of functional programming languages, and here it is presented through the concrete and familiar lens of JavaScript.},
  collaborator = {Lebec, Gabriel}
}

@misc{lebecLambdaCalculusFundamentals2017,
  title = {Lambda {{Calculus}} - {{Fundamentals}} of {{Lambda Calculus}} \& {{Functional Programming}} in {{JavaScript}}},
  year = {2017},
  month = aug,
  urldate = {2021-04-11},
  abstract = {The Lambda Calculus is a symbol manipulation system which suffices to calculate anything calculable. This branch of pure mathematics forms the backbone of functional programming languages, and here it is presented through the concrete and familiar lens of JavaScript. In this Lambda Calculus video you will learn: - Lambda Calculus Syntax - History of the foundations of mathematical logic - The essence of functional programming 🔗 Part II: https://youtu.be/pAnLQ9jwN-E\hspace{0pt} 🔗 Slides: http://bit.ly/2xpcPKn\hspace{0pt} 🔗 Repo: https://github.com/glebec/lambda-talk\hspace{0pt}},
  collaborator = {Lebec, Gabriel}
}

@inproceedings{leeComparingEffectivenessOnline2015,
  title = {Comparing the {{Effectiveness}} of {{Online Learning Approaches}} on {{CS1 Learning Outcomes}}},
  booktitle = {Proceedings of the Eleventh Annual {{International Conference}} on {{International Computing Education Research}}},
  author = {Lee, Michael J. and Ko, Andrew J.},
  year = {2015},
  month = aug,
  pages = {237--246},
  publisher = {{ACM}},
  address = {{Omaha Nebraska USA}},
  doi = {10.1145/2787622.2787709},
  urldate = {2021-03-10},
  abstract = {People are increasingly turning to online resources to learn to code. However, despite their prevalence, it is still unclear how successful these resources are at teaching CS1 programming concepts. Using a pretest-posttest study design, we measured the performance of 60 novices before and after they used one of the following, randomly assigned learning activities: 1) complete a Python course on a website called Codecademy, 2) play through and finish a debugging game called Gidget, or 3) use Gidget's puzzle designer to write programs from scratch. The pre- and posttest exams consisted of 24 multiple choice questions that were selected and validated based on data from 1,494 crowdsourced respondents. All 60 of our novices across the three conditions did poorly on the exams overall in both the pre-tests and post-tests (e.g., the best median post-test score was 50\% correct). However, those completing the Codecademy course and those playing through the Gidget game showed over a 100\% increase in correct answers when comparing their post-test exam scores to their pretest exam scores. Those playing Gidget, however, achieved these same learning gains in half the time. This was in contrast to novices that used the puzzle designer, who did not show any measurable learning gains. All participants performed similarly within their own conditions, regardless of gender, age, or education. These findings suggest that discretionary online educational technologies can successfully teach novices introductory programming concepts (to a degree) within a few hours when explicitly guided by a curriculum.},
  isbn = {978-1-4503-3630-7},
  langid = {english},
  annotation = {00065},
  file = {/Users/igormoreno/Zotero/storage/3R2FEPUC/Lee and Ko - 2015 - Comparing the Effectiveness of Online Learning App.pdf}
}

@article{leeConsiderationsFutureProgramming1977,
  title = {Considerations for Future Programming Language Standards Activities},
  author = {Lee, John A. N.},
  year = {1977},
  month = nov,
  journal = {Communications of the ACM},
  volume = {20},
  number = {11},
  pages = {788--794},
  issn = {00010782},
  doi = {10.1145/359863.359866},
  urldate = {2020-06-22},
  abstract = {This paper reviews the current state of programming language standards activities with respect to the anomalies which exist between the various published and proposed standards for Fortran, Cobol, PL/I, and Basic. Proposals are made for the inclusion of formalisms within future standards and the extension of the standards to include additional items such as error conditions and documentation.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/ILTM4A9Q/Lee - 1977 - Considerations for future programming language standards activities.pdf}
}

@article{leeDebugItDebugging1999,
  title = {Debug {{It}}: {{A}} Debugging Practicing System},
  author = {Lee, Greg C and Wu, Jackie C},
  year = {1999},
  pages = {15},
  abstract = {This study reported the research \textregistered ndings on improving programming skills of novice programmers by way of debugging practices. There were two objectives of the debugging training: (1) to uncover and to correct any misconceptions of the programmers; and (2) to improve the debugging abilities of the programmers. To meet these objectives, a model of debugging practices, DebugIt, was presented. The proposed model called for supervised debugging practices on short programs involving frequently committed programming errors. A system, DebugIt:Loop, was developed speci\textregistered cally for debugging practices on programs with loop related errors. Two sets of experiments were conducted with 26 college students and 46 senior high school students enrolled in introductory Pascal courses. For each experiment, students were randomly assigned into the experimental group (using DebugIt:loop for debugging practice) and the control group (using traditional programming practices). A posttest was administered to compare the debugging and errorless programming abilities among the students in the two groups. The statistical procedure of an ANCOVA was used to analyze the gathered data. The results showed that this model of supervised debugging practices was eective in improving novice programmers' programming skills. \# 1999 Elsevier Science Ltd. All rights reserved.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/JFLFBZA5/Lee and Wu - 1999 - Debug It A debugging practicing system.pdf}
}

@article{leeDevelopingAlgebraicThinking2006,
  title = {Developing {{Algebraic Thinking}} through {{Pattern Exploration}}},
  author = {Lee, Lesley and Freiman, Viktor},
  year = {2006},
  month = may,
  journal = {Mathematics Teaching in the Middle School},
  volume = {11},
  number = {9},
  pages = {428--433},
  issn = {1072-0839},
  urldate = {2019-01-28},
  abstract = {Pattern work is now undertaken as early as kindergarten, and both researchers and teachers have discovered that children engage in pattern work with great enthusiasm and innate ability. Having some flexibility in pattern perception and selecting mathematically useful patterns require some training, although there is nothing particularly algebraic about these skills. They are, however, a prerequisite to using patterns for introducing more formal algebra. Expressing pattern "seeings," saying a pattern with words and eventually using algebraic symbolism, is part of algebra. A pattern rule involves the use of a variable quantity.  Although the variable in school pattern work is restricted to natural numbers, students can acquire some familiarity with the role of variables. Guided by scaffolded questioning, pattern explorations can lead to some very rich algebraic thinking about variables and unknowns, equivalence of algebraic expressions, symbol manipulation, domain and range of expressions  and equations, and solving for the unknown. This article illustrates--using the growing T pattern--how to scaffold classroom questioning in order to introduce the formal study of algebra in middle school. (Contains 5 figures.)},
  langid = {english},
  keywords = {Algebra,LearnToAbstract,Mathematical Concepts,Mathematical Logic,Mathematics Education,Mathematics Skills,Middle School Students,Pattern Recognition,Secondary School Mathematics,Teaching Methods,Thinking Skills,To Read},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/JUMVMG3G/Lee and Freiman - 2006 - Developing Algebraic Thinking through Pattern Exploration.pdf;/Users/igormoreno/Zotero/storage/AXW9JRSY/eric.ed.gov.html}
}

@incollection{leeInitiationAlgebraicCulture1996,
  title = {An {{Initiation}} into {{Algebraic Culture}} through {{Generalization Activities}}},
  booktitle = {Approaches to {{Algebra}}: {{Perspectives}} for {{Research}} and {{Teaching}}},
  author = {Lee, Lesley},
  editor = {Bernarz, Nadine and Kieran, Carolyn and Lee, Lesley},
  year = {1996},
  series = {Mathematics {{Education Library}}},
  pages = {87--106},
  publisher = {{Springer Netherlands}},
  address = {{Dordrecht}},
  doi = {10.1007/978-94-009-1732-3_6},
  urldate = {2019-01-28},
  abstract = {Considering algebra as a culture, this chapter looks at the introduction of algebra as an initiation process where generalization activities can be extremely effective. After a reflection on my own immersion into algebra and the evolution of attitudes toward the teaching of algebra, a teaching experiment using generalization activities is presented. Two generalizing activities are described in some detail, looking at the behavior of adults in the experimental group in the light of research results of high school students on tests and interviews involving the same activities. The paper concludes with a ``cultural'' reflection on the teaching experiment and a more general consideration of the role of generalization in the introduction of algebra.},
  isbn = {978-94-009-1732-3},
  langid = {english},
  keywords = {Generalization Activity,High School Student,LearnToAbstract,Pattern Perception,Source Problem,Teaching Experiment},
  annotation = {00000}
}

@article{leeInteractionsProblemSolving2010,
  title = {The Interactions between Problem Solving and Conceptual Change: {{System}} Dynamic Modelling as a Platform for Learning},
  shorttitle = {The Interactions between Problem Solving and Conceptual Change},
  author = {Lee, Chwee Beng},
  year = {2010},
  month = nov,
  journal = {Computers \& Education},
  volume = {55},
  number = {3},
  pages = {1145--1158},
  issn = {03601315},
  doi = {10.1016/j.compedu.2010.05.012},
  urldate = {2018-11-06},
  abstract = {This study examines the interactions between problem solving and conceptual change in an elementary science class where students build system dynamic models as a form of problem representations. Through mostly qualitative findings, we illustrate the interplay of three emerging intervening conditions (epistemological belief, structural knowledge and domain knowledge), the choice of learning strategy and the learning outcomes through a theoretical model.},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/9KXGRSY4/Lee - 2010 - The interactions between problem solving and conceptual change.pdf}
}

@inproceedings{leeStructuredApproachTeaching2014,
  title = {A Structured Approach to Teaching Recursion Using Cargo-Bot},
  booktitle = {Proceedings of the Tenth Annual Conference on {{International}} Computing Education Research - {{ICER}} '14},
  author = {Lee, Elynn and Shan, Victoria and Beth, Bradley and Lin, Calvin},
  year = {2014},
  pages = {59--66},
  publisher = {{ACM Press}},
  address = {{Glasgow, Scotland, United Kingdom}},
  doi = {10.1145/2632320.2632356},
  urldate = {2018-11-30},
  abstract = {Recursion is a notoriously di cult concept to learn. This paper presents a structured approach to teaching recursion that combines classroom lectures and self-paced interaction with Cargo-Bot, a video game in which users solve puzzles using a simple visual programming language. After mapping Cargo-Bot games to a set of learning goals, we devise a lesson plan that uses Cargo-Bot game playing to sca old key concepts used in writing recursive Java programs. We empirically evaluate our approach using 204 undergraduates enrolled in a CS2 course, and we show strong statistical evidence that our approach improves student learning of recursion over traditional lecture-based instruction alone.},
  isbn = {978-1-4503-2755-8},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/NNUI3XQJ/Lee et al - 2014 - A structured approach to teaching recursion using cargo-bot.pdf}
}

@mastersthesis{leeTeachingAlgebraFunctional2013,
  title = {Teaching {{Algebra}} through {{Functional Programming}}:{{An Analysis}} of the {{Bootstrap Curriculum}}},
  author = {Lee, Robert},
  year = {2013},
  month = mar,
  address = {{Provo, UT, USA}},
  abstract = {Bootstrap is a computer-programming curriculum that teaches students to program video games using Racket, a functional programming language based on algebraic syntax. This study investigated the relationship between learning to program video games from a Bootstrap course and the resulting effect on students' understanding of algebra. Courses in three different schools, lasting about six weeks each, were studied. Control and treatment groups were given a pre and post algebra assessment. A qualitative component consisting of observations and interviews was also used to further triangulate findings. Statistical analysis revealed that students who completed the Bootstrap course gained a significantly better understanding of variables and a suggestive improvement in understanding functions. In the assessments, students failed to demonstrate a transfer of the advanced concepts of function composition and piecewise functions from programming to algebraic notation. Interviews with students demonstrated that with coaching, students were able to relate functions written in Racket to functions written in algebraic notation, but were not yet able to transfer their experience of function composition from programming to algebra.},
  langid = {english},
  school = {Brigham Young University},
  annotation = {00003},
  file = {/Users/igormoreno/Zotero/storage/XSIINA3D/Lee - Teaching Algebra through Functional ProgrammingAn.pdf}
}

@article{LehrplaeneSchwerpunktfaecher,
  title = {{Lehrpl\"ane Schwerpunktf\"acher}},
  langid = {ngerman},
  file = {/Users/igormoreno/Zotero/storage/2B9EES3A/DE-Rahmenlehrplan-Informatik-2008.pdf;/Users/igormoreno/Zotero/storage/9JK762CB/DE-2023_10-Vernehmlassung_RLP_Informatik_Schwerpunktfach_D.xlsx;/Users/igormoreno/Zotero/storage/AH5X3IKP/DE-2023_10-Informatik_RLP_Schwerpunktfach_D.pdf;/Users/igormoreno/Zotero/storage/IDTSKT8S/DE-Rahmenlehrplan-Informatik-2017.pdf;/Users/igormoreno/Zotero/storage/K3NEK3Y7/DE-Rahmenlehrplan-1994.pdf;/Users/igormoreno/Zotero/storage/KC7HAHZU/FR-2023_10-Commentaires_PEC_informatique_Option_specifique_F.xlsx;/Users/igormoreno/Zotero/storage/M25UB9AV/FR-2023_10-Informatique_PEC_Option_specifique_f.pdf;/Users/igormoreno/Zotero/storage/NJQB388A/DE-MAR23.pdf;/Users/igormoreno/Zotero/storage/RBMHNXF3/DE-2023_10-Informatik_RLP_Schwerpunktfach_D_deepl_en.pdf;/Users/igormoreno/Zotero/storage/T6NE8H3Y/DE-2023_10-Informatik_RLP_Schwerpunktfach_D_gtranslate_en.pdf;/Users/igormoreno/Zotero/storage/ZF59DQ6L/DE-Vademecum.pdf}
}

@inproceedings{lehtinenAutomatedQuestionnairesStudents2023,
  title = {Automated {{Questionnaires About Students}}' {{JavaScript Programs}}: {{Towards Gauging Novice Programming Processes}}},
  shorttitle = {Automated {{Questionnaires About Students}}' {{JavaScript Programs}}},
  booktitle = {Australasian {{Computing Education Conference}}},
  author = {Lehtinen, Teemu and Haaranen, Lassi and Leinonen, Juho},
  year = {2023},
  month = jan,
  pages = {49--58},
  publisher = {{ACM}},
  address = {{Melbourne VIC Australia}},
  doi = {10.1145/3576123.3576129},
  urldate = {2023-10-12},
  abstract = {Students sometimes manage to produce functionally correct program code while having a fragile understanding of the related learning goals. Such unproductive success could be intercepted by an educator who asks questions that target the structure and evaluation of the student's program using the constructs and identifiers in the code. We provide a tool that automatically generates multiple-choice questions of seven different types for this purpose. We integrated these questions into a web-based program writing exercises, which we also publish as a part of this work, and successfully used them on an introductory programming course. In our pilot evaluation of the tool, we found that the students who answer these questions repeatedly incorrectly are likely to drop out, have more challenges while writing a program, and resort to tinkering behavior.},
  isbn = {978-1-4503-9941-8},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/SUZ9X5XR/Lehtinen et al. - 2023 - Automated Questionnaires About Students’ JavaScrip.pdf}
}

@inproceedings{lehtinenAutomatedQuestionsLearners2023,
  title = {Automated {{Questions About Learners}}' {{Own Code Help}} to {{Detect Fragile Prerequisite Knowledge}}},
  booktitle = {Proceedings of the 2023 {{Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education V}}. 1},
  author = {Lehtinen, Teemu and Sepp{\"a}l{\"a}, Otto and Korhonen, Ari},
  year = {2023},
  month = jun,
  pages = {505--511},
  publisher = {{ACM}},
  address = {{Turku Finland}},
  doi = {10.1145/3587102.3588787},
  urldate = {2023-10-12},
  abstract = {Students are able to produce correctly functioning program code even though they have a fragile understanding of how it actually works. Questions derived automatically from individual exercise submissions (QLC) can probe if and how well the students understand the structure and logic of the code they just created. Prior research studied this approach in the context of the first programming course. We replicate the study on a follow-up programming course for engineering students which contains a recap of general concepts in CS1. The task was the classic rainfall problem which was solved by 90\% of the students. The QLCs generated from each passing submission were kept intentionally simple, yet 27\% of the students failed in at least one of them. Students who struggled with questions about their own program logic had a lower median for overall course points than students who answered correctly.},
  isbn = {9798400701382},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/XIGCFKYU/Lehtinen et al. - 2023 - Automated Questions About Learners' Own Code Help .pdf}
}

@inproceedings{lehtinenLetAskStudents2021,
  title = {Let's {{Ask Students About Their Programs}}, {{Automatically}}},
  booktitle = {2021 {{IEEE}}/{{ACM}} 29th {{International Conference}} on {{Program Comprehension}} ({{ICPC}})},
  author = {Lehtinen, Teemu and Santos, Andre L. and Sorva, Juha},
  year = {2021},
  month = may,
  pages = {467--475},
  publisher = {{IEEE}},
  address = {{Madrid, Spain}},
  doi = {10.1109/ICPC52881.2021.00054},
  urldate = {2023-10-13},
  abstract = {Students sometimes produce code that works but that its author does not comprehend. For example, a student may apply a poorly-understood code template, stumble upon a working solution through trial and error, or plagiarize. Similarly, passing an automated functional assessment does not guarantee that the student understands their code. One way to tackle these issues is to probe students' comprehension by asking them questions about their own programs. We propose an approach to automatically generate questions about student-written program code. We moreover propose a use case for such questions in the context of automatic assessment systems: after a student's program passes unit tests, the system poses questions to the student about the code. We suggest that these questions can enhance assessment systems, deepen student learning by acting as self-explanation prompts, and provide a window into students' program comprehension. This discussion paper sets an agenda for future technical development and empirical research on the topic.},
  isbn = {978-1-66541-403-6},
  langid = {english},
  keywords = {Automatic assessment,automatic question generation,Computer Science - Computers and Society,Education,Plagiarism,Probes,program comprehension,programming education,Proposals,self-explanation,Software},
  file = {/Users/igormoreno/Zotero/storage/C7XRGX2B/Lehtinen et al. - 2021 - Let’s Ask Students About Their Programs, Automatic.pdf;/Users/igormoreno/Zotero/storage/GZ2PCTDX/Lehtinen et al. - 2021 - Let’s Ask Students About Their Programs, Automatic.pdf}
}

@inproceedings{lehtinenStudentsStruggleExplain2021,
  title = {Students {{Struggle}} to {{Explain Their Own Program Code}}},
  booktitle = {Proceedings of the 26th {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education V}}. 1},
  author = {Lehtinen, Teemu and Lukkarinen, Aleksi and Haaranen, Lassi},
  year = {2021},
  month = jun,
  eprint = {2104.06710},
  primaryclass = {cs},
  pages = {206--212},
  doi = {10.1145/3430665.3456322},
  urldate = {2022-06-08},
  abstract = {We asked students to explain the structure and execution of their small programs after they had submitted them to a programming exercise. These questions about learner's code (QLCs) were delivered at three occasions in an online and open course in introductory programming as a part of the digital learning material. We make inductive content analysis to research the open-ended text answers we collected. One third of the students struggled to explain their own program code. This estimates possible occurrences of fragile learning at the moment when a student seemingly succeeds in a program writing exercise. Furthermore, we examine correlations between the correctness of the answers with other learning data. Our results indicate that answering properly aligned QLCs correctly has stronger correlation with student success and retention than merely submitting a correct program. Additionally, we present observations on learning event-driven programming to explore QLCs' potential in identifying students' thinking process.},
  archiveprefix = {arxiv},
  keywords = {Computer Science - Computers and Society},
  file = {/Users/igormoreno/Zotero/storage/T3S4RUIE/Lehtinen et al. - 2021 - Students Struggle to Explain Their Own Program Cod.pdf;/Users/igormoreno/Zotero/storage/B4TPMRZS/2104.html}
}

@inproceedings{leinonenSeeingProgramOutput2023,
  title = {Seeing {{Program Output Improves Novice Learning Gains}}},
  booktitle = {Proceedings of the 2023 {{Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education V}}. 1},
  author = {Leinonen, Juho and Hellas, Arto and Edwards, John},
  year = {2023},
  month = jun,
  pages = {180--186},
  publisher = {{ACM}},
  address = {{Turku Finland}},
  doi = {10.1145/3587102.3588796},
  urldate = {2023-07-26},
  isbn = {9798400701382},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/EUSKN3GC/Leinonen et al. - 2023 - Seeing Program Output Improves Novice Learning Gai.pdf}
}

@inproceedings{leiteEffectsHumanVs2020,
  title = {Effects of {{Human}} vs. {{Automatic Feedback}} on {{Students}}' {{Understanding}} of {{AI Concepts}} and {{Programming Style}}},
  booktitle = {Proceedings of the 51st {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Leite, Abe and Blanco, Sa{\'u}l A.},
  year = {2020},
  month = feb,
  series = {{{SIGCSE}} '20},
  pages = {44--50},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3328778.3366921},
  urldate = {2022-11-27},
  abstract = {The use of automatic grading tools has become nearly ubiquitous in large undergraduate programming courses, and recent work has focused on improving the quality of automatically generated feedback. However, there is a relative lack of data directly comparing student outcomes when receiving computer-generated feedback and human-written feedback. This paper addresses this gap by splitting one 90-student class into two feedback groups and analyzing differences in the two cohorts' performance. The class is an intro to AI with programming HW assignments. One group of students received detailed computer-generated feedback on their programming assignments describing which parts of the algorithms' logic was missing; the other group additionally received human-written feedback describing how their programs' syntax relates to issues with their logic, and qualitative (style) recommendations for improving their code. Results on quizzes and exam questions suggest that human feedback helps students obtain a better conceptual understanding, but analyses found no difference between the groups' ability to collaborate on the final project. The course grade distribution revealed that students who received human-written feedback performed better overall; this effect was the most pronounced in the middle two quartiles of each group. These results suggest that feedback about the syntax-logic relation may be a primary mechanism by which human feedback improves student outcomes.},
  isbn = {978-1-4503-6793-6},
  keywords = {automatic grading,feedback,programming style,references to syntax,student outcomes,syntax-logic relation},
  file = {/Users/igormoreno/Zotero/storage/6VQK5C2I/Leite and Blanco - 2020 - Effects of Human vs. Automatic Feedback on Student.pdf}
}

@inproceedings{lempsinkTypesafeDiffFamilies2009,
  title = {Type-Safe Diff for Families of Datatypes},
  booktitle = {Proceedings of the 2009 {{ACM SIGPLAN}} Workshop on {{Generic}} Programming},
  author = {Lempsink, Eelco and Leather, Sean and L{\"o}h, Andres},
  year = {2009},
  month = aug,
  series = {{{WGP}} '09},
  pages = {61--72},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1596614.1596624},
  urldate = {2022-03-11},
  abstract = {The UNIX diff program finds the difference between two text files using a classic algorithm for determining the longest common subsequence; however, when working with structured input (e.g. program code), we often want to find the difference between tree-like data (e.g. the abstract syntax tree). In a functional programming language such as Haskell, we can represent this data with a family of (mutually recursive) datatypes. In this paper, we describe a functional, datatype-generic implementation of diff (and the associated program patch). Our approach requires advanced type system features to preserve type safety; therefore, we present the code in Agda, a dependently-typed language well-suited to datatype-generic programming. In order to establish the usefulness of our work, we show that its efficiency can be improved with memoization and that it can also be defined in Haskell.},
  isbn = {978-1-60558-510-9},
  keywords = {datatype-generic programming,dependent types,edit distance},
  file = {/Users/igormoreno/Zotero/storage/VPVAG5BF/Lempsink et al. - 2009 - Type-safe diff for families of datatypes.pdf}
}

@article{leppinkCognitiveLoadTheory2017,
  title = {Cognitive Load Theory: {{Practical}} Implications and an Important Challenge},
  shorttitle = {Cognitive Load Theory},
  author = {Leppink, Jimmie},
  year = {2017},
  month = oct,
  journal = {Journal of Taibah University Medical Sciences},
  volume = {12},
  number = {5},
  pages = {385--391},
  issn = {1658-3612},
  doi = {10.1016/j.jtumed.2017.05.003},
  urldate = {2018-11-06},
  abstract = {The field of medical education has adopted a wide variety of theories from other fields. A fairly recent example is cognitive load theory, which originated in educational psychology. Several empirical studies inspired by cognitive load theory and reviews of practical implications of cognitive load theory have contributed to guidelines for the design of medical education. Simultaneously, several research groups have developed instruments for the measurement of cognitive load in a medical education context. These developments notwithstanding, obtaining evidence for different types of cognitive load remains an important challenge. Therefore, the aim of this article is twofold: to provide medical educators with three key guidelines for the design of instruction and assessment and to discuss several fundamental issues in the remaining challenges presented by different types of cognitive load. The guidelines revolve around minimizing cognitive activity that does not contribute to learning, working with specific learning goals in mind, and appreciating the multifaceted relation between learning and assessment. Key issues around the types of cognitive load include the context in which learning occurs, the continued use of single-item mental effort ratings, and the timing of cognitive load and learning outcome measurements.},
  keywords = {Cognitive load theory,Design,Education,Learning,Measurement},
  file = {/Users/igormoreno/Zotero/storage/HAGTHF9G/Leppink - 2017 - Cognitive load theory Practical implications and .pdf;/Users/igormoreno/Zotero/storage/6I5UACRU/S1658361217300835.html}
}

@article{leppinkEffectsPairsProblems2014,
  title = {Effects of Pairs of Problems and Examples on Task Performance and Different Types of Cognitive Load},
  author = {Leppink, Jimmie and Paas, Fred and {van Gog}, Tamara and {van der Vleuten}, Cees P. M. and {van Merri{\"e}nboer}, Jeroen J. G.},
  year = {2014},
  month = apr,
  journal = {Learning and Instruction},
  volume = {30},
  pages = {32--42},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2013.12.001},
  urldate = {2018-11-06},
  abstract = {In two studies, we investigated whether a recently developed psychometric instrument can differentiate intrinsic, extraneous, and germane cognitive load. Study I revealed a similar three-factor solution for language learning (n~=~108) and a statistics lecture (n~=~174), and statistics exam scores correlated negatively with the factors assumed to represent intrinsic and extraneous cognitive load during the lecture. In Study II, university freshmen who studied applications of Bayes' theorem in example\textendash example (n~=~18) or example\textendash problem (n~=~18) condition demonstrated better posttest performance than their peers who studied the applications in problem\textendash example (n~=~18) or problem\textendash problem (n~=~20) condition, and a slightly modified version of the aforementioned psychometric instrument could help researchers to differentiate intrinsic and extraneous cognitive load. The findings provide support for a recent reconceptualization of germane cognitive load as referring to the actual working memory resources devoted to dealing with intrinsic cognitive load.},
  keywords = {Cognitive load,Example\textendash example pairs,Example\textendash problem pairs,Problem\textendash example pairs,Problem\textendash problem pairs},
  file = {/Users/igormoreno/Zotero/storage/ISVU27XQ/Leppink et al - 2014 - Effects of pairs of problems and examples on task performance and different.pdf;/Users/igormoreno/Zotero/storage/6NHWQZMU/S0959475213000820.html}
}

@article{leronComputationalRecursionMathematical1986,
  title = {Computational {{Recursion}} and {{Mathematical Induction}}},
  author = {Leron, Uri and Zazkis, Rina},
  year = {1986},
  month = jun,
  journal = {For the Learning of Mathematics},
  volume = {6},
  number = {2},
  pages = {6},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/4ZK7CKP6/Leron and Zazkis - 1986 - Computational Recursion and Mathematical Induction.pdf}
}

@misc{lessonlabinc.TIMSS1999Video1999,
  title = {{{TIMSS}} 1999 {{Video Study Transcription}}/{{Translation Manual}}},
  author = {{LessonLab Inc.}},
  year = {1999},
  urldate = {2019-08-22},
  file = {/Users/igormoreno/Zotero/storage/H4MMW6MG/LessonLab Inc. - 1999 - TIMSS 1999 Video Study Transcription-Translation Manual.pdf}
}

@misc{lessonlabinc.TIMSSR1999Video1999,
  title = {{{TIMSS-R}} 1999 {{Video Study Math Coding Manual}}},
  author = {{LessonLab Inc.}},
  year = {1999},
  langid = {english},
  keywords = {ForLuca},
  file = {/Users/igormoreno/Zotero/storage/EB9VQAMU/LessonLab Inc. - 1999 - TIMSS-R 1999 Video Study Math Coding Manual.pdf}
}

@misc{lessonlabinc.TIMSSR1999Video1999a,
  title = {{{TIMSS-R}} 1999 {{Video Study Data Collection Manual}}},
  author = {{LessonLab Inc.}},
  year = {1999},
  publisher = {{LessonLab Inc. of Los Angeles, California}},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/MMJ5ISG6/LessonLab Inc. - 1999 - TIMSS-R 1999 Video Study Data Collection Manual.pdf}
}

@misc{LessonsMasteryLearning,
  title = {Lessons of {{Mastery Learning}}},
  journal = {ASCD},
  urldate = {2023-07-03},
  abstract = {The core elements of mastery learning provide the foundation for other innovative models, including Response to Intervention.},
  howpublished = {https://www.ascd.org/el/articles/lessons-of-mastery-learning},
  langid = {english}
}

@inproceedings{levyRecursivelySpeakingAnalyzing2000,
  title = {Recursively {{Speaking}}: + {{Analyzing Students}}' {{Discourse}} of {{Recursive Phenomena}}},
  booktitle = {{{SIGCSE}}},
  author = {Levy, Dalit and Lapidot, Tami},
  year = {2000},
  pages = {5},
  langid = {english},
  keywords = {RecursionChapter},
  file = {/Users/igormoreno/Zotero/storage/NN3T6HEV/Levy and Lapidot - 2000 - Recursively Speaking.pdf}
}

@inproceedings{levySharedTerminologyPrivate2002,
  title = {Shared {{Terminology}}, {{Private Syntax}}: {{The}} Case of Recursive Descriptions},
  booktitle = {{{ITiCSE}}'02},
  author = {Levy, Dalit and Lapidot, Tami},
  year = {2002},
  month = jun,
  pages = {5},
  address = {{Aarhus, Denmark}},
  abstract = {This paper reports a study in which 11th grade students were observed, while engaged in several learning activities that address general aspects of recursion. One of these learning activities focused on the creation of recursive descriptions using natural language. The class discourse was recorded and analyzed, in order to locate patterns of students' expressions and ways of thinking. The present finding is two-fold. On the one hand, a class genre was created and used to refer to recursive phenomena and to describe them verbally. On the other hand, although they used a shared set of some agreedupon terms, the students tended to individually construct their unique recursive descriptions. These individual methods of assembly are labeled hereafter as ``private syntax''. It is concluded that learners' and educators' awareness of both the ``building blocks'' of any recursive description and the several possibilities for assembling these blocks, might help in the process of understanding recursion in general and in further construction of recursive functions in particular.},
  langid = {english},
  keywords = {RecursionChapter},
  file = {/Users/igormoreno/Zotero/storage/7HRI6BGY/Levy and Lapidot - 2002 - Shared Terminology, Private Syntax.pdf}
}

@unpublished{levyTypedLcalculusCourse2015,
  type = {Course {{Notes}}},
  title = {Typed {$\lambda$}-Calculus: Course Notes},
  author = {Levy, Paul Blain},
  year = {2015},
  abstract = {{$\lambda$}-calculus is a small language based on some common mathematical idioms. It was invented by Alonzo Church in 1936, but his version was untyped, making the connection with mathematics rather problematic. In this course we'll be looking at a typed version.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/DJGKQBDA/Levy - 2015 - Typed λ-calculus.pdf}
}

@article{lewalterCognitiveStrategiesLearning2003,
  title = {Cognitive Strategies for Learning from Static and Dynamic Visuals},
  author = {Lewalter, D.},
  year = {2003},
  month = apr,
  journal = {Learning and Instruction},
  series = {External and {{Internal Representations}} in {{Multimedia Learning}}},
  volume = {13},
  number = {2},
  pages = {177--189},
  issn = {0959-4752},
  doi = {10.1016/S0959-4752(02)00019-1},
  urldate = {2018-11-06},
  abstract = {An experimental study with 60 students investigated the effects of including static or dynamic visuals in an expository text on a learning outcome and the use of learning strategies while working with those visuals. For the study, two illustrated and one text-only version of a computer-based learning text on an astrophysical subject were developed and served as the learning material. Considering the cognitive task demand in a learning test, we found significant differences between the illustrated versions and the text-only version, but not between the two illustrated ones. We used think-aloud protocols to examine the learning processes initiated by both types of visuals. The coding of the recorded learning activities was based on recent theories of learning strategies. The results for both types of illustrations indicate different frequencies in the use of learning strategies relevant for the learning outcome, and therefore indicate the contribution of the cognitive process quality for the supportive function of visuals.},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/Y32TJGB9/Lewalter - 2003 - Cognitive strategies for learning from static and dynamic visuals.pdf;/Users/igormoreno/Zotero/storage/NW2GDPXG/S0959475202000191.html}
}

@inproceedings{lewisExploringVariationStudents2014,
  title = {Exploring Variation in Students' Correct Traces of Linear Recursion},
  booktitle = {Proceedings of the Tenth Annual Conference on {{International}} Computing Education Research},
  author = {Lewis, Colleen M.},
  year = {2014},
  month = jul,
  series = {{{ICER}} '14},
  pages = {67--74},
  publisher = {{Association for Computing Machinery}},
  address = {{Glasgow, Scotland, United Kingdom}},
  doi = {10.1145/2632320.2632355},
  urldate = {2020-07-02},
  abstract = {There has been a wealth of education research focused on recursion. This research has documented students' persistent difficulties with recursion, a variety of pedagogical approaches, and students' correct and incorrect mental models of recursion. This paper explores the variation in students' successful attempts to trace linear recursion. The findings go beyond correct and incorrect mental models to show how each of four modes of tracing linear recursion may require or facilitate a particular understanding of recursion. Additionally, the current study shows how knowledge of algebraic substitution can be applied to tracing linear recursion, and identifies a potential difficulty in students transferring this knowledge.},
  isbn = {978-1-4503-2755-8},
  keywords = {mental models,recursion,representations,Strong,transfer},
  file = {/Users/igormoreno/Zotero/storage/9C2CMZMR/Lewis - 2014 - Exploring variation in students' correct traces of linear recursion.pdf}
}

@inproceedings{lewisFactorStructureSystem2009,
  title = {The {{Factor Structure}} of the {{System Usability Scale}}},
  booktitle = {Proceedings of the 1st {{International Conference}} on {{Human Centered Design}}: {{Held}} as {{Part}} of {{HCI International}} 2009},
  author = {Lewis, James R. and Sauro, Jeff},
  year = {2009},
  month = jul,
  series = {{{HCD}} 09},
  pages = {94--103},
  publisher = {{Springer-Verlag}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-02806-9_12},
  urldate = {2020-11-19},
  abstract = {Since its introduction in 1986, the 10-item System Usability Scale (SUS) has been assumed to be unidimensional. Factor analysis of two independent SUS data sets reveals that the SUS actually has two factors --- Usable (8 items) and Learnable (2 items --- specifically, Items 4 and 10). These new scales have reasonable reliability (coefficient alpha of .91 and .70, respectively). They correlate highly with the overall SUS ({$<$}em{$>$}r{$<$}/em{$>$} = .985 and .784, respectively) and correlate significantly with one another ({$<$}em{$>$}r{$<$}/em{$>$} = .664), but at a low enough level to use as separate scales. A sensitivity analysis using data from 19 tests had a significant Test by Scale interaction, providing additional evidence of the differential utility of the new scales. Practitioners can continue to use the current SUS as is, but, at no extra cost, can also take advantage of these new scales to extract additional information from their SUS data. The data support the use of "awkward" rather than "cumbersome" in Item 8.},
  isbn = {978-3-642-02805-2},
  keywords = {factor analysis,learnability,learnable,psychometric evaluation,subjective usability measurement,SUS,System Usability Scale,usability,usable},
  annotation = {00996}
}

@inproceedings{lewisImportanceStudentsAttention2012,
  ids = {lewisImportanceStudentsAttention2012a},
  title = {The Importance of Students' Attention to Program State: A Case Study of Debugging Behavior},
  booktitle = {Proceedings of the Ninth Annual International Conference on {{International}} Computing Education Research},
  author = {Lewis, Colleen M},
  year = {September 09 - 11, 2012},
  pages = {8},
  publisher = {{ACM}},
  address = {{Auckland, New Zealand}},
  abstract = {To develop a model of students' debugging processes, I conducted a qualitative analysis of young students engaged in debugging computer programs they had written in the programming language Scratch. I present a microgenetic analysis that tracks how one student's attention to elements of computer program state shifted during his debugging process. I present evidence that this student had relevant domain knowledge and claim that his changing attention within the problem, and not his domain knowledge, mediated his debugging process. I hypothesize that a key competence in debugging is learning to identify what elements of program state are important to pay attention to and that this attention, and not only domain knowledge, mediates the debugging process. This hypothesis is consistent with a model of physics reasoning and learning from the Knowledge in Pieces theoretical framework and in this research I build upon education research outside of computer science. The case study analyzes the debugging process of a student entering the sixth grade, but I document an isomorphic case from a pair of college students to show that this pattern extends beyond this age.},
  langid = {english},
  keywords = {To Read},
  file = {/Users/igormoreno/Zotero/storage/WYZRM3CR/Lewis - 2012 - The importance of students' attention to program state.pdf}
}

@book{lewisJavaSoftwareSolutions2017,
  title = {Java Software Solutions: Foundations of Program Design},
  shorttitle = {Java Software Solutions},
  author = {Lewis, John and Loftus, William},
  year = {2017},
  edition = {Ninth edition},
  publisher = {{Pearson}},
  address = {{NY, NY}},
  isbn = {978-0-13-446202-8},
  langid = {english},
  lccn = {QA76.73.J38 L49 2017},
  keywords = {Java (Computer program language),Object-oriented programming (Computer science)},
  file = {/Users/igormoreno/Zotero/storage/ELBY5PDD/Lewis and Loftus - 2017 - Java software solutions foundations of program de.pdf}
}

@article{liangWorkingLogarithmsStudents2005,
  title = {Working with {{Logarithms}}: {{Students}}' {{Misconceptions}} and {{Errors}}},
  author = {Liang, Chua Boon and Wood, Eric},
  year = {2005},
  journal = {The Mathematics Educator},
  volume = {8},
  number = {2},
  pages = {19},
  abstract = {This study examines secondary school students' understandings and misconceptions when working with logarithms using a specially designed test instrument administered to 81 students in two Singapore schools. Questions were classified by cognitive level. The data were analysed to uncover the kinds of errors made and their possible causes. Students appear capable of doing routine calculations but less capable when answering questions which require higher levels of cognitive thinking. In addition, many errors are not due to lack of knowledge but appear to be based on over-generalisation of algebraic rules. Suggestions for practice based on these findings are provided.},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/4KQR3HRI/Liang and Wood - 2005 - Working with Logarithms.pdf}
}

@inproceedings{licataFunctionalProgrammerGuide2016,
  title = {A Functional Programmer's Guide to Homotopy Type Theory},
  booktitle = {Proceedings of the 21st {{ACM SIGPLAN International Conference}} on {{Functional Programming}}},
  author = {Licata, Dan},
  year = {2016},
  month = sep,
  series = {{{ICFP}} 2016},
  pages = {3},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2951913.2976748},
  urldate = {2021-04-12},
  abstract = {Dependent type theories are functional programming languages with types rich enough to do computer-checked mathematics and software verification. Homotopy type theory is a recent area of work that connects dependent type theory to the mathematical disciplines of homotopy theory and higher-dimensional category theory. From a programming point of view, these connections have revealed that all types in dependent type theory support a certain generic program that had not previously been exploited. Specifically, each type can be equipped with computationally relevant witnesses of equality of elements of that type, and all types support a generic program that transports elements along these equalities. One mechanism for equipping types with non-trivial witnesses of equality is Voevodsky's univalence axiom, which implies that equality of types themselves is witnessed by type isomorphism. Another is higher inductive types, an extended datatype schema that allows identifications between different datatype constructors. While these new mechanisms were originally formulated as axiomatic extensions of type theory, recent work has investigated their computational meaning, leading to the development of new programming languages that better support them. In this talk, I will illustrate what univalence and higher inductive types mean in programming terms. I will also discuss how studying some related semantic settings can reveal additional structure on types; for example, moving from groupoids (categories where all maps are invertible) to general categories yields an account of coercions instead of equalities. Overall, I hope to convey some of the beauty and richness of these connections between disciplines, which we are just beginning to understand.},
  isbn = {978-1-4503-4219-3},
  keywords = {category theory,functional programming,homotopy type theory,Type theory},
  file = {/Users/igormoreno/Zotero/storage/IYN2JK4C/Licata - 2016 - A functional programmer's guide to homotopy type t.pdf}
}

@article{liebenbergInvestigatingFeasibilityAutomatic2018,
  title = {Investigating the {{Feasibility}} of {{Automatic Assessment}} of {{Programming Tasks}}},
  author = {Liebenberg, Janet and Pieterse, Vreda},
  year = {2018},
  month = nov,
  journal = {Journal of Information Technology Education: Innovations in Practice},
  volume = {17},
  pages = {201--223},
  urldate = {2020-07-22},
  abstract = {An international association advancing the multidisciplinary study of informing systems. Founded in 1998, the Informing Science Institute (ISI) is a global community of academics shaping the future of informing science.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/DZA6ICZI/Liebenberg and Pieterse - 2018 - Investigating the Feasibility of Automatic Assessm.pdf;/Users/igormoreno/Zotero/storage/LYSJBD4M/4150.html}
}

@inproceedings{lieberAddressingMisconceptionsCode2014,
  title = {Addressing Misconceptions about Code with Always-on Programming Visualizations},
  booktitle = {Proceedings of the {{SIGCHI Conference}} on {{Human Factors}} in {{Computing Systems}}},
  author = {Lieber, Tom and Brandt, Joel R. and Miller, Rob C.},
  year = {2014},
  month = apr,
  series = {{{CHI}} '14},
  pages = {2481--2490},
  publisher = {{Association for Computing Machinery}},
  address = {{Toronto, Ontario, Canada}},
  doi = {10.1145/2556288.2557409},
  urldate = {2020-07-23},
  abstract = {We present Theseus, an IDE extension that visualizes run-time behavior within a JavaScript code editor. By displaying real-time information about how code actually behaves during execution, Theseus proactively addresses misconceptions by drawing attention to similarities and differences between the programmer's idea of what code does and what it actually does. To understand how programmers would respond to this kind of an always-on visualization, we ran a lab study with graduate students, and interviewed 9 professional programmers who were asked to use Theseus in their day-to-day work. We found that users quickly adopted strategies that are unique to always-on, real-time visualizations, and used the additional information to guide their navigation through their code.},
  isbn = {978-1-4503-2473-1},
  keywords = {code understanding,debugging,programming},
  annotation = {00053},
  file = {/Users/igormoreno/Zotero/storage/IRXVNCLG/Lieber et al. - 2014 - Addressing misconceptions about code with always-o.pdf;/Users/igormoreno/Zotero/storage/KIRHXKBQ/Lieber et al. - 2014 - Addressing misconceptions about code with always-o.pdf}
}

@article{liEngagingComputerScience2013,
  title = {Engaging {{Computer Science Students}} through {{Gamification}} in an {{Online Social Network Based Collaborative Learning Environment}}},
  author = {Li, Cen and Dong, Zhijiang and Untch, Roland H. and Chasteen, Michael},
  year = {2013},
  journal = {International Journal of Information and Education Technology},
  pages = {72--77},
  issn = {20103689},
  doi = {10.7763/IJIET.2013.V3.237},
  urldate = {2020-09-28},
  abstract = {Gamification is the use of game mechanics such as rewarding points and achievement badges to engage target audience and encourage desired behaviors. Gamification has gained a great surge of interest in recent years as an effective approach to engage existing users and attract new users to web sites. In this paper, the use of gamification in engaging Computer Science students in an online social network based collaborative learning environment, called PeerSpace, is discussed. PeerSpace integrates a suite of Web 2.0 tools that promote student interactions on course-related topics as well as purely social matters. The design and implementation details of various gamification schemes are presented. An assessment of the effectiveness of the schemes is discussed.},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/AJQG2TH3/Li et al. - 2013 - Engaging Computer Science Students through Gamific.pdf}
}

@article{limBeingGameEffects2009,
  title = {Being in the {{Game}}: {{Effects}} of {{Avatar Choice}} and {{Point}} of {{View}} on {{Psychophysiological Responses During Play}}},
  shorttitle = {Being in the {{Game}}},
  author = {Lim, Sohye and Reeves, Byron},
  year = {2009},
  month = nov,
  journal = {Media Psychology},
  volume = {12},
  number = {4},
  pages = {348--370},
  issn = {1521-3269, 1532-785X},
  doi = {10.1080/15213260903287242},
  urldate = {2023-06-27},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/EM3LCFE4/Lim and Reeves - 2009 - Being in the Game Effects of Avatar Choice and Po.pdf}
}

@article{lin-sieglerContrastingCaseInstruction2015,
  title = {Contrasting Case Instruction Can Improve Self-Assessment of Writing},
  author = {{Lin-Siegler}, Xiaodong and Shaenfield, David and Elder, Anastasia D.},
  year = {2015},
  month = aug,
  journal = {Educational Technology Research and Development},
  volume = {63},
  number = {4},
  pages = {517--537},
  issn = {1042-1629, 1556-6501},
  doi = {10.1007/s11423-015-9390-9},
  urldate = {2022-08-26},
  abstract = {Self-assessment is a process during which students evaluate the quality of their work in a given domain based on explicitly stated criteria. Accurate self-assessments improve students' academic achievement. Yet, students often have difficulties assessing their own work. It is possible that appropriate instructional supports will help students overcome these difficulties. To test this premise, we compared the effects of presenting and discussing examples of well and poorly written stories (contrasting cases) with the effects of only presenting and discussing examples of well written stories (good cases only) on students' writing. Fifty-three 6th-grade students in two history classrooms were randomly assigned to either the contrasting cases or good-cases-only instructional conditions. Results showed that students in the contrasting cases instructional condition created stories of better quality, developed a deeper understanding of the assessment criteria, and became better able to identify areas in need of improvement. This study is one of few efforts applying perceptual learning theories to improve academic skills in everyday classroom settings. The use of contrasting cases provides a promising yet a simple instructional approach that both teachers and students can use to improve writing and self-assessment.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/Z385KDIE/Lin-Siegler et al. - 2015 - Contrasting case instruction can improve self-asse.pdf}
}

@article{linAvatarCreationVirtual2014,
  title = {Avatar Creation in Virtual Worlds: {{Behaviors}} and Motivations},
  shorttitle = {Avatar Creation in Virtual Worlds},
  author = {Lin, Hsin and Wang, Hua},
  year = {2014},
  month = may,
  journal = {Computers in Human Behavior},
  volume = {34},
  pages = {213--218},
  issn = {07475632},
  doi = {10.1016/j.chb.2013.10.005},
  urldate = {2023-06-27},
  abstract = {Avatar creation has become common for people to participate and interact in virtual worlds. Using an online survey (N = 244), we investigated both the behavioral characteristics and major motivations for avatar creation in virtual worlds. Our results suggest that a majority of the participants had multiple avatars; these avatars' appearance did not merely resemble the human players; and their personality did not necessarily mirror the player's real personality. Furthermore, participants on average spent over 20 h per week and often interacting with others in the virtual worlds. Our exploratory factor analysis yielded four major motivations: virtual exploration, social navigation, contextual adaptation, and identity representation.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/PUEBXC28/Lin and Wang - 2014 - Avatar creation in virtual worlds Behaviors and m.pdf}
}

@incollection{lindnerUnpluggedActivitiesContext2019,
  title = {Unplugged {{Activities}} in the {{Context}} of {{AI}}},
  booktitle = {Informatics in {{Schools}}. {{New Ideas}} in {{School Informatics}}},
  author = {Lindner, Annabel and Seegerer, Stefan and Romeike, Ralf},
  editor = {Pozdniakov, Sergei N. and Dagien{\.e}, Valentina},
  year = {2019},
  volume = {11913},
  pages = {123--135},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-030-33759-9_10},
  urldate = {2021-11-17},
  abstract = {Due to its great importance in the media, the start-up world and the political discussion, artificial intelligence (AI) is becoming increasingly relevant as a topic for schools. Until now, approaches to making AI tangible for students without actually programming an AI system have been rare. To address this circumstance, a teaching sequence of unplugged activities about AI has been developed and is presented. AI Unplugged provides CS Unplugged activities that present the ideas and concepts of computer science without using computers. The activities shed light on important concepts of AI and make it possible to convey the central ideas of artificial intelligence to the students. In addition, they offer starting points for discussing social issues around AI. This article describes the activities and their theoretical background, outlines a possible course of instruction, and describes practical experiences with AI Unplugged.},
  isbn = {978-3-030-33758-2 978-3-030-33759-9},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/3HAS3UQ4/Lindner et al. - 2019 - Unplugged Activities in the Context of AI.pdf}
}

@article{lingPreliminaryInvestigationTeachers,
  title = {Preliminary {{Investigation}}: {{Teachers}}' {{Perception}} on {{Computational Thinking Concepts}}},
  author = {Ling, Ung L and Saibin, Tammie C and Labadin, Jane and Aziz, Norazila Abdul},
  volume = {9},
  number = {2},
  pages = {7},
  abstract = {As Computational Thinking (CT) is to be integrated into Malaysian syllabus by the year of 2017, this study therefore is designed to explore Malaysian teachers' perception on CT. A survey method is employed; questions were constructed based on the Technology Acceptance Model (TAM) to acquire teachers' perception on CT. 159 teachers from all over Malaysia completed the survey form. Spearman's Rank Order correlation was implemented on the obtained data. This study managed to present teachers perception on CT via perceived usefulness of CT, perceived ease of CT integration into teaching and learning practices, teachers' attitude towards CT and their intention to integrate CT into their classroom, their basic understanding on CT and their concern on CT integration. Our investigation shows teachers had a weak understanding of CT, which led to unnecessary concerns related to the CT integration. The results also show strong positive correlation on perceived ease of CT integration with behavioral intention and teachers' attitude with behavioral intention.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/NNY4479K/Ling et al - Preliminary Investigation.pdf}
}

@book{LinguisticComplexitySecond2012,
  title = {Linguistic {{Complexity}}: {{Second Language Acquisition}}, {{Indigenization}}, {{Contact}}},
  shorttitle = {Linguistic {{Complexity}}},
  year = {2012},
  month = may,
  journal = {Linguistic Complexity},
  publisher = {{De Gruyter}},
  doi = {10.1515/9783110229226},
  urldate = {2021-10-10},
  abstract = {Linguistic complexity is one of the currently most hotly debated notions in linguistics. The essays in this volume reflect the intricacies of thinking about the complexity of languages and language varieties (here: of English) in three major contact-related fields of (and schools in) linguistics: creolistics, indigenization and nativization studies (i.e. in the realm of English linguistics, the \&\#8220;World Englishes\&\#8221; community), and Second Language Acquisition (SLA) research: How can we adequately assess linguistic complexity? Should we be interested in absolute complexity or rather relative complexity? What is the extent to which language contact and/or (adult) language learning might lead to morphosyntactic simplification? The authors in this volume are all leading linguists in different areas of specialization, and they were asked to elaborate on those facets of linguistic complexity which are most relevant in their area of specialization, and/or which strike them as being most intriguing. The result is a collection of papers that is unique in bringing together leading representatives of three often disjunct fields of linguistic scholarship in which linguistic complexity is seen as a dynamic and inherently variable parameter.},
  isbn = {978-3-11-022922-6},
  langid = {english},
  keywords = {contact linguistics,creolistics,Linguistic complexity,second langauge acquisition},
  file = {/Users/igormoreno/Zotero/storage/5MLBEL5A/2012 - Linguistic Complexity Second Language Acquisition.pdf}
}

@article{linTrackingStudentsCognitive2016,
  title = {Tracking {{Students}}' {{Cognitive Processes During Program Debugging}}\textemdash{{An Eye-Movement Approach}}},
  author = {Lin, Y. and Wu, C. and Hou, T. and Lin, Y. and Yang, F. and Chang, C.},
  year = {2016},
  month = aug,
  journal = {IEEE Transactions on Education},
  volume = {59},
  number = {3},
  pages = {175--186},
  issn = {1557-9638},
  doi = {10.1109/TE.2015.2487341},
  abstract = {This study explores students' cognitive processes while debugging programs by using an eye tracker. Students' eye movements during debugging were recorded by an eye tracker to investigate whether and how high- and low-performance students act differently during debugging. Thirty-eight computer science undergraduates were asked to debug two C programs. The path of students' gaze while following program codes was subjected to sequential analysis to reveal significant sequences of areas examined. These significant gaze path sequences were then compared to those of students with different debugging performances. The results show that, when debugging, high-performance students traced programs in a more logical manner, whereas low-performance students tended to stick to a line-by-line sequence and were unable to quickly derive the program's higher-level logic. Low-performance students also often jumped directly to certain suspected statements to find bugs, without following the program's logic. They also often needed to trace back to prior statements to recall information, and spent more time on manual computation. Based on the research results, adaptive instructional strategies and materials can be developed for students of different performance levels, to improve associated cognitive activities during debugging, which can foster learning during debugging and programming.},
  keywords = {adaptive instructional strategies,C language,C programs,cognition,Cognition,Cognition analysis,Computer bugs,computer science education,computer science undergraduates,Debugging,eye tracker,eye-movement analysis,eye-movement approach,further education,gaze tracking,program codes,program debugging,program higher-level logic,programming instruction,Programming profession,sequential analysis,Sequential analysis,student cognitive processes,Tracking},
  annotation = {00041},
  file = {/Users/igormoreno/Zotero/storage/HE8AZEC3/Igor-Lin et al. - 2016 - Tracking Students’ Cognitive Processes During Prog copy.pdf;/Users/igormoreno/Zotero/storage/K49FIB5E/Lin et al. - 2016 - Tracking Students’ Cognitive Processes During Prog.pdf;/Users/igormoreno/Zotero/storage/BKJS2FRH/7312518.html}
}

@article{lipmanLearnCSNEWBROWSERBASED2014,
  title = {{{LearnCS}}!: {{A NEW}}, {{BROWSER-BASED C PROGRAMMING}}},
  author = {Lipman, Derrell},
  year = {2014},
  pages = {7},
  abstract = {LearnCS! is a learning environment specifically written for use by first-year computer science students. It provides students with a browser-based programming and execution environment which contains a depiction of the notional machine for the C language, and contains a built-in debugger. Many error messages are customized to assist the beginning student of computer science. These features have seemingly yielded good results in improving students' comprehension of CS1 concepts.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/4DNYBMX2/Lipman - 2014 - LearnCS! A NEW, BROWSER-BASED C PROGRAMMING.pdf}
}

@article{liquoriFeatherTraitModestExtension2008,
  title = {{{FeatherTrait}}: {{A}} Modest Extension of {{Featherweight Java}}},
  shorttitle = {{{FeatherTrait}}},
  author = {Liquori, Luigi and Spiwack, Arnaud},
  year = {2008},
  month = mar,
  journal = {ACM Transactions on Programming Languages and Systems},
  volume = {30},
  number = {2},
  pages = {11:1--11:32},
  issn = {0164-0925},
  doi = {10.1145/1330017.1330022},
  urldate = {2023-07-31},
  abstract = {In the context of statically typed, class-based languages, we investigate classes that can be extended with trait composition. A trait is a collection of methods without state; it can be viewed as an incomplete stateless class. Traits can be composed in any order, but only make sense when imported by a class that provides state variables and additional methods to disambiguate conflicting names arising between the imported traits. We introduce FeatherTrait Java (FTJ), a conservative extension of the simple lightweight class-based calculus Featherweight Java (FJ) with statically typed traits. In FTJ, classes can be built using traits as basic behavioral bricks; method conflicts between imported traits must be resolved explicitly by the user either by (i) aliasing or excluding method names in traits, or by (ii) overriding explicitly the conflicting methods in the class or in the trait itself. We present an operational semantics with a lookup algorithm, and a sound type system that guarantees that evaluating a well-typed expression never yields a message-not-understood run-time error nor gets the interpreter stuck. We give examples of the increased expressive power of the trait-based inheritance model. The resulting calculus appears to be a good starting point for a rigorous mathematical analysis of typed class-based languages featuring trait-based inheritance.},
  keywords = {inheritance,Java,language design,language semantics},
  file = {/Users/igormoreno/Zotero/storage/SY2RKR2R/Liquori and Spiwack - 2008 - FeatherTrait A modest extension of Featherweight .pdf}
}

@misc{liScalpelPythonStatic2022,
  title = {Scalpel: {{The Python Static Analysis Framework}}},
  shorttitle = {Scalpel},
  author = {Li, Li and Wang, Jiawei and Quan, Haowei},
  year = {2022},
  month = feb,
  number = {arXiv:2202.11840},
  eprint = {2202.11840},
  primaryclass = {cs.SE},
  publisher = {{arXiv}},
  urldate = {2023-05-14},
  abstract = {Despite being the most popular programming language, Python has not yet received enough attention from the community. To the best of our knowledge, there is no general static analysis framework proposed to facilitate the implementation of dedicated Python static analyzers. To fill this gap, we design and implement such a framework (named Scalpel) and make it publicly available as an open-source project. The Scalpel framework has already integrated a number of fundamental static analysis functions (e.g., call graph constructions, control-flow graph constructions, alias analysis, etc.) that are ready to be reused by developers to implement client applications focusing on statically resolving dedicated Python problems such as detecting bugs or fixing vulnerabilities.},
  archiveprefix = {arxiv},
  keywords = {Computer Science - Software Engineering},
  file = {/Users/igormoreno/Zotero/storage/ZIF9RU2C/Li et al. - 2022 - Scalpel The Python Static Analysis Framework.pdf;/Users/igormoreno/Zotero/storage/K5MNKFVC/2202.html}
}

@inproceedings{lishinskiMethodologicalRigorTheoretical2016,
  title = {Methodological {{Rigor}} and {{Theoretical Foundations}} of {{CS Education Research}}},
  booktitle = {Proceedings of the 2016 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Lishinski, Alex and Good, Jon and Sands, Phil and Yadav, Aman},
  year = {2016},
  month = aug,
  pages = {161--169},
  publisher = {{ACM}},
  address = {{Melbourne VIC Australia}},
  doi = {10.1145/2960310.2960328},
  urldate = {2021-05-12},
  abstract = {The problem of the lack of rigor in CS education research has frequently been discussed and examined. Previous reviews of the literature have examined rigor on both theoretical and methodological dimensions, among others. These reviews have also looked at differences in indicators of rigor between conference proceedings and journal publications. However, to date there is no comprehensive review that has examined the intersection of methodological and theoretical quality.},
  isbn = {978-1-4503-4449-4},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/LUGTVPIP/Lishinski et al. - 2016 - Methodological Rigor and Theoretical Foundations o.pdf}
}

@misc{liskovCLUDesignNotes1977,
  title = {{{CLU Design Notes}}},
  author = {Liskov, Barbara and Snyder, Alan and Jones, Anita and Bloom, Toby and Schaffert, Craig and Atkinson, Russ and Zilles, S. N. and Henderson, D. A.},
  year = {1977},
  publisher = {{MIT}},
  abstract = {Written between 1973 and 1977 at MIT within the CLU project. Collected and scanned by Andrew Black},
  file = {/Users/igormoreno/Zotero/storage/WWJLTYBS/CLU Design Notes.pdf}
}

@inproceedings{listerBloomingFirstYear2000,
  title = {On Blooming First Year Programming, and Its Blooming Assessment},
  booktitle = {Proceedings of the {{Australasian}} Conference on {{Computing}} Education  - {{ACSE}} '00},
  author = {Lister, Raymond},
  year = {2000},
  pages = {158--162},
  publisher = {{ACM Press}},
  address = {{Melbourne, Australia}},
  doi = {10.1145/359369.359393},
  urldate = {2021-06-23},
  abstract = {The wad.itlonal approach to introductory programming has students wri\textasciitilde n\textasciitilde{} complete progrRm\% as early as possible. Also, the traditional emphasis is on the technology, not the explicit cognitive development of the student. This approach jmT,ps to the fifth and sixth levels of Bloom's Taxonomy of Educational Objectives, when these last two levels depend upon competence in the first four levels. I descn'be my alternative approach that addresses the six stages in sequence, emphasising effective assessment processes for the first four levels.},
  isbn = {978-1-58113-271-7},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/ZEQLSPYR/Lister - 2000 - On blooming first year programming, and its bloomi.pdf}
}

@article{listerConcreteOtherNeoPiagetian2011,
  title = {Concrete and {{Other Neo-Piagetian Forms}} of {{Reasoning}} in the {{Novice Programmer}}},
  author = {Lister, Raymond},
  year = {2011},
  volume = {114},
  pages = {10},
  abstract = {This paper brings together a number of empirical research results on novice programmers, using a neo-Piagetian theoretical framework. While there already exists literature connecting programming with classical Piagetian theory, in this paper we apply neo-Piagetian theory. Using that neo-Piagetian perspective, we offer an explanation as to why attempts to predict ability for programming via classical Piagetian tests have yielded mixed results. We offer a neo-Piagetian explanation of some of the previously puzzling observations about novice programmers, such as why many of them make little use of diagrams, and why they often manifest a nonsystematic approach to writing programs. We also develop the relatively unexplored relationship between concrete operational reasoning and programming, by exploring concepts such as conservation and reversibility.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/65PSVSC7/Lister - 2011 - Concrete and Other Neo-Piagetian Forms of Reasoning in the Novice Programmer.pdf}
}

@article{listerFurtherEvidenceRelationship2009,
  title = {Further Evidence of a Relationship between Explaining, Tracing and Writing Skills in Introductory Programming},
  author = {Lister, Raymond and Fidge, Colin and Teague, Donna},
  year = {2009},
  month = jul,
  journal = {ACM SIGCSE Bulletin},
  volume = {41},
  number = {3},
  pages = {161--165},
  issn = {0097-8418},
  doi = {10.1145/1595496.1562930},
  urldate = {2023-05-31},
  abstract = {This paper reports on a replication of earlier studies into a possible hierarchy of programming skills. In this study, the students from whom data was collected were at a university that had not provided data for earlier studies. Also, the students were taught the programming language "Python", which had not been used in earlier studies. Thus this study serves as a test of whether the findings in the earlier studies were specific to certain institutions, student cohorts, and programming languages. Also, we used a non-parametric approach to the analysis, rather than the linear approach of earlier studies. Our results are consistent with the earlier studies. We found that students who cannot trace code usually cannot explain code, and also that students who tend to perform reasonably well at code writing tasks have also usually acquired the ability to both trace code and explain code.},
  keywords = {comprehension,CS1,novice programmers,taxonomy,tracing},
  file = {/Users/igormoreno/Zotero/storage/CGMFRIGW/Lister et al. - 2009 - Further evidence of a relationship between explain.pdf}
}

@article{listerFurtherEvidenceRelationship2009a,
  title = {Further Evidence of a Relationship between Explaining, Tracing and Writing Skills in Introductory Programming},
  author = {Lister, Raymond and Fidge, Colin and Teague, Donna},
  year = {2009},
  month = jul,
  journal = {ACM SIGCSE Bulletin},
  volume = {41},
  number = {3},
  pages = {161--165},
  issn = {0097-8418},
  doi = {10.1145/1595496.1562930},
  urldate = {2023-10-12},
  abstract = {This paper reports on a replication of earlier studies into a possible hierarchy of programming skills. In this study, the students from whom data was collected were at a university that had not provided data for earlier studies. Also, the students were taught the programming language "Python", which had not been used in earlier studies. Thus this study serves as a test of whether the findings in the earlier studies were specific to certain institutions, student cohorts, and programming languages. Also, we used a non-parametric approach to the analysis, rather than the linear approach of earlier studies. Our results are consistent with the earlier studies. We found that students who cannot trace code usually cannot explain code, and also that students who tend to perform reasonably well at code writing tasks have also usually acquired the ability to both trace code and explain code.},
  keywords = {comprehension,CS1,novice programmers,taxonomy,tracing},
  file = {/Users/igormoreno/Zotero/storage/LDEW8CKC/Lister et al - 2009 - Further evidence of a relationship between explaining, tracing and writing.pdf}
}

@inproceedings{listerMultinationalStudyReading2004,
  title = {A {{Multi-national Study}} of {{Reading}} and {{Tracing Skills}} in {{Novice Programmers}}},
  booktitle = {Working {{Group Reports}} from {{ITiCSE}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Lister, Raymond and Adams, Elizabeth S. and Fitzgerald, Sue and Fone, William and Hamer, John and Lindholm, Morten and McCartney, Robert and Mostr{\"o}m, Jan Erik and Sanders, Kate and Sepp{\"a}l{\"a}, Otto and Simon, Beth and Thomas, Lynda},
  year = {2004},
  series = {{{ITiCSE-WGR}} '04},
  pages = {119--150},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1044550.1041673},
  urldate = {2018-10-08},
  abstract = {A study by a ITiCSE 2001 working group ("the McCracken Group") established that many students do not know how to program at the conclusion of their introductory courses. A popular explanation for this incapacity is that the students lack the ability to problem-solve. That is, they lack the ability to take a problem description, decompose it into sub-problems and implement them, then assemble the pieces into a complete solution. An alternative explanation is that many students have a fragile grasp of both basic programming principles and the ability to systematically carry out routine programming tasks, such as tracing (or "desk checking") through code. This ITiCSE 2004 working group studied the alternative explanation, by testing students from seven countries, in two ways. First, students were tested on their ability to predict the outcome of executing a short piece of code. Second, students were tested on their ability, when given the desired function of short piece of near-complete code, to select the correct completion of the code from a small set of possibilities. Many students were weak at these tasks, especially the latter task, suggesting that such students have a fragile grasp of skills that are a prerequisite for problem-solving.},
  file = {/Users/igormoreno/Zotero/storage/TM4MXSC5/Lister et al - 2004 - A Multi-national Study of Reading and Tracing Skills in Novice Programmers.pdf}
}

@article{listerMultinationalStudyReading2004a,
  title = {A Multi-National Study of Reading and Tracing Skills in Novice Programmers},
  author = {Lister, Raymond and Adams, Elizabeth S. and Fitzgerald, Sue and Fone, William and Hamer, John and Lindholm, Morten and McCartney, Robert and Mostr{\"o}m, Jan Erik and Sanders, Kate and Sepp{\"a}l{\"a}, Otto and Simon, Beth and Thomas, Lynda},
  year = {2004},
  month = jun,
  journal = {ACM SIGCSE Bulletin},
  volume = {36},
  number = {4},
  pages = {119--150},
  issn = {0097-8418},
  doi = {10.1145/1041624.1041673},
  urldate = {2023-10-12},
  abstract = {A study by a ITiCSE 2001 working group ("the McCracken Group") established that many students do not know how to program at the conclusion of their introductory courses. A popular explanation for this incapacity is that the students lack the ability to problem-solve. That is, they lack the ability to take a problem description, decompose it into sub-problems and implement them, then assemble the pieces into a complete solution. An alternative explanation is that many students have a fragile grasp of both basic programming principles and the ability to systematically carry out routine programming tasks, such as tracing (or "desk checking") through code. This ITiCSE 2004 working group studied the alternative explanation, by testing students from seven countries, in two ways. First, students were tested on their ability to predict the outcome of executing a short piece of code. Second, students were tested on their ability, when given the desired function of short piece of near-complete code, to select the correct completion of the code from a small set of possibilities. Many students were weak at these tasks, especially the latter task, suggesting that such students have a fragile grasp of skills that are a prerequisite for problem-solving.},
  file = {/Users/igormoreno/Zotero/storage/39QHAETB/Lister et al - 2004 - A multi-national study of reading and tracing skills in novice programmers.pdf}
}

@article{litvinovToolVisualizingExecution2017,
  title = {A Tool for Visualizing the Execution of Programs and Stack Traces Especially Suited for Novice Programmers},
  author = {Litvinov, Stanislav and Mingazov, Marat and Myachikov, Vladislav and Ivanov, Vladimir and Palamarchuk, Yuliya and Sozonov, Pavel and Succi, Giancarlo},
  year = {2017},
  month = nov,
  journal = {arXiv:1711.11377 [cs]},
  eprint = {1711.11377},
  primaryclass = {cs},
  urldate = {2020-06-22},
  abstract = {Software engineering education and training has obstacles caused by a lack of basic knowledge about a process of program execution. The article is devoted to the development of special tools that help to visualize the process. We analyze existing tools and propose a new approach to stack and heap visualization. The solution is able to overcome major drawbacks of existing tools and suites well for analysis of programs written in Java and C/C++.},
  archiveprefix = {arxiv},
  langid = {english},
  keywords = {Computer Science - Software Engineering},
  file = {/Users/igormoreno/Zotero/storage/5SPPFGMM/Litvinov et al - 2017 - A tool for visualizing the execution of programs and stack traces especially.pdf}
}

@incollection{liuDashboardsComputerSupportedCollaborative2020,
  title = {Dashboards for {{Computer-Supported Collaborative Learning}}},
  booktitle = {Machine {{Learning Paradigms}}: {{Advances}} in {{Learning Analytics}}},
  author = {Liu, Arita L. and Nesbit, John C.},
  editor = {Virvou, Maria and Alepis, Efthimios and Tsihrintzis, George A. and Jain, Lakhmi C.},
  year = {2020},
  series = {Intelligent {{Systems Reference Library}}},
  pages = {157--182},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-030-13743-4_9},
  urldate = {2019-09-25},
  abstract = {In the field of learning analytics, dashboards are visual displays that help instructors and students monitor performance, track goals and modify learning-related activities and plans. Student-facing dashboards provide visualizations of the data students need to take responsibility for their own learning, while instructor-facing dashboards help instructors guide and orchestrate student learning. After summarizing the spectrum of learning analytics research on dashboards, we critically review dashboards designed to support collaborative learning and examine research on student-facing and instructor-facing dashboards for problem-based learning, project-based learning, collaborative argumentation, and various team-based learning activities. We explain key concepts such as group awareness, shared mental models, and group cognition, and review tools including shared mirroring systems, ambient displays, and learning dashboards. We then identify opportunities and challenges in the burgeoning field of learning analytics dashboards for computer-supported collaborative learning and argue that learning dashboards can be a useful aid in facilitating collaborative learning but only when designed with a clear pedagogical purpose informed by research and theory will learning dashboards be able to foster effective teaching and learning strategies.},
  isbn = {978-3-030-13743-4},
  langid = {english}
}

@inproceedings{liuModelingCommonMisconceptions2016,
  title = {Modeling Common Misconceptions in Learning Process Data},
  booktitle = {Proceedings of the {{Sixth International Conference}} on {{Learning Analytics}} \& {{Knowledge}} - {{LAK}} '16},
  author = {Liu, Ran and Patel, Rony and Koedinger, Kenneth R.},
  year = {2016},
  pages = {369--377},
  publisher = {{ACM Press}},
  address = {{Edinburgh, United Kingdom}},
  doi = {10.1145/2883851.2883967},
  urldate = {2018-10-22},
  abstract = {Student mistakes are often not random but, rather, reflect thoughtful yet incorrect strategies. In order for educational technologies to make full use of students' performance data to estimate the knowledge of a student, it is important to model not only the conceptions but also the misconceptions that a student's particular pattern of successes and errors may indicate. The student models that drive the ``outer loop'' of Intelligent Tutoring Systems typically do not represent or track misconceptions. Here, we present a method of representing misconceptions in the Knowledge Component models, or Q-Matrices, that are used by student models to estimate latent knowledge. We show, in a case study on a fraction arithmetic dataset, that incorporating a misconception into the Knowledge Component model dramatically improves the overall model's fit to data. We also derive qualitative insights from comparing predicted learning curves across models that incorporate varying misconceptionrelated parameters. Finally, we show that the inclusion of a misconception in the Knowledge Component model can yield individual student estimates of misconception strength that are significantly correlated with out-of-tutor measures of student errors.},
  isbn = {978-1-4503-4190-5},
  langid = {english},
  annotation = {00020},
  file = {/Users/igormoreno/Zotero/storage/K7RVEKAN/Liu et al - 2016 - Modeling common misconceptions in learning process data.pdf}
}

@incollection{liuMultitaskLearningBased2020,
  title = {Multi-Task Learning Based Pre-Trained Language Model for Code Completion},
  booktitle = {Proceedings of the 35th {{IEEE}}/{{ACM International Conference}} on {{Automated Software Engineering}}},
  author = {Liu, Fang and Li, Ge and Zhao, Yunfei and Jin, Zhi},
  year = {2020},
  month = dec,
  pages = {473--485},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  urldate = {2021-04-08},
  abstract = {Code completion is one of the most useful features in the Integrated Development Environments (IDEs), which can accelerate software development by suggesting the next probable token based on the contextual code in real-time. Recent studies have shown that statistical language modeling techniques can improve the performance of code completion tools through learning from large-scale software repositories. However, these models suffer from two major drawbacks: a) Existing research uses static embeddings, which map a word to the same vector regardless of its context. The differences in the meaning of a token in varying contexts are lost when each token is associated with a single representation; b) Existing language model based code completion models perform poor on completing identifiers, and the type information of the identifiers is ignored in most of these models. To address these challenges, in this paper, we develop a multi-task learning based pre-trained language model for code understanding and code generation with a Transformer-based neural architecture. We pre-train it with hybrid objective functions that incorporate both code understanding and code generation tasks. Then we fine-tune the pre-trained model on code completion. During the completion, our model does not directly predict the next token. Instead, we adopt multi-task learning to predict the token and its type jointly and utilize the predicted type to assist the token prediction. Experiments results on two real-world datasets demonstrate the effectiveness of our model when compared with state-of-the-art methods.},
  isbn = {978-1-4503-6768-4},
  keywords = {code completion,multi-task learning,pre-trained language model,transformer networks},
  file = {/Users/igormoreno/Zotero/storage/DZ3YXM73/Liu et al. - 2020 - Multi-task learning based pre-trained language mod.pdf}
}

@article{liuUsingConceptMap2013,
  title = {Using a Concept Map Knowledge Management System to Enhance the Learning of Biology},
  author = {Liu, Shih-Hwa and Lee, Gwo-Guang},
  year = {2013},
  month = oct,
  journal = {Computers \& Education},
  volume = {68},
  pages = {105--116},
  issn = {03601315},
  doi = {10.1016/j.compedu.2013.05.007},
  urldate = {2018-11-06},
  abstract = {This study was undertaken with the goal of developing a Concept Map Knowledge Management System (CMKMS) for use as a tool in observing change in a student's understanding of biology concepts over time. The CMKMS should be useful in assessing the extent of a student's knowledge and in revealing their unique thought processes. The study was concerned not only with a student's self-evaluation of learning but also with their level of satisfaction after using the CMKMS. The CMKMS combines the diagnosis of concept mapping with the style of thought processing, and promotes teaching activities step-by-step, in order to promote effective student learning. In analyzing the factors that influence the effect of teaching, the teacher can determine a student's knowledge structure and highlight misconceptions by inspecting the concept maps and logs. The results of this study show that knowledge management involved in computer-aided instruction in the teaching of biology had a positive influence on learning effectiveness. The CMKMS also was useful in promoting the student's thought processing, creativity, and ability to judge.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/9ISZYVEU/Liu and Lee - 2013 - Using a concept map knowledge management system to enhance the learning of.pdf}
}

@book{lockhartMathematicianLament,
  title = {A {{Mathematician}}'s {{Lament}}},
  author = {Lockhart, Paul},
  file = {/Users/igormoreno/Zotero/storage/MHCL9MP3/LockhartsLament.pdf}
}

@article{lodiConstructionistAttemptsSupporting2019,
  title = {Constructionist {{Attempts}} at {{Supporting}} the {{Learning}} of {{Computer Programming}}: {{A Survey}}},
  shorttitle = {Constructionist {{Attempts}} at {{Supporting}} the {{Learning}} of {{Computer Programming}}},
  author = {Lodi, Michael and Malchiodi, Dario and Monga, Mattia and Morpurgo, Anna and Spieler, Bernadette},
  year = {2019},
  month = jul,
  journal = {Olympiads in Informatics},
  volume = {13},
  pages = {99--121},
  issn = {1822-7732, 2335-8955},
  doi = {10.15388/ioi.2019.07},
  urldate = {2020-06-22},
  abstract = {Although programming is often seen as a key element of constructionist approaches, the research on learning to program through a constructionist strategy is somewhat limited, mostly focusing on how to bring the abstract and formal nature of programming languages into ``concrete'', possibly tangible objects, graspable even by children with limited abstraction power. We survey the literature in programming education and analyse some programming languages designed to help novices from a constructionist perspective.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/W8QAZE5U/Lodi et al - 2019 - Constructionist Attempts at Supporting the Learning of Computer Programming.pdf}
}

@book{lopesExercisesProgrammingStyle2014,
  title = {Exercises in {{Programming Style}}},
  author = {Lopes, Cristina Videira},
  year = {2014},
  publisher = {{CRC Press}},
  isbn = {978-1-4822-2739-0},
  langid = {english},
  annotation = {00016},
  file = {/Users/igormoreno/Zotero/storage/F2BP8VR3/Lopes - Exercises in Programming Style.pdf}
}

@inproceedings{lopezRelationshipsReadingTracing2008,
  title = {Relationships between Reading, Tracing and Writing Skills in Introductory Programming},
  booktitle = {Proceedings of the {{Fourth}} International {{Workshop}} on {{Computing Education Research}}},
  author = {Lopez, Mike and Whalley, Jacqueline and Robbins, Phil and Lister, Raymond},
  year = {2008},
  month = sep,
  series = {{{ICER}} '08},
  pages = {101--112},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1404520.1404531},
  urldate = {2023-05-31},
  abstract = {This study analyzed student responses to an examination, after the students had completed one semester of instruction in programming. The performance of students on code tracing tasks correlated with their performance on code writing tasks. A correlation was also found between performance on "explain in plain English" tasks and code writing. A stepwise regression, with performance on code writing as the dependent variable, was used to construct a path diagram. The diagram suggests the possibility of a hierarchy of programming related tasks. Knowledge of programming constructs forms the bottom of the hierarchy, with "explain in English", Parson's puzzles, and the tracing of iterative code forming one or more intermediate levels in the hierarchy.},
  isbn = {978-1-60558-216-0},
  keywords = {comprehension,CS1,novice programmers,SOLO taxonomy},
  file = {/Users/igormoreno/Zotero/storage/BXXJEHC7/Lopez et al. - 2008 - Relationships between reading, tracing and writing.pdf}
}

@inproceedings{lopezRelationshipsReadingTracing2008a,
  title = {Relationships between Reading, Tracing and Writing Skills in Introductory Programming},
  booktitle = {Proceedings of the {{Fourth}} International {{Workshop}} on {{Computing Education Research}}},
  author = {Lopez, Mike and Whalley, Jacqueline and Robbins, Phil and Lister, Raymond},
  year = {2008},
  month = sep,
  series = {{{ICER}} '08},
  pages = {101--112},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1404520.1404531},
  urldate = {2023-10-12},
  abstract = {This study analyzed student responses to an examination, after the students had completed one semester of instruction in programming. The performance of students on code tracing tasks correlated with their performance on code writing tasks. A correlation was also found between performance on "explain in plain English" tasks and code writing. A stepwise regression, with performance on code writing as the dependent variable, was used to construct a path diagram. The diagram suggests the possibility of a hierarchy of programming related tasks. Knowledge of programming constructs forms the bottom of the hierarchy, with "explain in English", Parson's puzzles, and the tracing of iterative code forming one or more intermediate levels in the hierarchy.},
  isbn = {978-1-60558-216-0},
  keywords = {comprehension,CS1,novice programmers,SOLO taxonomy},
  file = {/Users/igormoreno/Zotero/storage/2F8FKJWL/Lopez et al - 2008 - Relationships between reading, tracing and writing skills in introductory.pdf}
}

@article{loweAnimationLearningSelective2003,
  title = {Animation and Learning: Selective Processing of Information in Dynamic Graphics},
  shorttitle = {Animation and Learning},
  author = {Lowe, R. K.},
  year = {2003},
  month = apr,
  journal = {Learning and Instruction},
  series = {External and {{Internal Representations}} in {{Multimedia Learning}}},
  volume = {13},
  number = {2},
  pages = {157--176},
  issn = {0959-4752},
  doi = {10.1016/S0959-4752(02)00018-X},
  urldate = {2018-11-06},
  abstract = {Animation can provide learners with explicit dynamic information that is either implicit or unavailable in static graphics. However, the inclusion of temporal change in a visual display introduces additional and qualitatively different information processing demands. For learners to be successful in building high-quality mental models from animated instruction, they must extract thematically relevant information from the animation and incorporate it into their knowledge structures. Animation group subjects used a dynamic depiction of weather map changes to help them predict the future pattern of meteorological markings on a given map and then made a further prediction for a different map without the aid of the animation. Predictions from these subjects were superior in some respects to those produced by control subjects but this superiority tended to be limited to aspects that had high perceptual salience in the animation. The findings indicate selective processing of the animation that involved perceptually driven dynamic effects analogous to the field\textendash ground effects associated with the visuospatial characteristics of static graphics, and raise questions about the widely assumed intrinsic superiority of animations over static graphics as resources for learning.},
  keywords = {Complex animation,Dynamic field-ground,Information extraction,Knowledge structures,Perceptual salience,Prediction,Thematic relevance},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/WEZDV6BY/Lowe - 2003 - Animation and learning selective processing of in.pdf;/Users/igormoreno/Zotero/storage/SRXYT6F4/S095947520200018X.html}
}

@inproceedings{loweExplainingNoviceProgrammer2019,
  title = {Explaining {{Novice Programmer}}'s {{Struggles}}, in {{Two Parts}}: {{Revisiting}} the {{ITiCSE}} 2004 Working Group's Study Using Dual Process Theory},
  shorttitle = {Explaining {{Novice Programmer}}'s {{Struggles}}, in {{Two Parts}}},
  booktitle = {Proceedings of the 2019 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Lowe, Tony},
  year = {2019},
  month = jul,
  pages = {30--36},
  publisher = {{ACM}},
  address = {{Aberdeen Scotland Uk}},
  doi = {10.1145/3304221.3319775},
  urldate = {2020-06-22},
  abstract = {Identifying the cause of a problem is often much more difficult than identifying the problem. The ITiCSE 2004 working group, led by Raymond Lister, conducted a study following up on the McCracken group's finding that many novices struggled with presumedly easy coding tasks. Rather than a test of coding, Lister et al.'s participants completed multiple-choice questions to ascertain their level conceptual understanding of coding constructs. Lister and team reported that participants understood programming concepts yet lacked the consistent apply that knowledge to trace code. This paper revisits the analysis of two of twelve questions to reinterpret their data using dual process theory to explain novice inconsistencies better. Dual process theory describes cognition as two mechanisms: slow, focused, rational thinking versus quick, automatic, and effortless responses. The results suggest dual process theory changes the epistemological meaning of what is to `know' how to program. Mature programmers utilize more than just knowledge of concepts, but also require speed and intuition obtained through practice. Dual process theory provides a new lens for assessing novice maturity and pedagogy in programming.},
  isbn = {978-1-4503-6895-7},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/3MPBGGRA/Lowe - 2019 - Explaining Novice Programmer's Struggles, in Two Parts.pdf}
}

@article{loweInterrogationDynamicVisualization2004,
  title = {Interrogation of a Dynamic Visualization during Learning},
  author = {Lowe, Richard},
  year = {2004},
  month = jun,
  journal = {Learning and Instruction},
  series = {Dynamic {{Visualisations}} and {{Learning}}},
  volume = {14},
  number = {3},
  pages = {257--274},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2004.06.003},
  urldate = {2018-11-06},
  abstract = {Because animations can depict situational dynamics explicitly, they have the potential to help learners build coherent, high-quality mental models of complex change processes. Further, interactive animations provide opportunities for learners to deal with available information selectively and so avoid excessive processing demands. However, to be instructionally effective, the selected subsets of information must have high domain and task relevance. Approaches used by domain novices to interrogate an interactive animation of a complex dynamic system as they prepared for a subsequent prediction task were explored. Subjects searched the animation in order to learn generalizations upon which to base their predictions. Spatial and temporal strategies employed tended to be narrowly focused upon individual graphic features or localized groups while broader relational aspects required for coherence were neglected. The findings suggest that in order to build satisfactory mental representations from interactive animations, learners may require specific guidance regarding search strategies and targets.},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/ZWJQWUJH/Lowe - 2004 - Interrogation of a dynamic visualization during learning.pdf;/Users/igormoreno/Zotero/storage/T2BD5844/S0959475204000313.html}
}

@techreport{loweMisconceptionsNotionalMachine2018,
  title = {Misconceptions and the {{Notional Machine}} in {{Very Young Programming Learners}}},
  author = {Lowe, Tony A},
  year = {2018},
  number = {76},
  pages = {16},
  abstract = {This study looks at very young learners make mistakes and possibly form misunderstanding when learning to programming. A variety of national efforts are extending programming education to younger learners who are materials many adults struggle to learn. For decades literature has captured common misconceptions in using programming constructs (e.g. conditionals, loops, and recursion) in older learners, but early learners may wait years before they tackle these complex concepts. Many model misconceptions as a missing or inaccurate notional machine. The notional machine is an individual's mental model, representing how a programming language executes on a real device. The notional machine aligns with traditional learning models from several educational theorists, particularly Bruner's three stages of representations and Kahneman's neuroscience-based modeling of the mind. To better understand the early thought process of and learning theory for teaching novices, this study looks at videos of early elementary students working to create basic navigational programs for simple robots. We observed students in K-2 and categorized the mistakes made and strategies used to achieve their goals. Our findings align with prior misconception literature in very young learners around the `problem' being the source of more misconceptions than the language. We also find promising cases which support learning theory around the notional machine, Bruner's representations and Kahneman's two mind model. Using this theory suggests possible approaches to consider in teaching young learners to program.},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/MTDBDQFV/Lowe - 2018 - Misconceptions and the Notional Machine in Very Young Programming Learners.pdf}
}

@article{ltdUnderstandingStudentsFailure2021,
  title = {Understanding {{Students}}' {{Failure}} to Use {{Functions}} as a {{Tool}} for {{Abstraction}} \textendash{} {{An Analysis}} of {{Questionnaire Responses}} and {{Lab Assignments}} in a {{CS1 Python Course}}},
  author = {Ltd, ICB-InterConsult Bulgaria},
  year = {2021},
  journal = {Informatics in Education - An International Journal},
  volume = {20},
  number = {4},
  pages = {583--614},
  publisher = {{Vilniaus Universiteto Leidykla}},
  issn = {1648-5831},
  urldate = {2022-06-22},
  abstract = {Controlling complexity through the use of abstractions is a critical part of problem solving in programming. Thus, becoming proficient with procedural and data abstraction through the use of user-defined functions is important. Properly using functions for abstraction involves a number of other core concepts, such as parameter passing, scope and references, which are known to be difficult. Therefore, this paper aims to study students' proficiency with these core concepts, and students' ability to apply procedural and data abstraction to solve problems. We collected data from two years of an introductory Python course, both from a questionnaire and from two lab assignments. The data shows that students had difficulties with the core concepts, and a number of issues solving problems with abstraction. We also investigate the impact of using a visualization tool when teaching the core concepts.},
  langid = {english},
  keywords = {abstraction,core concepts,CS1,data abstraction,parameter passing,prerequisites,procedural abstraction,Python functions,Python Tutor,references,scope},
  file = {/Users/igormoreno/Zotero/storage/R7P3HU2I/Ltd - 2021 - Understanding Students’ Failure to use Functions a.pdf}
}

@article{lubinProgramSketchingLive2020,
  title = {Program Sketching with Live Bidirectional Evaluation},
  author = {Lubin, Justin and Collins, Nick and Omar, Cyrus and Chugh, Ravi},
  year = {2020},
  month = aug,
  journal = {Proceedings of the ACM on Programming Languages},
  volume = {4},
  number = {ICFP},
  pages = {109:1--109:29},
  doi = {10.1145/3408991},
  urldate = {2020-09-30},
  abstract = {We present a system called Smyth for program sketching in a typed functional language whereby the concrete evaluation of ordinary assertions gives rise to input-output examples, which are then used to guide the search to complete the holes. The key innovation, called live bidirectional evaluation, propagates examples "backward" through partially evaluated sketches. Live bidirectional evaluation enables Smyth to (a) synthesize recursive functions without trace-complete sets of examples and (b) specify and solve interdependent synthesis goals. Eliminating the trace-completeness requirement resolves a significant limitation faced by prior synthesis techniques when given partial specifications in the form of input-output examples. To assess the practical implications of our techniques, we ran several experiments on benchmarks used to evaluate Myth, a state-of-the-art example-based synthesis tool. First, given expert examples (and no partial implementations), we find that Smyth requires on average 66\% of the number of expert examples required by Myth. Second, we find that Smyth is robust to randomly-generated examples, synthesizing many tasks with relatively few more random examples than those provided by an expert. Third, we create a suite of small sketching tasks by systematically employing a simple sketching strategy to the Myth benchmarks; we find that user-provided sketches in Smyth often further reduce the total specification burden (i.e. the combination of partial implementations and examples). Lastly, we find that Leon and Synquid, two state-of-the-art logic-based synthesis tools, fail to complete several tasks on which Smyth succeeds.},
  keywords = {Bidirectional Evaluation,Examples,Program Synthesis,proposedByIgor,Sketches},
  annotation = {00002},
  file = {/Users/igormoreno/Zotero/storage/KHT9GIEZ/Lubin et al - 2020 - Program sketching with live bidirectional evaluation.pdf}
}

@inproceedings{lubkeInterfaceEvolutionPatterns2019,
  title = {Interface Evolution Patterns: Balancing Compatibility and Extensibility across Service Life Cycles},
  shorttitle = {Interface Evolution Patterns},
  booktitle = {Proceedings of the 24th {{European Conference}} on {{Pattern Languages}} of {{Programs}}},
  author = {L{\"u}bke, Daniel and Zimmermann, Olaf and Pautasso, Cesare and Zdun, Uwe and Stocker, Mirko},
  year = {2019},
  month = jul,
  series = {{{EuroPLop}} '19},
  pages = {1--24},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3361149.3361164},
  urldate = {2021-04-08},
  abstract = {Remote Application Programming Interfaces (APIs) are technology enablers for distributed systems and cloud-native application development. API providers find it hard to design their remote APIs so that they can be evolved easily; refactoring and extending an API while preserving backward compatibility is particularly challenging. If APIs are evolved poorly, clients are critically impacted; high costs to adapt and compensate for downtimes may result. For instance, if an API provider publishes a new incompatible API version, existing clients might break and not function properly until they are upgraded to support the new version. Hence, applying adequate strategies for evolving service APIs is one of the core problems in API governance, which in turn is a prerequisite for successfully integrating service providers with their clients in the long run. Although many patterns and pattern languages are concerned with API, service design, and related integration technologies, patterns guiding the evolution of APIs are missing to date. Extending our emerging pattern language on Microservice API Patterns (MAP), we introduce a set of patterns focusing on API evolution strategies in this paper: API Description, Version Identifier, Semantic Versioning, Eternal Lifetime Guarantee, Limited Lifetime Guarantee, Two in Production, Aggressive Obsolescence, and Experimental Preview. The patterns were mined from public Web APIs and industry projects the authors had been involved in.},
  isbn = {978-1-4503-6206-1},
  file = {/Users/igormoreno/Zotero/storage/MHDLEYSZ/Lübke et al. - 2019 - Interface evolution patterns balancing compatibil.pdf}
}

@article{luGradualSoundnessLessons2022,
  title = {Gradual {{Soundness}}: {{Lessons}} from {{Static Python}}},
  shorttitle = {Gradual {{Soundness}}},
  author = {Lu, Kuang-Chen and Greenman, Ben and Meyer, Carl and Viehland, Dino and Panse, Aniket and Krishnamurthi, Shriram},
  year = {2022},
  month = jun,
  journal = {The Art, Science, and Engineering of Programming},
  volume = {7},
  number = {1},
  pages = {2:1-2:40},
  issn = {2473-7321},
  doi = {10.22152/programming-journal.org/2023/7/2},
  urldate = {2022-11-21},
  abstract = {Context: Gradually-typed languages allow typed and untyped code to interoperate, but typically come with significant drawbacks. In some l...},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/BV9UJNHZ/Lu et al. - 2022 - Gradual Soundness Lessons from Static Python.pdf;/Users/igormoreno/Zotero/storage/VHP34NUK/2.html}
}

@inproceedings{lukkarinenClassifyingToolsContextualized2016,
  title = {Classifying the Tools of Contextualized Programming Education and Forms of Media Computation},
  booktitle = {Proceedings of the 16th {{Koli Calling International Conference}} on {{Computing Education Research}}},
  author = {Lukkarinen, Aleksi and Sorva, Juha},
  year = {2016},
  month = nov,
  pages = {51--60},
  publisher = {{ACM}},
  address = {{Koli Finland}},
  doi = {10.1145/2999541.2999551},
  urldate = {2023-05-09},
  isbn = {978-1-4503-4770-9},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/49BRVUT7/Lukkarinen and Sorva - 2016 - Classifying the tools of contextualized programmin.pdf}
}

@article{lukowiczExperimentalEvaluationComputer1995,
  title = {Experimental Evaluation in Computer Science: {{A}} Quantitative Study},
  shorttitle = {Experimental Evaluation in Computer Science},
  author = {Lukowicz, Paul and Heinz, Ernst A. and Prechelt, Lutz and Tichy, Walter F.},
  year = {1995},
  journal = {To appear in\$\textbackslash backslash\$Journal of Systems and Software},
  volume = {1994},
  annotation = {00376}
}

@inproceedings{lunguDesigningPersonalizedLearning2019,
  title = {Designing Personalized Learning Environments through Monitoring and Guiding User Interactions with Code and Natural Language},
  booktitle = {Proceedings of the 1st {{ACM SIGSOFT International Workshop}} on {{Education}} through {{Advanced Software Engineering}} and {{Artificial Intelligence}}},
  author = {Lungu, Mircea},
  year = {2019},
  month = aug,
  series = {{{EASEAI}} 2019},
  pages = {5--8},
  publisher = {{Association for Computing Machinery}},
  address = {{Tallinn, Estonia}},
  doi = {10.1145/3340435.3342724},
  urldate = {2020-02-10},
  abstract = {Learning the vocabulary of a new language and a new programming API are similar in multiple ways. In this paper we evaluate several of the similarities and show that based on them we can design systems that can guide the learner towards improving their knowledge without an external tutor or preset curriculum. Instead, the class of systems we propose here are based on automated approaches of building maps of knowledge of the domain by mining repositories. By intersecting this knowledge with models of learner knowledge built by observing past learner interactions with artifacts of the domain we can generate highly personalized learning guidance.},
  isbn = {978-1-4503-6852-0},
  keywords = {architectures,artificial intelligence,ecosystems,education,software engineering},
  annotation = {00003},
  file = {/Users/igormoreno/Zotero/storage/UVZQ5I6H/Lungu - 2019 - Designing personalized learning environments through monitoring and guiding.pdf}
}

@article{luWhatHappensWhen2023,
  title = {What {{Happens When Students Switch}} ({{Functional}}) {{Languages}} ({{Experience Report}})},
  author = {Lu, Kuang-Chen and Krishnamurthi, Shriram and Fisler, Kathi and Tshukudu, Ethel},
  year = {2023},
  month = aug,
  journal = {Proceedings of the ACM on Programming Languages},
  volume = {7},
  number = {ICFP},
  pages = {215:796--215:812},
  doi = {10.1145/3607857},
  urldate = {2023-10-31},
  abstract = {When novice programming students already know one programming language and have to learn another, what issues do they run into? We specifically focus on one or both languages being functional, varying along two axes: syntax and semantics. We report on problems, especially persistent ones. This work can be of immediate value to educators and also sets up avenues for future research.},
  keywords = {Language transfer,Programming language learning,Pyret,Python,Racket},
  file = {/Users/igormoreno/Zotero/storage/25KU45IH/Lu et al. - 2023 - What Happens When Students Switch (Functional) Lan.pdf}
}

@inproceedings{luxton-reillyDevelopingAssessmentsDetermine2017,
  title = {Developing {{Assessments}} to {{Determine Mastery}} of {{Programming Fundamentals}}},
  booktitle = {Proceedings of the 2017 {{ITiCSE Conference}} on {{Working Group Reports}} - {{ITiCSE-WGR}} '17},
  author = {{Luxton-Reilly}, Andrew and Whalley, Jacqueline and Becker, Brett A. and Cao, Yingjun and McDermott, Roger and Mirolo, Claudio and M{\"u}hling, Andreas and Petersen, Andrew and Sanders, Kate and {Simon}},
  year = {2017},
  pages = {47--69},
  publisher = {{ACM Press}},
  address = {{Bologna, Italy}},
  doi = {10.1145/3174781.3174784},
  urldate = {2020-06-22},
  abstract = {Current learning outcomes for introductory programming courses are relatively general, specifying tasks such as designing, implementing, testing and debugging programs that use some fundamental programming constructs. These outcomes impact what we teach, our expectations, and our assessments. Although prior work has demonstrated the utility of single concept assessments, most assessments used in formal examinations combine numerous heterogeneous concepts, resulting in complex and difficult tasks. As a consequence, teachers may not be able to diagnose the actual difficulties faced by students and students are not provided with accurate feedback about their achievements. Such limitations on the nature and quality of feedback to teachers and students alike may contribute to the perceived difficulty and high dropout rates commonly observed in introductory programming courses.},
  isbn = {978-1-4503-5627-5},
  langid = {english},
  keywords = {ForAndrea},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/7XFBRIJP/Luxton-Reilly et al - 2017 - Developing Assessments to Determine Mastery of Programming Fundamentals.pdf}
}

@inproceedings{luxton-reillyIntroductoryProgrammingSystematic2018,
  title = {Introductory Programming: A Systematic Literature Review},
  shorttitle = {Introductory Programming},
  booktitle = {Proceedings {{Companion}} of the 23rd {{Annual ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}} - {{ITiCSE}} 2018 {{Companion}}},
  author = {{Luxton-Reilly}, Andrew and Sheard, Judy and Szabo, Claudia and {Simon} and Albluwi, Ibrahim and Becker, Brett A. and Giannakos, Michail and Kumar, Amruth N. and Ott, Linda and Paterson, James and Scott, Michael James},
  year = {2018},
  pages = {55--106},
  publisher = {{ACM Press}},
  address = {{Larnaca, Cyprus}},
  doi = {10.1145/3293881.3295779},
  urldate = {2020-06-22},
  abstract = {As computing becomes a mainstream discipline embedded in the school curriculum and acts as an enabler for an increasing range of academic disciplines in higher education, the literature on introductory programming is growing. Although there have been several reviews that focus on specific aspects of introductory programming, there has been no broad overview of the literature exploring recent trends across the breadth of introductory programming.},
  isbn = {978-1-4503-6223-8},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/7QKIKNVE/Luxton-Reilly et al - 2018 - Introductory programming.pdf}
}

@inproceedings{luxton-reillyLearningProgramEasy2016,
  title = {Learning to {{Program}} Is {{Easy}}},
  booktitle = {Proceedings of the 2016 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}} - {{ITiCSE}} '16},
  author = {{Luxton-Reilly}, Andrew},
  year = {2016},
  pages = {284--289},
  publisher = {{ACM Press}},
  address = {{Arequipa, Peru}},
  doi = {10.1145/2899415.2899432},
  urldate = {2020-06-22},
  abstract = {The orthodox view that ``programming is difficult to learn'' leads to uncritical teaching practices and poor student outcomes. It may also impact negatively on diversity and equity within the Computer Science discipline. But learning to program is easy \textemdash{} so easy that children can do it. We make our introductory courses difficult by establishing unrealistic expectations for novice programming students. By revisiting the expected norms for introductory programming we may be able to substantially improve outcomes for novice programmers, address negative impressions of disciplinary practices and create a more equitable environment.},
  isbn = {978-1-4503-4231-5},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/UX7LV54L/Luxton-Reilly - 2016 - Learning to Program is Easy.pdf}
}

@article{lyeReviewTeachingLearning2014,
  title = {Review on Teaching and Learning of Computational Thinking through Programming: {{What}} Is next for {{K-12}}?},
  shorttitle = {Review on Teaching and Learning of Computational Thinking through Programming},
  author = {Lye, Sze Yee and Koh, Joyce Hwee Ling},
  year = {2014},
  month = dec,
  journal = {Computers in Human Behavior},
  volume = {41},
  pages = {51--61},
  issn = {0747-5632},
  doi = {10.1016/j.chb.2014.09.012},
  urldate = {2018-12-02},
  abstract = {Programming is more than just coding, for, it exposes students to computational thinking which involves problem-solving using computer science concepts like abstraction and decomposition. Even for non-computing majors, computational thinking is applicable and useful in their daily lives. The three dimensions of computational thinking are computational concepts, computational practices and computational perspectives. In recent years, the availability of free and user-friendly programming languages has fuelled the interest of researchers and educators to explore how computational thinking can be introduced in K-12 contexts. Through an analysis of 27 available intervention studies, this paper presents the current trends of empirical research in the development of computational thinking through programming and suggests possible research and instructional implications. From the review, we propose that more K-12 intervention studies centering on computational practices and computational perspectives could be conducted in the regular classroom. To better examine these two dimensions, students could be asked to verbalize their thought process using think aloud protocol while programming and their on-screen programming activity could be captured and analyzed. Predetermined categories based on both past and recent programming studies could be used to guide the analysis of the qualitative data. As for the instructional implication, it is proposed that a constructionism-based problem-solving learning environment, with information processing, scaffolding and reflection activities, could be designed to foster computational practices and computational perspectives.},
  keywords = {Computational thinking,Computer science education,K-12,Programming,Scratch},
  file = {/Users/igormoreno/Zotero/storage/VV6BSSQL/Lye and Koh - 2014 - Review on teaching and learning of computational thinking through programming.pdf;/Users/igormoreno/Zotero/storage/GWWBBJFN/S0747563214004634.html}
}

@incollection{lymanResponsiveClassroomDiscussion1981,
  title = {The {{Responsive Classroom Discussion}}: {{The Inclusion}} of {{All Students}}},
  booktitle = {Mainstreaming {{Digest}}},
  author = {Lyman, Frank T},
  editor = {Anderson, Audrey Springs},
  year = {1981},
  pages = {109--113},
  publisher = {{University of Maryland College of Education}},
  address = {{College Park, MD, USA}}
}

@book{lynchDistributedAlgorithms1997,
  title = {Distributed Algorithms},
  author = {Lynch, Nancy A.},
  year = {1997},
  series = {The {{Morgan Kaufmann}} Series in Data Management Systems},
  publisher = {{Morgan Kaufmann}},
  address = {{San Francisco, Calif}},
  isbn = {978-1-55860-348-6},
  langid = {english},
  lccn = {QA76.9.A43 L96 1997},
  keywords = {Computer algorithms,Distributed processing,Electronic data processing},
  file = {/Users/igormoreno/Zotero/storage/UM6GS8XT/Lynch - 1997 - Distributed algorithms.pdf}
}

@inproceedings{lytleDataDrivenProgrammingProblem2019,
  title = {Towards {{Data-Driven Programming Problem Generation}} for {{Mastery Learning}}},
  booktitle = {Proceedings of the 2019 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Lytle, Nicholas},
  year = {2019},
  series = {{{ICER}} '19},
  pages = {339--340},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3291279.3339447},
  urldate = {2019-10-07},
  abstract = {Research into intelligent programming systems has lead to numerous means of providing help to students during programming tasks but not in generating the right problem for students to work through. My work will be in developing and analyzing a programming problem generator for mastery learning that will leverage student data and incorporate methods for instructional design for programming tasks to give students the best problem to practice and achieve proficiency},
  isbn = {978-1-4503-6185-9},
  keywords = {instructional support,mastery learning,problem generation},
  file = {/Users/igormoreno/Zotero/storage/4MUVBPGJ/Lytle - 2019 - Towards Data-Driven Programming Problem Generation for Mastery Learning.pdf}
}

@book{m.w.vansomerenLearningMultipleRepresentations1998,
  title = {Learning with {{Multiple Representations}}},
  author = {{M.W. Van Someren} and {Peter Reimann} and {Henny P.A. Boshuizen} and {Ton de Jong}},
  year = {1998},
  month = dec,
  series = {Advances in {{Learning}} and {{Instruction Series}}},
  publisher = {{Emerald Group Publishing Limited}},
  urldate = {2019-04-22},
  abstract = {The book is written in the framework of a European collaborative research programme, Learning in Humans and Machines, funded by the European Science Foundation. The book's purpose is to collect papers on learning declarative knowledge and problem solving skills that involve multiple representations such as verbal, graphical and mathematical representations, knowledge at different levels of abstraction (e.g. qualitative and quantitative, specific cases or general models). One of the goals of the research programme is to demonstrate existing and to initiate new collaboration between educational sciences, psychology and machine learning. The first aim of this book is to give an overview of the state of the art of the topic of learning involving different representations in the form of overview chapters. The book covers approaches to this topic from different perspectives: educational, cognitive modelling and machine learning. It includes both theoretical analyses and studies in application contexts. The second aim of the book is to present current research on these topics and to articulate research issues for future research. This is done in the form of a collection of research papers and two reflective chapters.},
  isbn = {978-0-08-043343-1},
  keywords = {OrderForLibrary},
  file = {/Users/igormoreno/Zotero/storage/6N8L8M7S/9780080433431.html}
}

@article{machanickTeachingJavaBackwards2007,
  title = {Teaching {{Java}} Backwards},
  author = {Machanick, Philip},
  year = {2007},
  month = apr,
  journal = {Computers \& Education},
  volume = {48},
  number = {3},
  pages = {396--408},
  issn = {03601315},
  doi = {10.1016/j.compedu.2005.01.009},
  urldate = {2018-10-02},
  abstract = {Presenting material in a more object-oriented way is a growing trend in Computer Science education. This paper takes the idea of objects-first or abstraction-first teaching a step further, by using Bloom's Taxonomy to design a course in such a way as to present factual content early, followed by higherlevel cognitive skills. In the course described here, factual content was covered rapidly, then reinforced by assignments, laboratory sessions and tutorials, aimed at building higher cognitive skills. The resulting course was successful in relatively rapidly bringing a class doing a ``bridging'' diploma up to the level required for dealing with a second-year course.},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/LY7AF9XG/Machanick - 2007 - Teaching Java backwards.pdf}
}

@article{madhyasthaFaringFacetsBuilding2009,
  title = {Faring with {{Facets}}: {{Building}} and {{Using Databases}} of {{Student Misconceptions}}},
  shorttitle = {Faring with {{Facets}}},
  author = {Madhyastha, Tara and Tanimoto, Steven},
  year = {2009},
  month = feb,
  journal = {Journal of Interactive Media in Education},
  volume = {2009},
  number = {1},
  pages = {Art. 5},
  issn = {1365-893X},
  doi = {10.5334/2009-1},
  urldate = {2019-05-09},
  abstract = {A number of educational researchers have developed pedagogical approaches that involve the teacher in discovering and helping to correct misconceptions that students bring to their study of their subject matter. During the last decade, several computer systems have been developed to support teaching and learning using this kind of approach. A central conceptual construct used by these systems is the "facet" of understanding: an atomic diagnosable unit of belief. A formidable challenge to applying such pedagogical approaches to new topic areas is the task of discovering and organizing the facets for the new subject area. This paper presents a taxonomy of misconceptions and a methodology for going about the task of preparing a database of facets. Important issues include the generality and diagnosability of facets, granularity of facets, and their placement on a scale of problematicity. Examples are drawn from the subjects of physics and computer science and in the context of two computer systems: the Diagnoser and INFACT. Editors:~Patrick McAndrew (Open University, UK). Reviewers: Paul Horwitz (Concord Consortium, USA) and Ruth Thomas (Jelsim Partnership, UK).},
  copyright = {Authors who publish with this journal agree to the following terms:    Authors retain copyright and grant the journal right of first publication with the work simultaneously licensed under a  Creative Commons Attribution License  that allows others to share the work with an acknowledgement of the work's authorship and initial publication in this journal.  Authors are able to enter into separate, additional contractual arrangements for the non-exclusive distribution of the journal's published version of the work (e.g., post it to an institutional repository or publish it in a book), with an acknowledgement of its initial publication in this journal.  Authors are permitted and encouraged to post their work online (e.g., in institutional repositories or on their website) prior to and during the submission process, as it can lead to productive exchanges, as well as earlier and greater citation of published work (See  The Effect of Open Access ).  All third-party images reproduced on this journal are shared under Educational Fair Use. For more information on  Educational Fair Use , please see  this useful checklist prepared by Columbia University Libraries .   All copyright  of third-party content posted here for research purposes belongs to its original owners.  Unless otherwise stated all references to characters and comic art presented on this journal are \textcopyright, \textregistered{} or \texttrademark{} of their respective owners. No challenge to any owner's rights is intended or should be inferred.},
  langid = {english},
  keywords = {computer-assisted instruction,concept,diagnosis,educational assessment,facet,facetbase,learning environment,misconception,Misconceptions Proposal,ontology,pedagogical knowledge,preconception,proposedByIgor,teaching},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/TBBF85G9/Madhyastha and Tanimoto - 2009 - Faring with Facets.pdf;/Users/igormoreno/Zotero/storage/3QN4E23P/2009-1.html}
}

@techreport{madisonParameterPassingConceptions1997,
  type = {{{RIE}}},
  title = {Parameter {{Passing}}: {{The Conceptions Novices Construct}}},
  shorttitle = {Parameter {{Passing}}},
  author = {Madison, Sandra and Gifford, James},
  year = {1997},
  month = mar,
  number = {ED406211},
  pages = {30},
  institution = {{ERIC}},
  urldate = {2021-01-13},
  abstract = {This study explores the parameter-related misconceptions of two college students enrolled in a Pascal programming course. Findings indicate that both students appeared to conceive a direct procedure-to-procedure linkage, with the connection being made by identically named formal parameters. Both students were able, by making seemingly innocuous adjustments to formal parameter lists, to construct correctly functioning modular programs. They were also able to correctly answer parameter-related questions as long as the questions did not provoke a conflict with their fundamental misconceptions of the parameter process. As a result, the misconceptions were hidden from the instructor and perhaps from the students themselves. The results are discussed within a constructivist framework  and implications for instruction are suggested. Contains 22 references. (Author/JRH)},
  langid = {english},
  keywords = {Computer Science,Constructivism (Learning),Higher Education,Misconceptions},
  annotation = {00011},
  file = {/Users/igormoreno/Zotero/storage/59UGUGXR/Madison e Gifford - 1997 - Parameter Passing The Conceptions Novices Constru.pdf;/Users/igormoreno/Zotero/storage/M9G2TGDT/Madison e Gifford - 1997 - Parameter Passing The Conceptions Novices Constru.pdf;/Users/igormoreno/Zotero/storage/GKILEBQU/eric.ed.gov.html;/Users/igormoreno/Zotero/storage/N3J7SJNI/eric.ed.gov.html}
}

@article{maierEffectsComputerassistedFormative2016,
  title = {Effects of a Computer-Assisted Formative Assessment Intervention Based on Multiple-Tier Diagnostic Items and Different Feedback Types},
  author = {Maier, Uwe and Wolf, Nicole and Randler, Christoph},
  year = {2016},
  month = apr,
  journal = {Computers \& Education},
  volume = {95},
  pages = {85--98},
  issn = {03601315},
  doi = {10.1016/j.compedu.2015.12.002},
  urldate = {2018-11-06},
  abstract = {Computer-assisted formative assessments with multiple-tier items are a valid instrument for diagnosing students' conceptual understanding in learning domains with wellstructured declarative knowledge (e.g. science education). However, it is unknown how feedback on multiple-tier items can improve learning success. Therefore, we assessed (1) predictors of students' perception and use of elaborated feedback, and (2) if feedback content (elaborated, verification, control) matters in explaining students' achievement in post- and retention tests. We developed computer-assisted formative tests for a teaching unit on evolutionary adaptations. Three treatment groups were employed with varying feedback content: Treatment 1 (T1) was an elaborated instruction-based feedback, T2 was a dichotomous verification feedback, and T3 (control) consisted of reading appropriate texts (no formative assessment and no feedback). Afterwards, T1 was separated into one subgroup with pupils who used the feedback thoroughly (T1A) and a subgroup that did not use the feedback (T1B). Ten secondary classrooms were used and 261 pupils participated in this study. Each student in each classroom was randomly assigned to one treatment group. Correlation and univariate regression analysis showed that perception and use of elaborated feedback were related to intrinsic motivation and self-reported grades. Multivariate analysis of covariance was applied to check treatment effects on post-tests and retention tests as dependent variables. Results revealed that verification feedback (T2) and elaborated feedback when students did use it (T1A) was superior to no feedback (T3) and elaborated feedback when students did not use it (T1B). Implications for the design of multiple-tier diagnostic assessments are discussed.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/3MMJ9N6R/Maier et al - 2016 - Effects of a computer-assisted formative assessment intervention based on.pdf}
}

@misc{MailinglistExpressionProblem,
  title = {Mailinglist - {{Expression Problem}}},
  urldate = {2018-08-30},
  howpublished = {http://homepages.inf.ed.ac.uk/wadler/papers/expression/expression.txt},
  file = {/Users/igormoreno/Zotero/storage/F88DK36V/expression.html}
}

@article{mainaliRepresentationTeachingLearning2021,
  title = {Representation in {{Teaching}} and {{Learning Mathematics}}},
  author = {Mainali, Bhesh},
  year = {2021},
  month = jan,
  journal = {International Journal of Education in Mathematics, Science and Technology},
  volume = {9},
  pages = {1--21},
  doi = {10.46328/ijemst.1111},
  abstract = {Representation is an important element for teaching and learning mathematics since utilization of multiple modes of representation would enhance teaching and learning mathematics. Representation is a sign or combination of signs, characters, diagram, objects, pictures, or graphs, which can be utilized in teaching and learning mathematics. Normally, there are four modes of representations in the domain of mathematics: (1) verbal, (2) graphic (3) algebraic, and (4) numeric. Certain type of representations can be dominant in teaching and learning mathematics; however, representation needs to be translated from one mode to another mode. Translation of modes of representation is an important skill that learners need to develop in order to be more proficient in learning mathematics. In the last couple of decades, the role of representation in mathematics education has been increased but requires more research studies to explore various aspects of representations.},
  file = {/Users/igormoreno/Zotero/storage/Z34BK3BG/Mainali - 2021 - Representation in Teaching and Learning Mathematics.pdf}
}

@article{maInvestigatingImprovingModels2011,
  title = {Investigating and Improving the Models of Programming Concepts Held by Novice Programmers},
  author = {Ma, L. and Ferguson, J. and Roper, M. and Wood, M.},
  year = {2011},
  month = mar,
  journal = {Computer Science Education},
  volume = {21},
  number = {1},
  pages = {57--80},
  issn = {0899-3408, 1744-5175},
  doi = {10.1080/08993408.2011.554722},
  urldate = {2020-06-22},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/GIRUFP88/Ma et al - 2011 - Investigating and improving the models of programming concepts held by novice.pdf}
}

@phdthesis{maInvestigatingImprovingNovice2007,
  title = {Investigating and {{Improving Novice Programmers}}' {{Mental Models}} of {{Programming Concepts}}.},
  author = {Ma, Linxiao},
  year = {2007},
  address = {{Glasgow, Scotland}},
  school = {University of Strathclyde},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/8D5LG546/Ma - 2007 - Investigating and improving novice programmersâ€™ .pdf}
}

@inproceedings{maInvestigatingViabilityMental2007,
  title = {Investigating the Viability of Mental Models Held by Novice Programmers},
  booktitle = {Proceedings of the 38th {{SIGCSE}} Technical Symposium on {{Computer}} Science Education},
  author = {Ma, Linxiao and Ferguson, John and Roper, Marc and Wood, Murray},
  year = {2007},
  month = mar,
  pages = {499--503},
  publisher = {{ACM}},
  address = {{Covington Kentucky USA}},
  doi = {10.1145/1227310.1227481},
  urldate = {2023-05-10},
  isbn = {978-1-59593-361-4},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/5D5JEN94/Ma et al. - 2007 - Investigating the viability of mental models held .pdf}
}

@article{makelFactsAreMore2014,
  title = {Facts {{Are More Important Than Novelty}}},
  author = {Makel, Matthew and Plucker, Jonathan},
  year = {2014},
  month = aug,
  journal = {Educational Researcher},
  volume = {43},
  pages = {304--316},
  doi = {10.3102/0013189X14545513},
  abstract = {Despite increased attention to methodological rigor in education research, the field has focused heavily on experimental design and not on the merit of replicating important results. The present study analyzed the complete publication history of the current top 100 education journals ranked by 5-year impact factor and found that only 0.13\% of education articles were replications. Contrary to previous findings in medicine, but similar to psychology, the majority of education replications successfully replicated the original studies. However, replications were significantly less likely to be successful when there was no overlap in authorship between the original and replicating articles. The results emphasize the importance of third-party, direct replications in helping education research improve its ability to shape education policy and practice.},
  file = {/Users/igormoreno/Zotero/storage/3F7K94FP/Makel e Plucker - 2014 - Facts Are More Important Than Novelty.pdf}
}

@article{malcolmDataStructuresProgram1990,
  title = {Data Structures and Program Transformation},
  author = {Malcolm, G.},
  year = {1990},
  month = sep,
  journal = {Science of Computer Programming},
  volume = {14},
  number = {2-3},
  pages = {255--279},
  issn = {0167-6423},
  doi = {10.1016/0167-6423(90)90023-7},
  urldate = {2022-01-06},
  file = {/Users/igormoreno/Zotero/storage/8ZM9PH5D/Malcolm - 1990 - Data structures and program transformation.pdf}
}

@article{malcolmDataStructuresProgram1990a,
  title = {Data Structures and Program Transformation},
  author = {Malcolm, Grant},
  year = {1990},
  month = oct,
  journal = {Science of Computer Programming},
  volume = {14},
  number = {2},
  pages = {255--279},
  issn = {0167-6423},
  doi = {10.1016/0167-6423(90)90023-7},
  urldate = {2020-08-18},
  abstract = {The construction of structure-preserving maps, ``homomorphisms'', is described for an arbitrary data type, and a ``promotion'' theorem is derived for proving equalities of homomorphisms. Examples are given for finite lists, tree structures and types defined by mutual induction; the construction is then dualised to data types with infinite objects, such as infinite lists. The promotion theorem allows the development of concise, calculational proofs: several examples are given of its application to program transformation.},
  langid = {english},
  annotation = {00246},
  file = {/Users/igormoreno/Zotero/storage/XIPKRJAR/0167642390900237.html}
}

@inproceedings{malmiCharacterizingResearchComputing2010,
  title = {Characterizing {{Research}} in {{Computing Education}}: {{A Preliminary Analysis}} of the {{Literature}}},
  shorttitle = {Characterizing {{Research}} in {{Computing Education}}},
  booktitle = {Proceedings of the {{Sixth International Workshop}} on {{Computing Education Research}}},
  author = {Malmi, Lauri and Sheard, Judy and {Simon} and Bednarik, Roman and Helminen, Juha and Korhonen, Ari and Myller, Niko and Sorva, Juha and Taherkhani, Ahmad},
  year = {2010},
  series = {{{ICER}} '10},
  pages = {3--12},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1839594.1839597},
  urldate = {2018-10-22},
  abstract = {This paper presents a preliminary analysis of research papers in computing education. While previous analysis has explored what research is being done in computing education, this project explores how that research is being done. We present our classification system, then the results of applying it to the papers from all five years of ICER. We find that this subset of computing education research has more in common with research in information systems than with that in computer science or software engineering; and that the papers published at ICER generally appear to conform to the specified ICER requirements.},
  isbn = {978-1-4503-0257-9},
  keywords = {classifying publications,computing education,research methods},
  file = {/Users/igormoreno/Zotero/storage/4ZRJNZUP/Malmi et al - 2010 - Characterizing Research in Computing Education.pdf}
}

@inproceedings{malmiTheoreticalUnderpinningsComputing2014,
  ids = {malmiTheoreticalUnderpinningsComputing2014a},
  title = {Theoretical Underpinnings of Computing Education Research: What Is the Evidence?},
  shorttitle = {Theoretical Underpinnings of Computing Education Research},
  booktitle = {Proceedings of the Tenth Annual Conference on {{International}} Computing Education Research - {{ICER}} '14},
  author = {Malmi, Lauri and Taherkhani, Ahmad and Sheard, Judy and {Simon} and Bednarik, Roman and Helminen, Juha and Kinnunen, P{\"a}ivi and Korhonen, Ari and Myller, Niko and Sorva, Juha},
  year = {2014},
  pages = {27--34},
  publisher = {{ACM Press}},
  address = {{Glasgow, Scotland, United Kingdom}},
  doi = {10.1145/2632320.2632358},
  urldate = {2018-10-22},
  abstract = {We analyze the Computing Education Research (CER) literature to discover what theories, conceptual models and frameworks recent CER builds on. This gives rise to a broad understanding of the theoretical basis of CER that is useful for researchers working in that area, and has the potential to help CER develop its own identity as an independent field of study.},
  isbn = {978-1-4503-2755-8},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/QHD962F9/Malmi et al - 2014 - Theoretical underpinnings of computing education research.pdf;/Users/igormoreno/Zotero/storage/RHYC92HI/Malmi et al - 2014 - Theoretical underpinnings of computing education research.pdf}
}

@article{maloneyScratchProgrammingLanguage2010,
  title = {The {{Scratch Programming Language}} and {{Environment}}},
  author = {Maloney, John and Resnick, Mitchel and Rusk, Natalie and Silverman, Brian and Eastmond, Evelyn},
  year = {2010},
  month = nov,
  journal = {ACM Transactions on Computing Education},
  volume = {10},
  number = {4},
  pages = {1--15},
  issn = {1946-6226, 1946-6226},
  doi = {10.1145/1868358.1868363},
  urldate = {2020-06-22},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/LRGPQQT7/Maloney et al - 2010 - The Scratch Programming Language and Environment.pdf}
}

@article{maloneyScratchProgrammingLanguage2010a,
  title = {The {{Scratch Programming Language}} and {{Environment}}},
  author = {Maloney, John and Resnick, Mitchel and Rusk, Natalie and Silverman, Brian and Eastmond, Evelyn},
  year = {2010},
  month = nov,
  journal = {ACM Transactions on Computing Education},
  volume = {10},
  number = {4},
  pages = {16:1--16:15},
  doi = {10.1145/1868358.1868363},
  urldate = {2022-01-14},
  abstract = {Scratch is a visual programming environment that allows users (primarily ages 8 to 16) to learn computer programming while working on personally meaningful projects such as animated stories and games. A key design goal of Scratch is to support self-directed learning through tinkering and collaboration with peers. This article explores how the Scratch programming language and environment support this goal.},
  keywords = {programming environment,programming language,Scratch,visual programming language},
  file = {/Users/igormoreno/Zotero/storage/4TPJA82D/Maloney et al - 2010 - The Scratch Programming Language and Environment.pdf}
}

@book{manouselisRecommenderSystemsLearning2012,
  title = {Recommender {{Systems}} for {{Learning}}},
  author = {Manouselis, Nikos and Drachsler, Hendrik and Verbert, Katrien and {duval}, erik},
  year = {2012},
  month = apr,
  abstract = {Technology enhanced learning (TEL) aims to design, develop and test sociotechnical innovations that will support and enhance learning practices of both individuals and organisations. It is therefore an application domain that generally covers technologies that support all forms of teaching and learning activities. Since information retrieval (in terms of searching for relevant learning resources to support teachers or learners) is a pivotal activity in TEL, the deployment of recommender systems has attracted increased interest. This brief attempts to provide an introduction to recommender systems for TEL settings, as well as to highlight their particularities compared to recommender systems for other application domains.},
  file = {/Users/igormoreno/Zotero/storage/WDZV8DEW/Manouselis et al - 2012 - Recommender Systems for Learning.pdf}
}

@book{manouselisRecommenderSystemsLearning2013,
  title = {Recommender {{Systems}} for {{Learning}}},
  author = {Manouselis, Nikos and Drachsler, Hendrik and Verbert, Katrien and Duval, Erik},
  year = {2013},
  series = {{{SpringerBriefs}} in {{Electrical}} and {{Computer Engineering}}},
  publisher = {{Springer New York}},
  address = {{New York, NY}},
  doi = {10.1007/978-1-4614-4361-2},
  urldate = {2023-03-22},
  isbn = {978-1-4614-4360-5 978-1-4614-4361-2},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/I28I7QV6/Manouselis et al. - 2013 - Recommender Systems for Learning.pdf}
}

@incollection{manouselisRecommenderSystemsTechnology2011,
  title = {Recommender {{Systems}} in {{Technology Enhanced Learning}}},
  booktitle = {Recommender {{Systems Handbook}}},
  author = {Manouselis, Nikos and Drachsler, Hendrik and Vuorikari, Riina and Hummel, Hans and Koper, Rob},
  year = {2011},
  month = oct,
  doi = {10.1007/978-0-387-85820-3_12},
  abstract = {Technology enhanced learning (TEL) aims to design, develop and test socio-technical innovations that will support and enhance learning practices of both individuals and organisations. It is therefore an application domain that generally covers technologies that support all forms of teaching and learning activities. Since information retrieval (in terms of searching for relevant learning resources to support teachers or learners) is a pivotal activity in TEL, the deployment of recommender systems has attracted increased interest. This chapter attempts to provide an introduction to recommender systems for TEL settings, as well as to highlight their particularities compared to recommender systems for other application domains.},
  isbn = {978-0-387-85819-7},
  file = {/Users/igormoreno/Zotero/storage/RUXF445C/Manouselis et al - 2011 - Recommender Systems in Technology Enhanced Learning.pdf}
}

@phdthesis{manuelkollerTheoretischeAnalyseUnd2006,
  type = {{Bachelor Thesis}},
  title = {{Theoretische Analyse und praktische Durchf\"uhrung einer Dozentenbewertung}},
  author = {{Manuel Koller}},
  year = {2006},
  month = oct,
  langid = {ngerman},
  school = {ETH Z\"urich},
  file = {/Users/igormoreno/Zotero/storage/47FIQ97Y/Manuel Koller - 2006 - Theoretische Analyse und praktische Durchführung einer Dozentenbewertung.pdf}
}

@article{marangesComparingCognitiveLoad2017,
  title = {Comparing Cognitive Load and Self-Regulatory Depletion: {{Effects}} on Emotions and Cognitions},
  shorttitle = {Comparing Cognitive Load and Self-Regulatory Depletion},
  author = {Maranges, Heather M. and Schmeichel, Brandon J. and Baumeister, Roy F.},
  year = {2017},
  month = oct,
  journal = {Learning and Instruction},
  series = {Bridging {{Cognitive Load}} and {{Self-Regulated Learning Research}}},
  volume = {51},
  pages = {74--84},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2016.10.010},
  urldate = {2018-11-06},
  abstract = {Prior research has found both similar and different effects of self-regulatory resource depletion and cognitive load. To resolve these seeming contradictions, we experimentally compared the effects of cognitive load and self-regulatory depletion. Ego depletion led participants to pay more attention to pain and to persist less on a pain test, whereas load had opposite effects (Study 1). Load distracted people from processing and reacting to negative emotional content of pictures (Study 2), and boosted positive feelings even without an overt emotion induction (Study 3), whereas depletion did not change how people felt relative to control. Depletion and load had equivalent null effects on visual recognition memory (Study 2) but different effects on semantic processing involving emotional connections (Study 3). Taken together, results suggest that load distracts attention away from, whereas ego depletion undermines top-down control over the processing of pain and negatively-valenced content. We discuss implications for learning and instruction.},
  keywords = {Cognition,Cognitive load,Ego depletion,Emotions,Pain,Self-regulation},
  file = {/Users/igormoreno/Zotero/storage/LJXJ9H9G/Maranges et al - 2017 - Comparing cognitive load and self-regulatory depletion.pdf;/Users/igormoreno/Zotero/storage/QGM2LC53/S095947521630202X.html}
}

@inproceedings{marceauValuesGrowTrees2011,
  title = {Do Values Grow on Trees?: Expression Integrity in Functional Programming},
  shorttitle = {Do Values Grow on Trees?},
  booktitle = {Proceedings of the Seventh International Workshop on {{Computing}} Education Research - {{ICER}} '11},
  author = {Marceau, Guillaume and Fisler, Kathi and Krishnamurthi, Shriram},
  year = {2011},
  pages = {39},
  publisher = {{ACM Press}},
  address = {{Providence, Rhode Island, USA}},
  doi = {10.1145/2016911.2016921},
  urldate = {2021-02-04},
  abstract = {We posit that functional programmers employ a notion called expression integrity to understand programs. We attempt to study the extent to which both novices and experts use this notion as they program, discuss the difficulties that arise in measuring this, and offer some observational findings.},
  isbn = {978-1-4503-0829-8},
  langid = {english},
  annotation = {00001},
  file = {/Users/igormoreno/Zotero/storage/QEXHME8F/Marceau et al. - 2011 - Do values grow on trees expression integrity in .pdf}
}

@book{mardellPedagogyPlaySupporting2023,
  title = {A {{Pedagogy}} of {{Play}}: {{Supporting}} Playful Learning in Classrooms and Schools},
  author = {Mardell, Ben and Ryan, Jen and Krechevsky, Mara and Schulz, Savhannah and Liu Constant, Yvonne},
  year = {2023},
  publisher = {{Project Zero}},
  address = {{Cambridge, MA}},
  file = {/Users/igormoreno/Zotero/storage/VVF5EDAX/Mardell et al - 2023 - A Pedagogy of Play.pdf}
}

@article{margulieuxReviewMeasurementsUsed2019,
  title = {Review of Measurements Used in Computing Education Research and Suggestions for Increasing Standardization},
  author = {Margulieux, Lauren and Ketenci, Tuba Ayer and Decker, Adrienne},
  year = {2019},
  month = jan,
  journal = {Computer Science Education},
  volume = {29},
  number = {1},
  pages = {49--78},
  issn = {0899-3408, 1744-5175},
  doi = {10.1080/08993408.2018.1562145},
  urldate = {2019-08-08},
  abstract = {Background and context: The variables that researchers measure and how they measure them are central in any area of research, including computing education. Which research questions can be asked and how they are answered depends on measurement.},
  langid = {english},
  keywords = {To Read},
  file = {/Users/igormoreno/Zotero/storage/BKB3XPXU/Margulieux et al - 2019 - Review of measurements used in computing education research and suggestions for.pdf}
}

@inproceedings{margulieuxSpatialEncodingStrategy2019,
  title = {Spatial {{Encoding Strategy Theory}}: {{The Relationship}} between {{Spatial Skill}} and {{STEM Achievement}}},
  shorttitle = {Spatial {{Encoding Strategy Theory}}},
  booktitle = {Proceedings of the 2019 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Margulieux, Lauren E.},
  year = {2019},
  month = jul,
  pages = {81--90},
  publisher = {{ACM}},
  address = {{Toronto ON Canada}},
  doi = {10.1145/3291279.3339414},
  urldate = {2020-06-22},
  abstract = {Learners' spatial skill is a reliable and significant predictor of achievement in STEM, including computing, education. Spatial skill is also malleable, meaning it can be improved through training. Most cognitive skill training improves performance on only a narrow set of similar tasks, but researchers have found ample evidence that spatial training can broadly improve STEM achievement. We do not yet know the cognitive mechanisms that make spatial skill training broadly transferable when other cognitive training is not, but understanding these mechanisms is important for developing training and instruction that consistently benefits learners, especially those starting with low spatial skill. This paper proposes the spatial encoding strategy (SpES) theory to explain the cognitive mechanisms connecting spatial skill and STEM achievement. To motivate SpES theory, the paper reviews research from STEM education, learning sciences, and psychology. SpES theory provides compelling post hoc explanations for the findings from this literature and aligns with neuroscience models about the functions of brain structures. The paper concludes with a plan for testing the theory's validity and using it to inform future research and instruction. The paper focuses on implications for computing education, but the transferability of spatial skill to STEM performance makes the proposed theory relevant to many education communities.},
  isbn = {978-1-4503-6185-9},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/XI6PCTMC/Margulieux - 2019 - Spatial Encoding Strategy Theory The Relationship.pdf}
}

@inproceedings{margulieuxUsingLearnersSelfExplanations2017,
  title = {Using {{Learners}}' {{Self-Explanations}} of {{Subgoals}} to {{Guide Initial Problem Solving}} in {{App Inventor}}},
  booktitle = {Proceedings of the 2017 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Margulieux, Lauren and Catrambone, Richard},
  year = {2017},
  month = aug,
  pages = {21--29},
  publisher = {{ACM}},
  address = {{Tacoma Washington USA}},
  doi = {10.1145/3105726.3106168},
  urldate = {2021-06-15},
  abstract = {Our goal for the present research was to improve upon the subgoal learning framework and further enhance problem solving performance for novice programmers learning to use a block-based programming language. In particular, we are expanding upon recent work done by Margulieux and Morrison that prompts learners to self-explain the subgoals, or functional pieces, of a problem solving process to create their own instructional explanations of the process. We added to this work by exploring whether learners' self-explained instructions could be used to effectively scaffold initial problem solving attempts (i.e., practice problems) to further improve performance. In this experiment, learners self-explained subgoals using the most successful conditions from Margulieux and Catrambone's [1] prior work and then were given practice problems that were either unscaffolded (control condition), scaffolded with their own subgoal explanations, or scaffolded with explanations constructed by an instructional designer and computer scientist. Learners who were scaffolded with their own explanations performed better on later problem solving (i.e., an assessment test) than those scaffolded with the experts' explanations or those with no scaffolding. The results show that scaffolding initial problem solving with learners' explanations of the problem solving process can lead to better problem solving performance than scaffolding from experts if the learners construct explanations with adequate support.},
  isbn = {978-1-4503-4968-0},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/4W7DM4LP/Margulieux e Catrambone - 2017 - Using Learners' Self-Explanations of Subgoals to G.pdf}
}

@inproceedings{margulieuxWhenWrongRight2021,
  title = {When {{Wrong}} Is {{Right}}: {{The Instructional Power}} of {{Multiple Conceptions}}},
  shorttitle = {When {{Wrong}} Is {{Right}}},
  booktitle = {Proceedings of the 17th {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Margulieux, Lauren and Denny, Paul and Cunningham, Kathryn and Deutsch, Michael and Shapiro, Benjamin R.},
  year = {2021},
  month = aug,
  series = {{{ICER}} 2021},
  pages = {184--197},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3446871.3469750},
  urldate = {2021-09-14},
  abstract = {For many decades, educational communities, including computing education, have debated the value of telling students what they need to know (i.e., direct instruction) compared to guiding them to construct knowledge themselves (i.e., constructivism). Comparisons of these two instructional approaches have inconsistent results. Direct instruction can be more efficient for short-term performance but worse for retention and transfer. Constructivism can produce better retention and transfer, but this outcome is unreliable. To contribute to this debate, we propose a new theory to better explain these research results. Our theory, multiple conceptions theory, states that learners develop better conceptual knowledge when they are guided to compare multiple conceptions of a concept during instruction. To examine the validity of this theory, we used this lens to evaluate the literature for eight instructional techniques that guide learners to compare multiple conceptions, four from direct instruction (i.e., test-enhanced learning, erroneous examples, analogical reasoning, and refutation texts) and four from constructivism (i.e., productive failure, ambitious pedagogy, problem-based learning, and inquiry learning). We specifically searched for variations in the techniques that made them more or less successful, the mechanisms responsible, and how those mechanisms promote conceptual knowledge, which is critical for retention and transfer. To make the paper directly applicable to education, we propose instructional design principles based on the mechanisms that we identified. Moreover, we illustrate the theory by examining instructional techniques commonly used in computing education that compare multiple conceptions. Finally, we propose ways in which this theory can advance our instruction in computing and how computing education researchers can advance this general education theory.},
  isbn = {978-1-4503-8326-4},
  keywords = {conceptual knowledge,instructional approaches,instructional design,multiple conceptions},
  file = {/Users/igormoreno/Zotero/storage/MMCDVZA5/Margulieux et al. - 2021 - When Wrong is Right The Instructional Power of Mu.pdf}
}

@misc{margulieuxWorksheetEducationalResearch2022,
  title = {Worksheet: {{Educational Research Design}} - {{Quantitiative Focus}}},
  author = {Margulieux, Lauren},
  year = {2022},
  month = jun,
  abstract = {This worksheet will help you plan each of the following aspects of an educational research project with a quantitative focus.},
  file = {/Users/igormoreno/Zotero/storage/VREZD8QY/education-research-design-worksheet.pdf}
}

@article{marquesTeachingMachineLearning2020,
  title = {Teaching {{Machine Learning}} in {{School}}: {{A Systematic Mapping}} of the {{State}} of the {{Art}}},
  shorttitle = {Teaching {{Machine Learning}} in {{School}}},
  author = {Marques, L{\'i}via S. and Gresse Von Wangenheim, Christiane and Hauck, Jean C. R.},
  year = {2020},
  month = jun,
  journal = {Informatics in Education},
  pages = {283--321},
  issn = {1648-5831, 2335-8971},
  doi = {10.15388/infedu.2020.14},
  urldate = {2023-01-12},
  abstract = {Although Machine Learning (ML) is integrated today into various aspects of our lives, few understand the technology behind it. This presents new challenges to extend computing education early to ML concepts helping students to understand its potential and limits. Thus, in order to obtain an overview of the state of the art on teaching Machine Learning concepts in elementary to high school, we carried out a systematic mapping study. We identified 30 instructional units mostly focusing on ML basics and neural networks. Considering the complexity of ML concepts, several instructional units cover only the most accessible processes, such as data management or present model learning and testing on an abstract level black-boxing some of the underlying ML processes. Results demonstrate that teaching ML in school can increase understanding and interest in this knowledge area as well as contextualize ML concepts through their societal impact.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/K2PLZDGS/Marques et al. - 2020 - Teaching Machine Learning in School A Systematic .pdf}
}

@misc{marshallIdentifyingCognitiveState2007,
  type = {Text},
  title = {Identifying {{Cognitive State}} from {{Eye Metrics}}},
  author = {Marshall, Sandra P.},
  year = {2007},
  month = may,
  urldate = {2018-11-09},
  howpublished = {https://www.ingentaconnect.com/content/asma/asem/2007/00000078/a00105s1/art00025},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/R47G8SI7/art00025.html}
}

@article{martinBrindgingTownGown2005,
  title = {Brindging '{{Town}} and {{Gown}}' through Innovative University-Community Partnerships},
  author = {Martin, Lawrence L and {Hayden Smith} and {Wende Phillips}},
  year = {2005},
  journal = {The Innovation Journal: The Public Sector Innovation Journal},
  volume = {10},
  number = {2},
  pages = {16},
  issn = {1715-3816},
  abstract = {Historically, universities and their surrounding communities have failed to work cooperatively to address common problems. Fortunately, this state of affairs has begun to change, due at least in part to a shift from the old government paradigm to the new governance paradigm. The governance paradigm encourages the creation of innovative partnerships between the government sector, the private sector and the non-profit sector in order to harness the collective energies and strengths of all partners. This article begins by providing some definition clarification as to what is meat by innovative university-community partnerships. A brief history of university-community relations is then provided. The shift from a government to a governance perspective and how this shift is promoting the use of innovative university-community partnerships is then discussed. Next, several case examples of successful innovative university-community partnerships are presented. Finally, seven critical success factors are identified that the authors believe lead to successful innovative university-community partnerships.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/TMFVUPJM/Martin et al - 2005 - Brindging 'Town and Gown' through innovative university-community partnerships.pdf}
}

@inproceedings{martinFindingPatternsFieldwork2001,
  title = {Finding Patterns in the Fieldwork},
  booktitle = {Proceedings of the Seventh Conference on {{European Conference}} on {{Computer Supported Cooperative Work}}},
  author = {Martin, David and Rodden, Tom and Rouncefield, Mark and Sommerville, Ian and Viller, Stephen},
  year = {2001},
  month = sep,
  series = {{{ECSCW}}'01},
  pages = {39--58},
  publisher = {{Kluwer Academic Publishers}},
  address = {{Bonn, Germany}},
  urldate = {2020-05-31},
  abstract = {This paper considers the potential of using patterns of cooperative interaction to support the development of general design principles drawn from a range of work settings. It reports on the development of patterns from ethnographic studies in a number of work environments. Our particular interest is in the possibilities surrounding the use of patterns as a means of organising, presenting and representing this growing corpus of ethnographic matertal and in the contribution this might make to CSCW design. In this paper we focus on outlining some of our experiences and difficulties in developing patterns from ethnographic studies and present some initial ideas towards the development of a pattern language to exploit the experience gained from a decade of field studies.},
  isbn = {978-0-7923-7162-5},
  file = {/Users/igormoreno/Zotero/storage/HTLRASDS/Martin et al - 2001 - Finding patterns in the fieldwork.pdf}
}

@article{martinGrammaticalFactorsSentence1966,
  title = {Grammatical Factors in Sentence Retention},
  author = {Martin, Edwin and Roberts, Kelyn H.},
  year = {1966},
  month = jun,
  journal = {Journal of Verbal Learning and Verbal Behavior},
  volume = {5},
  number = {3},
  pages = {211--218},
  issn = {0022-5371},
  doi = {10.1016/S0022-5371(66)80022-1},
  urldate = {2018-12-02},
  abstract = {A rationale for indexing the structural complexity of sentences was introduced and an experiment reported that demonstrated the relationship between this index and sentence retention. The proposed measure entails a phrase-structure analysis of the sentence and a counting of the grammatical commitments incurred by each word of the sentence. A word is said to be structurally embedded in a sentence to the extent that it determines the structure of those parts of the sentence that follow. In a six-trial free-learning experiment where sentence complexity and sentence kind were manipulated independently and sentence length held constant, sentences of lesser indexed complexity were recalled significantly more frequently than sentences of greater complexity. The role of sentence kind was found to affect recall, but not in the systematic way predicted by the transformation-grammar model.},
  file = {/Users/igormoreno/Zotero/storage/RHPDFNEC/Martin and Roberts - 1966 - Grammatical factors in sentence retention.pdf;/Users/igormoreno/Zotero/storage/6VLA5M47/S0022537166800221.html}
}

@misc{martinlehmannObligatorischesFachInformatik2019,
  title = {{Obligatorisches Fach Informatik: Aus- und Weiterbildung f\"ur Gymnasiallehrerinnen und -lehrer}},
  author = {{Martin Lehmann}},
  year = {2019},
  publisher = {{PH Bern}},
  urldate = {2019-05-02},
  langid = {ngerman},
  file = {/Users/igormoreno/Zotero/storage/BZU75QX6/Martin Lehmann - 2019 - Obligatorisches Fach Informatik.pdf}
}

@inproceedings{marwanAdaptiveImmediateFeedback2020,
  title = {Adaptive {{Immediate Feedback Can Improve Novice Programming Engagement}} and {{Intention}} to {{Persist}} in {{Computer Science}}},
  booktitle = {Proceedings of the 2020 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Marwan, Samiha and Gao, Ge and Fisk, Susan and Price, Thomas W. and Barnes, Tiffany},
  year = {2020},
  month = aug,
  pages = {194--203},
  publisher = {{ACM}},
  address = {{Virtual Event New Zealand}},
  doi = {10.1145/3372782.3406264},
  urldate = {2021-06-14},
  abstract = {Prior work suggests that novice programmers are greatly impacted by the feedback provided by their programming environments. While some research has examined the impact of feedback on student learning in programming, there is no work (to our knowledge) that examines the impact of adaptive immediate feedback within programming environments on students' desire to persist in computer science (CS). In this paper, we integrate an adaptive immediate feedback (AIF) system into a block-based programming environment. Our AIF system is novel because it provides personalized positive and corrective feedback to students in real time as they work. In a controlled pilot study with novice high-school programmers, we show that our AIF system significantly increased students' intentions to persist in CS, and that students using AIF had greater engagement (as measured by their lower idle time) compared to students in the control condition. Further, we found evidence that the AIF system may improve student learning, as measured by student performance in a subsequent task without AIF. In interviews, students found the system fun and helpful, and reported feeling more focused and engaged. We hope this paper spurs more research on adaptive immediate feedback and the impact of programming environments on students' intentions to persist in CS.},
  isbn = {978-1-4503-7092-9},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/56LMEAY2/Marwan et al. - 2020 - Adaptive Immediate Feedback Can Improve Novice Pro.pdf}
}

@inproceedings{marwanEvaluationImpactAutomated2019,
  title = {An {{Evaluation}} of the {{Impact}} of {{Automated Programming Hints}} on {{Performance}} and {{Learning}}},
  booktitle = {Proceedings of the 2019 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Marwan, Samiha and Jay Williams, Joseph and Price, Thomas},
  year = {2019},
  month = jul,
  pages = {61--70},
  publisher = {{ACM}},
  address = {{Toronto ON Canada}},
  doi = {10.1145/3291279.3339420},
  urldate = {2021-06-14},
  abstract = {A growing body of work has explored how to automatically generate hints for novice programmers, and many programming environments now employ these hints. However, few studies have investigated the efficacy of automated programming hints for improving performance and learning, how and when novices find these hints beneficial, and the tradeoffs that exist between different types of hints. In this work, we explored the efficacy of next-step code hints with 2 complementary features: textual explanations and selfexplanation prompts. We conducted two studies in which novices completed two programming tasks in a block-based programming environment with automated hints. In Study 1, 10 undergraduate students completed 2 programming tasks with a variety of hint types, and we interviewed them to understand their perceptions of the affordances of each hint type. For Study 2, we recruited a convenience sample of participants without programming experience from Amazon Mechanical Turk. We conducted a randomized experiment comparing the effects of hints' types on learners' performance and performance on a subsequent task without hints. We found that code hints with textual explanations significantly improved immediate programming performance. However, these hints only improved performance in a subsequent post-test task with similar objectives, when they were combined with self-explanation prompts. These results provide design insights into how automatically generated code hints can be improved with textual explanations and prompts to self-explain, and provide evidence about when and how these hints can improve programming performance and learning.},
  isbn = {978-1-4503-6185-9},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/9S8H73KW/Marwan et al. - 2019 - An Evaluation of the Impact of Automated Programmi.pdf}
}

@article{masonSelfgeneratedDrawingsSupporting2013,
  title = {Self-Generated Drawings for Supporting Comprehension of a Complex Animation},
  author = {Mason, Lucia and Lowe, Richard and Tornatora, Maria Caterina},
  year = {2013},
  month = jul,
  journal = {Contemporary Educational Psychology},
  volume = {38},
  number = {3},
  pages = {211--224},
  issn = {0361-476X},
  doi = {10.1016/j.cedpsych.2013.04.001},
  urldate = {2018-11-06},
  abstract = {The perceptual and cognitive processing demands involved in comprehending complex animations can pose considerable challenges to learners. There is a tendency for learners to extract information that is highly perceptually salient but neglect less conspicuous information of crucial relevance to the building of a quality mental model. This study investigated the effectiveness of self-generated drawing for learning from an animation illustrating a scientific phenomenon, the so-called ``Newton's Cradle.'' Participants were 199 students in grade seven, randomly assigned to three experimental conditions: self-generated drawing, traced/copied drawing, and no drawing. All participants were asked to produce an explanation of the animation for both immediate and delayed posttests. The results revealed the superiority of self-generated drawing in supporting animation comprehension at both testing times compared to the other two conditions, which did not differ from each other. In addition, comprehension of the animation was related to the quality of self-generated drawings. Specifically, the depiction of information characterized by low perceptual salience but high conceptual relevance to the phenomenon predicted comprehension and retention over time.},
  keywords = {Animation,Comprehension of animations,Drawing-to-learn,Learning from animations,Self-generated drawing},
  file = {/Users/igormoreno/Zotero/storage/QTEW47HN/Mason et al - 2013 - Self-generated drawings for supporting comprehension of a complex animation.pdf;/Users/igormoreno/Zotero/storage/SSC5CU6I/S0361476X13000155.html}
}

@article{masonWhyBottom102012,
  title = {Why the Bottom 10\% Just Can't Do It -},
  author = {Mason, Raina and Cooper, Graham},
  year = {2012},
  volume = {123},
  pages = {10},
  abstract = {This paper reports the results of mental effort measures and comments collected as part of a study of 44 introductory programming courses in 28 Australian universities, conducted in the latter months of 2010. Academic staff were interviewed regarding their perceptions of the mental effort that is required by themselves, an average student, and a low-performance student while attempting to solve and learn from a novice programming problem.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/JCYMRMIZ/Mason and Cooper - 2012 - Why the bottom 10% just can't do it -.pdf}
}

@mastersthesis{massaloginVisualLambdaCalculus2008,
  title = {Visual {{Lambda Calculus}}},
  author = {Massal{\~o}gin, Viktor},
  year = {2008},
  address = {{Tartu, Estonia}},
  urldate = {2021-04-16},
  abstract = {The history of visual programming languages (VPL) starts in 1963 with the Sketchpad system by Ivan Sutherland [1]. Over time VPL gained in importance in human-computer interaction study, especially for education. This thesis doesn't aim to prove the importance of VPL. Just note that the main argument of such proofs is the primacy of the perception of images over the perception of text [1], thus a graphical representation may successfully supplement or even substitute a textual statement. This thesis is devoted to the development of a visual notation for lambda calculus expressions and a VPL environment based on this notation. We believe that lambda calculus is especially suited for visualization purposes. The simplicity of lambda calculus allows defining simple transparent semantics for notations. It also allows keeping notations purely graphical (meaning that no literal labeling is needed). At the same time such a visual language (along with lambda calculus) is powerful enough to denote Boolean operations, numbers, lists, recursion etc [2]. The main requirements for the developed notation and the visual programming environment are an exact and clear representation of lambda expressions and an intuitive interface for their manipulation respectively. Such an environment may be used as a learning aid for teaching lambda calculus, as a mental game for children or as an assistant tool for research. This thesis is organized as follows. Section 1 introduces and reviews some basic definitions of lambda calculus with let-expressions and lazy evaluation. This section may be skipped by an experienced reader. Section 2 gives an overview of four existing graphical notations for lambda calculus and describes their benefits and drawbacks. Section 3 specifies the bubble notation proposed by the author. This notation combines the benefits of the notations cited above. Section 4 describes the user interface of the Visual Lambda environment prototype based on the bubble notation. Section 5 gives the main aspects of the implementation of the environment in the Python programming language. Section 6 reports the results of lessons with two students. The lessons consisted of an introduction to the lambda calculus and the solving of tasks (both using the Visual Lambda environment). Section 7 presents some conclusions and thoughts on future work. Visual Lambda is the open source project licensed under GPLv3 license. A copy of the project source (as of 27.05.2008) is available online and on the attached CD.},
  school = {University of Tartu},
  file = {/Users/igormoreno/Zotero/storage/J9QEPJKC/Massalõgin - 2008 - Visual Lambda Calculus.pdf}
}

@article{mastrangeloWhenHowJAVA,
  title = {When and {{How JAVA Developers Give Up Static Type Safety}}},
  author = {Mastrangelo, Luis},
  pages = {37},
  abstract = {The main goal of a static type system is to prevent certain kind of errors from happening at run-time. A type system is formulated as a set of constraints that gives any expression or term in a program a well-defined type. Yet mainstream programming languages are endowed with type systems that provide the means to circumvent their constraints through the unsafe intrinsics and casting mechanisms.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/AVEIVI65/Mastrangelo - When and How JAVA Developers Give Up Static Type S.pdf}
}

@misc{mateiLunarcastLunarflow2021,
  title = {Lunarcast/Lunarflow},
  author = {Matei, Adriel},
  year = {2021},
  month = feb,
  urldate = {2021-04-17},
  abstract = {Lambda calculus go brrrr. Contribute to lunarcast/lunarflow development by creating an account on GitHub.},
  howpublished = {Lunarcast},
  keywords = {functional-programm,lambda-calculus,purescript}
}

@misc{mateiLunarflow,
  title = {Lunarflow},
  author = {Matei, Adriel},
  urldate = {2021-04-17},
  howpublished = {https://lunarcast.github.io/lunarflow/},
  file = {/Users/igormoreno/Zotero/storage/IF328SZF/lunarflow.html}
}

@inproceedings{mathewStudentPreferencesPerformance2012,
  title = {Student {{Preferences}} and {{Performance}}: {{A Comparison}} of {{Open-Book}}, {{Closed Book}}, and {{Cheat Sheet Exam Types}}},
  booktitle = {Proceedings of {{The National Conference On Undergraduate Research}} ({{NCUR}}) 2012},
  author = {Mathew, Noelle},
  year = {2012},
  month = mar,
  pages = {7},
  address = {{Weber State University, Ogden Utah}},
  abstract = {What type of examination do students prefer the most? Is the preference for exam type related to performance on the exam? The differences in student preferences and performance between open-book, cheat sheet and closed-book exams were examined in two different types of psychology courses. A total of 297 students enrolled in 8 sections of Introductory Psychology and 99 students enrolled in 4 sections of Statistics participated in this study. Students were given either open-book, cheat sheet or closed-book exams and completed a preference questionnaire. The questionnaire asked participants which type of test (open-book, cheat sheet or closed-book) they predict they would do best on, which type of test they would spend the most time studying for and which type of test they preferred to take, as well as how much time they had spent studying for that test. Students in both types of classes predicted that they would do better on open-book or cheat sheet exams compared to closed-book exams. Scores on closed book exams were lower than on the other two exam types, but scores did not differ between open-book and cheat-sheet exams. Comparisons of the actual exam scores of those who predicted they would do best on open-book exams and those that predicted they would perform best on cheat sheet exams found no difference between the two groups of students on scores on the two types of exams. Students believed they would study most for closed-book exams compared to the other exam types, but there were no differences in reported study time between exam types. Finally, students were asked which of the 3 exam types they would prefer to take. Students in both classes preferred openbook and cheat sheet exams over closed book tests. A comparison of the exam scores of those that preferred openbook exams to those who preferred cheat sheets revealed no difference between the two groups of students on exam scores. These results suggest that although students have preferences for particular types of exams, these preferences are largely unrelated to how students actually do on exams or how much they prepare for exams.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/E9KRQ7QV/Mathew - 2012 - Student Preferences and Performance.pdf}
}

@article{mathraniPlayITGameBased2016,
  title = {{{PlayIT}}: {{Game Based Learning Approach}} for {{Teaching Programming Concepts}}},
  shorttitle = {{{PlayIT}}},
  author = {Mathrani, Anuradha and Shelly, Christian and {Ponder-Sutton}, Agate},
  year = {2016},
  journal = {Journal of Educational Technology \& Society; Palmerston North},
  volume = {19},
  number = {2},
  pages = {5--17},
  publisher = {{International Forum of Educational Technology \& Society}},
  address = {{Palmerston North, Canada, Palmerston North}},
  issn = {11763647},
  urldate = {2020-09-29},
  abstract = {This study demonstrates a game-based learning (GBL) approach to engage students in learning and enhance their programming skills. The paper gives a detailed narrative of how an educational game was mapped with the curriculum of a prescribed programming course in a computing diploma study programme. Two separate student cohorts were invited to participate in the GBL experiment. One student cohort had not yet started study of the programming module, while the second student cohort had recently completed the module on programming. Findings reveal that educational games add to the fun element in learning, and students rated the game as an effective way to learn programming. Students could easily relate gaming elements to difficult programming constructs. Animated game scenarios showed high levels of engagement among students. Some students found the use of gaming elements as a better way to express their program's logic when giving oral presentations for the final assessment. Results indicate that a majority of study participants passed the programming module in the first attempt. The study contributes to the use of gaming elements for ongoing development of innovative pedagogies in teaching and learning.},
  chapter = {Special Issue Articles},
  copyright = {\textcopyright{} 2016. This work is published under https://creativecommons.org/licenses/by-nc-nd/3.0/ (the ``License''). Notwithstanding the ProQuest Terms and Conditions, you may use this content in accordance with the terms of the License.},
  langid = {english},
  keywords = {Educational games,Game based learning,ICT education,Programming,Teaching and learning pedagogies},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/FXM2FV4R/Mathrani et al. - 2016 - PlayIT Game Based Learning Approach for Teaching .pdf}
}

@incollection{matonLCTQualitativeResearch2016,
  title = {{{LCT}} in Qualitative Research},
  booktitle = {Knowledge-Building: Educational Studies in Legitimation Code Theory},
  author = {Maton, Karl and {Rainbow Tsai-Hung Chen}},
  editor = {Maton, Karl and Hood, Susan and Shay, Suellen},
  year = {2016},
  publisher = {{Routledge, Taylor \& Francis Group}},
  address = {{London ; New York, NY}},
  isbn = {978-0-415-69233-5},
  langid = {english},
  lccn = {LC191 .K5927 2016},
  keywords = {Educational sociology,{Knowledge, Theory of}},
  file = {/Users/igormoreno/Zotero/storage/KYE7LJJV/Maton and Rainbow Tsai-Hung Chen - 2016 - LCT in qualitative research.pdf}
}

@article{matonMakingSemanticWaves2013,
  title = {Making Semantic Waves: {{A}} Key to Cumulative Knowledge-Building},
  shorttitle = {Making Semantic Waves},
  author = {Maton, Karl},
  year = {2013},
  month = apr,
  journal = {Linguistics and Education},
  volume = {24},
  pages = {8--22},
  doi = {10.1016/j.linged.2012.11.005},
  abstract = {The paper begins by arguing that knowledge-blindness in educational research represents a serious obstacle to understanding knowledge-building. It then offers sociological concepts from Legitimation Code Theory \textendash{} `semantic gravity' and `semantic density' \textendash{} that systematically conceptualize one set of organizing principles underlying knowledge practices. Brought together as `semantic profiles', these allow changes in the context-dependence and condensation of meaning of knowledge practices to be traced over time. These concepts are used to analyze passages of classroom practice from secondary school lessons in Biology and History. The analysis suggests that `semantic waves', where knowledge is transformed between relatively decontextualized, condensed meanings and context-dependent, simplified meanings, offer a means of enabling cumulative classroom practice. How these concepts are being widely used to explore organizing principles of diverse practices in education and beyond is discussed, revealing the widespread, complex and suggestive nature of `semantic waves' and their implications for cumulative knowledge-building.},
  file = {/Users/igormoreno/Zotero/storage/QTT28FU8/Maton - 2013 - Making semantic waves.pdf}
}

@misc{matonMakingWavesTogether2017,
  title = {Making {{Waves Together}}: {{How LCT}} Can Help Crack the Codes of Education},
  author = {Maton, Karl},
  year = {2017},
  month = apr,
  address = {{Bristol, UK}},
  urldate = {2021-04-03},
  abstract = {LCT Centre Director Karl Maton's keynote talk for BALEAP 2017}
}

@incollection{matonSemanticWavesContext2019,
  title = {Semantic Waves: {{Context}}, Complexity and Academic Discourse},
  booktitle = {Accessing {{Academic Discourse}}},
  author = {Maton, Karl},
  year = {2019},
  month = nov,
  edition = {1st},
  pages = {27},
  publisher = {{Routledge}},
  doi = {10.4324/9780429280726-3},
  urldate = {2021-04-03},
  abstract = {This chapter introduces ideas from the Legitimation Code Theory dimension of `Semantics' that have been influential in shaping research into academic},
  isbn = {978-0-429-28072-6},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/X6X5A29Y/Maton - 2019 - Semantic waves Context, complexity and academic d.pdf;/Users/igormoreno/Zotero/storage/HNTD7BF4/semantic-waves-karl-maton.html}
}

@phdthesis{matthewhillScientificRepresentationalFluency2015,
  title = {Scientific {{Representational Fluency}}: {{Defining}}, {{Diagnosing}}, and {{Developing}}},
  author = {{Matthew Hill}},
  year = {2015},
  month = jul,
  urldate = {2019-04-07},
  abstract = {This thesis advocates the importance of the notion of representational fluency in our understanding of physics education. The broader area of multiple representations in science has attracted much interest as research has progressed from an almost exclusive focus on conceptual or content knowledge in science education. Representational fluency, however, is a somewhat novel idea. The thesis argues that this littleused term, representational fluency, is a way to draw together various ideas on multiple representational use important for physics students, educators, and education researchers alike. Representational fluency is investigated by considering three questions: what is representational fluency; what role does representational fluency play in physics learning, and can students representational fluency develop as a result of learning? This thesis presents the development, use, and publication of a survey to measure representational fluency, the Representational Fluency Survey (RFS), which is the first of such surveys in the literature. The RFS is a seven item survey which involves the participant solving problems that are difficult due to the representations in the question and the solution, rather than physics content knowledge. The RFS is used to further develop our understanding of representational fluency amongst university physics students including diagnosing significant differences in the levels of representational fluency of different cohorts of students. It was found that the representational fluency of students with a higher level of physics learning experience was significantly greater than that of students with a lower level of physics learning experience and the difference was evident even within the first year cohort. Due to the apparent disparity of levels of representational fluency amongst different cohorts of students, the thesis presents research into effective pedagogies that facilitate the development of representational fluency. A format of presenting direct instruction on a particular physics representation through worksheets and consolidating this knowledge with applied questions was trialled as a possible instructional material and was found to alter the way that students use representations in subsequent questions. This was done in the context of students in their final year of high school. The format was adapted to suit a university physics course in the structure of a semester long set of weekly online learning modules designed to introduce students to representations relevant to the upcoming week's lectures. The uptake and effectiveness of online learning modules was first investigated and it was found that university students were willing to participate in the modules, and they were of benefit to student engagement as intended in their design. Therefore an experiment was conducted with the first year physic students at The University of Sydney. The students were randomly separated into two streams. One stream participated in weekly online learning modules focussed on relevant physics representations, the other stream participated in similar modules which more conventionally focussed on relevant physics concepts. Using the RFS as a pre-post test, it was found that students participating in the modules on physics representations had the largest learning gains in representational fluency. This demonstrates an effective pedagogical tool to support students developing their representational fluency. Using an established test of conceptual physics understanding, it was also found that the students from each stream of online learning modules developed conceptual physics knowledge by comparative amounts across the semester. In this way the importance of representational fluency is advocated, through defining, diagnosing, and developing representaitonal fluency.},
  school = {The University of Sydney},
  file = {/Users/igormoreno/Zotero/storage/JDNZKQ6H/Matthew Hill - 2015 - Scientific Representational Fluency.pdf}
}

@book{matthiasfelleisenHowDesignClasses2012,
  title = {How to {{Design Classes}}: {{Data}}: {{Structure}} and {{Organization}}},
  author = {{Matthias Felleisen} and {Matthew Flatt} and {Robert Bruce Findler} and {Kathryn E. Gray} and {Shriram Krishnamurthi} and {Viera K. Proulx}},
  year = {2012},
  month = jun,
  file = {/Users/igormoreno/Zotero/storage/2CQYZIG5/Slides-HowToDesignClassHiearchies.pdf;/Users/igormoreno/Zotero/storage/H49XFWGE/htdc.pdf}
}

@misc{matthiashauswirthExpressionTutor2023,
  title = {Expression {{Tutor}}},
  author = {{Matthias Hauswirth}},
  year = {2023},
  journal = {Expression Tutor},
  urldate = {2022-12-01},
  collaborator = {{Gallidabino Andrea} and {Moreno Santos Igor} and {Chiodini Luca}},
  howpublished = {https://expressiontutor.org/},
  file = {/Users/igormoreno/Zotero/storage/AMQ6CTLW/expressiontutor.org.html}
}

@article{mavrikisSowingSeedsAlgebraic2013,
  title = {Sowing the Seeds of Algebraic Generalization: Designing Epistemic Affordances for an Intelligent Microworld: {{Intelligent}} Mathematical Microworld},
  shorttitle = {Sowing the Seeds of Algebraic Generalization},
  author = {Mavrikis, M. and Noss, R. and Hoyles, C. and Geraniou, E.},
  year = {2013},
  month = feb,
  journal = {Journal of Computer Assisted Learning},
  volume = {29},
  number = {1},
  pages = {68--84},
  issn = {02664909},
  doi = {10.1111/j.1365-2729.2011.00469.x},
  urldate = {2019-01-28},
  abstract = {This paper describes the design of a mathematical microworld to tackle the persistent difficulties that secondary school students have with the idea of algebraic generalization, which is a key stumbling block in secondary-school mathematics classrooms. Our focus is to characterize algebraic ways of thinking and to design both affordances of the system as well as suitable tasks and pedagogies that provide a substrate of activity and experience for the teaching and learning of algebraic generalizations. Using as reference illustrative cases of 12 to 13-year-old students' interaction with the microworld, we demonstrate the strong interplay between epistemology and the design of the microworld and draw conclusions regarding its potential to support the development of algebraic ways of thinking.},
  langid = {english},
  keywords = {LearnToAbstract,To Read},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/S89W8RVU/Mavrikis et al - 2013 - Sowing the seeds of algebraic generalization.pdf}
}

@article{mayerBidirectionalEvaluationDirect2018,
  title = {Bidirectional {{Evaluation}} with {{Direct Manipulation}}},
  author = {Mayer, Mika{\"e}l and Kun{\v c}ak, Viktor and Chugh, Ravi},
  year = {2018},
  month = oct,
  journal = {Proceedings of the ACM on Programming Languages},
  volume = {2},
  number = {OOPSLA},
  eprint = {1809.04209},
  primaryclass = {cs},
  pages = {1--28},
  issn = {2475-1421},
  doi = {10.1145/3276497},
  urldate = {2023-01-21},
  abstract = {We present an evaluation update (or simply, update) algorithm for a full-featured functional programming language, which synthesizes program changes based on output changes. Intuitively, the update algorithm retraces the steps of the original evaluation, rewriting the program as needed to reconcile differences between the original and updated output values. Our approach, furthermore, allows expert users to define custom lenses that augment the update algorithm with more advanced or domain-specific program updates. To demonstrate the utility of evaluation update, we implement the algorithm in Sketch-n-Sketch, a novel direct manipulation programming system for generating HTML documents. In Sketch-n-Sketch, the user writes an ML-style functional program to generate HTML output. When the user directly manipulates the output using a graphical user interface, the update algorithm reconciles the changes. We evaluate bidirectional evaluation in Sketch-n-Sketch by authoring ten examples comprising approximately 1400 lines of code in total. These examples demonstrate how a variety of HTML documents and applications can be developed and edited interactively in Sketch-n-Sketch, mitigating the tedious edit-run-view cycle in traditional programming environments.},
  archiveprefix = {arxiv},
  keywords = {Computer Science - Programming Languages},
  file = {/Users/igormoreno/Zotero/storage/G9PFKQ2U/Mayer et al - 2018 - Bidirectional Evaluation with Direct Manipulation.pdf;/Users/igormoreno/Zotero/storage/CMZFCERJ/1809.html}
}

@inproceedings{mayerEmpiricalStudyInfluence2012,
  title = {An {{Empirical Study}} of the {{Influence}} of {{Static Type Systems}} on the {{Usability}} of {{Undocumented Software}}},
  booktitle = {Proceedings of the {{ACM International Conference}} on {{Object Oriented Programming Systems Languages}} and {{Applications}}},
  author = {Mayer, Clemens and Hanenberg, Stefan and Robbes, Romain and Tanter, {\'E}ric and Stefik, Andreas},
  year = {2012},
  series = {{{OOPSLA}} '12},
  pages = {683--702},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2384616.2384666},
  urldate = {2018-09-25},
  abstract = {Abstract Although the study of static and dynamic type systems plays a major role in research, relatively little is known about the impact of type systems on software development. Perhaps one of the more common arguments for static type systems in languages such as Java or C++ is that they require developers to annotate their code with type names, which is thus claimed to improve the documentation of software. In contrast, one common argument against static type systems is that they decrease flexibility, which may make them harder to use. While these arguments are found in the literature, rigorous empirical evidence is lacking. We report on a controlled experiment where 27 subjects performed programming tasks on an undocumented API with a static type system (requiring type annotations) as well as a dynamic type system (which does not). Our results show that for some tasks, programmers had faster completion times using a static type system, while for others, the opposite held. We conduct an exploratory study to try and theorize why.},
  isbn = {978-1-4503-1561-6},
  keywords = {empirical research,programming languages,type systems},
  annotation = {00052},
  file = {/Users/igormoreno/Zotero/storage/DNZ9WE7H/Mayer et al. - 2012 - An Empirical Study of the Influence of Static Type.pdf}
}

@article{mayerPromiseMultimediaLearning2003,
  title = {The Promise of Multimedia Learning: Using the Same Instructional Design Methods across Different Media},
  shorttitle = {The Promise of Multimedia Learning},
  author = {Mayer, Richard E.},
  year = {2003},
  month = apr,
  journal = {Learning and Instruction},
  series = {External and {{Internal Representations}} in {{Multimedia Learning}}},
  volume = {13},
  number = {2},
  pages = {125--139},
  issn = {0959-4752},
  doi = {10.1016/S0959-4752(02)00016-6},
  urldate = {2018-11-06},
  abstract = {Multimedia learning occurs when students build mental representations from words and pictures that are presented to them (e.g., printed text and illustrations or narration and animation). The promise of multimedia learning is that students can learn more deeply from well-designed multimedia messages consisting of words and pictures than from more traditional modes of communication involving words alone. This article explores a program of research aimed at determining (a) research-based principles for the design of multimedia explanations\textemdash which can be called methods, and (b) the extent to which methods are effective across different learning environments\textemdash which can be called media. A review of research on the design of multimedia explanations conducted in our lab at Santa Barbara shows (a) a multimedia effect\textemdash in which students learn more deeply from words and pictures than from words alone\textemdash in both book-based and computer-based environments, (b) a coherence effect\textemdash in which students learn more deeply when extraneous material is excluded rather than included\textemdash in both book-based and computer-based environments, (c) a spatial contiguity effect\textemdash in which students learn more deeply when printed words are placed near rather than far from corresponding pictures\textemdash in both book-based and computer-based environments, and (d) a personalization effect\textemdash in which students learn more deeply when words are presented in conversational rather than formal style\textemdash both in computer-based environments containing spoken words and those using printed words. Overall, our results provide four examples in which the same instructional design methods are effective across different media.},
  keywords = {Computer-based instruction (CBI),Computer-based learning (CBL),Multimedia learning,On-line training},
  file = {/Users/igormoreno/Zotero/storage/PTR2JEEM/Mayer - 2003 - The promise of multimedia learning using the same.pdf;/Users/igormoreno/Zotero/storage/73KM8BXI/S0959475202000166.html}
}

@article{mayerPsychologyCalculatorLanguages1981,
  title = {Psychology of Calculator Languages: A Framework for Describing Differences in Users' Knowledge},
  shorttitle = {Psychology of Calculator Languages},
  author = {Mayer, Richard E. and Bayman, Piraye},
  year = {1981},
  month = aug,
  journal = {Communications of the ACM},
  volume = {24},
  number = {8},
  pages = {511--520},
  issn = {00010782},
  doi = {10.1145/358722.358735},
  urldate = {2020-06-22},
  abstract = {This paper presents a framework for describing users' knowledge of how a simple four-function calculator operates. Differences among novices and experts in their conceptions of "what goes on inside the calculator" for various sequences of button presses are summarized. Individual differences include different views on when an expression is evaluated, different procedures for evaluating a chain of arithmetic, and different rules for evaluating unusual sequences of key presses.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/9ZUNBZL7/Mayer and Bayman - 1981 - Psychology of calculator languages a framework fo.pdf}
}

@article{mayerPsychologyHowNovices1981,
  title = {The {{Psychology}} of {{How Novices Learn Computer Programming}}},
  author = {Mayer, Richard E.},
  year = {1981},
  month = mar,
  journal = {ACM Computing Surveys (CSUR)},
  volume = {13},
  number = {1},
  pages = {121--141},
  issn = {0360-0300, 1557-7341},
  doi = {10.1145/356835.356841},
  urldate = {2020-06-22},
  abstract = {This paper examines the current state of knowledge concerning how to increase the novice's understanding of computers and computer programming. In particular, it reviews how advances in cognitive and educati(\textasciitilde nal psychology may be applied to problems in teaching nonprogrammers how to use computers. Two major instructional techniques are reviewed: providing a concrete model of the computer and encouraging the learners to actively put technical information into their own words.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/3HXS5K58/Mayer - 1981 - The Psychology of How Novices Learn Computer Programming.pdf}
}

@techreport{mayerTwentyYearsResearch1979,
  title = {Twenty {{Years}} of {{Research}} on {{Advance Organizers}}},
  author = {Mayer, Richard E.},
  year = {1979},
  number = {79-1},
  address = {{Santa Barbara, California, USA}},
  institution = {{Department of Psychology, University of California, Santa Barbara}},
  abstract = {Fourty-four published research studies involving advance organizers were reviewed. Twenty-seven studies included an advance organizer vs. a control group (standard advance organizer study) and 17 studies included an advance organizer vs. a post-organizer group (modified advance organizer study). Results of the studies were compared to the predictions of several theories. In addition, four specific predictions of assimilation theory were evaluated: that advance organizers should have a stronger positive effect for learners lacking pre- requisite knowledge, that advance organizers should have a stronger effect for learners lacking pre-requisite abilities, and that advance organizers should have an especially strong effect on measures of transfer rather than retention.},
  file = {/Users/igormoreno/Zotero/storage/2FXMFC8N/Mayer - 1979 - Twenty Years of Research on Advance Organizers.pdf}
}

@article{mazinanianUnderstandingUseLambda2017,
  title = {Understanding the Use of Lambda Expressions in {{Java}}},
  author = {Mazinanian, Davood and Ketkar, Ameya and Tsantalis, Nikolaos and Dig, Danny},
  year = {2017},
  month = oct,
  journal = {Proceedings of the ACM on Programming Languages},
  volume = {1},
  number = {OOPSLA},
  pages = {1--31},
  issn = {2475-1421},
  doi = {10.1145/3133909},
  urldate = {2021-10-11},
  abstract = {Java 8 retrofitted lambda expressions, a core feature of functional programming, into a mainstream object-oriented language with an imperative paradigm. However, we do not know how Java developers have adapted to the functional style of thinking, and more importantly, what are the reasons motivating Java developers to adopt functional programming. Without such knowledge, researchers miss opportunities to improve the state of the art, tool builders use unrealistic assumptions, language designers fail to improve upon their designs, and developers are unable to explore efficient and effective use of lambdas.             We present the first large-scale, quantitative and qualitative empirical study to shed light on how imperative programmers use lambda expressions as a gateway into functional thinking. Particularly, we statically scrutinize the source code of 241 open-source projects with 19,770 contributors, to study the characteristics of 100,540 lambda expressions. Moreover, we investigate the historical trends and adoption rates of lambdas in the studied projects. To get a complementary perspective, we seek the underlying reasons on why developers introduce lambda expressions, by surveying 97 developers who are introducing lambdas in their projects, using the firehouse interview method.             Among others, our findings revealed an increasing trend in the adoption of lambdas in Java: in 2016, the ratio of lambdas introduced per added line of code increased by 54\% compared to 2015. Lambdas were used for various reasons, including but not limited to (i) making existing code more succinct and readable, (ii) avoiding code duplication, and (iii) simulating lazy evaluation of functions. Interestingly, we found out that developers are using Java's built-in functional interfaces inefficiently, i.e., they prefer to use general functional interfaces over the specialized ones, overlooking the performance overheads that might be imposed. Furthermore, developers are not adopting techniques from functional programming, e.g., currying. Finally, we present the implications of our findings for researchers, tool builders, language designers, and developers.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/HGMNUK2T/Mazinanian et al. - 2017 - Understanding the use of lambda expressions in Jav.pdf}
}

@inproceedings{mazumderAreVariableArray2020,
  title = {Are {{Variable}}, {{Array}} and {{Object Diagrams}} in {{Java Textbooks Explanative}}?},
  booktitle = {Proceedings of the 2020 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Mazumder, Syeda Fatema and Latulipe, Celine and {P{\'e}rez-Qui{\~n}ones}, Manuel A.},
  year = {2020},
  month = jun,
  pages = {425--431},
  publisher = {{ACM}},
  address = {{Trondheim Norway}},
  doi = {10.1145/3341525.3387368},
  urldate = {2021-01-12},
  abstract = {Diagrams in textbooks are an essential tool to explain concepts. An effective diagram should help a novice learner to build a runnable mental model, increase recall, and improve problem-solving skills. Richard Mayer and others suggest that to have an impact on the readers' mental model, diagrams must document two major features: system topology and component behavior. The presence of these two features makes a diagram explanative. In this paper, we propose a framework of what constitutes explanative diagram for variables, arrays, and objects based on Mayer et al.'s definition. We used our framework to analyze diagrams of variables, arrays, and objects in 15 commonly used introductory Java textbooks to ascertain how these concepts are illustrated, annotated and explained. Our results show that none of the textbooks provide what we would consider as explanative diagrams. We conclude with an assessment of diagrams in introductory programming textbooks and present open questions for further study.},
  isbn = {978-1-4503-6874-2},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/SGPA83KL/Mazumder et al. - 2020 - Are Variable, Array and Object Diagrams in Java Te.pdf}
}

@article{mcbroomSurveyAutomatedProgramming2022,
  title = {A {{Survey}} of {{Automated Programming Hint Generation}}: {{The HINTS Framework}}},
  shorttitle = {A {{Survey}} of {{Automated Programming Hint Generation}}},
  author = {McBroom, Jessica and Koprinska, Irena and Yacef, Kalina},
  year = {2022},
  month = nov,
  journal = {ACM Computing Surveys},
  volume = {54},
  number = {8},
  pages = {1--27},
  issn = {0360-0300, 1557-7341},
  doi = {10.1145/3469885},
  urldate = {2023-04-03},
  abstract = {Automated tutoring systems offer the flexibility and scalability necessary to facilitate the provision of high-quality and universally accessible programming education. To realise the potential of these systems, recent work has proposed a diverse range of techniques for automatically generating feedback in the form of hints to assist students with programming exercises. This article integrates these apparently disparate approaches into a coherent whole. Specifically, it emphasises that all hint techniques can be understood as a series of simpler components with similar properties. Using this insight, it presents a simple framework for describing such techniques, the Hint Iteration by Narrow-down and Transformation Steps framework, and surveys recent work in the context of this framework. Findings from this survey include that (1) hint techniques share similar properties, which can be used to visualise them together, (2) the individual steps of hint techniques should be considered when designing and evaluating hint systems, (3) more work is required to develop and improve evaluation methods, and (4) interesting relationships, such as the link between automated hints and data-driven evaluation, should be further investigated. Ultimately, this article aims to facilitate the development, extension, and comparison of automated programming hint techniques to maximise their educational potential.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/XVC86HP2/McBroom et al. - 2022 - A Survey of Automated Programming Hint Generation.pdf}
}

@inproceedings{mccallMeaningfulCategorisationNovice2014,
  title = {Meaningful Categorisation of Novice Programmer Errors},
  booktitle = {2014 {{IEEE Frontiers}} in {{Education Conference}} ({{FIE}}) {{Proceedings}}},
  author = {McCall, Davin and Kolling, Michael},
  year = {2014},
  month = oct,
  pages = {1--8},
  publisher = {{IEEE}},
  address = {{Madrid, Spain}},
  doi = {10.1109/FIE.2014.7044420},
  urldate = {2020-06-22},
  abstract = {The frequency of different kinds of error made by students learning to write computer programs has long been of interest to researchers and educators. In the past, various studies investigated this topic, usually by recording and analysing compiler error messages, and producing tables of relative frequencies of specific errors diagnostics produced by the compiler. In this paper, we improve on such prior studies by investigating actual logical errors in student code, as opposed to diagnostic messages produced by the compiler. The actual errors reported here are more precise, more detailed and more accurate than the diagnostic produced automatically.},
  isbn = {978-1-4799-3922-0},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/TWCUGYLF/McCall and Kolling - 2014 - Meaningful categorisation of novice programmer errors.pdf}
}

@article{mccallNewLookNovice2019,
  title = {A {{New Look}} at {{Novice Programmer Errors}}},
  author = {McCall, Davin and K{\"o}lling, Michael},
  year = {2019},
  month = nov,
  journal = {ACM Transactions on Computing Education},
  volume = {19},
  number = {4},
  pages = {1--30},
  issn = {1946-6226, 1946-6226},
  doi = {10.1145/3335814},
  urldate = {2020-06-22},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/AJ9XSRHD/McCall and Kölling - 2019 - A New Look at Novice Programmer Errors.pdf}
}

@article{mccarthyRecursiveFunctionsSymbolic1960,
  title = {Recursive {{Functions}} of {{Symbolic Expressions}} and {{Their Computation}} by {{Machine}}, {{Part I}}},
  author = {McCarthy, John},
  year = {1960},
  month = apr,
  journal = {Communications of the ACM},
  volume = {3},
  number = {4},
  pages = {184--195},
  issn = {0001-0782},
  doi = {10.1145/367177.367199},
  urldate = {2018-09-11},
  abstract = {An abstract is not available.},
  annotation = {01968},
  file = {/Users/igormoreno/Zotero/storage/6EQB2MT4/McCarthy - 1960 - Recursive Functions of Symbolic Expressions and Th.pdf}
}

@article{mccauleyTeachingLearningRecursive2015,
  title = {Teaching and Learning Recursive Programming: A Review of the Research Literature},
  shorttitle = {Teaching and Learning Recursive Programming},
  author = {McCauley, Ren{\'e}e and Grissom, Scott and Fitzgerald, Sue and Murphy, Laurie},
  year = {2015},
  month = jan,
  journal = {Computer Science Education},
  volume = {25},
  number = {1},
  pages = {37--66},
  issn = {0899-3408},
  doi = {10.1080/08993408.2015.1033205},
  urldate = {2019-10-29},
  abstract = {Hundreds of articles have been published on the topics of teaching and learning recursion, yet fewer than 50 of them have published research results. This article surveys the computing education research literature and presents findings on challenges students encounter in learning recursion, mental models students develop as they learn recursion, and best practices in introducing recursion. Effective strategies for introducing the topic include using different contexts such as recurrence relations, programming examples, fractal images, and a description of how recursive methods are processed using a call stack. Several studies compared the efficacy of introducing iteration before recursion and vice versa. The paper concludes with suggestions for future research into how students learn and understand recursion, including a look at the possible impact of instructor attitude and newer pedagogies.},
  keywords = {learning,mental models,pedagogy,programming,recursion,research,student misconceptions,teaching},
  file = {/Users/igormoreno/Zotero/storage/RWR5CJ3R/McCauley et al - 2015 - Teaching and learning recursive programming.pdf;/Users/igormoreno/Zotero/storage/MP55Y8YE/08993408.2015.html}
}

@incollection{mccloskeyNaiveTheoriesMotion1983,
  title = {Naive {{Theories}} of {{Motion}}},
  booktitle = {Mental {{Models}}},
  author = {McCloskey, Michael},
  editor = {Gentner, D. and Stevens, A. L.},
  year = {1983},
  pages = {299--324},
  publisher = {{Lawrence Erlbaum Associates}},
  address = {{Hillsdale, NJ}},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/KRPLQUPZ/McCloskey - 1983 - Naive Theories of Motion.pdf}
}

@phdthesis{mccormackCognitiveAccelerationPrimarysecond2009,
  title = {Cognitive {{Acceleration}} across the Primary-Second Level Transition},
  author = {McCormack, Lorraine},
  year = {2009},
  month = jul,
  abstract = {In an Irish context, the cognitive level profile of primary (pre-transfer) and second level (post-transfer) students was obtained. This profile showed that virtually no 6th class primary school pupils (age 12.3 years), and little less than 10 percent of 1st year second level students (age 12.8 years) in this study, were at levels capable of formal operational thought. This type of thought, formal operations, is believed to develop in children between the ages of 11 and 15 years and it is necessary for meaningful engagement and understanding of many scientific and mathematical concepts. In response to the low numbers of students capable of formal operational thought, and in an attempt to address the lack of pedagogical linkage across the primary- second level transition in Ireland, the Cognitive Acceleration through Science Education (CASE) programme was adapted for use in the final year of primary school and in the first year at second level. Students' cognitive development levels were measured using Science Reasoning Tasks (developed by the Concepts in Secondary Maths and Science team in the 1970's) before and after the respective interventions, and compared with non-intervention groups to assess the effectiveness of the programmes. Statistically significant cognitive gains were found for the intervention groups at primary level (0.51},
  langid = {english},
  school = {Dublin City University},
  file = {/Users/igormoreno/Zotero/storage/U4RRF2XT/McCormack - 2009 - Cognitive Acceleration across the primary-second level transition.pdf}
}

@inproceedings{mccrackenMultinationalMultiinstitutionalStudy2001,
  ids = {mccrackenMultinationalMultiinstitutionalStudy},
  title = {A {{Multi-national}}, {{Multi-institutional Study}} of {{Assessment}} of {{Programming Skills}} of {{First-year CS Students}}},
  booktitle = {Working {{Group Reports}} from {{ITiCSE}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {McCracken, Michael and Almstrum, Vicki and Diaz, Danny and Guzdial, Mark and Hagan, Dianne and Kolikant, Yifat Ben-David and Laxer, Cary and Thomas, Lynda and Utting, Ian and Wilusz, Tadeusz},
  year = {2001},
  series = {{{ITiCSE-WGR}} '01},
  pages = {125--180},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/572133.572137},
  urldate = {2018-10-08},
  abstract = {In computer science, an expected outcome of a student's education is programming skill. This working group investigated the programming competency students have as they complete their first one or two courses in computer science. In order to explore options for assessing students, the working group developed a trial assessment of whether students can program. The underlying goal of this work was to initiate dialog in the Computer Science community on how to develop these types of assessments. Several universities participated in our trial assessment and the disappointing results suggest that many students do not know how to program at the conclusion of their introductory courses. For a combined sample of 216 students from four universities, the average score was 22.89 out of 110 points on the general evaluation criteria developed for this study. From this trial assessment we developed a framework of expectations for first-year courses and suggestions for further work to develop more comprehensive assessments.},
  file = {/Users/igormoreno/Zotero/storage/X3VLJNDB/McCracken et al - A multi-national, multi-institutional study of assessment of programming skills.pdf}
}

@article{mcdonaldReliabilityInterraterReliability,
  title = {Reliability and {{Inter-rater Reliability}} in {{Qualitative Research}}: {{Norms}} and {{Guidelines}} for {{CSCW}} and {{HCI Practice}}},
  author = {Mcdonald, Nora and Schoenebeck, Sarita and Forte, Andrea},
  pages = {23},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/UPTYUUMF/Mcdonald et al. - Reliability and Inter-rater Reliability in Qualita.pdf}
}

@misc{mcgillComputerScienceEducation2017,
  title = {Computer {{Science Education Resource Center}}},
  author = {McGill, Monica and Decker, Adrienne},
  year = {2017},
  abstract = {The K-12 Computing Education Research Resource Center was first envisioned as part of a collaborative National Science Foundation grant with Adrienne Decker (University at Buffalo) and Monica McGill (Knox College). Since then, the Resource Center (at csedresearch.org) has grown\textendash both in the data that has been collected and the technical guidance offered to researchers. In July, 2019, McGill formed a non-profit organization of the same name, CSEdResearch.org. As of March 2021, the original NSF grant continues to support the collaborative work of Decker and McGill, while other partners and collaborators have engaged in activities with McGill to support the growth of the non-profit.},
  annotation = {Available online: https://csedresearch.org.}
}

@article{mcgillConceptualFrameworkAnalyzing1997,
  title = {A {{Conceptual Framework}} for {{Analyzing Students}}' {{Knowledge}} of {{Programming}}},
  author = {McGill, Tanya J. and Volet, Simone E.},
  year = {1997},
  month = mar,
  journal = {Journal of Research on Computing in Education},
  volume = {29},
  number = {3},
  pages = {276--297},
  issn = {0888-6504},
  doi = {10.1080/08886504.1997.10782199},
  urldate = {2020-11-19},
  langid = {english},
  annotation = {00108},
  file = {/Users/igormoreno/Zotero/storage/YEE6KMWZ/McGill and Volet - 1997 - A Conceptual Framework for Analyzing Students’ Kno.pdf}
}

@article{mcgillConstructionTaxonomyTools2020,
  title = {Construction of a {{Taxonomy}} for {{Tools}}, {{Languages}}, and {{Environments}} across {{Computing Education}}},
  author = {McGill, Monica M and Decker, Adrienne},
  year = {2020},
  journal = {New Zealand},
  pages = {12},
  abstract = {The sheer number of tools, languages, and environments (TLEs) used in computing education has proliferated in the last few years as more tools are developed to meet new demands of the growing amount of K-12 computing education that has been undertaken. However, there is little formalized language at either the K-12 or post-secondary level that provides for a way to classify these TLEs for discussing research and for classifying in databases.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/5ETHG9J5/McGill e Decker - 2020 - Construction of a Taxonomy for Tools, Languages, a.pdf}
}

@inproceedings{mcgillCsedresearchOrgResources2019,
  title = {Csedresearch.Org: {{Resources}} for {{Primary}} and {{SecondaryComputer Science Education Research}}},
  shorttitle = {Csedresearch.Org},
  booktitle = {Proceedings of the 2019 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {McGill, Monica M. and Decker, Adrienne},
  year = {2019},
  month = jul,
  pages = {239--240},
  publisher = {{ACM}},
  address = {{Aberdeen Scotland Uk}},
  doi = {10.1145/3304221.3325545},
  urldate = {2021-07-20},
  abstract = {In this Tips, Techniques, and Courseware talk, we will provide an overview of csedresearch.org, a site designed to provide resources for primary and secondary computer science (CS) education researchers. This resource center has three primary functions: 1) to provide a quick and easy way to search and access manually-curated data from over 500 articles from ten targeted venues (currently 2012-2018), 2) to provide a centralized location for evaluation instruments, many of which are focused on computing, and 3) to provide resources for computer science education research (checklists for studies, how to design a study, how to write a research question, etc.). Users can search for articles by filtering at a granular level on various curriculum and activity components, including student demographics, instructor demographics, and program components. Users can also search for evaluation instruments on criteria such as type, year published, constructs measured in the instrument, and whether the instrument has been validated or tested for reliability. We will provide a brief summary of the rationale for the site, the current state of the site, and how educators and researchers are using the site to date. We will also discuss future plans for the site and enable the audience to provide feedback that may help us shape the site to better meet the needs of the community.},
  isbn = {978-1-4503-6895-7},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/6ZWWVMGK/McGill e Decker - 2019 - csedresearch.org Resources for Primary and Second.pdf}
}

@inproceedings{mcgillDefiningWhatEmpirically2019,
  title = {Defining {{What Empirically Works Best}}: {{Dynamic Generation}} of {{Meta-Analysis}} for {{Computer Science Education}}},
  shorttitle = {Defining {{What Empirically Works Best}}},
  booktitle = {Proceedings of the 2019 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {McGill, Monica M. and McKlin, Tom and Kaylor, Errol},
  year = {2019},
  month = jul,
  pages = {199--207},
  publisher = {{ACM}},
  address = {{Toronto ON Canada}},
  doi = {10.1145/3291279.3339401},
  urldate = {2021-05-10},
  abstract = {In an effort to evaluate computer science education using more modern, automated data science techniques, we consider Hattie's work in Visible Learning then define a comprehensive framework to provide the capability to automatically generate a quantitative meta-analysis using predefined moderators (e.g., age, grade, etc.) with data derived from multiple individual research studies. To define the initial criteria, we developed a list of critical questions that the framework must address, including what moderators are most important to include, how to address homogeneity across various studies, how to define categories of influencing factors, and how to compute summary effect size. This initial framework describes how the meta-analysis is derived from effect sizes that are calculated based on each mean and standard deviation reported in experimental and quasi-experimental studies. Since the goal of this foundational research is to create an auto-generated meta-analysis tool, we define a basic user experience that would allow users to select moderators and predefined levels of heterogeneity (such as "include only random control group studies" or "include studies reported in journal articles") for inclusion in the meta-analysis. We conducted a feasibility study of the framework using data (number of participants, mean, standard deviation) collected from 21 data samples curated from eight computer science education articles with a primary and secondary focus across ten venues (2012-2018). We consider what we learned conducting the study, including the need for full system transparency, issues related to data integrity, and issues related to defining and selecting appropriate formulas for differing sets of data.},
  isbn = {978-1-4503-6185-9},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/DQCVN7VR/McGill et al. - 2019 - Defining What Empirically Works Best Dynamic Gene.pdf}
}

@inproceedings{mcgillDiscoveringEmpiricallyBasedBest2019,
  title = {Discovering {{Empirically-Based Best Practices}} in {{Computing Education Through Replication}}, {{Reproducibility}}, and {{Meta-Analysis Studies}}},
  booktitle = {Proceedings of the 19th {{Koli Calling International Conference}} on {{Computing Education Research}}},
  author = {McGill, Monica M.},
  year = {2019},
  month = nov,
  pages = {1--5},
  publisher = {{ACM}},
  address = {{Koli Finland}},
  doi = {10.1145/3364510.3364528},
  urldate = {2021-10-03},
  abstract = {Though some empirically-driven best practices in computing education exist, there are legitimate and serious concerns about the dearth of studies that have been replicated and/or reproduced in the sciences, including education science and computing education. Without the empirical evidence that comes from replicated, reproduced or meta-analytic studies to provide further verification that a particular practice is effective, the computing education research community may be unintentionally propagating poor practices driven by false findings derived from individual studies. Propagation of these practices can lead to distrust by practitioners, eroding the relationship between often well-intentioned researchers who want to help inform and shape the practice and those in the classrooms teaching, policymakers, and administrators. Therefore, it is incumbent on us as a community to seriously consider the state of our research practice, the challenges the community faces due to the lack of empirical evidence coming from our published studies, and how the community can have a broader discussion to evolve the field into a stronger practice. This short paper contains some foundational terminology and provides evidence of the lack of replication, reproducibility, and meta-analytic studies in general and in computing education. A summary of potential solutions is also proposed that can be explored in an effort to help frame a larger discussion of this issue with the goal of considering next steps needed to mature our field.},
  isbn = {978-1-4503-7715-7},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/XSMAUSLE/McGill - 2019 - Discovering Empirically-Based Best Practices in Co.pdf}
}

@inproceedings{mciverSevenDeadlySins1996,
  title = {Seven Deadly Sins of Introductory Programming Language Design},
  booktitle = {Proceedings 1996 {{International Conference Software Engineering}}: {{Education}} and {{Practice}}},
  author = {McIver, L. and Conway, D.},
  year = {1996},
  month = jan,
  pages = {309--316},
  doi = {10.1109/SEEP.1996.534015},
  abstract = {Discusses seven undesirable features that are common to many programming languages used to teach first-time programmers: (1) less is more; (2) more is more; (3) grammatical traps; (4) hardware dependence; (5) backwards compatibility; (6) excessive cleverness; and (7) violation of expectations. We illustrate typical pedagogical difficulties which stem from these features, with examples drawn from the programming languages ABC, Ada, C, C++, Eiffel, Haskell, LISP, Modula 3, Pascal, Prolog, Scheme and Turing. We propose seven language design (or selection) principles which may reduce the incidence of such undesirable features: (1) start where the novice is; (2) differentiate semantics with syntax; (3) make the syntax readable and consistent; (4) provide a small and orthogonal set of features; (5) be especially careful with I/O; (6) provide better error diagnosis; and (7) choose a suitable level of abstraction.},
  keywords = {Collaboration,Computer languages,Education,Encapsulation,Handicapped aids,Machine learning,Problem-solving,Programming profession,Silicon compounds},
  file = {/Users/igormoreno/Zotero/storage/2J6GRJEH/McIver and Conway - 1996 - Seven deadly sins of introductory programming lang.pdf;/Users/igormoreno/Zotero/storage/IWKTLUAF/stamp.html}
}

@article{mckeithenKnowledgeOrganizationSkill1981,
  title = {Knowledge Organization and Skill Differences in Computer Programmers},
  author = {McKeithen, Katherine B. and Reitman, Judith S. and Rueter, Henry H. and Hirtle, Stephen C.},
  year = {1981},
  month = jul,
  journal = {Cognitive Psychology},
  volume = {13},
  number = {3},
  pages = {307--325},
  issn = {0010-0285},
  doi = {10.1016/0010-0285(81)90012-8},
  urldate = {2018-12-02},
  abstract = {Like experts in other fields, expert computer programmers can recall at a glance far more information relevant to their field than novices can. One explanation for this difference is that experts not only have more information, they have it better organized into meaningful chunks. In this paper, we infer the details of individual programmers' chunks of key programming concepts using the Reitman\textemdash Rueter (Cognitive Psychology, 1980, 12(4), 554\textendash 581.) technique for inferring tree structures from recall orders. Differences in organizations accompany skill-level differences. Beginner programmers' organizations show a rich variety of common-language associations to these programming concepts; Intermediate programmers show mixtures of programming and common-language associations; and Experts show remarkably similar, but not identical, organizations based clearly on programming knowledge.},
  annotation = {00706},
  file = {/Users/igormoreno/Zotero/storage/43RNFU96/McKeithen et al - 1981 - Knowledge organization and skill differences in computer programmers.pdf;/Users/igormoreno/Zotero/storage/FFF4JYNR/McKeithen et al - 1981 - Knowledge organization and skill differences in computer programmers.pdf;/Users/igormoreno/Zotero/storage/GCP5SRQ7/0010028581900128.html;/Users/igormoreno/Zotero/storage/QWAT4F9Y/0010028581900128.html}
}

@inproceedings{mcklinAccountingPedagogicalContent2019,
  title = {Accounting for {{Pedagogical Content Knowledge}} in a {{Theory}} of {{Change Analysis}}},
  booktitle = {Proceedings of the 2019 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {McKlin, Tom and Lee, Taneisha and Wanzer, Dana and Magerko, Brian and Edwards, Doug and Grossman, Sabrina and Bryans, Emily and Freeman, Jason},
  year = {2019},
  month = jul,
  pages = {157--165},
  publisher = {{ACM}},
  address = {{Toronto ON Canada}},
  doi = {10.1145/3291279.3339412},
  urldate = {2021-06-14},
  abstract = {Educators have long claimed that pedagogical content knowledge (PCK), ways of presenting a subject that make it comprehensible to others, is a critical element of student academic success. This paper presents an exploratory study finding that PCK significantly correlates with students' computer science (CS) content knowledge acquisition while teacher CS content knowledge does not. This study analyzes systemic factors comprising the theory of change for the EarSketch learning intervention including classroom- and student-level factors that contribute to shifts in students' attitudes toward computing and ultimately to students' intentions to persist in future computing endeavors and students' CS content knowledge. We present the results of a multi-level modeling analysis and offer an exploratory approach to measuring CS PCK along with recommendations to improve the sensitivity of the method.},
  isbn = {978-1-4503-6185-9},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/TFQ4Z5I7/McKlin et al. - 2019 - Accounting for Pedagogical Content Knowledge in a .pdf}
}

@techreport{mctigheUnderstandingDesignFramework2012,
  title = {Understanding by {{Design}} Framework},
  author = {McTighe, Jay and Wiggins, Grant},
  year = {2012},
  pages = {13},
  address = {{Alexandria, VA, USA}},
  institution = {{ASCD}},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/VB4NLV3M/McTighe and Wiggins - 2012 - Understanding by Design framework.pdf}
}

@inproceedings{meadCognitiveApproachIdentifying2006,
  title = {A {{Cognitive Approach}} to {{Identifying Measurable Milestones}} for {{Programming Skill Acquisition}}},
  booktitle = {{{ITiCSE}}},
  author = {Mead, Jerry and Gray, Simon and Hamer, John and James, Richard and Sorva, Juha},
  year = {2006},
  pages = {13},
  publisher = {{ACM}},
  address = {{Bologna, Italy}},
  abstract = {Traditional approaches to programming education, as exemplified by the typical CS1/CS2 course sequence, have not taken advantage of the long record of psychological and experimental studies on the development of programming skills. These studies indicate a need for a new curricular strategy for developing programming skills and indicate that a cognitive approach would be a promising starting point. This paper first reviews the literature on studies of programming skills, cognition and learning, then within that context reports on a new formal structure, called an anchor graph, that supports curricular design and facilitates the setting of measurable milestones.},
  langid = {english},
  keywords = {ForAndrea},
  file = {/Users/igormoreno/Zotero/storage/8R6Q5FKW/Mead et al - 2006 - A Cognitive Approach to Identifying Measurable Milestones for Programming Skill.pdf}
}

@inproceedings{meerbaum-salantHabitsProgrammingScratch2011,
  title = {Habits of Programming in Scratch},
  booktitle = {Proceedings of the 16th Annual Joint Conference on {{Innovation}} and Technology in Computer Science Education},
  author = {{Meerbaum-Salant}, Orni and Armoni, Michal and {Ben-Ari}, Mordechai},
  year = {2011},
  month = jun,
  series = {{{ITiCSE}} '11},
  pages = {168--172},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1999747.1999796},
  urldate = {2022-01-12},
  abstract = {Visual programming environments are widely used to introduce young people to computer science and programming; in particular, they encourage learning by exploration. During our research on teaching and learning computer science concepts with Scratch, we discovered that Scratch engenders certain habits of programming: (a) a totally bottom-up development process that starts with the individual Scratch blocks, and (b) a tendency to extremely fine-grained programming. Both these behaviors are at odds with accepted practice in computer science that encourages one: (a) to start by designing an algorithm to solve a problem, and (b) to use programming constructs to cleanly structure programs. Our results raise the question of whether exploratory learning with a visual programming environment might actually be detrimental to more advanced study.},
  isbn = {978-1-4503-0697-3},
  keywords = {habits,middle schools,scratch},
  file = {/Users/igormoreno/Zotero/storage/3EYQ7IM7/Meerbaum-Salant et al. - 2011 - Habits of programming in scratch.pdf}
}

@inproceedings{meerbaum-salantLearningComputerScience2010,
  title = {Learning Computer Science Concepts with Scratch},
  booktitle = {Proceedings of the {{Sixth}} International Workshop on {{Computing}} Education Research},
  author = {{Meerbaum-Salant}, Orni and Armoni, Michal and {Ben-Ari}, Mordechai (Moti)},
  year = {2010},
  month = aug,
  series = {{{ICER}} '10},
  pages = {69--76},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1839594.1839607},
  urldate = {2022-01-18},
  abstract = {Scratch is a visual programming environment that is widely used by young people. We investigated if Scratch can be used to teach concepts of computer science. We developed new learning materials for middle-school students that were designed according to the constructionist philosophy of Scratch and evaluated them in two schools. The classes were normal classes, not extracurricular activities whose participants are self-selected. Questionnaires and a test were constructed based upon a novel combination of the Revised Bloom Taxonomy and the SOLO taxonomy. These quantitative instruments were augmented with a qualitative analysis of observations within the classes. The results showed that in general students could successfully learn important concepts of computer science, although there were some problems with initialization, variables and concurrency; these problems can be overcome by modifications to the teaching process.},
  isbn = {978-1-4503-0257-9},
  keywords = {bloom's taxonomy,concurrency,middle schools,scratch,solo taxonomy},
  file = {/Users/igormoreno/Zotero/storage/GPYBS2SE/Meerbaum-Salant et al. - 2010 - Learning computer science concepts with scratch.pdf}
}

@article{meerbaum-salantLearningComputerScience2013,
  title = {Learning Computer Science Concepts with {{Scratch}}},
  author = {{Meerbaum-Salant}, Orni and Armoni, Michal and {Ben-Ari}, Mordechai (Moti)},
  year = {2013},
  month = sep,
  journal = {Computer Science Education},
  volume = {23},
  number = {3},
  pages = {239--264},
  issn = {0899-3408, 1744-5175},
  doi = {10.1080/08993408.2013.832022},
  urldate = {2020-06-22},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/ELRLD3IY/Meerbaum-Salant et al - 2013 - Learning computer science concepts with Scratch.pdf}
}

@inproceedings{meertensAlgorithmicsProgrammingMathematical1986,
  title = {Algorithmics : Towards Programming as a Mathematical Activity},
  shorttitle = {Algorithmics},
  author = {Meertens, L.},
  year = {1986},
  urldate = {2023-10-17},
  abstract = {Semantic Scholar extracted view of "Algorithmics : towards programming as a mathematical activity" by L. Meertens},
  file = {/Users/igormoreno/Zotero/storage/EUDCD5QN/301665701.pdf}
}

@article{meertensParamorphisms1992,
  title = {Paramorphisms},
  author = {Meertens, Lambert},
  year = {1992},
  month = sep,
  journal = {Formal Aspects of Computing},
  volume = {4},
  doi = {10.1007/BF01211391},
  abstract = {``Catamorphisms'' are functions on an initial data type (an inductively defined domain) whose inductive definitional pattern mimics that of the type. These functions have powerful calculation properties by which inductive reasoning can be replaced by equational reasoning. This paper introduces a generalisation of catamorphisms, dubbed ``paramorphisms''. Paramorphisms correspond to a larger class of inductive definition patterns; in fact, we show that any function defined on an initial type can be expressed as a paramorphism. In spite of this generality, it turns out that paramorphisms have calculation properties very similar to those of catamorphisms. In particular, we prove a Unique Extension Property and a Promotion Theorem for paramorphisms.},
  file = {/Users/igormoreno/Zotero/storage/G7GJAEMJ/Meertens - 1992 - Paramorphisms.pdf}
}

@inproceedings{meijerFunctionalProgrammingBananas1991,
  title = {Functional Programming with Bananas, Lenses, Envelopes and Barbed Wire},
  booktitle = {Functional {{Programming Languages}} and {{Computer Architecture}}},
  author = {Meijer, Erik and Fokkinga, Maarten and Paterson, Ross},
  editor = {Hughes, John},
  year = {1991},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {124--144},
  publisher = {{Springer}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/3540543961_7},
  abstract = {We develop a calculus for lazy functional programming based on recursion operators associated with data type definitions. For these operators we derive various algebraic laws that are useful in deriving and manipulating programs. We shall show that all example functions in Bird and Wadler's ``Introduction to Functional Programming'' can be expressed using these operators.},
  isbn = {978-3-540-47599-6},
  langid = {english},
  keywords = {Data Type,Functional Programming,Natural Transformation,Program Calculation,Recursion Operator},
  file = {/Users/igormoreno/Zotero/storage/UZBT8MAC/Meijer et al - 1991 - Functional programming with bananas, lenses, envelopes and barbed wire.pdf}
}

@article{meijerFunctionalProgrammingBananas1991a,
  title = {{Functional Programming with Bananas, Lenses, Envelopes and Barbed Wire}},
  author = {Meijer, Erik and Hughes, J. and Fokkinga, M. M. and Paterson, Ross},
  year = {1991},
  month = aug,
  doi = {10.1007/3540543961_7},
  urldate = {2018-09-12},
  langid = {Undefined},
  annotation = {00746},
  file = {/Users/igormoreno/Zotero/storage/ZMFKS74R/Meijer et al. - 1991 - Functional Programming with Bananas, Lenses, Envel.pdf;/Users/igormoreno/Zotero/storage/D9NFZ2P3/functional-programming-with-bananas-lenses-envelopes-and-barbed-w.html}
}

@article{meinkeTopologicalSortingTool1976,
  title = {Topological Sorting as a Tool in Curriculum Planning},
  author = {Meinke, John G. and Bauer, Charles R.},
  year = {1976},
  month = jul,
  journal = {ACM SIGCSE Bulletin},
  volume = {8},
  number = {3},
  pages = {61--66},
  issn = {0097-8418},
  doi = {10.1145/952991.804757},
  urldate = {2020-09-22},
  abstract = {Topological sorting provides a partial ordering for a group of data items for which a partial linear ordering exists. Our use of the topological sorting algorithm has been in the logical organization of curriculum content. Curriculum content can vary from organizing a forty minute lecture to planning a four year sequence of courses. Application of topological sorting to the curriculum content results in a logical organization of the concepts, which may or may not be unique. Users of TOPSORT claim a major time savings in the long run. Backtracking to cover prerequisite concepts in teaching is reduced.},
  annotation = {00006},
  file = {/Users/igormoreno/Zotero/storage/A5H9D2C2/Meinke and Bauer - 1976 - Topological sorting as a tool in curriculum planning.pdf}
}

@article{mekernComputationalModelsCreativity2019,
  title = {Computational Models of Creativity: A Review of Single-Process and Multi-Process Recent Approaches to Demystify Creative Cognition},
  shorttitle = {Computational Models of Creativity},
  author = {Mekern, Vera and Hommel, Bernhard and Sjoerds, Zsuzsika},
  year = {2019},
  month = jun,
  journal = {Current Opinion in Behavioral Sciences},
  series = {Creativity},
  volume = {27},
  pages = {47--54},
  issn = {2352-1546},
  doi = {10.1016/j.cobeha.2018.09.008},
  urldate = {2022-12-29},
  abstract = {Creativity is a compelling but heterogeneous phenomenon. As opposed to big-C creativity, which is regarded as limited to the rare brilliant mind, little-c creativity is indispensable in adaptive everyday behavior, serving to adjust to changing circumstances and challenges. Computational approaches help demystify human creativity by offering insights into the underlying mechanisms and their characteristics. Recently proposed computational models to creative cognition often focus on either divergent or convergent problem-solving, but some start to integrate these processes into broader cognitive frameworks. We briefly review the state-of-the-art in the field and point out theoretical overlap. We extract basic principles that most existing models agree on and desiderata on the way towards a comprehensive model.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/6HU9GYG2/Mekern et al - 2019 - Computational models of creativity.pdf}
}

@phdthesis{meklerMotivationalPotentialDigital2015,
  title = {The {{Motivational Potential}} of {{Digital Games}} and {{Gamification}} \textendash{} {{The Relation}} between {{Game Elements}}, {{Experience}} and {{Behavior Change}}},
  author = {Mekler, Elisa D.},
  year = {2015},
  address = {{Basel}},
  urldate = {2023-06-27},
  abstract = {Digital games have become the most popular medium of our time, having even surpassed the movie industry in terms of sales. Arguably, digital games offer some of the most enjoyable, rich and engaging experiences of all interactive products, with many players investing countless hours in gaming. Both researchers and industry professionals have taken notice of this trend and have attempted to foster games' motivational appeal to make other, `purposeful' activities more engaging. This notion is reflected in concepts, such as gamification or serious games, which typically aim to afford gameful, that is ,`game-like' experiences. However, it is not clear what characterizes positive gaming experiences or what game aspects afford such experiences in non-game contexts. The four manuscripts which constitute this thesis therefore address three fundamental research questions: (a) What characterizes game enjoyment and how can it be assessed? (b) What game structures and psychological processes afford this experience? (c) How does this experience relate to behavior change? Manuscript 1 consists of a systematic review of 87 quantitative studies, analyzing different operationalizations and measures of game enjoyment, its determinants, and how these were related to other player experience constructs, such as flow, presence and immersion. While the conceptualizations and measures of game enjoyment were inconsistent, enjoyment was commonly operationalized as intrinsic motivation or positive affect, as well as associated with need satisfaction. Further, enjoyment was distinguished from flow in that it may occur independently of challenge and cognitive involvement, ultimately suggesting that enjoyment may describe the valence of the player experience. Seeing how game enjoyment was often equated with intrinsic motivation and predicted by need satisfaction, this then formed the basis for the studies described in manuscripts 2 and 3. Specifically, it has been debated amongst gamification researchers whether specific game elements may actually decrease users' intrinsic motivation. Manuscript 2 thus presents a study on the effects of three commonly employed game design elements \textendash{} points, leaderboards, levels \textendash{} on performance, intrinsic motivation, perceived autonomy and competence in an image annotation task. Implementation of these game elements significantly increased performance, but did not affect perceived autonomy, competence or intrinsic motivation. This suggested that points, levels and leaderboards do not by themselves invariably decrease intrinsic motivation in non-game contexts. The study described in manuscript 3 further explored the motivational mechanisms underlying the aforementioned game features. Based on self-determination theory, it was assumed that if perceived as informational, points, levels and leaderboards, would afford feelings of competence and hence enhance intrinsic motivation and promote performance gains. Moreover, the study also took participants' causality orientation \textendash{} the extent to which individuals experience their actions as self-determined, which further influences whether they perceive feedback as informational or controlling, \textendash{} as a potential moderator variable into account. Mirroring the results of manuscript 2, game elements did not significantly affect competence or intrinsic motivation, irrespective of participants' causality orientation. Similarly, participants' performance did not reflect their intrinsic motivation, as points, and especially levels and leaderboard led to a significantly higher amount of tags generated compared to the control group, suggesting that they functioned as extrinsic incentives, effective only for promoting performance quantity in the short term. Games for change have attracted the interest of humanitarian aid organizations and researchers. However, their effectiveness to promote behavior remains unclear, and little is known about how the player experience relates to specific game properties and donating behavior. In the study outlined in manuscript 4, experimental conditions were systematically varied in their interactivity and presentation mode. After playing, watching or reading through the narrative of the game Darfur is Dying, participants had the option to donate to a charity. While interactivity increased donating by an average of 12\%, presentation mode had no significant impact. Moreover, appreciation fully mediated the relationship between interactivity and donating, hinting at its relevance for the evaluation of games for change. Taken together, the present findings show that specific game features may promote certain behaviors without necessarily affording enjoyment/intrinsic motivation. While manuscripts 2 and 3 hint at game elements functioning as extrinsic motivators, the findings of manuscript 4 emphasize the importance of appreciation and meaning.},
  school = {University of Basel},
  file = {/Users/igormoreno/Zotero/storage/WIT6F5J8/Mekler - 2015 - The Motivational Potential of Digital Games and Gamification – The Relation.pdf}
}

@article{meklerUnderstandingEffectsIndividual2017,
  title = {Towards Understanding the Effects of Individual Gamification Elements on Intrinsic Motivation and Performance},
  author = {Mekler, Elisa D. and Br{\"u}hlmann, Florian and Tuch, Alexandre N. and Opwis, Klaus},
  year = {2017},
  month = jun,
  journal = {Computers in Human Behavior},
  volume = {71},
  pages = {525--534},
  issn = {07475632},
  doi = {10.1016/j.chb.2015.08.048},
  urldate = {2023-06-27},
  abstract = {Research on the effectiveness of gamification has proliferated over the last few years, but the underlying motivational mechanisms have only recently become object of empirical research. It has been suggested that when perceived as informational, gamification elements, such as points, levels and leaderboards, may afford feelings of competence and hence enhance intrinsic motivation and promote performance gains. We conducted a 2 \^A 4 online experiment that systematically examined how points, leaderboards and levels, as well as participants' goal causality orientation influence intrinsic motivation, competence and performance (tag quantity and quality) in an image annotation task. Compared to a control condition, game elements did not significantly affect competence or intrinsic motivation, irrespective of participants' causality orientation. However, participants' performance did not mirror their intrinsic motivation, as points, and especially levels and leaderboard led to a significantly higher amount of tags generated compared to the control group. These findings suggest that in this particular study context, points, levels and leaderboards functioned as extrinsic incentives, effective only for promoting performance quantity.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/G5EQTY77/Mekler et al. - 2017 - Towards understanding the effects of individual ga.pdf}
}

@inproceedings{mendezTechniquesDatadrivenCurriculum2014,
  title = {Techniques for Data-Driven Curriculum Analysis},
  booktitle = {Proceedings of the {{Fourth International Conference}} on {{Learning Analytics And Knowledge}}},
  author = {M{\'e}ndez, Gonzalo and Ochoa, Xavier and Chiluiza, Katherine},
  year = {2014},
  month = mar,
  series = {{{LAK}} '14},
  pages = {148--157},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2567574.2567591},
  urldate = {2020-09-22},
  abstract = {One of the key promises of Learning Analytics research is to create tools that could help educational institutions to gain a better insight of the inner workings of their programs, in order to tune or correct them. This work presents a set of simple techniques that applied to readily available historical academic data could provide such insights. The techniques described are real course difficulty estimation, dependance estimation, curriculum coherence, dropout paths and load/performance graph. The description of these techniques is accompanied by its application to real academic data from a Computer Science program. The results of the analysis are used to obtain recommendations for curriculum re-design.},
  isbn = {978-1-4503-2664-3},
  keywords = {curriculum design,learning analytics},
  annotation = {00022},
  file = {/Users/igormoreno/Zotero/storage/YFPF7GIQ/Méndez et al - 2014 - Techniques for data-driven curriculum analysis.pdf}
}

@article{menekseComputerScienceTeacher2015,
  title = {Computer Science Teacher Professional Development in the {{United States}}: A Review of Studies Published between 2004 and 2014},
  shorttitle = {Computer Science Teacher Professional Development in the {{United States}}},
  author = {Menekse, Muhsin},
  year = {2015},
  month = oct,
  journal = {Computer Science Education},
  volume = {25},
  number = {4},
  pages = {325--350},
  publisher = {{Routledge}},
  issn = {0899-3408},
  doi = {10.1080/08993408.2015.1111645},
  urldate = {2021-01-30},
  abstract = {While there has been a remarkable interest to make computer science a core K-12 academic subject in the United States, there is a shortage of K-12 computer science teachers to successfully implement computer sciences courses in schools. In order to enhance computer science teacher capacity, training programs have been offered through teacher professional development. In this study, the main goal was to systematically review the studies regarding computer science professional development to understand the scope, context, and effectiveness of these programs in the past decade (2004\textendash 2014). Based on 21 journal articles and conference proceedings, this study explored: (1) Type of professional development organization and source of funding, (2) professional development structure and participants, (3) goal of professional development and type of evaluation used, (4) specific computer science concepts and training tools used, (5) and their effectiveness to improve teacher practice and student learning.},
  keywords = {computer science,K-12 education,programming,review study,teacher professional development},
  annotation = {00069},
  file = {/Users/igormoreno/Zotero/storage/RXKD42AS/08993408.2015.html}
}

@book{menezesHandbookAppliedCryptography1996,
  title = {Handbook of {{Applied Cryptography}}},
  author = {Menezes, Alfred and van Oorschot, Paul C. and Vanstone, Scott A.},
  year = {1996},
  publisher = {{CRC Press}},
  doi = {10.1201/9781439821916},
  urldate = {2022-11-28},
  isbn = {978-0-8493-8523-0},
  file = {/Users/igormoreno/Zotero/storage/XYUXANA3/Menezes et al. - 1996 - Handbook of Applied Cryptography.pdf}
}

@article{merenluotoNumberConceptConceptual2004,
  title = {Number Concept and Conceptual Change: Towards a Systemic Model of the Processes of Change},
  shorttitle = {Number Concept and Conceptual Change},
  author = {Merenluoto, Kaarina and Lehtinen, Erno},
  year = {2004},
  month = oct,
  journal = {Learning and Instruction},
  series = {The {{Conceptual Change Approach}} to {{Mathematics Learning}} and {{Teaching}}},
  volume = {14},
  number = {5},
  pages = {519--534},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2004.06.016},
  urldate = {2018-11-06},
  abstract = {The research on conceptual change has so far mainly dealt with cognitive outcomes, but especially during the last few years there has been a growing interest in and discussion about the processes of conceptual change. The purpose of the article is to contribute to this discussion and to present a theoretical model of the dynamics among the cognitive and motivational factors in conceptual change. Several researchers in science education have proposed cognitive conflict as instructional strategy for teaching difficult scientific concepts. However, we aim to explain why it does not always support the conceptual change. In our model, the two crucial aspects to the process of conceptual change are: the sensitivity to the novel aspects in the situation, and the ability to regulate the tolerance of ambiguity resulting from the experience where the prior knowledge is not adequate.},
  keywords = {Certainty,Cognitive distance,Conceptual change,Metacognition,Motivation,Number concept,Tolerance of ambiguity},
  file = {/Users/igormoreno/Zotero/storage/SVBB6BMM/Merenluoto and Lehtinen - 2004 - Number concept and conceptual change towards a sy.pdf;/Users/igormoreno/Zotero/storage/FGAIQHQ3/S0959475204000477.html}
}

@misc{merinoGettingGrammarsShape,
  title = {Getting {{Grammars}} into {{Shape}} for {{Block-based Editors}} [{{To}} Appear]},
  author = {Merino, Mauricio Verano},
  journal = {Mauricio Verano Merino},
  urldate = {2021-10-18},
  abstract = {Mauricio Verano Merino.},
  howpublished = {https://maveme.github.io/publications/2021-skogi/},
  file = {/Users/igormoreno/Zotero/storage/JRNCT8BG/2021-skogi.html}
}

@article{meseguerRewritingLogicSemantics2007,
  title = {The Rewriting Logic Semantics Project},
  author = {Meseguer, Jos{\'e} and Ro{\c s}u, Grigore},
  year = {2007},
  month = apr,
  journal = {Theoretical Computer Science},
  series = {Structural {{Operational Semantics}}},
  volume = {373},
  number = {3},
  pages = {213--237},
  issn = {0304-3975},
  doi = {10.1016/j.tcs.2006.12.018},
  urldate = {2018-12-02},
  abstract = {Rewriting logic is a flexible and expressive logical framework that unifies algebraic denotational semantics and structural operational semantics (SOS) in a novel way, avoiding their respective limitations and allowing succinct semantic definitions. The fact that a rewrite logic theory's axioms include both equations and rewrite rules provides a useful ``abstraction dial'' to find the right balance between abstraction and computational observability in semantic definitions. Such semantic definitions are directly executable as interpreters in a rewriting logic language such as Maude, whose generic formal tools can be used to endow those interpreters with powerful program analysis capabilities.},
  keywords = {Rewriting logic,Semantics and analysis of programming languages},
  file = {/Users/igormoreno/Zotero/storage/HXD2SY2W/Meseguer and Roşu - 2007 - The rewriting logic semantics project.pdf;/Users/igormoreno/Zotero/storage/IVQ84ZT2/S0304397506009042.html}
}

@article{metwallyRevealingHotspotsEducational2021,
  title = {Revealing the Hotspots of Educational Gamification: {{An}} Umbrella Review},
  shorttitle = {Revealing the Hotspots of Educational Gamification},
  author = {Metwally, Ahmed Hosny Saleh and Nacke, Lennart E. and Chang, Maiga and Wang, Yining and Yousef, Ahmed Mohamed Fahmy},
  year = {2021},
  journal = {International Journal of Educational Research},
  volume = {109},
  pages = {101832},
  issn = {08830355},
  doi = {10.1016/j.ijer.2021.101832},
  urldate = {2023-06-27},
  abstract = {With gamification flourishing in popularity in educational research, it is essential to synthesize the expanding literature on educational gamification. The current umbrella review aims to comprehensively canvas the disparate findings and conflicting conclusions by critically exam\- ining educational gamification reviews. We included 46 reviews of state-of-the-art gamification published between 2016 and 2020. The critical analysis of these studies resulted in extracting six fundamental gamification research areas in education, namely: (1) concept and theoretical knowledge, (2) design, (3) development, (4) impact, (5) personalization, and (6) higher education. It also revealed that systematic reviews were the predominant analysis type. Our umbrella review illustrates the ongoing need in educational research for carefully structured examinations and rigorous methods that validate gamification's instructional advantages.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/GH77BXCQ/Metwally et al. - 2021 - Revealing the hotspots of educational gamification.pdf}
}

@techreport{michaele.caspersenInformaticsReferenceFramework2022,
  title = {Informatics {{Reference Framework}} for {{School}}},
  author = {{Michael E. Caspersen} and {Ira Diethelm} and {Judith Gal-Ezer} and {Andrew McGettrick} and {Enrico Nardelli} and {Don Passey} and {Branislav Rovan} and {Mary Webb}},
  year = {2022},
  month = feb,
  urldate = {2022-11-21},
  abstract = {The contribution that informatics has made since the last century has fuelled innovative and significant technological advances and vice versa. It makes fundamental contributions to current economic, educational, industrial and social development. Informatics importantly has the capacity to support and augment human reasoning and potential. Education systems have a responsibility to recognise this and to ensure that young people are equipped to be able to drive forward, judge innovation and take part in the development of a just and fair society. To properly embrace this development by society in general, informatics has to be seen as an essential aspect of the education of all pupils. The present report, which outlines an informatics reference framework for all young people, bears that in mind. It is intended to offer high-level guidance that may be used by, and indeed stimulate, curriculum designers to review their focus and approach to the subject of informatics. Following the introductory sections, the heart of the reference framework is described in section 4. A set of aims and objectives for informatics education for all young people is provided in section 4.2 followed by a set of core concepts and an accompanying brief description of these in Table 1 of section 4.3; this conveys a robust structure and a general architecture, which captures an essential view of informatics as a discipline in general education. To complement the general architecture, a contemporary and outward facing view of informatics is offered in section 4.4; this includes discussion of modern developments that relate to topics such as data science and artificial intelligence, as well as attention to related ethical concerns. Annex A.1 presents a brief description of informatics as a discipline. Annex A.2 presents a limited number of examples of how high-level learning outcomes could be described in a concrete curriculum at three levels that reflect indicators of outcomes after primary, lower secondary and upper secondary education.},
  file = {/Users/igormoreno/Zotero/storage/ZIZ2ZZ98/Informatics-Reference-Framework-for-School-release-February-2022.pdf}
}

@inproceedings{michaeliCurrentStatusPerspectives2019,
  title = {Current {{Status}} and {{Perspectives}} of {{Debugging}} in the {{K12 Classroom}}: {{A Qualitative Study}}},
  shorttitle = {Current {{Status}} and {{Perspectives}} of {{Debugging}} in the {{K12 Classroom}}},
  booktitle = {2019 {{IEEE Global Engineering Education Conference}} ({{EDUCON}})},
  author = {Michaeli, Tilman and Romeike, Ralf},
  year = {2019},
  month = apr,
  pages = {1030--1038},
  publisher = {{IEEE}},
  address = {{Dubai, United Arab Emirates}},
  doi = {10.1109/EDUCON.2019.8725282},
  urldate = {2020-06-22},
  abstract = {Self-reliance in debugging is both an important skill and a major challenge in learning to program. Debugging is distinct from general programming skills and needs to be taught explicitly. Nevertheless, when it comes to teaching and learning debugging, there are surprisingly few studies and results. The aim of this qualitative study is to investigate how students and teachers cope with errors in the K12 classroom, which debugging skills are conveyed, and why teachers teach or do not teach certain debugging skills. Therefore, in a first step, we identify skills considered relevant for debugging by applying desk research. We particularly focus on skills considered relevant for novices. Building upon this, we analyze 12 interviews of German high-school teachers using structured qualitative content analysis. The results show that especially weaker students are often helpless and apply a trial-and-error approach for coping with programming errors. It turns out that compile-time errors pose a big hurdle for many students. Teachers are mostly rushing from one student PC to the other, trying to help. Regarding the teaching of debugging skills, teachers focus on heuristics for common bugs as well as some debugging strategies. No systematic process on how to tackle and cope with errors is conveyed by teachers. Furthermore, they do not employ explicit teaching lessons on debugging. Overall, teachers lack a systematic approach for teaching debugging, as there are only insufficient concepts and materials.},
  isbn = {978-1-5386-9506-7},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/QUYXHS5L/Michaeli and Romeike - 2019 - Current Status and Perspectives of Debugging in the K12 Classroom.pdf}
}

@misc{michaelj.hansonEfficientReadingPapers2000,
  title = {Efficient {{Reading}} of {{Papers}} in {{Science}} and {{Technology}}},
  author = {{Michael J. Hanson}},
  year = {2000},
  month = jan,
  urldate = {2019-04-14},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/3QUC3Q8A/Michael J. Hanson - 2000 - Efficient Reading of Papers in Science and Technology.pdf}
}

@misc{michaelmitzenmacherHowReadResearch,
  title = {How to Read a Research Paper},
  author = {{Michael Mitzenmacher}},
  urldate = {2019-04-14},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/FCVGSWXR/Michael Mitzenmacher - How to read a research paper.pdf}
}

@inproceedings{michaelsonTeachingRecursionCounting2015,
  title = {Teaching {{Recursion With Counting Songs}}},
  booktitle = {{{SIGCHI}} '15},
  author = {Michaelson, Greg},
  year = {2015},
  month = jun,
  pages = {4},
  abstract = {Recursion is often seen as an advanced topic, unsuitable for early learners of computing. Here, we explore the use of simple counting songs to draw out patterns and abstractions for recursion, which are more widely applicable to solving problems involving sequences.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/8AMXULZG/Michaelson - 2015 - Teaching Recursion With Counting Songs.pdf}
}

@inproceedings{michalenkoDataminingTextualResponses2017,
  title = {Data-Mining {{Textual Responses}} to {{Uncover Misconception Patterns}}},
  shorttitle = {D.{{TRUMP}}},
  booktitle = {Proceedings of the {{Fourth}} (2017) {{ACM Conference}} on {{Learning}} @ {{Scale}} - {{L}}@{{S}} '17},
  author = {Michalenko, Joshua J. and Lan, Andrew S. and Baraniuk, Richard G.},
  year = {2017},
  pages = {245--248},
  publisher = {{ACM Press}},
  address = {{Cambridge, Massachusetts, USA}},
  doi = {10.1145/3051457.3053996},
  urldate = {2018-10-22},
  abstract = {An important, yet largely unstudied, problem in student data analysis is to detect misconceptions from students' responses to open-response questions. Misconception detection enables instructors to deliver more targeted feedback on the misconceptions exhibited by many students in their class, thus improving the quality of instruction. In this paper, we propose a new natural language processing (NLP) framework to detect the common misconceptions among students' textual responses to open-response, short-answer questions. We introduce a probabilistic model for students' textual responses involving misconceptions and experimentally validate it on a real-world student-response dataset. Preliminary experimental results show that our proposed framework excels at classifying whether a response exhibits one or more misconceptions. More importantly, it can also automatically detect the common misconceptions exhibited across responses from multiple students to multiple questions; this is especially important at large scale, since instructors will no longer need to manually specify all possible misconceptions that students might exhibit.},
  isbn = {978-1-4503-4450-0},
  langid = {english},
  annotation = {00002},
  file = {/Users/igormoreno/Zotero/storage/RUH3MKD3/Michalenko et al - 2017 - Data-mining Textual Responses to Uncover Misconception Patterns.pdf}
}

@article{michenerUnderstandingUnderstandingMathematics1978,
  ids = {michenerUnderstandingUnderstandingMathematics1978a},
  title = {Understanding {{Understanding Mathematics}}},
  author = {Michener, Edwina Rissland},
  year = {1978},
  journal = {Cognitive Science},
  volume = {2},
  number = {4},
  pages = {361--383},
  issn = {1551-6709},
  doi = {10.1207/s15516709cog0204_3},
  urldate = {2020-07-07},
  abstract = {In this paper we look at some of the ingredients and processes involved in the understanding of mathematics. We analyze elements of mathematical knowledge, organize them in a coherent way and take note of certain classes of items that share noteworthy roles in understanding. We thus build a conceptual framework in which to talk about mathematical knowledge. We then use this representation to describe the acquisition of understanding. We also report on classroom experience with these ideas.},
  copyright = {\textcopyright{} 1978 Cognitive Science Society, Inc.},
  langid = {english},
  keywords = {To Read},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/GAKPAX4N/Michener - 1978 - Understanding Understanding Mathematics.pdf;/Users/igormoreno/Zotero/storage/Y5589Q59/Michener - 1978 - Understanding Understanding Mathematics.pdf;/Users/igormoreno/Zotero/storage/CDII7YH6/s15516709cog0204_3.html}
}

@misc{mightBooksPapersEvery,
  title = {Books and Papers Every Graduate Student Should Read},
  author = {Might, Matthew},
  urldate = {2020-06-06},
  howpublished = {http://matt.might.net/articles/books-papers-materials-for-graduate-students/},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/SJKH6XXC/books-papers-materials-for-graduate-students.html}
}

@article{mihalcaEffectivenessCognitiveloadBased2011,
  title = {Effectiveness of Cognitive-Load Based Adaptive Instruction in Genetics Education},
  author = {Mihalca, Loredana and Salden, Ron J. C. M. and Corbalan, Gemma and Paas, Fred and Miclea, Mircea},
  year = {2011},
  month = jan,
  journal = {Computers in Human Behavior},
  series = {Current {{Research Topics}} in {{Cognitive Load Theory}}},
  volume = {27},
  number = {1},
  pages = {82--88},
  issn = {0747-5632},
  doi = {10.1016/j.chb.2010.05.027},
  urldate = {2018-11-06},
  abstract = {Research addressing the issue of instructional control in computer-assisted instruction has revealed mixed results. Prior knowledge level seems to play a mediating role in the student's ability to effectively use given instructional control. This study examined the effects of three types of instructional control (non-adaptive program control, learner control, adaptive program control) and prior knowledge (high school, 1st year and 2nd year college students) on effectiveness and efficiency of learning in a genetics training program. The results revealed that adaptive program control led to highest training performance but not to superior post-test or far-transfer performance. Furthermore, adaptive program control proved to be more efficient in terms of learning outcomes of the test phase than the other two instructional control types. College students outperformed the high school students on all aspects of the study thereby strengthening the importance of prior knowledge in learning effectiveness and efficiency. Lastly, the interaction effects showed that for each prior knowledge level different levels of support were beneficial to learning.},
  keywords = {Adaptive instruction,Cognitive load,Learner control,Learning efficiency,Non-adaptive program control,Problem selection algorithm},
  file = {/Users/igormoreno/Zotero/storage/VEKEJWJ9/Mihalca et al - 2011 - Effectiveness of cognitive-load based adaptive instruction in genetics education.pdf;/Users/igormoreno/Zotero/storage/VBEHCVJV/S0747563210001676.html}
}

@book{milewskiCategoryTheoryProgrammers2018,
  ids = {milewskiCategoryTheoryProgrammers2017,milewskiCategoryTheoryProgrammers2017a},
  title = {Category Theory for Programmers},
  author = {Milewski, Bartosz},
  year = {2018},
  publisher = {{Blurb}},
  keywords = {Strong,To Read},
  file = {/Users/igormoreno/Zotero/storage/6KV4FZZ4/Milewski - 2017 - Category Theory for Programmers.pdf;/Users/igormoreno/Zotero/storage/K7R53N7B/Latest version (1.3) - Milewski - 2017 - Category Theory for Programmers.pdf;/Users/igormoreno/Zotero/storage/KN7IJMAV/Milewski - Category Theory for Programmers.pdf}
}

@inproceedings{milgramIdentifyingLearningTrajectories2019,
  title = {Identifying {{Learning Trajectories}} in {{Self-Directed Programming}}},
  booktitle = {Proceedings of the 2019 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Milgram, Aaron and Jain, Shruti and Ichinco, Michelle},
  year = {2019},
  series = {{{ICER}} '19},
  pages = {311--311},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3291279.3341207},
  urldate = {2019-10-07},
  abstract = {Many children begin to learn to code in a self-directed context, such as by creating an animation, game or phone app. Recent research has begun to investigate and evaluate the results of this process: children's projects. However, little is known about the different trajectories novices have during the long-term process of self-directed programming learning. Our aim is to identify the existing types of trajectories and be able to determine a specific child's trajectory. If that trajectory does not lead to significant progress or continued motivation, we might be able to nudge them toward a different trajectory. We hypothesized that there may be several main types of trajectories. To explore this, we clustered children's programming progression in order to identify trends. We used a data set of Scratch programs for its large sample size and diverse population [1,3]. We used Dr. Scratch's scoring of computational thinking skills as our initial feature set [2]. Our clustering analysis identified two main groups of users. The first group, 55.8\% of users, generally progressed upward over time in their computational thinking skill score. The second group, 44.2\% of users, showed little to no improvement over time. These preliminary results raise many questions about these two high-level groupings of trajectories of computational thinking skill demonstration in Scratch projects. In the future we want to further explore the trajectory clusters and what they could mean for supporting self-directed learning of programming.},
  isbn = {978-1-4503-6185-9},
  keywords = {coding,computational thinking,novice programming,programming progression,self-directed learning,time-series clustering},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/P93KHZGG/Milgram et al - 2019 - Identifying Learning Trajectories in Self-Directed Programming.pdf}
}

@inproceedings{miljanovicRoboBUGSeriousGame2017,
  title = {{{RoboBUG}}: {{A Serious Game}} for {{Learning Debugging Techniques}}},
  shorttitle = {{{RoboBUG}}},
  booktitle = {Proceedings of the 2017 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Miljanovic, Michael A. and Bradbury, Jeremy S.},
  year = {2017},
  month = aug,
  pages = {93--100},
  publisher = {{ACM}},
  address = {{Tacoma Washington USA}},
  doi = {10.1145/3105726.3106173},
  urldate = {2021-06-14},
  abstract = {Debugging is an essential but challenging task that can present a great deal of confusion and frustration to novice programmers. It can be argued that Computer Science education does not sufficiently address the challenges that students face when identifying bugs in their programs. To help students learn effective debugging techniques and to provide students a more enjoyable and motivating experience, we have designed the RoboBUG game. RoboBUG is a serious game that can be customized with respect to different programming languages and game levels.},
  isbn = {978-1-4503-4968-0},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/PH6VML6Q/Miljanovic e Bradbury - 2017 - RoboBUG A Serious Game for Learning Debugging Tec.pdf}
}

@article{millerEvolutionNoviceProgramming1994,
  title = {Evolution of Novice Programming Environments: {{The}} Structure Editors of {{Carnegie Mellon University}}},
  shorttitle = {Evolution of Novice Programming Environments},
  author = {Miller, Philip and Pane, John and Meter, Glenn and Vorthmann, Scott},
  year = {1994},
  journal = {Interactive Learning Environments},
  volume = {4},
  number = {2},
  pages = {140--158},
  publisher = {{Taylor \& Francis}},
  file = {/Users/igormoreno/Zotero/storage/E8GG4JJ2/Miller et al. - 1994 - Evolution of novice programming environments The .pdf;/Users/igormoreno/Zotero/storage/ITPKJH8T/1049482940040202.html}
}

@article{millerFreeRecallSelfembedded1964,
  title = {Free Recall of Self-Embedded English Sentences},
  author = {Miller, George A. and Isard, Stephen},
  year = {1964},
  month = sep,
  journal = {Information and Control},
  volume = {7},
  number = {3},
  pages = {292--303},
  issn = {0019-9958},
  doi = {10.1016/S0019-9958(64)90310-9},
  urldate = {2018-12-02},
  abstract = {Subjects were given five trials to memorize 22-word sentences that varied in degree of self-embedding. Sentences with self-embedded phrase structure proved more difficult to learn, which is interpreted to mean that our capacity to deal with recursive interruptions may be extremely limited.},
  file = {/Users/igormoreno/Zotero/storage/S5F3NLVV/Miller and Isard - 1964 - Free recall of self-embedded english sentences.pdf;/Users/igormoreno/Zotero/storage/EA8DPZ7Q/S0019995864903109.html}
}

@article{millerLearningGetLiteral2019,
  title = {Learning to {{Get Literal}}: {{Investigating Reference-Point Difficulties}} in {{Novice Programming}}},
  shorttitle = {Learning to {{Get Literal}}},
  author = {Miller, Craig S. and Settle, Amber},
  year = {2019},
  month = jun,
  journal = {ACM Transactions on Computing Education},
  volume = {19},
  number = {3},
  pages = {1--17},
  issn = {1946-6226, 1946-6226},
  doi = {10.1145/3313291},
  urldate = {2020-06-22},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/LC6PAMI4/Miller and Settle - 2019 - Learning to Get Literal Investigating Reference-P.pdf}
}

@inproceedings{millerTroubleTransparencyAnalysis2016,
  title = {Some {{Trouble}} with {{Transparency}}: {{An Analysis}} of {{Student Errors}} with {{Object-oriented Python}}},
  shorttitle = {Some {{Trouble}} with {{Transparency}}},
  booktitle = {Proceedings of the 2016 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Miller, Craig S. and Settle, Amber},
  year = {2016},
  month = aug,
  pages = {133--141},
  publisher = {{ACM}},
  address = {{Melbourne VIC Australia}},
  doi = {10.1145/2960310.2960327},
  urldate = {2020-06-22},
  abstract = {We investigated implications of transparent mechanisms in the context of an introductory object-oriented programming course using Python. Here transparent mechanisms are those that reveal how the instance object in Python relates to its instance data. We asked students to write a new method for a provided Python class in an attempt to answer two research questions: 1) to what extent do Python's transparent OO mechanisms lead to student difficulties? and 2) what are common pitfalls in OO programming using Python that instructors should address? Our methodology also presented the correct answer to the students and solicited their comments on their submission. We conducted a content analysis to classify errors in the student submissions. We find that most students had difficulty with the instance (self) object, either by omitting the parameter in the method definition, by failing to use the instance object when referencing attributes of the object, or both. Reference errors in general were more common than other errors, including misplaced returns and indentation errors. These issues may be connected to problems with parameter passing and using dotnotation, which we argue are prerequisites for OO development in Python.},
  isbn = {978-1-4503-4449-4},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/9SMHSQH2/Miller and Settle - 2016 - Some Trouble with Transparency An Analysis of Stu.pdf}
}

@inproceedings{milnerAlgebraicDefinitionSimulation1971,
  title = {An Algebraic Definition of Simulation between Programs},
  booktitle = {Proceedings of the 2nd International Joint Conference on {{Artificial}} Intelligence},
  author = {Milner, Robin},
  year = {1971},
  month = sep,
  series = {{{IJCAI}}'71},
  pages = {481--489},
  publisher = {{Morgan Kaufmann Publishers Inc.}},
  address = {{San Francisco, CA, USA}},
  urldate = {2020-10-07},
  abstract = {A simulation relation between programs is defined which is a quasi-ordering. Mutual simulation is then an equivalence relation, and by dividing out by it we abstract from a program such details as how the sequencing is controlled and how data is represented. The equivalence classes are approximations to the algorithms which are realized, or expressed, by their member programs. A technique is given and illustrated for proving simulation and equivalence of programs; there is an analogy with Floyd's technique for proving correctness oi programs. Finally, necessary and sufficient conditions for simulation are given.},
  keywords = {algorithm,program correctness,program equivalence,simulation,weak homomorphism},
  annotation = {00728},
  file = {/Users/igormoreno/Zotero/storage/DWQZELC9/Milner - 1971 - An algebraic definition of simulation between prog.pdf}
}

@article{milnerTheoryTypePolymorphism1978,
  title = {A Theory of Type Polymorphism in Programming},
  author = {Milner, Robin},
  year = {1978},
  month = dec,
  journal = {Journal of Computer and System Sciences},
  volume = {17},
  number = {3},
  pages = {348--375},
  issn = {0022-0000},
  doi = {10.1016/0022-0000(78)90014-4},
  urldate = {2018-12-01},
  abstract = {The aim of this work is largely a practical one. A widely employed style of programming, particularly in structure-processing languages which impose no discipline of types, entails defining procedures which work well on objects of a wide variety. We present a formal type discipline for such polymorphic procedures in the context of a simple programming language, and a compile time type-checking algorithm W which enforces the discipline. A Semantic Soundness Theorem (based on a formal semantics for the language) states that well-type programs cannot ``go wrong'' and a Syntactic Soundness Theorem states that if W accepts a program then it is well typed. We also discuss extending these results to richer languages; a type-checking algorithm based on W is in fact already implemented and working, for the metalanguage ML in the Edinburgh LCF system.},
  annotation = {03097},
  file = {/Users/igormoreno/Zotero/storage/2876R5CG/Milner - 1978 - A theory of type polymorphism in programming.pdf;/Users/igormoreno/Zotero/storage/4DJRYV4L/Milner - 1978 - A theory of type polymorphism in programming.pdf;/Users/igormoreno/Zotero/storage/DMC3QTIE/0022000078900144.html;/Users/igormoreno/Zotero/storage/WJPNX4AG/0022000078900144.html}
}

@incollection{minstrellStudentThinkingRelated2000,
  title = {Student {{Thinking}} and {{Related Assessment}}: {{Creating}} a {{Facet-Based Learning Environment}}},
  booktitle = {Grading the {{Nation}}'s {{Report Card}}: {{Research}} from the {{Evaluation}} of {{NAEP}}},
  author = {Minstrell, Jim},
  year = {2000},
  month = mar,
  publisher = {{National Academies Press}},
  address = {{Washington, D.C.}},
  doi = {10.17226/9751},
  urldate = {2019-05-21},
  isbn = {978-0-309-06844-4},
  langid = {english},
  keywords = {Misconceptions Proposal},
  file = {/Users/igormoreno/Zotero/storage/AP533747/Minstrell - 2000 - Student Thinking and Related Assessment.pdf}
}

@article{miraldoEfficientAlgorithmTypesafe2019,
  title = {An Efficient Algorithm for Type-Safe Structural Diffing},
  author = {Miraldo, Victor Cacciari and Swierstra, Wouter},
  year = {2019},
  month = jul,
  journal = {Proceedings of the ACM on Programming Languages},
  volume = {3},
  number = {ICFP},
  pages = {113:1--113:29},
  doi = {10.1145/3341717},
  urldate = {2022-03-11},
  abstract = {Effectively computing the difference between two version of a source file has become an indispensable part of software development. The de facto standard tool used by most version control systems is the UNIX diff utility, that compares two files on a line-by-line basis without any regard for the structure of the data stored in these files. This paper presents an alternative datatype generic algorithm for computing the difference between two values of any algebraic datatype. This algorithm maximizes sharing between the source and target trees, while still running in linear time. Finally, this paper demonstrates that by instantiating this algorithm to the Lua abstract syntax tree and mining the commit history of repositories found on GitHub, the resulting patches can often be merged automatically, even when existing technology has failed.},
  keywords = {diff,Generic Programming,Haskell,Version Control},
  file = {/Users/igormoreno/Zotero/storage/VVKQNJMF/Miraldo and Swierstra - 2019 - An efficient algorithm for type-safe structural di.pdf}
}

@misc{miraldoEfficientAlgorithmTypesafe2021,
  title = {An Efficient Algorithm for Type-Safe Structural Diffing - Hdiff: {{Hash-based Diffing}} for {{AST}}'s},
  shorttitle = {Hdiff},
  author = {Miraldo, Victor Cacciari},
  year = {2021},
  month = oct,
  urldate = {2022-03-11},
  abstract = {Hash-based Diffing for AST's},
  copyright = {MIT}
}

@inproceedings{miraldoTypedirectedDiffingStructured2017,
  title = {Type-Directed Diffing of Structured Data},
  booktitle = {Proceedings of the 2nd {{ACM SIGPLAN International Workshop}} on {{Type-Driven Development}}},
  author = {Miraldo, Victor Cacciari and Dagand, Pierre-{\'E}variste and Swierstra, Wouter},
  year = {2017},
  month = sep,
  series = {{{TyDe}} 2017},
  pages = {2--15},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3122975.3122976},
  urldate = {2022-03-11},
  abstract = {The Unix diff utility that compares lines of text is used pervasively by version control systems. Yet certain changes to a program may be difficult to describe accurately in terms of modifications to individual lines of code. As a result, observing changes at such a fixed granularity may lead to unnecessary conflicts between different edits. This paper presents a generic representation for describing transformations between algebraic data types and a non-deterministic algorithm for computing such representations. These representations can be used to give a more accurate account of modifications made to algebraic data structures - and the abstract syntax trees of computer programs in particular - as opposed to only considering modifications between their textual representations.},
  isbn = {978-1-4503-5183-6},
  keywords = {Agda,Datatype Generic Programming,De- pendently typed programming,Version Control},
  file = {/Users/igormoreno/Zotero/storage/XLVV7JWF/Miraldo et al. - 2017 - Type-directed diffing of structured data.pdf}
}

@inproceedings{miroloIterationReallyEasier2012,
  title = {Is Iteration Really Easier to Learn than Recursion for {{CS1}} Students?},
  booktitle = {Proceedings of the Ninth Annual International Conference on {{International}} Computing Education Research - {{ICER}} '12},
  author = {Mirolo, Claudio},
  year = {2012},
  pages = {99},
  publisher = {{ACM Press}},
  address = {{Auckland, New Zealand}},
  doi = {10.1145/2361276.2361296},
  urldate = {2020-06-22},
  isbn = {978-1-4503-1604-0},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/7KH7NFD5/Mirolo - 2012 - Is iteration really easier to learn than recursion for CS1 students.pdf}
}

@inproceedings{miroloLearningRecursionMultidimensional2010,
  title = {Learning (through) Recursion: A Multidimensional Analysis of the Competences Achieved by {{CS1}} Students},
  shorttitle = {Learning (through) Recursion},
  booktitle = {Proceedings of the Fifteenth Annual Conference on {{Innovation}} and Technology in Computer Science Education - {{ITiCSE}} '10},
  author = {Mirolo, Claudio},
  year = {2010},
  pages = {160},
  publisher = {{ACM Press}},
  address = {{Bilkent, Ankara, Turkey}},
  doi = {10.1145/1822090.1822136},
  urldate = {2020-06-22},
  abstract = {In this paper I will discuss an investigation intended to address the learning of recursion in a multidimensional perspective, where the dimensions correspond to different types of competence relevant to programming. One such dimension is the understanding of the computation model, that I have assessed under the methodology proposed by G\textasciidieresis otschi et al. (2003). Moreover, I have tried to analyze and correlate other learning dimensions, such as the ability to establish relations in the problem domain, to deal with recursive structures, as well as to develop basic abstraction skills. One of my objectives is indeed to gain a better understanding of the major sources of difficulties that students face. In essence, my investigation lends further support to previous related findings on mental models. However, a consistent model of recursive computations, although implied by the ability to use recursion in problem-solving, does not seem to be sufficient for the achievement of higher-level skills.},
  isbn = {978-1-60558-729-5},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/YEEAN9NG/Mirolo - 2010 - Learning (through) recursion a multidimensional a.pdf}
}

@inproceedings{miroloMentalModelsRecursive2009,
  title = {Mental Models of Recursive Computations vs. Recursive Analysis in the Problem Domain},
  booktitle = {{{ITiCSE}}},
  author = {Mirolo, Claudio},
  year = {2009},
  pages = {1},
  address = {{Paris, France}},
  abstract = {The work outlined here was inspired by [1, 3], where the authors analyze the mental models of recursion by looking at how students trace simple recursive computations. Besides trying to understand if their results generalize to a different context, I was interested to see the correlations between the mental models of the computation process and the ability to establish recursive relationships in the problem domain.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/5KRLDG22/Mirolo - 2009 - Mental models of recursive computations vs.pdf}
}

@article{mitraUsingUMLModeling2014,
  title = {Using {{UML Modeling}} to {{Facilitate Three-Tier Architecture Projects}} in {{Software Engineering Courses}}},
  author = {Mitra, Sandeep},
  year = {2014},
  month = nov,
  journal = {ACM Transactions on Computing Education},
  volume = {14},
  number = {3},
  pages = {1--31},
  issn = {1946-6226, 1946-6226},
  doi = {10.1145/2635831},
  urldate = {2020-06-22},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/FJ5IWI5D/Mitra - 2014 - Using UML Modeling to Facilitate Three-Tier Architecture Projects in Software.pdf}
}

@book{modrowDidaktikInformatik2016,
  title = {{Didaktik der Informatik}},
  author = {Modrow, Eckart and Strecker, Kerstin},
  year = {2016},
  month = jun,
  edition = {1},
  publisher = {{De Gruyter Oldenbourg}},
  address = {{Boston}},
  abstract = {Diese Didaktik ist aus der Praxis entstanden und ist das Ergebnis von langj\"ahrigen Unterrichtserfahrungen in allen Altersstufen des Gymnasiums, der berufsbegleitenden Informatiklehrerausbildung sowie der universit\"aren Lehre. Das Buch besteht aus einem kompakten theoretischen Teil, gefolgt von vier Kapiteln mit zahlreichen Beispielen, die aus dem Unterricht entstanden und gut erprobt sind.  Schulinformatik ist ein wesentlicher Bestandteil einer zeitgem\"a\ss en Allgemeinbildung. Das technische Fach erm\"oglicht durch seine Inhalte, Methoden und Werkzeuge einen sch\"uleraktivierenden, produktorientierten Unterricht. Die Beispiele sollen einen Eindruck von diesem Vorgehen vermitteln. In ihrer Menge bilden sie eine Art Ideensammlung f\"ur kreativen Unterricht.  Das Buch begr\"undet die Schulinformatik als allgemeinbildendes Fach, das durch sechs fundamentale Ideen gepr\"agt ist. Aus diesen werden Kompetenzbereiche abgeleitet, die sich alters-, schul- und l\"anderspezifisch konkretisieren lassen. In den folgenden Kapiteln werden die Themenbereiche der Schulinformatik den Oberthemen Informatik und Gesellschaft, informatischen Grundlagen, Programmieren und Methodik zugeordnet.  Die Autoren beschreiben eine ,,Informatik f\"ur alle" und verwenden daf\"ur diverse Varianten grafischer Programmiersprachen. Die meisten Beispiele im Buch werden durch Skripte grafischer Sprachen erl\"autert, die hier als Medium zur Verdeutlichung informatischer Konzepte dienen.},
  isbn = {978-3-486-71622-1},
  langid = {ngerman},
  annotation = {00015}
}

@inproceedings{mokhovAlgebraicGraphsClass2017,
  ids = {mokhovAlgebraicGraphsClass2017a},
  title = {Algebraic Graphs with Class (Functional Pearl)},
  booktitle = {Proceedings of the 10th {{ACM SIGPLAN International Symposium}} on {{Haskell}}},
  author = {Mokhov, Andrey},
  year = {2017},
  month = sep,
  pages = {2--13},
  publisher = {{ACM}},
  address = {{Oxford UK}},
  doi = {10.1145/3122955.3122956},
  urldate = {2021-12-20},
  abstract = {The paper presents a minimalistic and elegant approach to working with graphs in Haskell. It is built on a rigorous mathematical foundation \textemdash{} an algebra of graphs \textemdash{} that allows us to apply equational reasoning for proving the correctness of graph transformation algorithms. Algebraic graphs let us avoid partial functions typically caused by `malformed graphs' that contain an edge referring to a non-existent vertex. This helps to liberate APIs of existing graph libraries from partial functions.},
  isbn = {978-1-4503-5182-9},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/99L7HKUV/Mokhov - 2017 - Algebraic graphs with class (functional pearl).pdf;/Users/igormoreno/Zotero/storage/E3J97G9N/Mokhov - 2017 - Algebraic graphs with class (functional pearl).pdf}
}

@article{mondadaBringingRoboticsFormal2017,
  title = {Bringing {{Robotics}} to {{Formal Education}}: {{The Thymio Open-Source Hardware Robot}}},
  shorttitle = {Bringing {{Robotics}} to {{Formal Education}}},
  author = {Mondada, Francesco and Bonani, Michael and Riedo, Fanny and Briod, Manon and Pereyre, Lea and Retornaz, Philippe and Magnenat, Stephane},
  year = {2017},
  month = mar,
  journal = {IEEE Robotics \& Automation Magazine},
  volume = {24},
  number = {1},
  pages = {77--85},
  issn = {1070-9932},
  doi = {10.1109/MRA.2016.2636372},
  urldate = {2020-06-22},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/3Z5DRJSU/Mondada et al - 2017 - Bringing Robotics to Formal Education.pdf}
}

@inproceedings{monteiroCheatSheetInstrument2018,
  title = {The {{Cheat Sheet As}} an {{Instrument}} of {{Study}} and {{Learning}} in {{HCI Tests}}},
  booktitle = {Proceedings of the 17th {{Brazilian Symposium}} on {{Human Factors}} in {{Computing Systems}}},
  author = {Monteiro, Ingrid Teixeira and {de Queiroz}, Maria J{\^e}sca Nobre},
  year = {2018},
  series = {{{IHC}} 2018},
  pages = {52:1--52:5},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3274192.3274244},
  urldate = {2018-11-10},
  abstract = {Paper tests are the most traditional and widely used summative assessment tool in both basic and higher education. One of the criticisms of this instrument is the emotional impact on students, who feel pressured and nervous at the time of resolving a test. This paper presents a study of the uses and consequences of "cheat sheets" in HCI tests. The cheat sheet is a material prepared by the student himself that can be used during the resolution of the test. As a result, the use of the cheat sheet brought at least three positive consequences: a) motivated the students to study before the test; b) made them calmer and more confident during the test time; c) helped them to resolve the questions. In addition, from the point of view of the students, we discuss the strategies of study and organization of the content in the elaborated sheets and, from the point of view of the teacher, we discuss the strategies of elaboration of the tests with cheat sheets.},
  isbn = {978-1-4503-6601-4},
  keywords = {cheat sheet,Learning assessment,paper tests},
  file = {/Users/igormoreno/Zotero/storage/2W52BBTJ/Monteiro and de Queiroz - 2018 - The Cheat Sheet As an Instrument of Study and Learning in HCI Tests.pdf}
}

@article{moodyPhysicsNotationsScientific2009,
  title = {The ``{{Physics}}'' of {{Notations}}: {{Toward}} a {{Scientific Basis}} for {{Constructing Visual Notations}} in {{Software Engineering}}},
  shorttitle = {The ``{{Physics}}'' of {{Notations}}},
  author = {Moody, D.},
  year = {2009},
  month = nov,
  journal = {IEEE Transactions on Software Engineering},
  volume = {35},
  number = {6},
  pages = {756--779},
  issn = {1939-3520},
  doi = {10.1109/TSE.2009.67},
  abstract = {Visual notations form an integral part of the language of software engineering (SE). Yet historically, SE researchers and notation designers have ignored or undervalued issues of visual representation. In evaluating and comparing notations, details of visual syntax are rarely discussed. In designing notations, the majority of effort is spent on semantics, with graphical conventions largely an afterthought. Typically, no design rationale, scientific or otherwise, is provided for visual representation choices. While SE has developed mature methods for evaluating and designing semantics, it lacks equivalent methods for visual syntax. This paper defines a set of principles for designing cognitively effective visual notations: ones that are optimized for human communication and problem solving. Together these form a design theory, called the Physics of Notations as it focuses on the physical (perceptual) properties of notations rather than their logical (semantic) properties. The principles were synthesized from theory and empirical evidence from a wide range of fields and rest on an explicit theory of how visual notations communicate. They can be used to evaluate, compare, and improve existing visual notations as well as to construct new ones. The paper identifies serious design flaws in some of the leading SE notations, together with practical suggestions for improving them. It also showcases some examples of visual notation design excellence from SE and other fields.},
  keywords = {analysis,communication,Computer industry,Concrete,concrete syntax.,design flaws,Design optimization,diagrams,Flowcharts,Humans,Modeling,Physics,physics of notations,Problem-solving,software engineering,Software engineering,Unified modeling language,visual notations,visual representation,visual syntax,visualization,Visualization},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/7KASB97M/Moody - 2009 - The “Physics” of Notations.pdf;/Users/igormoreno/Zotero/storage/W3QC4RRQ/Moody - 2009 - The “Physics” of Notations.pdf;/Users/igormoreno/Zotero/storage/QRHTH6N4/5353439.html;/Users/igormoreno/Zotero/storage/QVCZVCJQ/5353439.html;/Users/igormoreno/Zotero/storage/RXP4CBL2/5353439.html}
}

@article{moreno-leonDrScratchAutomatic,
  title = {Dr. {{Scratch}}: {{Automatic Analysis}} of {{Scratch Projects}} to {{Assess}} and {{Foster Computational Thinking}}},
  author = {{Moreno-Le{\'o}n}, Jes{\'u}s and Robles, Gregorio and {Rom{\'a}n-Gonz{\'a}lez}, Marcos},
  abstract = {One of the barriers to entry of computer programming in schools is the lack of tools that support educators in the assessment of student projects. In order to amend this situation this paper presents Dr. Scratch, a web application that allows teachers and students to automatically analyze projects coded in Scratch, the most used programming language in primary and secondary education worldwide, to check if they have been properly programmed, learn from their mistakes and get feedback to improve their code and develop their Computational Thinking (CT) skills. One of the goals of Dr. Scratch, besides supporting teachers in the evaluation tasks, is to act as a stimulus to encourage students to keep on improving their programming skills. Aiming to check its effectiveness regarding this objective, workshops with students in the range from 10 to 14 years were run in 8 schools, in which over 100 learners analyzed one of their Scratch projects with Dr. Scratch, read the information displayed as feedback by Dr. Scratch, and tried to improve their projects using the guidelines and tips offered by the tool. Our results show that at the end of the workshop, students increased their CT score and, consequently, improved their coding skills.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/3UST5F9L/Moreno-León et al. - Dr. Scratch Automatic Analysis of Scratch Project.pdf}
}

@article{moreno-leonDrScratchAutomatica,
  title = {Dr. {{Scratch}}: {{Automatic Analysis}} of {{Scratch Projects}} to {{Assess}} and {{Foster Computational Thinking}}},
  author = {{Moreno-Le{\'o}n}, Jes{\'u}s and Robles, Gregorio and {Rom{\'a}n-Gonz{\'a}lez}, Marcos},
  abstract = {One of the barriers to entry of computer programming in schools is the lack of tools that support educators in the assessment of student projects. In order to amend this situation this paper presents Dr. Scratch, a web application that allows teachers and students to automatically analyze projects coded in Scratch, the most used programming language in primary and secondary education worldwide, to check if they have been properly programmed, learn from their mistakes and get feedback to improve their code and develop their Computational Thinking (CT) skills. One of the goals of Dr. Scratch, besides supporting teachers in the evaluation tasks, is to act as a stimulus to encourage students to keep on improving their programming skills. Aiming to check its effectiveness regarding this objective, workshops with students in the range from 10 to 14 years were run in 8 schools, in which over 100 learners analyzed one of their Scratch projects with Dr. Scratch, read the information displayed as feedback by Dr. Scratch, and tried to improve their projects using the guidelines and tips offered by the tool. Our results show that at the end of the workshop, students increased their CT score and, consequently, improved their coding skills.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/5SXZGXJL/Moreno-León et al. - Dr. Scratch Automatic Analysis of Scratch Project.pdf}
}

@inproceedings{morenoVisualizingProgramsJeliot2004,
  title = {Visualizing Programs with {{Jeliot}} 3},
  booktitle = {Proceedings of the Working Conference on {{Advanced}} Visual Interfaces  - {{AVI}} '04},
  author = {Moreno, Andr{\'e}s and Myller, Niko and Sutinen, Erkki and {Ben-Ari}, Mordechai},
  year = {2004},
  pages = {373},
  publisher = {{ACM Press}},
  address = {{Gallipoli, Italy}},
  doi = {10.1145/989863.989928},
  urldate = {2020-06-22},
  abstract = {We present a program visualization tool called Jeliot 3 that is designed to aid novice students to learn procedural and object oriented programming. The key feature of Jeliot is the fully or semi-automatic visualization of the data and control flows. The development process of Jeliot has been research-oriented, meaning that all the different versions have had their own research agenda rising from the design of the previous version and their empirical evaluations. In this process, the user interface and visualization has evolved to better suit the targeted audience, which in the case of Jeliot 3, is novice programmers. In this paper we explain the model for the system and introduce the features of the user interface and visualization engine. Moreover, we have developed an intermediate language that is used to decouple the interpretation of the program from its visualization. This has led to a modular design that permits both internal and external extensibility.},
  isbn = {978-1-58113-867-2},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/HUI5NYQZ/Moreno et al - 2004 - Visualizing programs with Jeliot 3.pdf}
}

@article{morenoWhenWorkedExamples2006,
  title = {When Worked Examples Don't Work: {{Is}} Cognitive Load Theory at an {{Impasse}}?},
  shorttitle = {When Worked Examples Don't Work},
  author = {Moreno, Roxana},
  year = {2006},
  month = apr,
  journal = {Learning and Instruction},
  series = {Recent {{Worked Examples Research}}: {{Managing Cognitive Load}} to {{Foster Learning}} and {{Transfer}}},
  volume = {16},
  number = {2},
  pages = {170--181},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2006.02.006},
  urldate = {2018-11-06},
  file = {/Users/igormoreno/Zotero/storage/TVYXN9KC/Moreno - 2006 - When worked examples don't work Is cognitive load.pdf;/Users/igormoreno/Zotero/storage/559PZ5KY/S095947520600020X.html}
}

@article{morganTeachingFirstYearICT2015,
  title = {Teaching in {{First-Year ICT Education}} in {{Australia}}: {{Research}} and {{Practice}}},
  author = {Morgan, Michael and Sheard, Judy and Butler, Matthew and Falkner, Katrina},
  year = {2015},
  volume = {160},
  pages = {10},
  abstract = {This paper details current research and teaching practice for first-year Information and Communications Technology (ICT) students at Australian universities. The project aims to record and disseminate good practice in first-year ICT teaching in Australia. The aim of the paper is to examine how academics are addressing the challenge of engaging first-year ICT students in the learning process. Two sources of data are used, a systematic survey of research literature from the last five years and detailed interviews of 30 academics involved in first-year teaching duties. Academics from 25 Australian universities represented a range of universities, including six from the Go8 group, three from the ATN group, and five from the IRU group. The paper highlights current areas of research, any gaps in the research literature, examples of current good teaching practices, and recommendations for further research. .},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/DZHH3DPG/Morgan et al - 2015 - Teaching in First-Year ICT Education in Australia.pdf}
}

@book{moronukiHaskellProgramming,
  title = {Haskell {{Programming}}},
  author = {Moronuki, Julie, Christopher Allen and Moronuki, Julie, Christopher Allen},
  urldate = {2021-10-03},
  abstract = {A Haskell book for beginners that works for non-programmers and experienced hackers alike.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/Z9SWQRYR/Sample-Chapters-2-3-4.pdf;/Users/igormoreno/Zotero/storage/E3HFS2UM/haskellbook.com.html}
}

@inproceedings{morrisonAdaptingDisciplinaryCommons2012,
  title = {Adapting the Disciplinary Commons Model for High School Teachers: Improving Recruitment, Creating Community},
  booktitle = {{{ICER}}},
  author = {Morrison, Briana B and Ni, Lijun and Guzdial, Mark},
  year = {2012},
  pages = {8},
  abstract = {The Disciplinary Commons (DC) is a model of teacher professional development that encourages members of the group to reflect upon their teaching practices, develop a community, and, more broadly, to become more scholarly about their teaching. The DC involves a series of monthly meetings where university faculty members examine their course in detail while producing a course portfolio. Evaluation of the early DC's suggests that they successfully created a sense of community and sharing among the participants. We have adapted the original model to a new audience, high school computing teachers. The adapted model maintains the key aspects of the original model while adding two new, important goals for this new audience: improving recruitment and creating community. The high school teacher audience particularly needed strategies for recruiting students and was in greater need of community. We present evaluation evidence suggesting that we achieved the design goals in a replicable model, including a substantial increase (over 300\%) in recruiting students.},
  langid = {english},
  annotation = {00028},
  file = {/Users/igormoreno/Zotero/storage/VWM74FHP/Morrison et al - 2012 - Adapting the disciplinary commons model for high school teachers.pdf}
}

@article{morrisonCuriousCaseLoops2020,
  title = {The Curious Case of Loops},
  author = {Morrison, Briana B. and Margulieux, Lauren E. and Decker, Adrienne},
  year = {2020},
  month = apr,
  journal = {Computer Science Education},
  volume = {30},
  number = {2},
  pages = {127--154},
  publisher = {{Routledge}},
  issn = {0899-3408},
  doi = {10.1080/08993408.2019.1707544},
  urldate = {2022-01-21},
  abstract = {Background and Context Subgoal labeled worked examples have been extensively researched, but the research has been reported piecemeal. This paper aggregates data from three studies, including data previously unreported, to holistically examine the effect of subgoal labeled worked examples across three student populations and across different instructional designs.Objective By aggregating the data, we provide more statistical power for somewhat surprising yet replicable results. We discuss which results generalize across populations, focusing on a stable effect size for subgoal labels in programming instruction.Method We use descriptive and inferential statistics to examine the data collected from different student populations and different classroom instructional designs. We concentrate on the effect size across samples of the intervention for generalization.Findings Students using two variations of subgoal labeled instructional materials perform better than the others: the group that was given the subgoal labels with farther transfer between worked examples and practice problems and the group that constructed their own subgoal labels with nearer transfer between worked examples and practice problems.},
  keywords = {CS1,experiment,subgoal label,Worked example},
  file = {/Users/igormoreno/Zotero/storage/RQV8MADQ/Morrison et al. - 2020 - The curious case of loops.pdf;/Users/igormoreno/Zotero/storage/HGIJ2RWZ/08993408.2019.html}
}

@inproceedings{morrisonDualModalityCode2017,
  title = {Dual {{Modality Code Explanations}} for {{Novices}}: {{Unexpected Results}}},
  shorttitle = {Dual {{Modality Code Explanations}} for {{Novices}}},
  booktitle = {Proceedings of the 2017 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Morrison, Briana B.},
  year = {2017},
  month = aug,
  pages = {226--235},
  publisher = {{ACM}},
  address = {{Tacoma Washington USA}},
  doi = {10.1145/3105726.3106191},
  urldate = {2021-06-14},
  abstract = {The research in both cognitive load theory and multimedia principles for learning indicates presenting information using both diagrams and accompanying audio explanations yields better learning performance than using diagrams with text explanations. While this is a common practice in introductory programming courses, often called ``live coding,'' it has yet to be empirically tested. This paper reports on an experiment to determine if auditory explanations of code result in improved learning performance over written explanations. Students were shown videos explaining short code segments one of three ways: text only explanations, auditory only explanations, or both text and auditory explanations, thus replicating experiments from other domains. The results from this study do not support the ndings from other disciplines and we o er explanations for why this may be the case.},
  isbn = {978-1-4503-4968-0},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/EFTLE5RJ/Morrison - 2017 - Dual Modality Code Explanations for Novices Unexp.pdf}
}

@inproceedings{morrisonLearningLoopsReplication2016,
  ids = {morrisonLearningLoopsReplication2016a},
  title = {Learning {{Loops}}: {{A Replication Study Illuminates Impact}} of {{HS Courses}}},
  shorttitle = {Learning {{Loops}}},
  booktitle = {Proceedings of the 2016 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Morrison, Briana B. and Decker, Adrienne and Margulieux, Lauren E.},
  year = {2016},
  month = aug,
  pages = {221--230},
  publisher = {{ACM}},
  address = {{Melbourne VIC Australia}},
  doi = {10.1145/2960310.2960330},
  urldate = {2020-11-17},
  abstract = {A recent study about the effectiveness of subgoal labeling in an introductory computer science programming course both supported previous research and produced some puzzling results. In this study, we replicate the experiment with a different student population to determine if the results are repeatable. We also gave the experimental task to students in a follow-on course to explore if they had indeed mastered the programming concept. We found that the previous puzzling results were repeated. In addition, for the novice programmers, we found a statistically significant difference in performance based on whether the student had previous programming courses in high school. However, this performance difference disappears in a follow-on course after all students have taken an introductory computer science programming course. The results of this study have implications for how quickly students are evaluated for mastery of knowledge and how we group students in introductory programming courses.},
  isbn = {978-1-4503-4449-4},
  langid = {english},
  keywords = {design,experimentation,measurement},
  file = {/Users/igormoreno/Zotero/storage/AN283AU7/Morrison et al. - 2016 - Learning Loops A Replication Study Illuminates Im.pdf;/Users/igormoreno/Zotero/storage/N8A8FEC6/Morrison et al. - 2016 - Learning Loops A Replication Study Illuminates Im.pdf;/Users/igormoreno/Zotero/storage/WVM4TJAM/Morrison et al. - 2016 - Learning Loops A Replication Study Illuminates Im.pdf}
}

@article{morrisonPhysicalProgrammingBlind2019,
  title = {Physical {{Programming}} for {{Blind}} and {{Low Vision Children}} at {{Scale}}},
  author = {Morrison, Cecily and Villar, Nicolas and {Hadwen-Bennett}, Alex and Regan, Tim and Cletheroe, Daniel and Thieme, Anja and Sentance, Sue},
  year = {2019},
  month = jul,
  journal = {Human\textendash Computer Interaction},
  pages = {1--35},
  issn = {0737-0024, 1532-7051},
  doi = {10.1080/07370024.2019.1621175},
  urldate = {2020-06-22},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/ZVZFSXRQ/Morrison et al - 2019 - Physical Programming for Blind and Low Vision Children at Scale.pdf}
}

@inproceedings{morrisonSubgoalsContextWorked2015,
  title = {Subgoals, {{Context}}, and {{Worked Examples}} in {{Learning Computing Problem Solving}}},
  booktitle = {Proceedings of the Eleventh Annual {{International Conference}} on {{International Computing Education Research}}},
  author = {Morrison, Briana B. and Margulieux, Lauren E. and Guzdial, Mark},
  year = {2015},
  month = aug,
  series = {{{ICER}} '15},
  pages = {21--29},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2787622.2787733},
  urldate = {2020-10-13},
  abstract = {Recent empirical results suggest that the instructional material used to teach computing may actually overload students' cognitive abilities. Better designed materials may enhance learning by reducing unnecessary load. Subgoal labels have been shown to be effective at reducing the cognitive load during problem solving in both mathematics and science. Until now, subgoal labels have been given to students to learn passively. We report on a study to determine if giving learners subgoal labels is more or less effective than asking learners to generate subgoal labels within an introductory CS programming task. The answers are mixed and depend on other features of the instructional materials. We found that student performance gains did not replicate as expected in the introductory CS task for those who were given subgoal labels. Computer science may require different kinds of problem-solving or may generate different cognitive demands than mathematics or science.},
  isbn = {978-1-4503-3630-7},
  keywords = {cognitive load,contextual transfer,subgoal labels},
  annotation = {00087},
  file = {/Users/igormoreno/Zotero/storage/Q9GUVWZ7/Igor-Morrison et al - 2015 - Subgoals, Context, and Worked Examples in Learning Computing Problem Solving.pdf;/Users/igormoreno/Zotero/storage/THCBBQXR/Matthias-copy.pdf;/Users/igormoreno/Zotero/storage/VMHC29XC/Morrison et al - 2015 - Subgoals, Context, and Worked Examples in Learning Computing Problem Solving.pdf}
}

@article{morrisonTorinoTangibleProgramming2020,
  title = {Torino: {{A Tangible Programming Language Inclusive}} of {{Children}} with {{Visual Disabilities}}},
  shorttitle = {Torino},
  author = {Morrison, Cecily and Villar, Nicolas and Thieme, Anja and Ashktorab, Zahra and Taysom, Eloise and Salandin, Oscar and Cletheroe, Daniel and Saul, Greg and Blackwell, Alan F and Edge, Darren and Grayson, Martin and Zhang, Haiyan},
  year = {2020},
  month = may,
  journal = {Human\textendash Computer Interaction},
  volume = {35},
  number = {3},
  pages = {191--239},
  issn = {0737-0024, 1532-7051},
  doi = {10.1080/07370024.2018.1512413},
  urldate = {2020-06-22},
  abstract = {Across the world, policy initiatives are being developed to engage children with computer programming and computational thinking. Diversity and inclusion has been a strong force in this agenda, but children with disabilities have largely been omitted from the conversation. Currently, there are no age appropriate tools for teaching programming concepts and computational thinking to primary school children with visual disabilities. We address this gap through presenting the design and implementation of Torino, a tangible programming language for teaching programming concepts to children age 7-11 regardless of level of vision. In this paper, we: 1) describe the design process done in conjunction with children with visual disabilities; 2) articulate the design decisions made; and 3) report insights generated from an evaluation with 10 children with mixed visual abilities that considers how children are able to trace (read) and create (write) programs with Torino. We discuss key design trade-offs: 1) readability versus extensibility; and 2) size versus liveness. We conclude by reflecting upon how an inclusive design approach shaped the final result.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/VGJ9WFSJ/Morrison et al - 2020 - Torino.pdf}
}

@article{morschheuserHowDesignGamification2018,
  title = {How to Design Gamification? {{A}} Method for Engineering Gamified Software},
  shorttitle = {How to Design Gamification?},
  author = {Morschheuser, Benedikt and Hassan, Lobna and Werder, Karl and Hamari, Juho},
  year = {2018},
  month = mar,
  journal = {Information and Software Technology},
  volume = {95},
  pages = {219--237},
  issn = {09505849},
  doi = {10.1016/j.infsof.2017.10.015},
  urldate = {2023-06-27},
  abstract = {Objective: This paper seeks to advance the understanding of designing gamification and to provide a comprehensive method for developing gamified software. Method: We approach the research problem via a design science research approach; firstly, by synthesizing the current body of literature on gamification design methods and by interviewing 25 gamification experts, producing a comprehensive list of design principles for developing gamified software. Secondly, and more importantly, we develop a detailed method for engineering of gamified software based on the gathered knowledge and design principles. Finally, we conduct an evaluation of the artifacts via interviews of ten gamification experts and implementation of the engineering method in a gamification project. Results: As results of the study, we present the method and key design principles for engineering gamified software. Based on the empirical and expert evaluation, the developed method was deemed as comprehensive, implementable, complete, and useful. We deliver a comprehensive overview of gamification guidelines and shed novel insights into the nature of gamification development and design discourse. Conclusion: This paper takes first steps towards a comprehensive method for gamified software engineering. 1. Introduction During recent years, the enhancement of software via design features borrowed from (video) games, also known as ``gamification'' [1], has become a notable development in many software engineering projects [2,3]. Gamification primarily aims at increasing users' motivations towards activities or use of technology, and thereby, increasing the quantity and quality of the output of these activities [1,3,4]. Gamification has since been employed in a variety of fields such as in education [5\textendash 8], health management [9\textendash 11], enterprise systems [12\textendash 14] and governmental services [15,16]. While literature reviews},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/U98HYHMV/Morschheuser et al. - 2018 - How to design gamification A method for engineeri.pdf}
}

@book{moserNachSechsJahren2011,
  title = {{Nach sechs Jahren Primarschule: Deutsch, Mathematik und motivational-emotionales Befinden am Ende der 6. Klasse}},
  shorttitle = {{Nach sechs Jahren Primarschule}},
  author = {Moser, Urs and Angelone, Domenico and Hollenweger, Judith and Buff, Alex},
  year = {2011},
  publisher = {{Bildungsdirektion Kanton Z\"urich}},
  address = {{Z\"urich}},
  abstract = {Seit dem Jahr 2003 begleitet die Bildungsdirektion einen Teil der damals eingeschulten Sch\"u- lerinnen und Sch\"uler im Kanton Z\"urich auf ihrer Schullaufbahn. Die Erhebungen geben wis- senschaftlich abgest\"utzte Hinweise zu den St\"arken und Schw\"achen unseres Bildungswesens. Im Sommer 2009 wurde, nach 2003 und 2006, die dritte Lernstandserhebung im Kanton Z\"u- rich durchgef\"uhrt. Ziel der hier vorgelegten Erhebung in den sechsten Klassen der Primarschule ist es, den Lern- stand in Deutsch und Mathematik festzustellen und zu \"uberpr\"ufen, in welchem Ausmass die Sch\"ulerinnen und Sch\"uler die Ziele des Lehrplans erreichen und welche Lernfortschritte sie w\"ahrend der gesamten Primarschulzeit gemacht haben. Die Studie geht der Frage nach, wie stark Unterschiede im Lernzuwachs von Sch\"ulerinnen und Sch\"ulern durch ihre famili\"are Herkunft, ihren Migrationshintergrund oder ihr Geschlecht erkl\"art werden k\"onnen. Gepr\"uft wird auch, ob und wie solche Merkmale die Zuteilung in eine der Sekundarschulabteilungen oder ins Gymnasium beeinflussen. Es wird analysiert, welche Auswirkungen die soziale Zusammensetzung einer Klasse und der Anteil von Sch\"ulerinnen und Sch\"uler mit Deutsch als Zweitsprache auf den Lernfortschritt haben. Untersucht wird auch, wie sich Lernmotivation und schulisches Selbstvertrauen \"uber den Zeitraum der ersten sechs Jahre ver\"andern und welche Wechselwirkungen zu den schulischen Leistungen beste- hen. Zur besseren Lesbarkeit gliedert sich der vorliegende Bericht in zwei Teile. Der erste Teil m\"ochte die Resultate in gut verst\"andlicher Form beschreiben. Der zweite Teil beschreibt die verwendeten statistischen Verfahren und pr\"asentiert ausgew\"ahlte Resultate detaillierter. Die Forschenden der Universit\"at Z\"urich und der P\"adagogischen Hochschule Z\"urich haben mit grossen Fachwissen und hohem Engagement eine sorgf\"altige Analyse des Lernstands auf der Z\"urcher Primarschule erstellt. F\"ur alle Personen, die sich mit dem Z\"urcher Volksschulwesen und dessen Weiterentwicklung besch\"aftigen, will dieser Bericht eine reichhaltige Quelle an Informationen und Erkenntnissen zur Primarstufe und den \"Ubertritt in die nachfolgende Schulstufe sein.},
  isbn = {978-3-905839-18-0},
  langid = {ngerman},
  annotation = {OCLC: 774822233},
  file = {/Users/igormoreno/Zotero/storage/TW4MLQ33/Moser et al - 2011 - Nach sechs Jahren Primarschule.pdf}
}

@article{moshmanMetacognitiveTheoriesRevisited2018,
  title = {Metacognitive {{Theories Revisited}}},
  author = {Moshman, David},
  year = {2018},
  month = jun,
  journal = {Educational Psychology Review},
  volume = {30},
  number = {2},
  pages = {599--606},
  issn = {1573-336X},
  doi = {10.1007/s10648-017-9413-7},
  urldate = {2018-11-09},
  abstract = {``Metacognitive theories,'' an article Gregg Schraw and I published in Educational Psychology Review in 1995, has been cited in over a thousand scholarly publications. In this follow-up, dedicated to Gregg and written after his recent death, I provide a brief overview of our 1995 article and then reflect on it in four ways. First, I consider the development of the concept of metacognition prior to 1995, including its emergence and use in previous writings by each co-author. Then, I turn to the collaboration itself, including the interplay of complementary conceptions and the construction of new ideas. Third, I consider the article's citation history and the role it has played in the subsequent literature. Finally, I discuss research on metacognition since 1995, including subsequent work on epistemic cognition by each of the co-authors.},
  langid = {english},
  keywords = {Collaborative theorizing,Epistemic cognition,Metacognition,Metacognitive theories,Self-regulation,Strong},
  annotation = {00025},
  file = {/Users/igormoreno/Zotero/storage/QXRSVXHN/Moshman - 2018 - Metacognitive Theories Revisited.pdf}
}

@book{mossenbockSprechenSieJava2011,
  title = {Sprechen {{Sie Java}}?},
  author = {M{\"o}ssenb{\"o}ck, Hanspeter},
  year = {2011},
  edition = {4},
  publisher = {{dpunkt.verlag}},
  address = {{Heidelberg}},
  isbn = {978-3-89864-595-9},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/T23QX75M/Mössenböck - 2011 - Sprechen Sie Java.pdf}
}

@article{mossesModularStructuralOperational2004,
  title = {Modular Structural Operational Semantics},
  author = {Mosses, Peter D},
  year = {2004},
  month = jul,
  journal = {The Journal of Logic and Algebraic Programming},
  series = {Structural {{Operational Semantics}}},
  volume = {60--61},
  pages = {195--228},
  issn = {1567-8326},
  doi = {10.1016/j.jlap.2004.03.008},
  urldate = {2018-12-02},
  abstract = {Modular SOS (MSOS) is a variant of conventional Structural Operational Semantics (SOS). Using MSOS, the transition rules for each construct of a programming language can be given incrementally, once and for all, and do not need reformulation when further constructs are added to the language. MSOS thus provides an exceptionally high degree of modularity in language descriptions, removing a shortcoming of the original SOS framework. After sketching the background and reviewing the main features of SOS, the paper explains the crucial differences between SOS and MSOS, and illustrates how MSOS descriptions are written. It also discusses standard notions of semantic equivalence based on MSOS. Appendix A shows how the illustrative MSOS rules given in the paper would be formulated in conventional SOS.},
  keywords = {Modularity,MSOS,SOS,Structural operational semantics},
  file = {/Users/igormoreno/Zotero/storage/VHZP9J9G/Mosses - 2004 - Modular structural operational semantics.pdf;/Users/igormoreno/Zotero/storage/VW3QB6WE/S156783260400027X.html}
}

@inproceedings{mostromConcreteExamplesAbstraction2008,
  title = {Concrete Examples of Abstraction as Manifested in Students' Transformative Experiences},
  booktitle = {Proceeding of the Fourth International Workshop on {{Computing}} Education Research - {{ICER}} '08},
  author = {Mostr{\"o}m, Jan Erik and Boustedt, Jonas and Eckerdal, Anna and McCartney, Robert and Sanders, Kate and Thomas, Lynda and Zander, Carol},
  year = {2008},
  pages = {125--136},
  publisher = {{ACM Press}},
  address = {{Sydney, Australia}},
  doi = {10.1145/1404520.1404533},
  urldate = {2018-10-02},
  abstract = {This paper examines transformational learning experiences of computing students as a way to better understand threshold concepts in computing. From empirical evidence we found that students often describe transformative experiences as learning situations in which they were led to use various kinds of abstraction, for example modularity, data abstraction, inheritance, polymorphism, reuse, design patterns, and complexity. Some students describe an abstract concept as coming first, and then needing to be made concrete though application; others describe transformations in which they learn the advantages of these abstract concepts from their experience of not using them.},
  isbn = {978-1-60558-216-0},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/8RCQUTYT/Moström et al - 2008 - Concrete examples of abstraction as manifested in students' transformative.pdf}
}

@article{mouzaResettingEducationalTechnology2017,
  title = {Resetting Educational Technology Coursework for Pre-Service Teachers: {{A}} Computational Thinking Approach to the Development of Technological Pedagogical Content Knowledge ({{TPACK}})},
  shorttitle = {Resetting Educational Technology Coursework for Pre-Service Teachers},
  author = {Mouza, Chrystalla and Yang, Hui and Pan, Yi-Cheng and Yilmaz Ozden, Sule and Pollock, Lori},
  year = {2017},
  month = jul,
  journal = {Australasian Journal of Educational Technology},
  volume = {33},
  number = {3},
  issn = {1449-5554, 1449-3098},
  doi = {10.14742/ajet.3521},
  urldate = {2020-06-22},
  abstract = {This study presents the design of an educational technology course for pre-service teachers specific to incorporating computational thinking in K-8 classroom settings. Subsequently, it examines how participation in the course influences pre-service teachers' dispositions and knowledge of computational thinking concepts and the ways in which such knowledge can be combined with content and pedagogy to promote meaningful student outcomes. Data were collected from a self-reported survey and case reports focusing on the design, implementation, and outcomes of computational thinking related lessons in K-8 classrooms. Results indicated that the course positively influenced pre-service teachers' knowledge of computational thinking concepts, tools, and practices. Yet, some participants demonstrated only surface understanding of computational thinking and were unable to design lessons that meaningfully integrated computational thinking concepts and tools with disciplinary content and pedagogy. Findings have implications for the design of teacher education experiences that help prepare pre-service teachers develop technological pedagogical content knowledge in relation to computational thinking concepts and practices.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/AU4TV59I/Mouza et al - 2017 - Resetting educational technology coursework for pre-service teachers.pdf}
}

@article{muehlingConceptLandscapesNew2017,
  title = {Concept {{Landscapes}} - {{A New Way}} of {{Using Concept Maps}}},
  author = {Muehling, Andreas},
  year = {2017},
  month = dec,
  journal = {JEDM | Journal of Educational Data Mining},
  volume = {9},
  number = {2},
  pages = {1--30},
  issn = {2157-2100},
  urldate = {2019-09-27},
  copyright = {Copyright (c) 2017 JEDM - Journal of Educational Data Mining},
  langid = {english},
  keywords = {To Read},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/72YYC4WW/Muehling - 2017 - Concept Landscapes - A New Way of Using Concept Maps.pdf;/Users/igormoreno/Zotero/storage/8R2DFSRW/138.html}
}

@article{muhlingAggregatingConceptMap2016,
  title = {Aggregating Concept Map Data to Investigate the Knowledge of Beginning {{CS}} Students},
  author = {M{\"u}hling, Andreas},
  year = {2016},
  month = jul,
  journal = {Computer Science Education},
  volume = {26},
  number = {2-3},
  pages = {176--191},
  issn = {0899-3408},
  doi = {10.1080/08993408.2016.1241340},
  urldate = {2019-09-27},
  abstract = {Concept maps have a long history in educational settings as a tool for teaching, learning, and assessing. As an assessment tool, they are predominantly used to extract the structural configuration of learners' knowledge. This article presents an investigation of the knowledge structures of a large group of beginning CS students. The investigation is based on a method that collects, aggregates, and automatically analyzes the concept maps of a group of learners as a whole, to identify common structural configurations and differences in the learners' knowledge. It shows that those students who have attended CS education in their secondary school life have, on average, configured their knowledge about typical core CS/OOP concepts differently. Also, artifacts of their particular CS curriculum are visible in their externalized knowledge. The data structures and analysis methods necessary for working with concept landscapes have been implemented as a GNU R package that is freely available.},
  keywords = {cluster analysis,Concept maps,educational data mining,knowledge structures,OOP,Pathfinder networks},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/VWLZ6D9Z/08993408.2016.html}
}

@inproceedings{muhlingAssessingStudentsUnderstanding2019,
  title = {Assessing Students' Understanding of Object Structures},
  booktitle = {Proceedings of the 19th {{Koli Calling International Conference}} on {{Computing Education Research}}},
  author = {M{\"u}hling, Andreas and Schulte, Carsten and Bennedsen, Jens and Budde, Lea and {Gro{\ss}e-B{\"o}lting}, Gregor},
  year = {2019},
  month = nov,
  pages = {1--10},
  publisher = {{ACM}},
  address = {{Koli Finland}},
  doi = {10.1145/3364510.3364511},
  urldate = {2020-06-22},
  abstract = {We present a theoretically derived and empirically tested competence model related to the concepts of ``object state'' and ``references'' that both form an important part of object-oriented programming. Our model characterizes different levels of programming capability with a focus on possible learning stages of beginning learners. It is based on the notion of understanding objects and their interaction with each other during the runtime of a program. Based on a hierarchical description of our theory, we derive a two-dimensional structure that separates the hierarchy into two facets "structure" (how are objects structured/stored) and "behaviour" (how do objects interact and access each other). Based on this, we have developed a set of items and collected data in a CS1 course (N = 195) to validate the item-set. We analyzed the data using a Rasch model to check item difficulty and the presence of different difficulty levels, and factor analysis to check the dimensions of the model. Furthermore, we argue for the validity of the items with the help of additional data collected from the students. The results indicate that our theoretical assumptions are correct and that the items will be usable with some minor modifications.},
  isbn = {978-1-4503-7715-7},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/8ZWYX7SR/Mühling et al - 2019 - Assessing students' understanding of object structures.pdf}
}

@phdthesis{mullerDesigningEffectiveMultimedia2008,
  title = {Designing {{Effective Multimedia}} for {{Physics Education}}},
  author = {Muller, Derek Alexander},
  year = {2008},
  langid = {english},
  school = {University of Sidney},
  keywords = {InterestingDissertation},
  annotation = {00102},
  file = {/Users/igormoreno/Zotero/storage/YV9N8EJA/Muller - Designing Effective Multimedia for Physics Educati.pdf}
}

@inproceedings{mullerPatternorientedInstructionIts2007,
  title = {Pattern-Oriented {{Instruction}} and {{Its Influence}} on {{Problem Decomposition}} and {{Solution Construction}}},
  booktitle = {Proceedings of the 12th {{Annual SIGCSE Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Muller, Orna and Ginat, David and Haberman, Bruria},
  year = {2007},
  series = {{{ITiCSE}} '07},
  pages = {151--155},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1268784.1268830},
  urldate = {2018-12-11},
  abstract = {Novices often experience difficulties in problem analysis and solution construction. Pattern-oriented instruction (POI) is a pedagogical approach based on incorporating patterns into instruction design. It is well-grounded in cognitive theories concerning knowledge construction and organization as well as the acquisition of expertise in problem solving. We show that the incorporation of algorithmic patterns through POI may enhance the construction of algorithmic problem-solving knowledge. Findings of a comparative research study showed that novices who studied according to the POI approach exhibited better problem-solving competence than those who studied in a traditional manner. Specifically, they were more competent in problem decomposition and solution construction.},
  isbn = {978-1-59593-610-3},
  keywords = {algorithmic patterns,pattern-oriented instruction,problem decomposition,problem solving},
  file = {/Users/igormoreno/Zotero/storage/BAXJYQWG/Muller et al - 2007 - Pattern-oriented Instruction and Its Influence on Problem Decomposition and.pdf}
}

@book{MultipleChoiceQuestions,
  title = {Multiple {{Choice Questions Not Considered Harmful}}},
  abstract = {Increasingly, academics are confronted with issues associated with assessment in large classes, arising from a combination of factors including higher student enrolments and the introduction of a trimester of study in many universities. The resulting increased time pressures on marking are causing many academics to search for alternative forms of assessment. University teachers are making more frequent use of multiple choice questions as a matter of expediency and in some cases, the quality of the assessment is being neglected. This describes the current situation in Information Technology. The aim of this paper is to provide practical guidelines in the form of a checklist for lecturers who wish to write tests containing multiple choice questions. Some of the points raised may be considered common knowledge for those teachers with a background in Education, however not all Information Technology lecturers would fall into this category. While the intended users of the checklist are Information Technology lecturers who, in general, are unlikely to be familiar with many of the matters discussed, teachers in other disciplines may find it a useful reference. In addition to the checklist, this paper also discusses the major criticism of multiple choice questions (that they do not test anything more than just straight recall of facts) and examines ways of overcoming this misconception. Keywords: multiple choice questions, assessment, Bloom, large class assessment. 1},
  file = {/Users/igormoreno/Zotero/storage/DSWMD95U/Multiple Choice Questions Not Considered Harmful.pdf;/Users/igormoreno/Zotero/storage/WX4CA4Q9/download.html}
}

@book{mundryLeaderGuideScience2009,
  title = {A {{Leader}}{${'}$}s {{Guide}} to {{Science Curriculum Topic Study}}},
  author = {Mundry, Susan E. and Keeley, Page D. and Landel, Carolyn J.},
  year = {2009},
  month = nov,
  edition = {Pap/Com edition},
  publisher = {{Corwin}},
  address = {{Thousand Oaks, Calif}},
  abstract = {From professional development designs to handouts and PowerPoint slides, this guide has everything science leaders need to facilitate CTS and improve science teaching in schools!},
  isbn = {978-1-4129-7817-0},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/WTGJBYN9/Chapter1.pdf;/Users/igormoreno/Zotero/storage/X59RWWWJ/Preface.pdf;/Users/igormoreno/Zotero/storage/YEEW92T9/CTS And Science Assessment.pdf}
}

@article{murphyDebuggingGoodBad,
  title = {Debugging: {{The Good}}, the {{Bad}}, and the {{Quirky}} \textendash{} a {{Qualitative Analysis}} of {{Novices}}' {{Strategies}}},
  author = {Murphy, Laurie and Lewandowski, Gary and McCauley, Ren{\'e}e},
  pages = {5},
  abstract = {A qualitative analysis of debugging strategies of novice Java programmers is presented. The study involved 21 CS2 students from seven universities in the U.S. and U.K. Subjects ``warmed up'' by coding a solution to a typical introductory problem. This was followed by an exercise debugging a syntactically correct version with logic errors. Many novices found and fixed bugs using strategies such as tracing, commenting out code, diagnostic print statements and methodical testing. Some competently used online resources and debuggers. Students also used pattern matching to detect errors in code that ``just didn't look right''. However, some used few strategies, applied them ineffectively, or engaged in other unproductive behaviors. This led to poor performance, frustration for some, and occasionally the introduction of new bugs. Pedagogical implications and suggestions for future research are discussed.},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/SWX8VTPD/Murphy et al. - Debugging The Good, the Bad, and the Quirky – a Q.pdf}
}

@article{mytkowiczProducingWrongData2009,
  ids = {mytkowiczProducingWrongData2009a},
  title = {Producing Wrong Data without Doing Anything Obviously Wrong!},
  author = {Mytkowicz, Todd and Diwan, Amer and Hauswirth, Matthias and Sweeney, Peter F.},
  year = {2009},
  month = mar,
  journal = {ACM SIGPLAN Notices},
  volume = {44},
  number = {3},
  pages = {265--276},
  issn = {0362-1340},
  doi = {10.1145/1508284.1508275},
  urldate = {2020-09-23},
  abstract = {This paper presents a surprising result: changing a seemingly innocuous aspect of an experimental setup can cause a systems researcher to draw wrong conclusions from an experiment. What appears to be an innocuous aspect in the experimental setup may in fact introduce a significant bias in an evaluation. This phenomenon is called measurement bias in the natural and social sciences. Our results demonstrate that measurement bias is significant and commonplace in computer system evaluation. By significant we mean that measurement bias can lead to a performance analysis that either over-states an effect or even yields an incorrect conclusion. By commonplace we mean that measurement bias occurs in all architectures that we tried (Pentium 4, Core 2, and m5 O3CPU), both compilers that we tried (gcc and Intel's C compiler), and most of the SPEC CPU2006 C programs. Thus, we cannot ignore measurement bias. Nevertheless, in a literature survey of 133 recent papers from ASPLOS, PACT, PLDI, and CGO, we determined that none of the papers with experimental results adequately consider measurement bias. Inspired by similar problems and their solutions in other sciences, we describe and demonstrate two methods, one for detecting (causal analysis) and one for avoiding (setup randomization) measurement bias.},
  keywords = {bias,measurement,performance},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/WWD7QLIZ/Mytkowicz et al. - 2009 - Producing wrong data without doing anything obviou.pdf}
}

@article{nackeMaturingGamificationResearch2017,
  title = {The Maturing of Gamification Research},
  author = {Nacke, Lennart E. and Deterding, Sebastian},
  year = {2017},
  month = jun,
  journal = {Computers in Human Behavior},
  volume = {71},
  pages = {450--454},
  issn = {07475632},
  doi = {10.1016/j.chb.2016.11.062},
  urldate = {2023-06-27},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/WE8L7GGP/Nacke and Deterding - 2017 - The maturing of gamification research.pdf}
}

@article{naglieriExploratoryStudyPlanning1989,
  title = {An Exploratory Study of Planning, Attention, Simultaneous, and Successive Cognitive Processes},
  author = {Naglieri, Jack A. and Prewett, Peter N. and Bardos, Achilles N.},
  year = {1989},
  month = dec,
  journal = {Journal of School Psychology},
  volume = {27},
  number = {4},
  pages = {347--364},
  issn = {0022-4405},
  doi = {10.1016/0022-4405(89)90012-5},
  urldate = {2018-12-02},
  abstract = {Although there has been a considerable amount of research on simultaneous and successive processing (Luria's second functional unit) by Das and others, there have been relatively few investigations into the measurement of attention and planning (the first and third functional units, respectively). The purpose of this investigation was to examine the factorial validity of tasks designed to measure cognitive processing in each of Luria's three functional units. A sample of 112 normal fourth- and fifth-grade students were administered nine experimental tasks chosen or developed according to the theoretical components of planning, attention, simultaneous, and successive processes. Principal factor analyses (orthogonal and oblique) with rotation of four factors resulted in solutions that closely matched the anticipated groupings based on a structural analysis of the tasks. General support for the feasibility of measurement of Luria's cognitive processing model, and the need to further develop and refine these and other experimental tasks, was obtained.},
  file = {/Users/igormoreno/Zotero/storage/B9U7BVPD/Naglieri et al - 1989 - An exploratory study of planning, attention, simultaneous, and successive.pdf;/Users/igormoreno/Zotero/storage/G9LUPZVB/0022440589900125.html}
}

@article{nam-hwaTeachingConceptualUnderstanding2004,
  title = {Teaching for {{Conceptual Understanding}}},
  shorttitle = {{{NSTA Science Store}}},
  author = {{Nam-Hwa}, Kang and {Howren, Carrie}},
  year = {2004},
  month = sep,
  journal = {Science and Children},
  volume = {42},
  number = {1},
  pages = {28--32},
  urldate = {2019-10-31},
  abstract = {One of the most difficult jobs of elementary school teachers is teaching science for conceptual understanding. Conceptual understanding requires students to organize facts and ideas into a meaningful concept in science. Facts and concepts form webs that can help students make connections between the concepts of science and their experiences. Moving beyond rote memorization of facts, conceptual understanding enables students to align intuitive ideas with scientific ones, making meaningful connections. Therefore, students can apply their understanding of concepts to multiple contexts. This article describes a unit to develop second-grade students' conceptual understanding of Earth's movement.},
  langid = {english},
  keywords = {To Read},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/FFDJAU8B/Nam-Hwa and Howren, Carrie - 2004 - Teaching for Conceptual Understanding.pdf;/Users/igormoreno/Zotero/storage/68EQDULQ/product_detail.html}
}

@article{nandiFunctionalProgrammingCompiling2018,
  title = {Functional Programming for Compiling and Decompiling Computer-Aided Design},
  author = {Nandi, Chandrakana and Wilcox, James R. and Panchekha, Pavel and Blau, Taylor and Grossman, Dan and Tatlock, Zachary},
  year = {2018},
  month = jul,
  journal = {Proceedings of the ACM on Programming Languages},
  volume = {2},
  number = {ICFP},
  pages = {99:1--99:31},
  doi = {10.1145/3236794},
  urldate = {2023-01-18},
  abstract = {Desktop-manufacturing techniques like 3D printing are increasingly popular because they reduce the cost and complexity of producing customized objects on demand. Unfortunately, the vibrant communities of early adopters, often referred to as "makers," are not well-served by currently available software pipelines. Users today must compose idiosyncratic sequences of tools which are typically repurposed variants of proprietary software originally designed for expert specialists. This paper proposes fundamental programming-languages techniques to bring improved rigor, reduced complexity, and new functionality to the computer-aided design (CAD) software pipeline for applications like 3D-printing. Compositionality, denotational semantics, compiler correctness, and program synthesis all play key roles in our approach, starting from the perspective that solid geometry is a programming language. Specifically, we define a purely functional language for CAD called LambdaCAD and a polygon surface-mesh intermediate representation. We then define denotational semantics of both languages to 3D solids and a compiler from CAD to mesh accompanied by a proof of semantics preservation. We illustrate the utility of this foundation by developing a novel synthesis algorithm based on evaluation contexts to "reverse compile" difficult-to-edit meshes downloaded from online maker communities back to more-editable CAD programs. All our prototypes have been implemented in OCaml to enable further exploration of functional programming for desktop manufacturing.},
  keywords = {3D printing,denotational semantics,language design,program synthesis},
  file = {/Users/igormoreno/Zotero/storage/DK586JT7/Nandi et al - 2018 - Functional programming for compiling and decompiling computer-aided design.pdf}
}

@inproceedings{nandiSynthesizingStructuredCAD2020,
  title = {Synthesizing Structured {{CAD}} Models with Equality Saturation and Inverse Transformations},
  booktitle = {Proceedings of the 41st {{ACM SIGPLAN Conference}} on {{Programming Language Design}} and {{Implementation}}},
  author = {Nandi, Chandrakana and Willsey, Max and Anderson, Adam and Wilcox, James R. and Darulova, Eva and Grossman, Dan and Tatlock, Zachary},
  year = {2020},
  month = jun,
  series = {{{PLDI}} 2020},
  pages = {31--44},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3385412.3386012},
  urldate = {2023-01-18},
  abstract = {Recent program synthesis techniques help users customize CAD models(e.g., for 3D printing) by decompiling low-level triangle meshes to Constructive Solid Geometry (CSG) expressions. Without loops or functions, editing CSG can require many coordinated changes, and existing mesh decompilers use heuristics that can obfuscate high-level structure. This paper proposes a second decompilation stage to robustly "shrink" unstructured CSG expressions into more editable programs with map and fold operators. We present Szalinski, a tool that uses Equality Saturation with semantics-preserving CAD rewrites to efficiently search for smaller equivalent programs. Szalinski relies on inverse transformations, a novel way for solvers to speculatively add equivalences to an E-graph. We qualitatively evaluate Szalinski in case studies, show how it composes with an existing mesh decompiler, and demonstrate that Szalinski can shrink large models in seconds.},
  isbn = {978-1-4503-7613-6},
  keywords = {Computer-Aided Design,Decompilation,Equality Saturation,Program Synthesis},
  file = {/Users/igormoreno/Zotero/storage/FPCK6MZ2/Nandi et al - 2020 - Synthesizing structured CAD models with equality saturation and inverse.pdf}
}

@article{napsExploringRoleVisualization,
  title = {Exploring the {{Role}} of {{Visualization}} and {{Engagement}} in {{Computer Science Education}}},
  author = {Naps, Thomas L and Fleischer, Rudolf and McNally, Myles},
  pages = {22},
  abstract = {Visualization technology can be used to graphically illustrate various concepts in computer science. We argue that such technology, no matter how well it is designed, is of little educational value unless it engages learners in an active learning activity. Drawing on a review of experimental studies of visualization effectiveness, we motivate this position against the backdrop of current attitudes and best practices with respect to visualization use. We suggest a new taxonomy of learner engagement with visualization technology. Grounded in Bloom's wellrecognized taxonomy of understanding, we suggest metrics for assessing the learning outcomes to which such engagement may lead. Based on these taxonomies of engagement and effectiveness metrics, we present a framework for experimental studies of visualization effectiveness. Interested computer science educators are invited to collaborate with us by carrying out studies within this framework. acknowledged in a section at the end of this report.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/443V8YGB/Naps et al - Exploring the Role of Visualization and Engagement in Computer Science Education.pdf}
}

@article{nassiFlowchartTechniquesStructured1973,
  title = {Flowchart Techniques for Structured Programming},
  author = {Nassi, I. and Shneiderman, B.},
  year = {1973},
  month = aug,
  journal = {ACM SIGPLAN Notices},
  volume = {8},
  number = {8},
  pages = {12--26},
  issn = {0362-1340},
  doi = {10.1145/953349.953350},
  urldate = {2021-05-24},
  abstract = {With the advent of structured programming and GOTO-less programming a method is needed to model computation in simply ordered structures, each representing a complete thought possibly defined in terms of other thoughts as yet undefined. A model is needed which prevents unrestricted transfers of control and has a control structure closer to languages amenable to structured programming. We present an attempt at such a model.},
  file = {/Users/igormoreno/Zotero/storage/BXGW8RE9/rejection_letter.pdf;/Users/igormoreno/Zotero/storage/EW2WQWEW/Nassi and Shneiderman - 1973 - Flowchart techniques for structured programming.pdf}
}

@techreport{nationalcentreforcomputingeducationImprovingExplanationsLearning2020,
  title = {Improving Explanations and Learning Activities in Computing Using Semantic Waves},
  author = {{National Centre for Computing Education}},
  year = {2020},
  month = feb,
  pages = {2},
  address = {{Canterbury, United Kingdom}},
  institution = {{National Centre for Computing Education}},
  urldate = {2021-04-03},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/GANP5L8B/National Centre for Computing Education - 2020 - Improving explanations and learning activities in computing using semantic waves.pdf}
}

@techreport{nationalcentreforcomputingeducationImprovingProgramComprehension2021,
  title = {Improving Program Comprehension through {{Parson}}'s {{Problems}}},
  shorttitle = {Quick {{Read}}},
  author = {{National Centre for Computing Education}},
  year = {2021},
  month = feb,
  pages = {2},
  institution = {{National Centre for Computing Education}},
  urldate = {2021-04-03},
  abstract = {One tool that can help learners develop program comprehension is Parson's Problems, which are exercises that require learners to rearrange lines of code into the correct sequence.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/D835W9MC/National Centre for Computing Education - 2021 - Improving program comprehension through Parson’s Problems.pdf;/Users/igormoreno/Zotero/storage/B3ZMIDL8/quick-read-improving-program-comprehension-throughparsons-problems.html}
}

@techreport{nationalcentreforcomputingeducationThoughtfulInstructionalDesign2019,
  title = {Thoughtful Instructional Design Reduces Learners' Cognitive Load in Computing},
  author = {{National Centre for Computing Education}},
  year = {2019},
  month = sep,
  pages = {2},
  institution = {{National Centre for Computing Education}},
  urldate = {2021-04-03},
  file = {/Users/igormoreno/Zotero/storage/LZAXEZ7V/National Centre for Computing Education - 2019 - Thoughtful instructional design reduces learners’ cognitive load in computing.pdf}
}

@techreport{nationalcentreforcomputingeducationUsingConceptMaps2020,
  title = {Using Concept Maps to Capture, Communicate, Construct, and Assess Knowledge},
  author = {{National Centre for Computing Education}},
  year = {2020},
  month = mar,
  pages = {2},
  urldate = {2021-04-03},
  abstract = {Concept maps could be presented to learners to convey connections between concepts or created/completed by learners themselves. They can even be used to capture and assess pupil understanding.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/WMR2BAJV/National Centre for Computing Education - 2020 - Using concept maps to capture, communicate, construct, and assess knowledge.pdf;/Users/igormoreno/Zotero/storage/XXZH6SS3/using-concept-maps-to-capture-communicate-construct-and-assess-knowledge.html}
}

@techreport{nationalcentreforcomputingeducationUsingWorkedExamples2019,
  title = {Using Worked Examples Supports Novices to Develop Their Programming Practice},
  author = {{National Centre for Computing Education}},
  year = {2019},
  month = oct,
  pages = {2},
  institution = {{National Centre for Computing Education}},
  urldate = {2021-04-03},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/45CFETKI/National Centre for Computing Education - 2019 - Using worked examples supports novices to develop their programming practice.pdf}
}

@book{nationalresearchcouncilHowPeopleLearn2000,
  title = {How {{People Learn}}: {{Brain}}, {{Mind}}, {{Experience}}, and {{School}}},
  shorttitle = {Read "{{How People Learn}}},
  author = {{National Research Council}},
  year = {2000},
  edition = {Expanded Edition},
  publisher = {{The National Academies Press}},
  address = {{Washington, DC}},
  doi = {10.17226/9853},
  urldate = {2020-10-14},
  abstract = {Read chapter Front Matter: First released in the Spring of 1999, How People Learn has been expanded to show how the theories and insights from the origina...},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/VJIY6XT3/National Research Council - 2000 - How People Learn.pdf;/Users/igormoreno/Zotero/storage/752C45BB/1.html}
}

@book{nationalresearchcouncilReportWorkshopPedagogical2011,
  title = {Report of a {{Workshop}} on the {{Pedagogical Aspects}} of {{Computational Thinking}} (2011)},
  author = {{National Research Council}},
  year = {2011},
  publisher = {{National Academies Press}},
  doi = {10.17226/13170},
  urldate = {2022-01-12},
  abstract = {In 2008, the Computer and Information Science and Engineering Directorate of the National Science Foundation asked the National Research Council (NRC) to conduct two workshops to explore the nature of computational thinking and its cognitive and educational implications. The first workshop focused on the scope and nature of computational thinking and on articulating what ``computational thinking for everyone'' might mean. A report of that workshop was released in January 2010. Drawing in part on the proceedings of that workshop, the present report summarizes the second workshop, which was held February 4-5, 2010, in Washington, D.C., and focused on pedagogical considerations for computational thinking. Although this document was prepared by the Committee for the Workshops on Computational Thinking based on workshop presentations and discussions, it does not reflect consensus views of the committee. Under NRC guidelines for conducting workshops and developing workshop report summaries, workshop activities do not seek consensus and workshop reports (such as the present volume) cannot be said to represent ``an NRC view'' on the subject at hand. As with the first workshop, this second workshop revealed a plethora of perspectives on ways to approach pedagogy for computational thinking. The two workshops, taken together, call attention to the diversity of views on many aspects of computational thinking as well as its definition, and it is the hope of the committee that the present report, which contains a digest of both presentations and discussion, will serve as a vehicle that increases communication on the topic across the community. The full workshop agenda is provided in Appendix A, and short biographies of the workshop participants are given in Appendix B.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/8TJG266H/National Research Council - 2011 - Report of a Workshop on the Pedagogical Aspects of Computational Thinking (2011).pdf}
}

@book{nationalresearchcouncilReportWorkshopScope2010,
  title = {Report of a {{Workshop}} on the {{Scope}} and {{Nature}} of {{Computational Thinking}}},
  author = {{National Research Council}},
  year = {2010},
  publisher = {{The National Academies Press}},
  address = {{Washington, DC}},
  doi = {10.17226/12840},
  urldate = {2022-01-12},
  abstract = {Report of a Workshop on the Scope and Nature of Computational Thinking presents a number of perspectives on the definition and applicability of computational thinking. For example, one idea expressed during the workshop is that computational thinking is a fundamental analytical skill that everyone can use to help solve problems, design systems, and understand human behavior, making it useful in a number of fields.  Supporters of this viewpoint believe that computational thinking is comparable to the linguistic, mathematical and logical reasoning taught to all children.},
  isbn = {978-0-309-14957-0},
  langid = {english},
  keywords = {Education},
  file = {/Users/igormoreno/Zotero/storage/P2E78QW6/National Research Council - 2010 - Report of a Workshop on the Scope and Nature of Computational Thinking.pdf}
}

@book{navarroLearningStatisticsJASP,
  title = {Learning {{Statistics}} with {{JASP}}: {{A Tutorial}} for {{Psychology Students}} and {{Other Beginners}}},
  author = {Navarro, Danielle J and Foxcroft, David R and Faulkenberry, Thomas J},
  abstract = {Learning Statistics with JASP is a free textbook covering the basics of statistical inference for beginners in psychology and related applied disciplines. It uses the free software package JASP. Written in a lively, conversational style, it provides the reader with a perfect balance of readability and rigor, and gives students a modern view of statistical inference in the psychological and behavioral sciences.},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/BX7BUVIU/Navarro et al. - Learning Statistics with JASP.pdf}
}

@inproceedings{nelsonComprehensionFirstEvaluating2017,
  ids = {nelsonComprehensionFirstEvaluating2017a},
  title = {Comprehension {{First}}: {{Evaluating}} a {{Novel Pedagogy}} and {{Tutoring System}} for {{Program Tracing}} in {{CS1}}},
  shorttitle = {Comprehension {{First}}},
  booktitle = {Proceedings of the 2017 {{ACM Conference}} on {{International Computing Education Research}}  - {{ICER}} '17},
  author = {Nelson, Greg L. and Xie, Benjamin and Ko, Andrew J.},
  year = {2017},
  pages = {2--11},
  publisher = {{ACM Press}},
  address = {{Tacoma, Washington, USA}},
  doi = {10.1145/3105726.3106178},
  urldate = {2018-10-22},
  abstract = {What knowledge does learning programming require? Prior work has focused on theorizing program writing and problem solving skills. We examine program comprehension and propose a formal theory of program tracing knowledge based on control ow paths through an interpreter program's source code. Because novices cannot understand the interpreter's programming language notation, we transform it into causal relationships from code tokens to instructions to machine state changes. To teach this knowledge, we propose a comprehension- rst pedagogy based on causal inference, by showing, explaining, and assessing each path by stepping through concrete examples within many example programs. To assess this pedagogy, we built PLTutor, a tutorial system with a xed curriculum of example programs. We evaluate learning gains among self-selected CS1 students using a block randomized lab study comparing PLTutor with Codecademy, a writing tutorial. In our small study, we nd some evidence of improved learning gains on the SCS1, with average learning gains of PLTutor 60\% higher than Codecademy (gain of 3.89 vs. 2.42 out of 27 questions). ese gains strongly predicted midterms (R2=.64) only for PLTutor participants, whose grades showed less variation and no failures.},
  isbn = {978-1-4503-4968-0},
  langid = {english},
  keywords = {knowledge representation,notional machine,program tracing},
  file = {/Users/igormoreno/Zotero/storage/3279QPBG/Nelson et al. - 2017 - Comprehension First Evaluating a Novel Pedagogy a.pdf;/Users/igormoreno/Zotero/storage/5TKDS88V/Nelson et al. - 2017 - Comprehension First Evaluating a Novel Pedagogy a.pdf;/Users/igormoreno/Zotero/storage/7HVAYLWV/Nelson et al - 2017 - Comprehension First.pdf;/Users/igormoreno/Zotero/storage/VEIHL93F/Nelson et al. - 2017 - Comprehension First Evaluating a Novel Pedagogy a.pdf}
}

@inproceedings{nelsonComprehensionFirstPedagogyAdaptive2017,
  title = {Comprehension-{{First Pedagogy}} and {{Adaptive}}, {{Intrinsically Motivated Tutorials}}},
  booktitle = {Proceedings of the 2017 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Nelson, Greg L.},
  year = {2017},
  series = {{{ICER}} '17},
  pages = {287--288},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3105726.3105739},
  urldate = {2019-07-11},
  abstract = {Two large multinational studies show more than 60\% of students incorrectly answer questions about the execution of basic programs. How can we improve program comprehension learning outcomes, and does that improve program writing learning outcomes? Nearly all prior tools and approaches have been evaluated in a writing-focused pedagogical context. People receive instruction on a programming construct's syntax and semantics, practice by writing code, then advance to the next construct (roughly a spiral syntax approach). In contrast, little work has explored a comprehension-first pedagogy, teaching and assessing program semantics - how static code causes dynamic computer behavior - before teaching learners to write code. I hypothesize this pedagogy improves program comprehension and writing learning outcomes, and that an adaptive curriculum of programs that aligns with the learner's interests and assessed knowledge further improves outcomes. Towards that goal, I built and evaluated a comprehension-first tutorial (PLTutor) with a fixed, non-adaptive curriculum, showing 60\% higher learning gains (3.9 vs 2.4 on the SCS1) than the writing-focused tutorial Codecademy. I'm looking for new ideas (such as more social (theories, design, etc)), prior work, or methods to inform my thesis proposal and committee selection.},
  isbn = {978-1-4503-4968-0},
  keywords = {curriculum,motivation,pedagogy,program comprehension},
  file = {/Users/igormoreno/Zotero/storage/LEYBUY2Y/Nelson - 2017 - Comprehension-First Pedagogy and Adaptive, Intrinsically Motivated Tutorials.pdf}
}

@article{nelsonJunoConstraintbasedGraphics1985,
  title = {Juno, a Constraint-Based Graphics System},
  author = {Nelson, Greg},
  year = {1985},
  month = jul,
  journal = {ACM SIGGRAPH Computer Graphics},
  volume = {19},
  number = {3},
  pages = {235--243},
  issn = {0097-8930},
  doi = {10.1145/325165.325241},
  urldate = {2022-03-09},
  abstract = {Juno is a system that harmoniously integrates a language for describing pictures with a what-you-see-is-what-you-get image editor. Two of Juno's novelties are that geometric constraints are used to specify locations, and that the text of a Juno program is modified in response to the interactive editing of the displayed image that the program produces.},
  file = {/Users/igormoreno/Zotero/storage/XWTBWHF2/Nelson - 1985 - Juno, a constraint-based graphics system.pdf}
}

@inproceedings{nelsonValidityFormativeAssessment2019,
  title = {Towards Validity for a Formative Assessment for Language-Specific Program Tracing Skills},
  booktitle = {Proceedings of the 19th {{Koli Calling International Conference}} on {{Computing Education Research}}},
  author = {Nelson, Greg L. and Hu, Andrew and Xie, Benjamin and Ko, Amy J.},
  year = {2019},
  month = nov,
  pages = {1--10},
  publisher = {{ACM}},
  address = {{Koli Finland}},
  doi = {10.1145/3364510.3364525},
  urldate = {2020-06-22},
  abstract = {Formative assessments can have positive effects on learning, but few exist for computing, even for basic skills such as program tracing. Instead, teachers often rely on overly broad test questions that lack the diagnostic granularity needed to measure early learning. We followed Kane's framework for assessment validity to design a formative assessment of JavaScript program tracing, developing ``an argument for effectiveness for a specific use.'' This included: 1) a fine-grained scoring model to guide practice, 2) item design to test parts of our fine-grained model with low confound-caused variance, 3) a covering test design that samples from a space of items and covers the scoring model, and 4) a feasibility argument for effectiveness for formative use (can target and improve learning). We contribute a distillation of Kane's framework situated for computing education, and a novel application of Kane's framework to formative assessment of program tracing, focusing on scoring, generalization, and use. Our application also contributes a novel way of modeling possible conceptions of a programming language's semantics by modeling prevalent compositions of control flow and data flow graphs and the paths through them, a process for generating test items, and principles for minimizing item confounds.},
  isbn = {978-1-4503-7715-7},
  langid = {english},
  keywords = {ForAndrea},
  file = {/Users/igormoreno/Zotero/storage/6Q3JCIA3/Nelson et al - 2019 - Towards validity for a formative assessment for language-specific program.pdf}
}

@article{nesbitLearningConceptKnowledge2006,
  title = {Learning {{With Concept}} and {{Knowledge Maps}}: {{A Meta-Analysis}}},
  shorttitle = {Learning {{With Concept}} and {{Knowledge Maps}}},
  author = {Nesbit, John C. and Adesope, Olusola O.},
  year = {2006},
  month = sep,
  journal = {Review of Educational Research},
  volume = {76},
  number = {3},
  pages = {413--448},
  publisher = {{American Educational Research Association}},
  issn = {0034-6543},
  doi = {10.3102/00346543076003413},
  urldate = {2023-08-27},
  abstract = {This meta-analysis reviews experimental and quasi-experimental studies in which students learned by constructing, modifying, or viewing node-link diagrams. Following an exhaustive search for studies meeting specified design criteria, 67 standardized mean difference effect sizes were extracted from 55 studies involving 5,818 participants. Students at levels ranging from Grade 4 to postsecondary used concept maps to learn in domains such as science, psychology, statistics, and nursing. Posttests measured recall and transfer. Across several instructional conditions, settings, and methodological features, the use of concept maps was associated with increased knowledge retention. Mean effect sizes varied from small to large depending on how concept maps were used and on the type of comparison treatment. Significant heterogeneity was found in most subsets.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/GHJYHYIB/Nesbit and Adesope - 2006 - Learning With Concept and Knowledge Maps A Meta-A.pdf}
}

@article{nevilleholmesKWICDeadLesson2002,
  title = {The {{KWIC}} and the {{Dead}}: {{A Lesson}} in {{Computing History}}},
  author = {{Neville Holmes}},
  year = {2002},
  month = jan,
  journal = {Computer},
  pages = {3},
  file = {/Users/igormoreno/Zotero/storage/DJWNUBMB/Neville Holmes - 2002 - The KWIC and the Dead.pdf}
}

@book{newmeyerMeasuringGrammaticalComplexity2014,
  title = {Measuring {{Grammatical Complexity}}},
  editor = {Newmeyer, Frederick J. and Preston, Laurel B.},
  year = {2014},
  publisher = {{Oxford University Press}},
  address = {{Oxford}},
  doi = {10.1093/acprof:oso/9780199685301.001.0001},
  urldate = {2021-10-10},
  abstract = {This book collects Work presented at a workshop entitled `Formal Linguistics and the Measurement of Grammatical Complexity', held in Seattle, WA, USA on March 23\textendash 24, 2012. Each chapter takes on the question of whether languages can differ in grammatical complexity and, if so, how relative complexity differences might be measured. In this way, it differs from other recent collections on complexity which approach the issue for the most part from a sociolinguistic or functional/typological perspective and make few concrete proposals about the actual measurement of complexity differences. The individual chapters either take a `grammar-based' approach to complexity or a `user-based' one, or contrast the two. The former focus on elements of grammars per se and count the amount of structural elaboration, irregularity, and so on. The latter approach complexity in terms of the degree of difficulty for the user, whether the first-language acquirer, the second-language acquirer, or the adult user. The book deals for the most part with morphosyntactic complexity, though there are chapters devoted to phonological and semantic complexity as well. Particularly noteworthy are two chapters that approach complexity from a neurolinguistics perspective, raising the question of whether we can learn anything about grammatical complexity from neurolinguistics studies.},
  isbn = {978-0-19-968530-1},
  langid = {english},
  keywords = {formal linguistics,grammar-based approaches,grammatical complexity,irregularity,linguistic typology,measurement of complexity,neurolinguistics,structural elaboration,syntax,user-based approaches}
}

@article{ngIntegratingSelfregulationPrinciples2018,
  title = {Integrating Self-Regulation Principles with Flipped Classroom Pedagogy for First Year University Students},
  author = {Ng, Eugenia M.W.},
  year = {2018},
  month = nov,
  journal = {Computers \& Education},
  volume = {126},
  pages = {65--74},
  issn = {03601315},
  doi = {10.1016/j.compedu.2018.07.002},
  urldate = {2018-11-06},
  abstract = {Flipped classroom is a new blended type of pedagogy. This study attempts to examine whether flipped classroom, with reference to self-regulation principles, is a good pedagogy for enhancing formative learning outcomes for first year university students. A total of 73 students, enrolled on a teacher education program, participated in this study. Data were collected from different sources in three phases. In the first phase, data were collected from pre- and post-tests, and the number of viewings of the assigned online videos were logged. Techniques in editing images applied by the group and the individual were examined in the second phase. Finally, opinions related to flipped classroom were collected from focus group interviews in the third phase. The results suggest that students are able to apply their self-learned knowledge to editing images both together and individually. They were very positive about flipped classroom activities and all 7 self-regulated (SR) learning principles were achieved. While students embraced the flexibility of learning online, they missed the face-to-face interaction with the teacher and their learning peers. This was especially the case when they did not understand the content of the online videos. This study provides an additional lens of SR principles.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/GSQHBHQH/Ng - 2018 - Integrating self-regulation principles with flipped classroom pedagogy for.pdf}
}

@inproceedings{niBuildingCommunitySupport2011,
  title = {Building a Community to Support {{HS CS}} Teachers: The Disciplinary Commons for Computing Educators},
  booktitle = {{{SIGCSE}}},
  author = {Ni, Lijun and Guzdial, Mark and Tew, Allison Elliott and Morrison, Briana and Galanos, Ria},
  year = {2011},
  pages = {6},
  abstract = {In this paper, we describe our experience in supporting high school CS teachers by building a local community through the Disciplinary Commons for Computing Educators (DCCE) project. The DCCE project is an effort to explore ways of supporting these CS teachers through the creation of a local community and by promoting teacher reflection. DCCE achieved this goal through an academic-year-long program where a cohort of CS teachers engaged in collaborative portfolio creation and peer observation of classroom teaching. We describe the design of the DCCE activities and present preliminary results from initial evaluations. Our short-term evaluations indicate that this project was successful in creating a supportive community, promoting teacher reflection, and advancing change in teaching practices among a group of computing educators.},
  langid = {english},
  annotation = {00043},
  file = {/Users/igormoreno/Zotero/storage/92DBT9CK/Ni et al - 2011 - Building a community to support HS CS teachers.pdf}
}

@article{niemiNEWWAYSTEACH,
  title = {{{NEW WAYS TO TEACH AND LEARN IN CHINA AND FINLAND}} - {{CROSSING BOUNDARIES WITH TECHNOLOGY}}},
  author = {Niemi, Hannele and Jia, Jiyou},
  pages = {328},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/7V7AITZM/Niemi and Jia - NEW WAYS TO TEACH AND LEARN IN CHINA AND FINLAND - CROSSING BOUNDARIES WITH.pdf}
}

@article{NineCirclesScientific2012,
  title = {The {{Nine Circles}} of {{Scientific Hell}}},
  year = {2012},
  month = nov,
  journal = {Perspectives on Psychological Science},
  volume = {7},
  number = {6},
  pages = {643--644},
  publisher = {{SAGE Publications Inc}},
  issn = {1745-6916},
  doi = {10.1177/1745691612459519},
  urldate = {2021-06-08},
  file = {/Users/igormoreno/Zotero/storage/5UPF4KPU/2012 - The Nine Circles of Scientific Hell.pdf}
}

@book{nissenMissingDataBias2018,
  title = {Missing Data and Bias in Physics Education Research: {{A}} Case for Using Multiple Imputation},
  shorttitle = {Missing Data and Bias in Physics Education Research},
  author = {Nissen, Jayson and Donatello, Robin and Van Dusen, Ben},
  year = {2018},
  month = aug,
  abstract = {Physics education researchers (PER) commonly use complete-case analysis to address missing data. For complete-case analysis, researchers discard all data from any student who is missing any data. Despite its frequent use, no PER article we reviewed that used complete-case analysis provided evidence that the analyzed data met the assumptions necessary to ensure accurate results with complete-case analysis. Not meeting these assumptions raises the possibility that prior studies have reported biased results with inflated gains that may obscure differences across courses. To test this possibility, we used simulated data to compare the accuracy of complete-case analysis and multiple imputation (MI). PER studies seldom use MI, but MI uses all available data, has less stringent assumptions, and is more accurate and more statistically powerful than complete-case analysis. Results indicated that complete-case analysis introduced more bias than MI and this bias was large enough to obscure differences between student populations or between courses. We recommend that the PER community adopt the use of MI for handling missing data to improve the accuracy in research studies.},
  file = {/Users/igormoreno/Zotero/storage/43BNNB2N/Nissen et al - 2018 - Missing data and bias in physics education research.pdf}
}

@article{nissenParticipationPerformancePaper2018,
  title = {Participation and Performance on Paper- and Computer-Based Low-Stakes Assessments},
  author = {Nissen, Jayson M. and Jariwala, Manher and Close, Eleanor W. and Dusen, Ben Van},
  year = {2018},
  month = may,
  journal = {International Journal of STEM Education},
  volume = {5},
  number = {1},
  pages = {21},
  issn = {2196-7822},
  doi = {10.1186/s40594-018-0117-4},
  urldate = {2021-08-18},
  abstract = {High-stakes assessments, such the Graduate Records Examination, have transitioned from paper to computer administration. Low-stakes research-based assessments (RBAs), such as the Force Concept Inventory, have only recently begun this transition to computer administration with online services. These online services can simplify administering, scoring, and interpreting assessments, thereby reducing barriers to instructors' use of RBAs. By supporting instructors' objective assessment of the efficacy of their courses, these services can stimulate instructors to transform their courses to improve student outcomes. We investigate the extent to which RBAs administered outside of class with the online Learning About STEM Student Outcomes (LASSO) platform provide equivalent data to tests administered on paper in class, in terms of both student participation and performance. We use an experimental design to investigate the differences between these two assessment conditions with 1310 students in 25 sections of 3 college physics courses spanning 2 semesters.},
  keywords = {Computer-based test,Hierarchical linear models,Participation,Performance,Research-based assessments},
  file = {/Users/igormoreno/Zotero/storage/BVA7W5DF/Nissen et al - 2018 - Participation and performance on paper- and computer-based low-stakes.pdf;/Users/igormoreno/Zotero/storage/UQ3HFUT3/s40594-018-0117-4.html}
}

@article{nobleArgumentsResults2000,
  title = {Arguments and {{Results}}},
  author = {Noble, J.},
  year = {2000},
  month = jun,
  journal = {The Computer Journal},
  volume = {43},
  number = {6},
  pages = {439--450},
  issn = {0010-4620, 1460-2067},
  doi = {10.1093/comjnl/43.6.439},
  urldate = {2022-03-16},
  abstract = {If an object oriented program is a collection of communicating objects, then the objects' protocols de ne the languages the program speaks. Unfortunately, protocols are di cult to design in isolation, so many programs' protocols are not as well designed as they could be. This paper presents six patterns which describe how objects protocols can be designed or redesigned. By using these patterns, programs and designs can be made more simple, more general, and more easy to change.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/UDCPFL8N/Noble - 2000 - Arguments and Results.pdf}
}

@inproceedings{nobleLeftHandEquals2016,
  title = {The Left Hand of Equals},
  booktitle = {Proceedings of the 2016 {{ACM International Symposium}} on {{New Ideas}}, {{New Paradigms}}, and {{Reflections}} on {{Programming}} and {{Software}}},
  author = {Noble, James and Black, Andrew P. and Bruce, Kim B. and Homer, Michael and Miller, Mark S.},
  year = {2016},
  month = oct,
  series = {Onward! 2016},
  pages = {224--237},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2986012.2986031},
  urldate = {2022-03-10},
  abstract = {When is one object equal to another object? While object identity is fundamental to object-oriented systems, object equality, although tightly intertwined with identity, is harder to pin down. The distinction between identity and equality is reflected in object-oriented languages, almost all of which provide two variants of "equality", while some provide many more. Programmers can usually override at least one of these forms of equality, and can always define their own methods to distinguish their own objects. This essay takes a reflexive journey through fifty years of identity and equality in object-oriented languages, and ends somewhere we did not expect: a "left-handed" equality relying on trust and grace.},
  isbn = {978-1-4503-4076-2},
  keywords = {abstraction,equality,identity,object-orientation},
  file = {/Users/igormoreno/Zotero/storage/ARVJ6SZR/Noble et al. - 2016 - The left hand of equals.pdf}
}

@inproceedings{nordstromWindsChangeSystemic2013,
  title = {Winds of Change: Toward Systemic Improvement of a Computer Science Program},
  shorttitle = {Winds of Change},
  booktitle = {Proceedings of the 14th Annual {{ACM SIGITE}} Conference on {{Information}} Technology Education},
  author = {Nordstrom, Steven and Randrianasolo, Arisoa and Borera, Eddy and Mhlanga, Fortune},
  year = {2013},
  month = oct,
  series = {{{SIGITE}} '13},
  pages = {201--206},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2512276.2512298},
  urldate = {2020-09-22},
  abstract = {Computer science programs at small, liberal arts universities often have difficulty with effectively managing change, and attracting and retaining top students and faculty. They also sometimes struggle to provide a relevant and appealing curriculum while maintaining an appropriate level of academic rigor. This paper presents a restructuring of our department and computer science degree program, identifies several key areas of our curriculum which needed attention, outlines our improvement areas, and proposes a self-assessment strategy for gauging the effectiveness of the program changes over time.},
  isbn = {978-1-4503-2239-3},
  keywords = {assessment,curriculum,experiences},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/D6QMWTNY/Nordstrom et al - 2013 - Winds of change.pdf}
}

@article{norellDependentlyTypedProgramming,
  title = {Dependently {{Typed Programming}} in {{Agda}}},
  author = {Norell, Ulf and Chapman, James},
  pages = {41},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/TYLEELII/Norell e Chapman - Dependently Typed Programming in Agda.pdf}
}

@article{nossChildrenLearningGeometrical1987,
  title = {Children's {{Learning}} of {{Geometrical Concepts}} through {{Logo}}},
  author = {Noss, Richard},
  year = {1987},
  month = nov,
  journal = {Journal for Research in Mathematics Education},
  volume = {18},
  number = {5},
  pages = {343--362},
  publisher = {{National Council of Teachers of Mathematics}},
  issn = {0021-8251, 1945-2306},
  doi = {10.5951/jresematheduc.18.5.0343},
  urldate = {2022-01-18},
  abstract = {This exploratory study aimed to investigate some elements of geometrical concepts that children learn through Logo programming. A test designed to probe children's conceptions of three components of length and angle was administered to 84 children who had learned Logo for one year and 92 who had not. The components of the concept of length were (a) length conservation, (b) length combination, and (c) length measurement. The components of angle were (a) right angle conservation, (b) angle conservation, and (c) angle measurement. Analysis of data using a linear modeling technique indicated a consistent trend toward a sex-treatment interaction.},
  chapter = {Journal for Research in Mathematics Education},
  langid = {american},
  file = {/Users/igormoreno/Zotero/storage/M3QYHPWF/article-p343.html}
}

@article{nossConstructingConceptualFramework1986,
  title = {Constructing a Conceptual Framework for Elementary Algebra through {{Logo}} Programming},
  author = {Noss, Richard},
  year = {1986},
  month = nov,
  journal = {Educational Studies in Mathematics},
  volume = {17},
  number = {4},
  pages = {335--357},
  issn = {0013-1954, 1573-0816},
  doi = {10.1007/BF00311324},
  urldate = {2022-01-17},
  abstract = {This paper examines the extent to which Logo-experienced children are able to mobilise their Logo-based knowledge to construct meaning for elementary algebraic concepts. It reports the results of an exploratory study which was part of a longitudinal investigation of the mathematical environment created through Logo programming. The study aimed at gauging the influence of children's Logo learning in facilitating their conceptualisation of algebraic variable, and their ability to formalise in a non-computational context.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/53CK9RDF/Noss - 1986 - Constructing a conceptual framework for elementary.pdf}
}

@misc{NotionAllinoneWorkspace,
  title = {Notion \textendash{} {{The}} All-in-One Workspace for Your Notes, Tasks, Wikis, and Databases.},
  journal = {Notion},
  urldate = {2023-06-29},
  abstract = {A new tool that blends your everyday work apps into one. It's the all-in-one workspace for you and your team},
  howpublished = {https://www.notion.so},
  file = {/Users/igormoreno/Zotero/storage/M25X7E5T/Ideas-for-Experiments-4cc4b68bdfbc49a2a27f032b56977d6d.html}
}

@misc{NotionAllinoneWorkspacea,
  title = {Notion \textendash{} {{The}} All-in-One Workspace for Your Notes, Tasks, Wikis, and Databases.},
  journal = {Notion},
  urldate = {2023-07-07},
  abstract = {A new tool that blends your everyday work apps into one. It's the all-in-one workspace for you and your team},
  howpublished = {https://www.notion.so},
  file = {/Users/igormoreno/Zotero/storage/KZQDV53Y/Ideas-for-Experiments-4cc4b68bdfbc49a2a27f032b56977d6d.html}
}

@techreport{novakTheoryUnderlyingConcept2008,
  title = {The {{Theory Underlying Concept Maps}} and {{How}} to {{Construct}} and {{Use Them}}},
  author = {Novak, Joseph D and Ca{\~n}as, Alberto J},
  year = {2008},
  month = jan,
  number = {Technical Report IHMC CmapTools 2006-01 Rev 01-2008},
  pages = {36},
  institution = {{Florida Institute for Human and Machine Cognition}},
  langid = {english},
  keywords = {To Read},
  file = {/Users/igormoreno/Zotero/storage/3VRIZPTH/Novak and Cañas - 2008 - The Theory Underlying Concept Maps and How to Construct and Use Them.pdf}
}

@article{novotnaHowStructureSense2008,
  title = {How Structure Sense for Algebraic Expressions or Equations Is Related to Structure Sense for Abstract Algebra},
  author = {Novotn{\'a}, Jarmila and Hoch, Maureen},
  year = {2008},
  month = sep,
  journal = {Mathematics Education Research Journal},
  volume = {20},
  number = {2},
  pages = {93--104},
  issn = {1033-2170, 2211-050X},
  doi = {10.1007/BF03217479},
  urldate = {2021-05-23},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/JYG7AQIW/Novotná and Hoch - 2008 - How structure sense for algebraic expressions or e.pdf}
}

@article{nutbrownStaticAnalysisProgramming2016,
  title = {Static Analysis of Programming Exercises: {{Fairness}}, Usefulness and a Method for Application},
  shorttitle = {Static Analysis of Programming Exercises},
  author = {Nutbrown, Stephen and Higgins, Colin},
  year = {2016},
  month = jul,
  journal = {Computer Science Education},
  volume = {26},
  number = {2-3},
  pages = {104--128},
  issn = {0899-3408, 1744-5175},
  doi = {10.1080/08993408.2016.1179865},
  urldate = {2020-12-04},
  langid = {english},
  annotation = {00014},
  file = {/Users/igormoreno/Zotero/storage/AGNMCG2B/Nutbrown e Higgins - 2016 - Static analysis of programming exercises Fairness.pdf}
}

@inproceedings{obrienInferencebasedExpectationbasedProcessing2001,
  title = {Inference-Based and Expectation-Based Processing in Program Comprehension},
  booktitle = {Proceedings 9th {{International Workshop}} on {{Program Comprehension}}. {{IWPC}} 2001},
  author = {O'Brien, M. P. and Buckley, J.},
  year = {2001},
  month = may,
  pages = {71--78},
  issn = {1092-8138},
  doi = {10.1109/WPC.2001.921715},
  abstract = {This paper formally distinguishes between two variants of top-down comprehension (as originally described by Brooks (1983) and Soloway (1984)). The first is inference-based comprehension, where the programmer derives meaning from cliched implementations in the code. The second is expectation-based comprehension, where the programmer has pre-generated expectations of the code's meaning. The paper describes the distinguishing features of the two variants, and uses these characteristics as the basis for an empirical study. This study establishes their existence, and identifies their relationship with programmers' domain and coding standards familiarity.},
  keywords = {Bridges,coding standards,Cognitive science,Costs,Data mining,Documentation,expectation-based comprehension,inference-based comprehension,Information technology,Performance evaluation,program comprehension,Programming profession,reverse engineering,top-down comprehension},
  annotation = {00032},
  file = {/Users/igormoreno/Zotero/storage/732PZQXL/O'Brien e Buckley - 2001 - Inference-based and expectation-based processing i.pdf;/Users/igormoreno/Zotero/storage/KMA82A9D/921715.html}
}

@article{oddenPhysicsComputationalLiteracy2019,
  title = {Physics Computational Literacy: {{An}} Exploratory Case Study Using Computational Essays},
  shorttitle = {Physics Computational Literacy},
  author = {Odden, Tor Ole B. and Lockwood, Elise and Caballero, Marcos D.},
  year = {2019},
  month = dec,
  journal = {Physical Review Physics Education Research},
  volume = {15},
  number = {2},
  pages = {020152},
  issn = {2469-9896},
  doi = {10.1103/PhysRevPhysEducRes.15.020152},
  urldate = {2020-06-22},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/R4NS53HB/Odden et al - 2019 - Physics computational literacy.pdf}
}

@article{odonnellKnowledgeMapsScaffolds2002,
  title = {Knowledge {{Maps}} as {{Scaffolds}} for {{Cognitive Processing}}},
  author = {O'Donnell, Angela M. and Dansereau, Donald F. and Hall, Richard H.},
  year = {2002},
  month = mar,
  journal = {Educational Psychology Review},
  volume = {14},
  number = {1},
  pages = {71--86},
  issn = {1573-336X},
  doi = {10.1023/A:1013132527007},
  urldate = {2018-11-09},
  abstract = {Knowledge maps are node-link representations in which ideas are located in nodes and connected to other related ideas through a series of labeled links. The research on knowledge mapping in the last 12 years has produced a number of consistent findings. Students recall more central ideas when they learn from a knowledge map than when they learn from text and those with low verbal ability or low prior knowledge often benefit the most. The use of knowledge maps also appears to amplify the benefits associated with scripted cooperation. Learning from maps is enhanced by active processing strategies such as summarization or annotation and by designing maps according to gestalt principles of organization. Fruitful areas for future research on knowledge mapping include examining whether knowledge maps reduce cognitive load, how map learning is influenced by the structure of the information to be learned, and the possibilities for transfer. Implications for practice are briefly delineated.},
  langid = {english},
  keywords = {active learning,individual difference,knowledge maps,scaffolding,To Read},
  file = {/Users/igormoreno/Zotero/storage/7Y69XXNM/O'Donnell et al - 2002 - Knowledge Maps as Scaffolds for Cognitive Processing.pdf}
}

@article{oecdWhatDoesTeaching2018,
  title = {What Does Teaching Look like?: {{A}} New Video Study},
  shorttitle = {What Does Teaching Look Like?},
  author = {OECD},
  year = {2018},
  month = jan,
  doi = {10.1787/948427dc-en},
  urldate = {2019-11-13},
  abstract = {While teachers can make a great difference to student outcomes, we know little about how they teach and what makes ``good'' teaching. The TALIS Video Study is a new OECD project that aims at understanding what teaching practices are used, how they are interrelated, and which ones are most related to students' cognitive and non-cognitive outcomes. It will use video observation to capture, literally, what teaching looks like in different countries, along with surveys of teachers and students, student assessments, and other instructional materials, to obtain as complete a picture as possible of teaching and learning. The study unpacks teaching into different domains to depict a wide range of approaches in a systematic, detailed and consistent way across the eight participating school systems.},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/IA62W6XY/OECD - 2018 - What does teaching look like A new video study.pdf;/Users/igormoreno/Zotero/storage/KWMCWPBM/what-does-teaching-look-like_948427dc-en.html}
}

@inproceedings{ohrndorfMeasuringKnowledgeMisconceptions2015,
  title = {Measuring {{Knowledge}} of {{Misconceptions}} in {{Computer Science Education}}},
  booktitle = {Proceedings of the Eleventh Annual {{International Conference}} on {{International Computing Education Research}} - {{ICER}} '15},
  author = {Ohrndorf, Laura},
  year = {2015},
  pages = {269--270},
  publisher = {{ACM Press}},
  address = {{Omaha, Nebraska, USA}},
  doi = {10.1145/2787622.2787745},
  urldate = {2018-10-22},
  abstract = {This document describes the motivation, background and the current state of my PhD research project. I am aiming to develop a test model to measure educators' knowledge about misconceptions in computer science. I will first outline my position as a PhD student and will then illustrate my motivation for my research. This includes a short overview on related work done in this field before. I will continue with my main research questions and an explanation of my methods. This is followed by an overview on what I have already done. At the end, I will summaries what contributions I expect to make to the CSE community.},
  isbn = {978-1-4503-3630-7},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/NGUUWUXP/Ohrndorf - 2015 - Measuring Knowledge of Misconceptions in Computer Science Education.pdf}
}

@article{ojimaConceptMappingPretask2006,
  title = {Concept Mapping as Pre-Task Planning: {{A}} Case Study of Three {{Japanese ESL}} Writers},
  shorttitle = {Concept Mapping as Pre-Task Planning},
  author = {Ojima, Maki},
  year = {2006},
  month = dec,
  journal = {System},
  volume = {34},
  number = {4},
  pages = {566--585},
  issn = {0346-251X},
  doi = {10.1016/j.system.2006.08.003},
  urldate = {2018-12-02},
  abstract = {The majority of research to date on pre-task planning has investigated the impact of planning time on L2 learners' oral production, and has generally reported its positive effects on their task performance. However, little research on planning has been conducted in writing contexts, and there is no firm evidence to demonstrate that pre-task planning promotes L2 learners' written production in the ways that many researchers have reported for L2 speaking contexts. In this paper, I have explored whether and how concept mapping as a form of pre-task planning could benefit the writing performance of three Japanese ESL learners. I analysed four compositions from each of the learners, written with and without concept mapping; using measures of accuracy, complexity, fluency and [Hamp-Lyons, L., 1991. Reconstructing ``Academic writing proficiency''. In: Hamp-Lyons, L. (Ed.), Assessing second language writing in academic contexts. Ablex, Norwood, NJ, pp. 127\textendash 153.] holistic measures of global quality, communicative quality, organisation, argumentation, linguistic accuracy, and linguistic appropriacy. I also examined through a questionnaire, retrospective interview, and logs, the learners' applications of the strategy in their writing processes. Pre-task planning was associated positively with the overall measures of the learners' written production during in-class compositions, with the exception of accuracy. Moreover, each learner made unique applications of the concept mapping strategy in their writing processes, suggesting that concept mapping may help ESL learners improve their composing but in ways unique to individual experience, motivation, and task conditions.},
  keywords = {Classroom techniques,Concept mapping,Planning,Second language learning,Writing instruction},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/Y8VQVL8Y/Ojima - 2006 - Concept mapping as pre-task planning.pdf;/Users/igormoreno/Zotero/storage/S3XK32NF/S0346251X06000881.html}
}

@book{okasakiPurelyFunctionalData2008,
  title = {Purely {{Functional Data Structures}}},
  author = {Okasaki},
  year = {2008},
  month = jan,
  edition = {New Ed edition},
  publisher = {{Cambridge University Press}},
  address = {{Cambridge}},
  abstract = {Most books on data structures assume an imperative language like C or C++. However, data structures for these languages do not always translate well to functional languages such as Standard ML, Haskell, or Scheme. This book describes data structures from the point of view of functional languages, with examples, and presents design techniques so that programmers can develop their own functional data structures. It includes both classical data structures, such as red-black trees and binomial queues, and a host of new data structures developed exclusively for functional languages. All source code is given in Standard ML and Haskell, and most of the programs can easily be adapted to other functional languages. This handy reference for professional programmers working with functional languages can also be used as a tutorial or for self-study.},
  isbn = {978-0-521-66350-2},
  langid = {english}
}

@article{okellyRoboCodeProblemBasedLearning,
  title = {{{RoboCode}} \& {{Problem-Based Learning}}: {{A}} Non-Prescriptive Approach to Teaching Programming},
  author = {O'Kelly, Jackie and Gibson, J Paul},
  pages = {5},
  abstract = {The fundamental principle behind Problem-based Learning (PBL) is that the problem is the driving force that initiates the learning. In order to function effectively in a PBL environment a good set of problems is required. Solving problems is a vital element within Computer Science and yet the discipline has been slow to embrace PBL as an approach to learning. The net result means that there are few good PBL problems available to assist new practitioners with implementation. PBL emphasizes a real-world approach to learning, and we present a RoboCode Competition as a candidate for a good, realistic PBL problem within the computer science discipline. We list and identify the criteria that categorise a PBL problem as good and validate the RoboCode domain against these criteria. We argue that the concept of freedom \textemdash{} in different guises \textemdash{} plays a key role in making PBL a good mechanism for teaching programming, and for making RoboCode a good domain for PBL.},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/H7UBLRMZ/O’Kelly e Gibson - RoboCode & Problem-Based Learning A non-prescript.pdf}
}

@inproceedings{oldenburgReificationSymbolization2011,
  title = {Reification and Symbolization},
  booktitle = {Proceedings of the 11th {{Koli Calling International Conference}} on {{Computing Education Research}} - {{Koli Calling}} '11},
  author = {Oldenburg, Reinhard},
  year = {2011},
  pages = {49},
  publisher = {{ACM Press}},
  address = {{Koli, Finland}},
  doi = {10.1145/2094131.2094141},
  urldate = {2018-10-02},
  abstract = {The construction of mental objects by learners is a very complex process and it is desirable to understand it as deeply as possible, especially to understand domain specific subtleties. In this paper we will argue that the adaption of the reification theory that has been used successfully in mathematics education provides new and important insights into the learning of programming.},
  isbn = {978-1-4503-1052-9},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/P3WPVHGF/Oldenburg - 2011 - Reification and symbolization.pdf}
}

@inproceedings{olesonDecadeDemographicsComputing2022,
  title = {A {{Decade}} of {{Demographics}} in {{Computing Education Research}}: {{A Critical Review}} of {{Trends}} in {{Collection}}, {{Reporting}}, and {{Use}}},
  shorttitle = {A {{Decade}} of {{Demographics}} in {{Computing Education Research}}},
  booktitle = {Proceedings of the 2022 {{ACM Conference}} on {{International Computing Education Research V}}.1},
  author = {Oleson, Alannah and Xie, Benjamin and Salac, Jean and Everson, Jayne and Kivuva, F. Megumi and Ko, Amy J.},
  year = {2022},
  month = aug,
  pages = {323--343},
  publisher = {{ACM}},
  address = {{Lugano and Virtual Event Switzerland}},
  doi = {10.1145/3501385.3543967},
  urldate = {2022-10-31},
  abstract = {Computing education research (CER) has used demographic data to understand learners' identities, backgrounds, and contexts for efforts such as culturally-responsive computing. Prior work indicates that failing to elucidate and critically engage with the implicit assumptions of a field can unintentionally reinforce power structures that further marginalize people from non-dominant groups. The goal of this paper is two-fold: to understand what populations CER researchers have studied, and to surface implicit assumptions about how researchers have collected, reported, and used demographic data on these populations. We conducted a content analysis of 510 peer-reviewed papers published in 12 CER venues from 2012 to 2021. We found that (1) 60\% of papers studied older learners in formal contexts (i.e. post-secondary education); (2) 68\% of papers left unclear how researchers collected demographic data; and (3) while 94\% of papers were single-site studies, only 14\% addressed the limitations of their contexts. We also identified hegemonic norms through ambiguous aggregate term usage (e.g. underrepresented, diverse) in 23\% of papers, and through incomplete reporting of demographics (i.e. leaving out demographics for some participants in their sample) in 35\% of papers. We discuss the implications of these findings for the CER field, raising considerations for CER researchers to keep in mind when collecting, reporting, and using demographic data.},
  isbn = {978-1-4503-9194-8},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/3ATS8PIA/Oleson et al. - 2022 - A Decade of Demographics in Computing Education Re.pdf}
}

@incollection{olteanuXPathLookingForward2002,
  title = {{{XPath}}: {{Looking Forward}}},
  shorttitle = {{{XPath}}},
  booktitle = {{{XML-Based Data Management}} and {{Multimedia Engineering}} \textemdash{} {{EDBT}} 2002 {{Workshops}}},
  author = {Olteanu, Dan and Meuss, Holger and Furche, Tim and Bry, Fran{\c c}ois},
  editor = {Goos, Gerhard and Hartmanis, Juris and {van Leeuwen}, Jan and Chaudhri, Akmal B. and Unland, Rainer and Djeraba, Chabane and Lindner, Wolfgang},
  year = {2002},
  volume = {2490},
  pages = {109--127},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/3-540-36128-6_7},
  urldate = {2022-11-17},
  abstract = {The location path language XPath is of particular importance for XML applications since it is a core component of many XML processing standards such as XSLT or XQuery. In this paper, based on axis symmetry of XPath, equivalences of XPath 1.0 location paths involving reverse axes, such as ancestor and preceding, are established. These equivalences are used as rewriting rules in an algorithm for transforming location paths with reverse axes into equivalent reverse-axis-free ones. Location paths without reverse axes, as generated by the presented rewriting algorithm, enable efficient SAX-like streamed data processing of XPath.},
  isbn = {978-3-540-00130-0 978-3-540-36128-2},
  langid = {english},
  keywords = {xpath},
  file = {/Users/igormoreno/Zotero/storage/KEGIR7N7/Olteanu et al. - 2002 - XPath Looking Forward.pdf}
}

@inproceedings{omarHazelnutBidirectionallyTyped2017,
  title = {Hazelnut: A Bidirectionally Typed Structure Editor Calculus},
  shorttitle = {Hazelnut},
  booktitle = {Proceedings of the 44th {{ACM SIGPLAN Symposium}} on {{Principles}} of {{Programming Languages}}},
  author = {Omar, Cyrus and Voysey, Ian and Hilton, Michael and Aldrich, Jonathan and Hammer, Matthew A.},
  year = {2017},
  month = jan,
  series = {{{POPL}} '17},
  pages = {86--99},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3009837.3009900},
  urldate = {2022-08-26},
  abstract = {Structure editors allow programmers to edit the tree structure of a program directly. This can have cognitive benefits, particularly for novice and end-user programmers. It also simplifies matters for tool designers, because they do not need to contend with malformed program text. This paper introduces Hazelnut, a structure editor based on a small bidirectionally typed lambda calculus extended with holes and a cursor. Hazelnut goes one step beyond syntactic well-formedness: its edit actions operate over statically meaningful incomplete terms. Na\"ively, this would force the programmer to construct terms in a rigid "outside-in" manner. To avoid this problem, the action semantics automatically places terms assigned a type that is inconsistent with the expected type inside a hole. This meaningfully defers the type consistency check until the term inside the hole is finished. Hazelnut is not intended as an end-user tool itself. Instead, it serves as a foundational account of typed structure editing. To that end, we describe how Hazelnut's rich metatheory, which we have mechanized using the Agda proof assistant, serves as a guide when we extend the calculus to include binary sum types. We also discuss various interpretations of holes, and in so doing reveal connections with gradual typing and contextual modal type theory, the Curry-Howard interpretation of contextual modal logic. Finally, we discuss how Hazelnut's semantics lends itself to implementation as an event-based functional reactive program. Our simple reference implementation is written using js\_of\_ocaml.},
  isbn = {978-1-4503-4660-3},
  keywords = {bidirectional type systems,gradual typing,mechanized metatheory,structure editors},
  file = {/Users/igormoreno/Zotero/storage/AME9BWV7/Omar et al - 2017 - Hazelnut.pdf}
}

@article{orbanComputationalThinkingIntroductory2020,
  title = {Computational {{Thinking}} in {{Introductory Physics}}},
  author = {Orban, C. M. and {Teeling-Smith}, R. M.},
  year = {2020},
  month = mar,
  journal = {The Physics Teacher},
  volume = {58},
  number = {4},
  pages = {247--251},
  publisher = {{American Association of Physics Teachers}},
  issn = {0031-921X},
  doi = {10.1119/1.5145470},
  urldate = {2021-02-16},
  annotation = {00001},
  file = {/Users/igormoreno/Zotero/storage/IFWRRXJD/Orban and Teeling-Smith - 2020 - Computational Thinking in Introductory Physics.pdf;/Users/igormoreno/Zotero/storage/9CG4FF84/1.html}
}

@inproceedings{ostlundWelterweightJava2010,
  title = {Welterweight {{Java}}},
  booktitle = {Objects, {{Models}}, {{Components}}, {{Patterns}}},
  author = {{\"O}stlund, Johan and Wrigstad, Tobias},
  editor = {Vitek, Jan},
  year = {2010},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {97--116},
  publisher = {{Springer}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-13953-6_6},
  abstract = {This paper presents Welterweight Java (WJ), a new minimal core Java calculus intended to be a suitable starting point for investigations in the semantics of Java-like programs. To this end, WJ adds a few extra pounds to Featherweight Java. WJ is imperative and stateful, which is a frequent extension of Featherweight Java. To account for the importance of concurrency, WJ models Java's thread-based concurrency and lock-based synchronisation. The design of WJ is distilled from recent work on concurrent Java-like systems. We believe that the calculus is a good starting point for extensions. We illustrate the potential of the calculus by showing two extensions. The first is a version of WJ extended with deep ownership. This serves two purposes\textemdash it is a minimal formalisation of ownership, interesting in its own right, and shows how easily WJ can be extended. The second is a simple non-null types system.},
  isbn = {978-3-642-13953-6},
  langid = {english},
  keywords = {Core Formalism,Method Call,Ownership Type,Static Semantic,Type Environment},
  file = {/Users/igormoreno/Zotero/storage/4U2DLKAX/Östlund and Wrigstad - 2010 - Welterweight Java.pdf}
}

@inproceedings{ostlundWelterweightJava2010a,
  title = {Welterweight {{Java}}},
  booktitle = {Objects, {{Models}}, {{Components}}, {{Patterns}}},
  author = {{\"O}stlund, Johan and Wrigstad, Tobias},
  editor = {Vitek, Jan},
  year = {2010},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {97--116},
  publisher = {{Springer}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-13953-6_6},
  abstract = {This paper presents Welterweight Java (WJ), a new minimal core Java calculus intended to be a suitable starting point for investigations in the semantics of Java-like programs. To this end, WJ adds a few extra pounds to Featherweight Java. WJ is imperative and stateful, which is a frequent extension of Featherweight Java. To account for the importance of concurrency, WJ models Java's thread-based concurrency and lock-based synchronisation. The design of WJ is distilled from recent work on concurrent Java-like systems. We believe that the calculus is a good starting point for extensions. We illustrate the potential of the calculus by showing two extensions. The first is a version of WJ extended with deep ownership. This serves two purposes\textemdash it is a minimal formalisation of ownership, interesting in its own right, and shows how easily WJ can be extended. The second is a simple non-null types system.},
  isbn = {978-3-642-13953-6},
  langid = {english},
  keywords = {Core Formalism,Method Call,Ownership Type,Static Semantic,Type Environment},
  file = {/Users/igormoreno/Zotero/storage/S3YJIIFD/Östlund and Wrigstad - 2010 - Welterweight Java.pdf}
}

@inproceedings{ottmarTeachingPerceptualStructure2012,
  title = {Teaching the {{Perceptual Structure}} of {{Algebraic Expressions}}:},
  booktitle = {Proceedings of the {{Annual Meeting}} of the {{Cognitive Science Society}}},
  author = {Ottmar, Erin and Landy, David and Goldstone, Robert L},
  year = {2012},
  volume = {34},
  pages = {2156--2161},
  publisher = {{Cognitive Science Society}},
  address = {{Sapporo, Japan}},
  abstract = {We describe an intervention being developed by our research team, Pushing Symbols (PS). This intervention is designed to encourage learners to treat symbol systems as physical objects that move and change over time according to dynamic principles. We provide students with the opportunities to explore algebraic structure by physically manipulating and interacting with concrete and virtual symbolic systems that enforce rules through constraints on physical transformations.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/W6G2JKFV/Ottmar et al - 2012 - Teaching the Perceptual Structure of Algebraic Expressions.pdf}
}

@article{ouahbiLearningBasicProgramming2015,
  title = {Learning {{Basic Programming Concepts}} by {{Creating Games}} with {{Scratch Programming Environment}}},
  author = {Ouahbi, Ibrahim and Kaddari, Fatiha and Darhmaoui, Hassane and Elachqar, Abdelrhani and Lahmine, Soufiane},
  year = {2015},
  month = jun,
  journal = {Procedia - Social and Behavioral Sciences},
  series = {The {{Proceedings}} of 6th {{World Conference}} on Educational {{Sciences}}},
  volume = {191},
  pages = {1479--1482},
  issn = {1877-0428},
  doi = {10.1016/j.sbspro.2015.04.224},
  urldate = {2018-12-02},
  abstract = {A number of researchers have documented several difficulties faced by learners of basic programming concepts. Among the suggested pedagogical solutions to overcome these difficulties is the use of serious games inthe learning process. In fact, these games are more likely to boost the motivation of students and allow them to develop their knowledge efficiently. Our studyfocuses on evaluating such usage and the resulting students' motivation towards programming. We've made students create simple games using the Scratch game environment in order for them to learn programming basics. The experiment was conducted with a group of 69 high school science major students. This group of students was arbitrarily chosen and divided into three sub-groups. With the first sub-groupwe experimented with our pedagogical method based on the creation of simple games using Scratch environment. With the other sub-groups we used a conventional method based on Pascal programming language. Twosurveys were distributed at the beginning and at the end of the experimentation in order to identify the programming level of students, their gaming habits, their motivation and interest for programming in the future. The analysis of the surveysshows that using an environment for learning programming such as Scratch highly motivate students and empower them to pursue their studies in programming. In fact, when learners were asked about their desire to continue their studies in programming, 65\% of students who have experienced with Scratch environment consider continuing their studies in programming whereas only 10.3\% of students who used a standard programming environment showed some interest.},
  keywords = {introductory programming,motivation,scratch,Serious games},
  annotation = {00095},
  file = {/Users/igormoreno/Zotero/storage/462IS9PZ/Ouahbi et al - 2015 - Learning Basic Programming Concepts by Creating Games with Scratch Programming.pdf;/Users/igormoreno/Zotero/storage/ANDSHL8C/S1877042815024842.html}
}

@article{p.roseDesigningProgrammingGame2020,
  title = {Designing a {{Programming Game}} to {{Improve Children}}'s {{Procedural Abstraction Skills}} in {{Scratch}}},
  author = {P. Rose, Simon and Habgood, M. P. Jacob and Jay, Tim},
  year = {2020},
  month = dec,
  journal = {Journal of Educational Computing Research},
  volume = {58},
  number = {7},
  pages = {1372--1411},
  issn = {0735-6331, 1541-4140},
  doi = {10.1177/0735633120932871},
  urldate = {2023-03-16},
  abstract = {The recent shift in compulsory education from ICT-focused computing curricula to informatics, digital literacy and computer science, has resulted in children being taught computing using block-based programming tools such as Scratch, with teaching that is often limited by school resources and teacher expertise. Even without these limitations, Scratch users often produce code with `code smells' such as duplicate blocks and long scripts which impact how they understand and debug projects. These code smells can be removed using procedural abstraction, an important concept in computer science rarely taught to this age group. This article describes the design of a novel educational block-based programming game, Pirate Plunder, which concentrates on how procedural abstraction is introduced and reinforced. The article then reports an extended evaluation to measure the game's efficacy with children aged 10 and 11, finding that children who played the game were then able to use procedural abstraction in Scratch. The article then uses game analytics to explore why the game was effective and gives three recommendations for educational game design based on this research: using learning trajectories and restrictive success conditions to introduce complex content, increasing learner investment through customisable avatars and suggestions for improving the evaluations of educational games.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/IFB4DHZ4/P. Rose et al. - 2020 - Designing a Programming Game to Improve Children’s.pdf}
}

@article{p.roseDesigningProgrammingGame2020a,
  title = {Designing a {{Programming Game}} to {{Improve Children}}'s {{Procedural Abstraction Skills}} in {{Scratch}}},
  author = {P. Rose, Simon and Habgood, M. P. Jacob and Jay, Tim},
  year = {2020},
  month = dec,
  journal = {Journal of Educational Computing Research},
  volume = {58},
  number = {7},
  pages = {1372--1411},
  issn = {0735-6331, 1541-4140},
  doi = {10.1177/0735633120932871},
  urldate = {2023-03-16},
  abstract = {The recent shift in compulsory education from ICT-focused computing curricula to informatics, digital literacy and computer science, has resulted in children being taught computing using block-based programming tools such as Scratch, with teaching that is often limited by school resources and teacher expertise. Even without these limitations, Scratch users often produce code with `code smells' such as duplicate blocks and long scripts which impact how they understand and debug projects. These code smells can be removed using procedural abstraction, an important concept in computer science rarely taught to this age group. This article describes the design of a novel educational block-based programming game, Pirate Plunder, which concentrates on how procedural abstraction is introduced and reinforced. The article then reports an extended evaluation to measure the game's efficacy with children aged 10 and 11, finding that children who played the game were then able to use procedural abstraction in Scratch. The article then uses game analytics to explore why the game was effective and gives three recommendations for educational game design based on this research: using learning trajectories and restrictive success conditions to introduce complex content, increasing learner investment through customisable avatars and suggestions for improving the evaluations of educational games.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/D9JPKHUA/P. Rose et al. - 2020 - Designing a Programming Game to Improve Children’s.pdf}
}

@article{paasOptimisingWorkedExample2006,
  title = {Optimising Worked Example Instruction: {{Different}} Ways to Increase Germane Cognitive Load},
  shorttitle = {Optimising Worked Example Instruction},
  author = {Paas, Fred and {van Gog}, Tamara},
  year = {2006},
  month = apr,
  journal = {Learning and Instruction},
  series = {Recent {{Worked Examples Research}}: {{Managing Cognitive Load}} to {{Foster Learning}} and {{Transfer}}},
  volume = {16},
  number = {2},
  pages = {87--91},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2006.02.004},
  urldate = {2018-11-06},
  abstract = {Worked examples are an effective instructional means to teach complex problem-solving skills. It has been argued that worked examples decrease extraneous load, enabling more Working Memory (WM) resources to be directed to activities that facilitate learning and transfer performance. Hence, cognitive load research has started to shift its focus towards finding instructional techniques that impose a germane cognitive load by stimulating the allocation of WM resources to such activities. This special issue provides an overview of recent experimental research on ways to further optimise the design and delivery of worked examples in order to foster learning and transfer.},
  file = {/Users/igormoreno/Zotero/storage/MDK4CVTS/Paas and van Gog - 2006 - Optimising worked example instruction Different w.pdf;/Users/igormoreno/Zotero/storage/5IA3QRTI/S0959475206000181.html}
}

@misc{padioleauSemgrepFastLightweight2021,
  title = {Semgrep, a Fast, Lightweight, Polyglot, Static Analysis Tool to Find Bugs ({{OCaml}} 2021) - {{ICFP}} 2021},
  author = {Padioleau, Yoann},
  year = {2021},
  month = aug,
  urldate = {2022-11-17},
  abstract = {The OCaml Users and Developers Workshop brings together industrial users of OCaml with academics and hackers who are working on extending the language, type system, and tools. Previous editions have been co-located with ICFP 2012 in Copenhagen, ICFP 2013 in Boston, ICFP 2014 in Gothenburg, ICFP 2015 in Vancouver, ICFP 2016 in Nara, ICFP 2017 in Oxford, ICFP 2018 in St Louis, ICFP 2019 in Berlin, and was virtual for ICFP 2020, following the OCaml Meetings in Paris in 2010 and 2011.  OCaml 2021 will be a virtual workshop, co-located with ICFP 2021.  Please contact the PC Chair (Fr\'ed\'eric Bour ...},
  howpublished = {https://icfp21.sigplan.org/details/ocaml-2021-papers/18/Semgrep-a-fast-lightweight-polyglot-static-analysis-tool-to-find-bugs},
  keywords = {semgrep},
  file = {/Users/igormoreno/Zotero/storage/QG88546N/Semgrep, a fast, lightweight, polyglot, static ana.pdf;/Users/igormoreno/Zotero/storage/LNTCEHFI/Semgrep-a-fast-lightweight-polyglot-static-analysis-tool-to-find-bugs.html}
}

@article{paganNestedSublanguagesAlgol1980,
  title = {Nested Sublanguages of {{Algol}} 68 for Teaching Purposes},
  author = {Pagan, Frank G.},
  year = {1980},
  month = jul,
  journal = {ACM SIGPLAN Notices},
  volume = {15},
  number = {7 and 8},
  pages = {72--81},
  issn = {0362-1340, 1558-1160},
  doi = {10.1145/947680.947687},
  urldate = {2020-09-29},
  langid = {english},
  annotation = {00008},
  file = {/Users/igormoreno/Zotero/storage/FKUTQNXS/Pagan - 1980 - Nested sublanguages of Algol 68 for teaching purpo.pdf}
}

@article{paivaAsuraGameBasedAssessment2018,
  title = {Asura: {{A Game-Based Assessment Environment}} for {{Mooshak}} ({{Short Paper}})},
  shorttitle = {Asura},
  author = {Paiva, Jos{\'e} Carlos and Leal, Jos{\'e} Paulo},
  year = {2018},
  pages = {9 pages},
  publisher = {{Schloss Dagstuhl - Leibniz-Zentrum fuer Informatik GmbH, Wadern/Saarbruecken, Germany}},
  doi = {10.4230/OASICS.SLATE.2018.9},
  urldate = {2020-06-22},
  abstract = {Learning to program is hard. Students need to remain motivated to keep practicing and to overcome their difficulties. Several approaches have been proposed to foster students' motivation. As most people enjoy playing games of some kind and play on a regular basis, the use of games is one of the most widely spread approaches. However, taking full advantage of games to teach specific concepts of programming requires much effort. This paper presents Asura, a game-based assessment environment built on top of Mooshak that challenges students to code Software Agents (SAs) to play a game, allowing them to test the SAs against each others' SAs and watch a movie of the test. Once the challenge development stage ends, teachers are able to organize gamelike tournaments among SAs. One of the key features of Asura is that it provides a means to reduce the required effort of building game-based challenges up to that of creating traditional programming exercises.},
  collaborator = {Wagner, Michael},
  langid = {english},
  keywords = {{000 Computer science, knowledge, general works},Computer Science},
  file = {/Users/igormoreno/Zotero/storage/WP2VUJ6C/Paiva and Leal - 2018 - Asura A Game-Based Assessment Environment for Moo.pdf}
}

@article{pallottiSimpleViewLinguistic2015,
  title = {A Simple View of Linguistic Complexity},
  author = {Pallotti, Gabriele},
  year = {2015},
  journal = {Second Language Research},
  volume = {31},
  number = {1},
  eprint = {26375812},
  eprinttype = {jstor},
  pages = {117--134},
  publisher = {{Sage Publications, Ltd.}},
  issn = {0267-6583},
  urldate = {2021-10-10},
  abstract = {Although a growing number of second language acquisition (SLA) studies take linguistic complexity as a dependent variable, the term is still poorly defined and often used with different meanings, thus posing serious problems for research synthesis and knowledge accumulation. This article proposes a simple, coherent view of the construct, which is defined in a purely structural way, i.e. the complexity directly arising from the number of linguistic elements and their interrelationships. Issues of cognitive cost (difficulty) or developmental dynamics (acquisition) are explicitly excluded from this theoretical definition and its operationalization. The article discusses how the complexity of an interlanguage system can be assessed based on the limited samples with which SLA researchers usually work. For the areas of morphology, syntax and the lexicon, some measures are proposed that are coherent with the purely structural view advocated, and issues related to their operationalization are critically scrutinized.},
  file = {/Users/igormoreno/Zotero/storage/896PHVGC/Pallotti - 2015 - A simple view of linguistic complexity.pdf}
}

@article{palumboProgrammingLanguageProblemSolving1990,
  title = {Programming {{Language}}/{{Problem-Solving Research}}: {{A Review}} of {{Relevant Issues}}},
  shorttitle = {Programming {{Language}}/{{Problem-Solving Research}}},
  author = {Palumbo, David B.},
  year = {1990},
  month = mar,
  journal = {Review of Educational Research},
  volume = {60},
  number = {1},
  pages = {65--89},
  issn = {0034-6543},
  doi = {10.3102/00346543060001065},
  urldate = {2018-11-30},
  abstract = {This article addresses several key issues in the research on the potential relationship between programming language instruction and problem solving. Although the computer has been touted as the technology that will effectively develop both the declarative and procedural knowledge needed to establish good problem solvers, research supporting this claim has been slow to materialize. Several reasons for the lack of significant research findings are discussed. Many studies have not been sufficiently grounded in problem-solving theory. The question of expertise and transfer of training is also addressed. Other issues critical to successfully designing programming language/problem-solving research include (a) treatment-related issues, such as the method and duration of programming instruction; (b) language-related issues\textemdash that is, selecting the most beneficial programming language; and (c) selection of an appropriate sample.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/8TGWB9QY/Palumbo - 1990 - Programming Language-Problem-Solving Research.pdf}
}

@inproceedings{pancratzDealingPreConceptions2020,
  title = {Dealing with (Pre-)Conceptions: Introduction of a "First Aid Kit" for "Learning Doctors" in Computer Science Classes},
  shorttitle = {Dealing with (Pre-)Conceptions},
  booktitle = {Proceedings of the 15th {{Workshop}} on {{Primary}} and {{Secondary Computing Education}}},
  author = {Pancratz, Nils},
  year = {2020},
  month = oct,
  series = {{{WiPSCE}} '20},
  pages = {1--2},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3421590.3421618},
  urldate = {2021-01-15},
  abstract = {The fact that (pre-)knowledge must be addressed in class has been widely recognized in the scientific community for several years now. Fortunately, a growing number of studies on learners' conceptions of the Internet, computers, smartphones and other computer science related topics is the academic response to constructivist epistemology. However, many of these contributions unfortunately end after a presentation and discussion of the results, without concrete recommendations for teachers on how to methodologically deal with (typical mis-)conceptions. Therefore, based on research-based teaching practices of other science didactics, this contribution introduces various teaching tools into the field of computer science education by exemplarily adapting them to the results of research on learners' conceptions of computing system architecture.},
  isbn = {978-1-4503-8759-0},
  keywords = {computer science education,concept cartoons,concept inventories,conceptual change,refutation texts,research-based teaching},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/ISMBW26Y/Pancratz - 2020 - Dealing with (pre-)conceptions introduction of a .pdf}
}

@inproceedings{panticStudyingSituatedLearning2016,
  title = {Studying Situated Learning in a Constructionist Programming Camp: {{A}} Multimethod Microgenetic Analysis of One Girl's Learning Pathway},
  shorttitle = {Studying Situated Learning in a Constructionist Programming Camp},
  booktitle = {Proceedings of the {{The}} 15th {{International Conference}} on {{Interaction Design}} and {{Children}} - {{IDC}} '16},
  author = {Pantic, Katarina and Fields, Deborah A. and Quirke, Lisa},
  year = {2016},
  pages = {428--439},
  publisher = {{ACM Press}},
  address = {{Manchester, United Kingdom}},
  doi = {10.1145/2930674.2930725},
  urldate = {2018-10-22},
  abstract = {Computationally generated data have increasingly been used to provide insights into individual students' learning in constructionist learning environments. However, such studies have either missed examining the influence of local, physical environments, or they have taken students out of the situated scenarios to study them in isolation. In this paper, we explore an expanded methodological approach in order to examine how computationally generated data insights can potentially be informed or expanded with a microgenetic approach. To achieve that, we examine one ten-year-old novice girl's learning of programming in a week-long Scratch camp, applying a microgenetic approach to analysis across multiple forms of data, from traditional observational and artifact documentation to frequent, computationally generated save data. The findings highlight the utility of this approach in identifying Mila's growing engagement with coding, as well as the iterative and social nature of her learning experiences with Scratch.},
  isbn = {978-1-4503-4313-8},
  langid = {english},
  annotation = {00003},
  file = {/Users/igormoreno/Zotero/storage/8EZWHVXV/Pantic et al - 2016 - Studying situated learning in a constructionist programming camp.pdf}
}

@article{papadakisComparingNovicePrograming2018,
  title = {Comparing Novice Programing Environments for Use in Secondary Education: {{App Inventor}} for {{Android}} vs. {{Alice}}},
  shorttitle = {Comparing Novice Programing Environments for Use in Secondary Education},
  author = {Papadakis, Stamatios and Orfanakis, Vasileios},
  year = {2018},
  journal = {International Journal of Technology Enhanced Learning},
  volume = {10},
  number = {1/2},
  pages = {44},
  issn = {1753-5255, 1753-5263},
  doi = {10.1504/IJTEL.2018.10008587},
  urldate = {2020-06-22},
  abstract = {Coding is part of logical thinking and is one of the basic skills which are known as `21st-century skills'. Coding acquisition is necessary as it is used in a wide range of occupations. However, computer programing is difficult to learn and programing courses often have high drop-out rates. Novice programmers suffer from a wide range of difficulties and deficits. Research in teaching and learning programing across different countries and educational contexts reveal that novice programmers face the same challenges in their efficiency of writing, debugging and running programs. These difficulties have led those involved in the teaching of programing to further consider the most effective ways that can facilitate novice programmers in learning the basic programing concepts. Visual programing environments which support the construction of programs through a drag-and-drop interface are among the most popular coding tools for teaching novice programmers. In this paper, we investigate the use of Alice and App Inventor for Android, with regard to their effectiveness for teaching and learning programing in secondary education students.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/QPSF27C7/Papadakis and Orfanakis - 2018 - Comparing novice programing environments for use in secondary education.pdf}
}

@inproceedings{papamitsiouComputingEducationResearch2020,
  title = {Computing {{Education Research Landscape}} through an {{Analysis}} of {{Keywords}}},
  booktitle = {Proceedings of the 2020 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Papamitsiou, Zacharoula and Giannakos, Michail and Simon, - and {Luxton-Reilly}, Andrew},
  year = {2020},
  month = aug,
  series = {{{ICER}} '20},
  pages = {102--112},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3372782.3406276},
  urldate = {2021-01-15},
  abstract = {Authors of academic papers are generally required to nominate several keywords that characterize the paper, but are rarely offered guidance on how to select those keywords. We analyzed the keywords in the past 15 years of selected computing education publications: the 1274 papers published in the proceedings of ICER and ITiCSE, including the ITiCSE working group reports. As well as the keywords assigned by the authors, we mined the abstracts of these papers to extract a separate list of keywords. Our work has two goals: to frame the thematic landscape of the field, using keywords that communicate the work conducted; and to detect differences between the human judgement and interpretation of keywords and the machine 'intelligence' on handling those keywords, with respect to the clusters of thematic topics identified in each case. The analysis shows that the field is dominated by learning approaches (e.g., active learning, collaborative learning), aspects of programming (e.g., debugging, misconceptions), computational thinking, feedback, and assessment, while other areas that have attracted attention include academic integrity (e.g., plagiarism) and diversity (e.g., female students, underrepresented groups). It was observed that the keywords chosen by authors are often too general to provide information about the paper (e.g., 'concerns', 'course', 'fun', 'justice'). We elaborate on the findings and begin a discussion on how authors can improve the communication of their research and make access to it more transparent.},
  isbn = {978-1-4503-7092-9},
  keywords = {bibliometrics,computing education,dominant themes,keywords},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/ERCCYPQK/Papamitsiou et al - 2020 - Computing Education Research Landscape through an Analysis of Keywords.pdf}
}

@techreport{papertComputerLaboratoryElementary1971,
  title = {A {{Computer Laboratory}} for {{Elementary Schools}}},
  author = {Papert, Seymour A.},
  year = {1971},
  month = oct,
  number = {AIM-246 / LOGO Memo 1},
  institution = {{MIT}},
  urldate = {2022-01-12},
  abstract = {This is a research project on elementary education whose immediate objective is the development of new methods and materials for teaching in an environment of computers and computer-controlled devices. Longer term objectives are related to theories of cognitive processes and to conjectures about the possibility of producing much larger changes than are usually thought possible in the expected intellectual achievement of children. This proposal is formulated in terms of the self-sufficient immediate objectives.},
  langid = {american},
  annotation = {Accepted: 2004-10-01T20:47:09Z},
  file = {/Users/igormoreno/Zotero/storage/G7JR5CRD/Papert - 1971 - A Computer Laboratory for Elementary Schools.pdf;/Users/igormoreno/Zotero/storage/BCZC4HSE/5834.html}
}

@book{papertMindstormsChildrenComputers1980,
  title = {Mindstorms: Children, Computers, and Powerful Ideas},
  shorttitle = {Mindstorms},
  author = {Papert, Seymour},
  year = {1980},
  publisher = {{Basic Books, Inc.}},
  address = {{USA}},
  abstract = {The Gears of My Childhood Before I was two years old I had developed an intense involvement with automobiles. The names of car parts made up a very substantial portion of my vocabulary: I was particularly proud of knowing about the parts of the transmission system, the gearbox, and most especially the differential. It was, of course, many years later before I understood how gears work; but once I did, playing with gears became a favorite pastime. I loved rotating circular objects against one another in gearlike motions and, naturally, my first "erector set" project was a crude gear system. I became adept at turning wheels in my head and at making chains of cause and effect: "This one turns this way so that must turn that way so . . . " I found particular pleasure in such systems as the differential gear, which does not follow a simple linear chain of causality since the motion in the transmission shaft can be distributed in many different ways to the two wheels depending on what resistance they encounter. I remember quite vividly my excitement at discovering that a system could be lawful and completely comprehensible without being rigidly deterministic. I believe that working with differentials did more for my mathematical development than anything I was taught in elementary school. Gears, serving as models, carried many otherwise abstract ideas into my head. I clearly remember two examples from school math. I saw multiplication tables as gears, and my first brush with equations in two variables (e.g., 3x + 4y = 10) immediately evoked the differential. By the time I had made a mental gear model of the relation between x and y, figuring how many teeth each gear needed, the equation had become a comfortable friend. Many years later when I read Piaget this incident served me as a model for his notion of assimilation, except I was immediately struck by the fact that his discussion does not do full justice to his own idea. He talks almost entirely about cognitive aspects of assimilation. But there is also an affective component. Assimilating equations to gears certainly is a powerful way to bring old knowledge to bear on a new object. But it does more as well. I am sure that such assimilations helped to endow mathematics, for me, with a positive affective tone that can be traced back to my infantile experiences with cars. I believe Piaget really agrees. As I came to know him personally I understood that his neglect of the affective comes more from a modest sense that little is known about it than from an arrogant sense of its irrelevance. But let me return to my childhood. One day I was surprised to discover that some adults---even most adults---did not understand or even care about the magic of the gears. I no longer think much about gears, but I have never turned away from the questions that started with that discovery: How could what was so simple for me be incomprehensible to other people? My proud father suggested "being clever" as an explanation. But I was painfully aware that some people who could not understand the differential could easily do things I found much more difficult. Slowly I began to formulate what I still consider the fundamental fact about learning: Anything is easy if you can assimilate it to your collection of models. If you can't, anything can be painfully difficult. Here too I was developing a way of thinking that would be resonant with Piaget's. The understanding of learning must be genetic. It must refer to the genesis of knowledge. What an individual can learn, and how he learns it, depends on what models he has available. This raises, recursively, the question of how he learned these models. Thus the "laws of learning" must be about how intellectual structures grow out of one another and about how, in the process, they acquire both logical and emotional form. This book is an exercise in an applied genetic epistemology expanded beyond Piaget's cognitive emphasis to include a concern with the affective. It develops a new perspective for education research focused on creating the conditions under which intellectual models will take root. For the last two decades this is what I have been trying to do. And in doing so I find myself frequently reminded of several aspects of my encounter with the differential gear. First, I remember that no one told me to learn about differential gears. Second, I remember that there was feeling, love, as well as understanding in my relationship with gears. Third, I remember that my first encounter with them was in my second year. If any "scientific" educational psychologist had tried to "measure" the effects of this encounter, he would probably have failed. It had profound consequences but, I conjecture, only very many years later. A "pre- and post-" test at age two would have missed them. Piaget's work gave me a new framework for looking at the gears of my childhood. The gear can be used to illustrate many powerful "advanced" mathematical ideas, such as groups or relative motion. But it does more than this. As well as connecting with the formal knowledge of mathematics, it also connects with the "body knowledge," the sensorimotor schemata of a child. You can be the gear, you can understand how it turns by projecting yourself into its place and turning with it. It is this double relationship---both abstract and sensory---that gives the gear the power to carry powerful mathematics into the mind. In a terminology I shall develop in later chapters, the gear acts here as a transitional object. A modern-day Montessori might propose, if convinced by my story, to create a gear set for children. Thus every child might have the experience I had. But to hope for this would be to miss the essence of the story. I fell in love with the gears. This is something that cannot be reduced to purely "cognitive" terms. Something very personal happened, and one cannot assume that it would be repeated for other children in exactly the same form. My thesis could be summarized as: What the gears cannot do the computer might. The computer is the Proteus of machines. Its essence is its universality, its power to simulate. Because it can take on a thousand forms and can serve a thousand functions, it can appeal to a thousand tastes. This book is the result of my own attempts over the past decade to turn computers into instruments flexible enough so that many children can each create for themselves something like what the gears were for me.},
  isbn = {978-0-465-04627-0},
  file = {/Users/igormoreno/Zotero/storage/P6HJ92VW/Papert - 1980 - Mindstorms.pdf}
}

@techreport{papertNIMGamePlayingProgram1970,
  title = {{{NIM}}: {{A Game-Playing Program}}},
  shorttitle = {{{NIM}}},
  author = {Papert, Seymour A. and Solomon, Cynthia},
  year = {1970},
  month = jan,
  number = {AIM-254 / LOGO Memo 5},
  institution = {{MIT}},
  urldate = {2022-01-12},
  abstract = {This note illustrates some ideas about how to  initiate beginning students into the art of  planning and writing a program complex  enough to be considered a project rather than  an exercise on using the language or simple  programming ideas. The project is to write a  program to play a simple game ("one-pile  NIM" or "21") as invincibly as possible. We  developed the project for a class of seventh  grader children we taught in 1968-69 at the  Muzzey Junior High School in Lexington,  Massachusetts. This was the longest  programming project these children had  encountered, and our intention was to give  them a model of how to go about working  under these conditions.},
  langid = {american},
  annotation = {Accepted: 2004-10-04T14:45:35Z},
  file = {/Users/igormoreno/Zotero/storage/Y9MZAPDH/Papert and Solomon - 1970 - NIM.pdf;/Users/igormoreno/Zotero/storage/B5LXDLDJ/6199.html}
}

@techreport{papertTeachingChildrenBe1971,
  title = {Teaching {{Children}} to Be {{Mathematicians}} vs. {{Teaching About Mathematics}}},
  author = {Papert, Seymour A.},
  year = {1971},
  month = jul,
  number = {AIM-249 / LOGO Memo 4},
  institution = {{MIT}},
  urldate = {2022-01-12},
  abstract = {Being a mathematician is no more definable as 'knowing' a set of mathematical facts than being a poet is definable as knowing a set of linguistic facts. Some modern math ed reformers will give this statement a too easy assent with the comment: 'Yes, they must understand, not merely know.' But this misses the capital point that being a mathematician, again like being a poet, or a composer or an engineer, means doing, rather than knowing or understanding. This essay is an attempt to explore some ways in which one might be able to put children in a better position to do mathematics rather than merely to learn about it.},
  langid = {american},
  annotation = {Accepted: 2004-10-01T20:47:14Z},
  file = {/Users/igormoreno/Zotero/storage/MK8L5ZY4/Papert - 1971 - Teaching Children to be Mathematicians vs.pdf;/Users/igormoreno/Zotero/storage/XSP8AYKT/5837.html}
}

@article{papertTeachingChildrenBe1972,
  title = {Teaching {{Children}} to Be {{Mathematicians}} vs. {{Teaching About Mathematics}}},
  author = {Papert, Seymour A.},
  year = {1972},
  journal = {International Journal of Mathematical Education in Science and Technology},
  volume = {3},
  number = {3},
  pages = {249--262}
}

@techreport{papertTeachingChildrenThinking1971,
  title = {Teaching {{Children Thinking}}},
  author = {Papert, Seymour A.},
  year = {1971},
  month = oct,
  number = {AIM-247 / LOGO Memo 2},
  institution = {{MIT}},
  urldate = {2022-01-12},
  abstract = {This paper is dedicated to the hope that someone with power to act will one day see that contemporary research on education is like the following experiment by a nineteenth century engineer who worked to demonstrate that engines were better than horses. This he did by hitching a 1/8 HP motor in parallel with his team of four strong stallions. After a year of statistical research he announced a significant difference. However, it was generally thought that there was a Hawthorne effect on the horses.},
  langid = {american},
  annotation = {Accepted: 2004-10-01T20:47:10Z},
  file = {/Users/igormoreno/Zotero/storage/9QJJNXUK/Papert - 1971 - Teaching Children Thinking.pdf;/Users/igormoreno/Zotero/storage/QWY6VKIT/5835.html}
}

@techreport{papertTwentyThingsComputer1971,
  title = {Twenty {{Things To Do With A Computer}}},
  author = {Papert, Seymour A. and Solomon, Cynthia},
  year = {1971},
  month = jun,
  number = {AIM-248 / LOGO Memo 3},
  institution = {{MIT}},
  urldate = {2022-01-12},
  abstract = {When people talk about computers in education they do not all have the same image in mind. Some think of using the computer to program the kid; others think of using the kid to program the computer. But most of them have at least this in common: the transaction between the computer and the kid will be some kind of "conversation" or "questions and answers" in words or numbers.},
  langid = {american},
  annotation = {Accepted: 2004-10-01T20:47:12Z},
  file = {/Users/igormoreno/Zotero/storage/WK84YF8H/Papert and Solomon - 1971 - Twenty Things To Do With A Computer.pdf;/Users/igormoreno/Zotero/storage/TG6MI7GD/5836.html}
}

@techreport{papertUsesTechnologyEnhance1973,
  title = {Uses of {{Technology}} to {{Enhance Education}}},
  author = {Papert, Seymour A.},
  year = {1973},
  month = jun,
  number = {AIM-298 / LOGO Memo 8},
  institution = {{MIT}},
  urldate = {2022-01-12},
  abstract = {Section 1: Schematic outline of project and what we want. Hardly any intellectual content. Section 2: Statement of our goals in general terms. This statement is intended to have serious intellectual content but lacks meaty examples. Readers who find it too abstract for comfort might like to read at least part of \#3 first. Section 3: A series fo extended examples intended to give more concrete substance to the generalities in \#2. Section4: This is the real "proposal". It sets out specifically a list of concrete "goals" on which we want to work in the immediate future. Appendix: Papers by Jeanne Bamberger, Marvin Minsky, Seymour Papert and Cynthia Solomon.},
  langid = {american},
  annotation = {Accepted: 2004-10-04T14:46:10Z},
  file = {/Users/igormoreno/Zotero/storage/EDBHJRKB/Papert - 1973 - Uses of Technology to Enhance Education.pdf;/Users/igormoreno/Zotero/storage/5H3SQVP7/6213.html}
}

@article{pardoCombiningUniversityStudent2017,
  title = {Combining {{University Student Self-Regulated Learning Indicators}} and {{Engagement}} with {{Online Learning Events}} to {{Predict Academic Performance}}},
  author = {Pardo, A. and Han, F. and Ellis, R. A.},
  year = {Jan.-March 2017},
  journal = {IEEE Transactions on Learning Technologies},
  volume = {10},
  number = {1},
  pages = {82--92},
  issn = {1939-1382},
  doi = {10.1109/TLT.2016.2639508},
  urldate = {2018-10-06},
  abstract = {Self-regulated learning theories are used to understand the reasons for different levels of university student academic performance. Similarly, learning analytics research proposes the combination of detailed data traces derived from technology-mediated tasks with a variety of algorithms to predict student academic performance. The former approach is designed to provide meaningful pedagogical guidance, while the latter is designed to identify event patterns and relations that can be translated into actionable remediation. The benefits of both approaches have motivated this study to investigate if a combination of the self-report data and data arising from an observation of the engagement of students with online learning events offers a deeper understanding and explanation of why some students achieve relatively higher levels of academic performance. In this paper we explore how to combine data about self-regulated learning skills with observable measures of online activity in a blended learning course to increase predictive capabilities of student academic performance for the purposes of informing teaching and task design. A case study in a course with 145 students showed that the variation of the students' final score for their course is better explained when factors from both approaches are considered. The results point to the potential of adopting a combined use of self-report and observed data to gain a more comprehensive understanding of successful university student learning.},
  keywords = {Algorithm design and analysis,Australia,Context,Data mining,Education,Monitoring,Prediction algorithms},
  annotation = {00069},
  file = {/Users/igormoreno/Zotero/storage/8SHMJ3WH/Pardo et al - 2017 - Combining University Student Self-Regulated Learning Indicators and Engagement.pdf}
}

@article{parkDoesCognitiveLoad2011,
  title = {Does Cognitive Load Moderate the Seductive Details Effect? {{A}} Multimedia Study},
  shorttitle = {Does Cognitive Load Moderate the Seductive Details Effect?},
  author = {Park, Babette and Moreno, Roxana and Seufert, Tina and Br{\"u}nken, Roland},
  year = {2011},
  month = jan,
  journal = {Computers in Human Behavior},
  series = {Current {{Research Topics}} in {{Cognitive Load Theory}}},
  volume = {27},
  number = {1},
  pages = {5--10},
  issn = {0747-5632},
  doi = {10.1016/j.chb.2010.05.006},
  urldate = {2018-11-06},
  abstract = {Several studies have shown that adding seductive details to instructional materials has a detrimental effect on learning. However, other studies have shown non-significant findings. The present study uses cognitive load theory as a theoretical framework to explain these controversial results in seductive details research. Using a 2\texttimes 2 experimental design we asked a group of high-school students (N=100) to learn about biology with a multimedia environment that manipulated the presence of seductive details (with vs. without) and the modality of the verbal information (high load, on-screen text vs. low load, narration). The findings showed that students' learning performance was significantly higher when seductive details were presented under the low load condition (narration) as compared to all other conditions. The theoretical implications for understanding the effects of non-redundant and interesting, but irrelevant learning material are discussed and future research directions are presented.},
  keywords = {Cognitive load,Modality,Motivation,Multimedia learning,Redundancy,Seductive details},
  file = {/Users/igormoreno/Zotero/storage/PILUW2KG/Park et al - 2011 - Does cognitive load moderate the seductive details effect.pdf;/Users/igormoreno/Zotero/storage/WG2QHPML/S0747563210001263.html}
}

@inproceedings{parkerReplicationValidationUse2016,
  title = {Replication, {{Validation}}, and {{Use}} of a {{Language Independent CS1 Knowledge Assessment}}},
  booktitle = {Proceedings of the 2016 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Parker, Miranda C. and Guzdial, Mark and Engleman, Shelly},
  year = {2016},
  month = aug,
  series = {{{ICER}} '16},
  pages = {93--101},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2960310.2960316},
  urldate = {2021-07-23},
  abstract = {Computing education lags other discipline-based education research in the number and range of validated assessments available to the research community. Validated assessments are important for researchers to reduce experimental error due to flawed assessments and to allow for comparisons between different experiments. Although the need is great, building assessments from scratch is difficult. Once an assessment is built, it's important to be able to replicate it, in order to address problems within it, or to extend it. We developed the Second CS1 Assessment (SCS1) as an isomorphic version of a previously validated language-independent assessment for introductory computer science, the FCS1. Replicating the FCS1 is important to enable free use by a broader research community. This paper is documentation of our process for replicating an existing validated assessment and validating the success of our replication. We present initial use of SCS1 by other research groups, to serve as examples of where it might be used in the future. SCS1 is useful for researchers, but care must be taken to avoid undermining the validity argument.},
  isbn = {978-1-4503-4449-4},
  keywords = {assessment,cs1,replication,validity},
  file = {/Users/igormoreno/Zotero/storage/BR2B4EYS/Parker et al - 2016 - Replication, Validation, and Use of a Language Independent CS1 Knowledge.pdf;/Users/igormoreno/Zotero/storage/4S2FURDJ/citation.html}
}

@inproceedings{parkinsonInvestigatingRelationshipSpatial2018,
  title = {Investigating the {{Relationship Between Spatial Skills}} and {{Computer Science}}},
  booktitle = {Proceedings of the 2018 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Parkinson, Jack and Cutts, Quintin},
  year = {2018},
  month = aug,
  pages = {106--114},
  publisher = {{ACM}},
  address = {{Espoo Finland}},
  doi = {10.1145/3230977.3230990},
  urldate = {2020-06-22},
  abstract = {The relationship between spatial skills training and computer science learning is unclear. Reported experiments provide tantalising, though not convincing, evidence that training a programming student's spatial skills may accelerate the development of their programming skills. Given the well-documented challenge of learning to program, such acceleration would be welcomed. Despite the experimental results, no attempt has been made to develop a model of how a linkage between spatial skills and computer science ability might operate, hampering the development of a sound research programme to investigate the issue further. This paper surveys the literature on spatial skills and investigates the various underlying cognitive skills involved. It poses a theoretical model for the relationship between computer science ability and spatial skills, exploring ways in which the cognitive processes involved in each overlap, and hence may influence one another. An experiment shows that spatial skills typically increase as the level of academic achievement in computer science increases. Overall, this work provides a substantial foundation for, and encouragement to develop, a major research programme investigating precisely how spatial skills training influences computer science learning, and hence whether computer science education could be significantly improved.},
  isbn = {978-1-4503-5628-2},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/YY9VBT5E/Parkinson and Cutts - 2018 - Investigating the Relationship Between Spatial Skills and Computer Science.pdf}
}

@inproceedings{parkinsonRelatingSpatialSkills2020,
  title = {Relating {{Spatial Skills}} and {{Expression Evaluation}}},
  booktitle = {United {{Kingdom}} \& {{Ireland Computing Education Research}} Conference.},
  author = {Parkinson, Jack and Cutts, Quintin and Draper, Steve},
  year = {2020},
  month = sep,
  series = {{{UKICER}} '20},
  pages = {17--23},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3416465.3416473},
  urldate = {2022-08-06},
  abstract = {Work connecting spatial skills to computing has used course grades or marks, or general programming tests as the measure of computing ability. In order to map the relationship between spatial skills and computing more precisely, this paper picks out a particular subset of possible programming concepts and skills, that of expression evaluation. The paper describes the development of an expression evaluation test, which aims to identify participants' ability to perform evaluations of expressions across a range of complexity. The results indicate participants' expression evaluation ability was significantly correlated with a spatial skills test (r=0.48), even more so when only considering those with less prior programming experience (r=0.58). Thus, we have determined that spatial skills are of value in expression evaluation exercises, particularly for beginners.},
  isbn = {978-1-4503-8849-8},
  keywords = {expression evaluation,introductory computing,programming test,spatial skills},
  file = {/Users/igormoreno/Zotero/storage/PY7TE6MQ/Parkinson et al. - 2020 - Relating Spatial Skills and Expression Evaluation.pdf;/Users/igormoreno/Zotero/storage/WSD47Y4D/223925.pdf}
}

@article{parkRhythmMethodNew2015,
  title = {The {{Rhythm Method}}: {{A New Method}} for {{Measuring Cognitive Load}}\textemdash{{An Experimental Dual-Task Study}}},
  shorttitle = {The {{Rhythm Method}}},
  author = {Park, Babette and Br{\"u}nken, Roland},
  year = {2015},
  month = mar,
  journal = {Applied Cognitive Psychology},
  volume = {29},
  number = {2},
  pages = {232--243},
  issn = {1099-0720},
  doi = {10.1002/acp.3100},
  urldate = {2018-11-09},
  abstract = {The present study joins a series of studies that used the dual-task paradigm to measure cognitive load while learning with multimedia instruction. The goal of the current work was to develop a secondary task, to measure cognitive load in a direct and continuous way using intra-individual, behavioral measures. The new task is achieved by utilizing internalized cues. More specifically, a previously practiced rhythm is executed continuously by foot tapping (secondary task) while learning (primary task). Precision of the executed rhythm was used as indicator for cognitive load\textemdash the higher the precision, the lower cognitive load. The suitability of this method was examined by two multimedia experiments (n1 = 30; n2 = 50). Cognitive load was manipulated by seductive details (Experiment 1: with vs. without) and modality (Experiment 2: on-screen text vs. narration). Learners who learned under low cognitive load conditions (Experiment 1: without seductive details; Experiment 2: narration) showed significantly higher rhythm precision. These results provide evidence that rhythm precision allows for a precise and continuous measurement of cognitive load during learning. Copyright \textcopyright{} 2014 John Wiley \& Sons, Ltd.},
  copyright = {Copyright \textcopyright{} 2014 John Wiley \& Sons, Ltd.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/L4QUYWNW/Park and Brünken - 2015 - The Rhythm Method A New Method for Measuring Cogn.pdf;/Users/igormoreno/Zotero/storage/6Q72DX96/acp.html}
}

@article{parnasCriteriaBeUsed1972,
  title = {On the Criteria to Be Used in Decomposing Systems into Modules},
  author = {Parnas, D. L.},
  year = {1972},
  month = dec,
  journal = {Communications of the ACM},
  volume = {15},
  number = {12},
  pages = {1053--1058},
  issn = {0001-0782},
  doi = {10.1145/361598.361623},
  urldate = {2022-01-14},
  abstract = {This paper discusses modularization as a mechanism for improving the flexibility and comprehensibility of a system while allowing the shortening of its development time. The effectiveness of a ``modularization'' is dependent upon the criteria used in dividing the system into modules. A system design problem is presented and both a conventional and unconventional decomposition are described. It is shown that the unconventional decompositions have distinct advantages for the goals outlined. The criteria used in arriving at the decompositions are discussed. The unconventional decomposition, if implemented with the conventional assumption that a module consists of one or more subroutines, will be less efficient in most cases. An alternative approach to implementation which does not have this effect is sketched.},
  keywords = {KWIC index,modularity,modules,software,software design,software engineering},
  file = {/Users/igormoreno/Zotero/storage/UI5G6FTV/Parnas - 1972 - On the criteria to be used in decomposing systems into modules.pdf}
}

@article{parra-gonzalezGamificationFlippedLearning2021,
  title = {Gamification and Flipped Learning and Their Influence on Aspects Related to the Teaching-Learning Process},
  author = {{Parra-Gonz{\'a}lez}, Ma Elena and {L{\'o}pez-Belmonte}, Jes{\'u}s and {Segura-Robles}, Adri{\'a}n and {Moreno-Guerrero}, Antonio-Jos{\'e}},
  year = {2021},
  month = feb,
  journal = {Heliyon},
  volume = {7},
  number = {2},
  pages = {e06254},
  issn = {24058440},
  doi = {10.1016/j.heliyon.2021.e06254},
  urldate = {2023-06-27},
  abstract = {Nowadays, education is going through a moment of methodological transformation. Two of the active methodologies with excellent projection within the educational field are gamification and flipped learning. This study analyzed the methodological contrast between gamification and flipped learning in the subject of Physical Education in three different educational stages to determine the most influential methodology in the training process. Research design was a quasi-experimental research with a sample of 356 students in Spain. Data collection took place with a questionnaire. The results show that gamification as a teaching and learning methodology is better valued at an early stage, while the more aged participants better value the flipped learning methodology. Both methodologies have shown great potential in the development of educational processes in Physical Education. Gamification indeed seems to have positive effects on students from the lower stages. On the other hand, flipped learning produces positive effects on the group stages, pre-university students.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/QPLIRYUT/Parra-González et al. - 2021 - Gamification and flipped learning and their influe.pdf}
}

@article{parrANTLRPredicatedLLParser1995,
  title = {{{ANTLR}}: {{A}} Predicated-{{LL}}(k) Parser Generator},
  shorttitle = {{{ANTLR}}},
  author = {Parr, T. J. and Quong, R. W.},
  year = {1995},
  journal = {Software: Practice and Experience},
  volume = {25},
  number = {7},
  pages = {789--810},
  issn = {1097-024X},
  doi = {10.1002/spe.4380250705},
  urldate = {2022-08-02},
  abstract = {Despite the parsing power of LR/LALR algorithms, e.g. YACC, programmers often choose to write recursive-descent parsers by hand to obtain increased flexibility, better error handling, and ease of debugging. We introduce ANTLR, a public-domain parser generator that combines the flexibility of hand-coded parsing with the convenience of a parser generator, which is a component of PCCTS. ANTLR has many features that make it easier to use than other language tools. Most important, ANTLR provides predicates which let the programmer systematically direct the parse via arbitrary expressions using semantic and syntactic context; in practice, the use of predicates eliminates the need to hand-tweak the ANTLR output, even for difficult parsing problems. ANTLR also integrates the description of lexical and syntactic analysis, accepts LL(k) grammars for k {$>$} 1 with extended BNF notation, and can automatically generate abstract syntax trees. ANTLR is widely used, with over 1000 registered industrial and academic users in 37 countries. It has been ported to many popular systems such as the PC, Macintosh, and a variety of UNIX platforms; a commercial C++ front-end has been developed as a result of one of our industrial collaborations.},
  langid = {english},
  keywords = {compiler,LL(k) parser,parser generator,parsing,predicates}
}

@article{parrLLFoundationANTLR2011,
  title = {{{LL}}(*): The Foundation of the {{ANTLR}} Parser Generator},
  shorttitle = {{{LL}}(*)},
  author = {Parr, Terence and Fisher, Kathleen},
  year = {2011},
  month = jun,
  journal = {ACM SIGPLAN Notices},
  volume = {46},
  number = {6},
  pages = {425--436},
  issn = {0362-1340},
  doi = {10.1145/1993316.1993548},
  urldate = {2023-06-05},
  abstract = {Despite the power of Parser Expression Grammars (PEGs) and GLR, parsing is not a solved problem. Adding nondeterminism (parser speculation) to traditional LL and LR parsers can lead to unexpected parse-time behavior and introduces practical issues with error handling, single-step debugging, and side-effecting embedded grammar actions. This paper introduces the LL(*) parsing strategy and an associated grammar analysis algorithm that constructs LL(*) parsing decisions from ANTLR grammars. At parse-time, decisions gracefully throttle up from conventional fixed k{$>$}=1 lookahead to arbitrary lookahead and, finally, fail over to backtracking depending on the complexity of the parsing decision and the input symbols. LL(*) parsing strength reaches into the context-sensitive languages, in some cases beyond what GLR and PEGs can express. By statically removing as much speculation as possible, LL(*) provides the expressivity of PEGs while retaining LL's good error handling and unrestricted grammar actions. Widespread use of ANTLR (over 70,000 downloads/year) shows that it is effective for a wide variety of applications.},
  keywords = {augmented transition networks,backtracking,context-sensitive parsing,deterministic finite automata,glr,memoization,nondeterministic parsing,peg,semantic predicates,subset construction,syntactic predicates},
  file = {/Users/igormoreno/Zotero/storage/4E9CLMKH/Parr and Fisher - LL() The Foundation of the ANTLR Parser Generato.pdf}
}

@article{parrLLFoundationANTLR2011a,
  title = {{{LL}}(*): {{The Foundation}} of the {{ANTLR Parser Generator}}},
  author = {Parr, Terence and Fisher, Kathleen S},
  year = {2011},
  pages = {11},
  abstract = {Despite the power of Parser Expression Grammars (PEGs) and GLR, parsing is not a solved problem. Adding nondeterminism (parser speculation) to traditional LL and LR parsers can lead to unexpected parse-time behavior and introduces practical issues with error handling, single-step debugging, and side-effecting embedded grammar actions. This paper introduces the LL(*) parsing strategy and an associated grammar analysis algorithm that constructs LL(*) parsing decisions from ANTLR grammars. At parse-time, decisions gracefully throttle up from conventional fixed k {$\geq$} 1 lookahead to arbitrary lookahead and, finally, fail over to backtracking depending on the complexity of the parsing decision and the input symbols. LL(*) parsing strength reaches into the context-sensitive languages, in some cases beyond what GLR and PEGs can express. By statically removing as much speculation as possible, LL(*) provides the expressivity of PEGs while retaining LL's good error handling and unrestricted grammar actions. Widespread use of ANTLR (over 70,000 downloads/year) shows that it is effective for a wide variety of applications.},
  langid = {english},
  keywords = {antlr,parser generator}
}

@inproceedings{parsonsParsonProgrammingPuzzles2006,
  title = {Parson's Programming Puzzles: A Fun and Effective Learning Tool for First Programming Courses},
  shorttitle = {Parson's Programming Puzzles},
  booktitle = {Proceedings of the 8th {{Australasian Conference}} on {{Computing Education}} - {{Volume}} 52},
  author = {Parsons, Dale and Haden, Patricia},
  year = {2006},
  month = jan,
  series = {{{ACE}} '06},
  pages = {157--163},
  publisher = {{Australian Computer Society, Inc.}},
  address = {{AUS}},
  urldate = {2023-06-06},
  abstract = {Mastery of basic syntactic and logical constructs is an essential part of learning to program. Unfortunately, practice exercises for programming basics can be very tedious, making it difficult to motivate students. In this paper we describe Parson's Programming Puzzles, an automated, interactive tool that provides practice with basic programming principles in an entertaining puzzle-like format. Careful design of the items in the puzzles allows the tutor to highlight particular topics and common programming errors. Since each puzzle solution is a complete sample of well-written code, use of the tool exposes students to good programming practice. This paper discusses the motivation of Parson's Programming Puzzles, and gives several examples. We describe the web-based authoring tool used to build the puzzles, and present our plans for future development.},
  isbn = {978-1-920682-34-7},
  keywords = {interactive teaching tools,teaching introductory programming},
  file = {/Users/igormoreno/Zotero/storage/LTQI7GN7/Parsons and Haden - 2006 - Parson's programming puzzles a fun and effective .pdf}
}

@incollection{parsonsStratifiedSampling2017,
  title = {Stratified {{Sampling}}},
  booktitle = {Wiley {{StatsRef}}: {{Statistics Reference Online}}},
  author = {Parsons, Van},
  year = {2017},
  month = feb,
  publisher = {{Wiley Online Library}},
  doi = {10.1002/9781118445112.stat05999.pub2},
  abstract = {Stratified sampling is a probability sampling method that is implemented in sample surveys. The target population's elements are divided into distinct groups or strata where within each stratum the elements are similar to each other with respect to select characteristics of importance to the survey. Stratification is also used to increase the efficiency of a sample design with respect to survey costs and estimator precision. In this article, the foundations of stratified sampling are discussed in the framework of simple random sampling. Topics include the forming of the strata and optimal sample allocation among the strata. Practical implementation issues for stratified sampling are discussed and include systematic sampling, implicit stratification, and the construction of strata using modern software. The importance of using stratified sampling in practice is demonstrated by its usage in five major large-scale health surveys conducted in the United States and the United Kingdom. For these surveys, details of the stratification and sampling methods are provided. Topics include multistage cluster sampling within strata and the use of systematic and probability proportional to size sampling.},
  isbn = {978-1-118-44511-2}
}

@incollection{parsonsStratifiedSampling2017a,
  title = {Stratified {{Sampling}}},
  author = {Parsons, Van},
  year = {2017},
  month = feb,
  doi = {10.1002/9781118445112.stat05999.pub2},
  abstract = {Stratified sampling is a probability sampling method that is implemented in sample surveys. The target population's elements are divided into distinct groups or strata where within each stratum the elements are similar to each other with respect to select characteristics of importance to the survey. Stratification is also used to increase the efficiency of a sample design with respect to survey costs and estimator precision. In this article, the foundations of stratified sampling are discussed in the framework of simple random sampling. Topics include the forming of the strata and optimal sample allocation among the strata. Practical implementation issues for stratified sampling are discussed and include systematic sampling, implicit stratification, and the construction of strata using modern software. The importance of using stratified sampling in practice is demonstrated by its usage in five major large-scale health surveys conducted in the United States and the United Kingdom. For these surveys, details of the stratification and sampling methods are provided. Topics include multistage cluster sampling within strata and the use of systematic and probability proportional to size sampling.},
  isbn = {978-1-118-44511-2}
}

@article{pascual-leoneEncodingDecodingSymbols1969,
  title = {The Encoding and Decoding of Symbols by Children: {{A}} New Experimental Paradigm and a Neo-{{Piagetian}} Model},
  shorttitle = {The Encoding and Decoding of Symbols by Children},
  author = {{Pascual-Leone}, Juan and Smith, June},
  year = {1969},
  month = oct,
  journal = {Journal of Experimental Child Psychology},
  volume = {8},
  number = {2},
  pages = {328--355},
  issn = {0022-0965},
  doi = {10.1016/0022-0965(69)90107-6},
  urldate = {2018-12-02},
  abstract = {A semantic-pragmatic model for problem-solving and symbolic behavior is offered in which Piaget's cognitive-developmental variable is conceptualized as a quantitative construct, the central computing space M. A new sort of concept attainment or decoding-encoding experimental paradigm based on the model is developed and an experiment on 5-, 7-, and 9-year-olds is reported. The experimental design includes three factors: chronological age, mode of representation (verbal vs. gestural), and semanticpragmatic task complexity (decoding vs. encoding). The Piagetian predictions are upheld contradicting alternative predictions which follow from Bruner's model. Finally, the new model is applied to explaining the Piagetian classinclusion data and also the data of inferential behavior recently reported by Kendler and Kendler.},
  file = {/Users/igormoreno/Zotero/storage/DUA4Z3C3/Pascual-Leone and Smith - 1969 - The encoding and decoding of symbols by children .pdf;/Users/igormoreno/Zotero/storage/7LL7R3EY/0022096569901076.html}
}

@inproceedings{patrickw.thompsonUnderstandingRecursionProcess1985,
  title = {Understanding Recursion: {{Process}} {$\approx$} {{Object}}},
  booktitle = {Proceedings of the {{Seventh Annual Meeting}} of the {{North American Chapter}} of the {{International Group}} for the {{Psychology}} of {{Mathematics Education}}},
  author = {{Patrick W. Thompson}},
  year = {1985},
  pages = {357--362},
  abstract = {It is hypothesized that to recognize a computation as requiring recursion, students must conceptualize a reciprocal relationship between processes and their resulting objects. An example is given, along with a discussion of the role of recursion within a mathematics curriculum.},
  file = {/Users/igormoreno/Zotero/storage/CV5RWSZP/Patrick W. Thompson - 1985 - Understanding recursion.pdf}
}

@article{pattonStudentPortfoliosSoftware2006,
  title = {Student Portfolios and Software Quality Metrics in Computer Science Education},
  author = {Patton, Arnold L and McGill, Monica},
  year = {2006},
  abstract = {Cataloging of exemplars of an individual student's work is standard practice for certain disciplines, especially in creative, visually-oriented disciplines. These portfolios are often used during the interview and candidate identification phase of a student's job search. Recent trends have increased awareness and use of student work portfolios in scientific disciplines as well. While use of portfolios for interviewing purposes may never become standard practice in the field of computer science, we propose that there are nonetheless sufficient pedagogical advantages to be offered in the collection of student portfolios to make the effort of creating and maintaining them worthwhile. These advantages include the ability to conduct longitudinal studies of student performance, quantitative curriculum and course assessment, and prevention of forms of cheating which are not easily detectable by other means. In order to make optimal use of student portfolios, we also suggest use of automated software quality metrics. However, as there are no widely used pedagogically focused software metrics, we outline the requirements for such a metric.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/FDHFZ346/Patton and McGill - 2006 - Student portfolios and software quality metrics in.pdf}
}

@inproceedings{paulHuntingHighLow2013,
  title = {Hunting High and Low: Instruments to Detect Misconceptions Related to Algorithms and Data Structures},
  shorttitle = {Hunting High and Low},
  booktitle = {Proceeding of the 44th {{ACM}} Technical Symposium on {{Computer}} Science Education - {{SIGCSE}} '13},
  author = {Paul, Wolfgang and Vahrenhold, Jan},
  year = {2013},
  pages = {29},
  publisher = {{ACM Press}},
  address = {{Denver, Colorado, USA}},
  doi = {10.1145/2445196.2445212},
  urldate = {2018-10-22},
  abstract = {We present the result of assessing first-year students' misconceptions related to algorithms and data structures. Our study confirms findings from previous small-scale studies but additionally broadens the scope of the topics and methods investigated. The evaluation of our experiments sheds light on dependencies between active and passive knowledge as well as on the instruments used; in particular, we conclude that there is no ``one size fits all'' instrument but that instruments should be selected depending on the topic at hand.},
  isbn = {978-1-4503-1868-6},
  langid = {english},
  keywords = {proposedByIgor},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/IVI8XIF3/Paul and Vahrenhold - 2013 - Hunting high and low instruments to detect miscon.pdf}
}

@inproceedings{pazEmergenceAutomatedAssignment2004,
  title = {Emergence of {{Automated Assignment Conceptions}} in a {{Functional Programming Course}}},
  booktitle = {{{ITICSE}}'04},
  author = {Paz, Tamar and Lapidot, Tami},
  year = {2004},
  month = jun,
  pages = {5},
  address = {{Leeds, United Kingdom}},
  abstract = {This paper reports a research into the performance of high school students while they were first exposed to the paradigm of functional programming. The findings have been organized using three categories. In this paper we will concentrate on the ``Automated assignment to parameters'' conception which was the most widespread conception found in the research. We will describe the conception and will discuss some possible factors that could influence its development.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/WI6LG7ZW/Paz and Lapidot - 2004 - Emergence of Automated Assignment Conceptions in a Functional Programming Course.pdf}
}

@article{pazSlipperyRoadActions2009,
  title = {The {{Slippery Road}} from {{Actions}} on {{Objects}} to {{Functions}} and {{Variables}}},
  author = {Paz, Tamar and Leron, Uri},
  year = {2009},
  journal = {Journal for Research in Mathematics Education},
  volume = {40},
  number = {1},
  eprint = {40539319},
  eprinttype = {jstor},
  pages = {18--39},
  publisher = {{National Council of Teachers of Mathematics}},
  issn = {0021-8251},
  urldate = {2021-01-13},
  abstract = {Functions are all around us, disguised as actions on concrete objects. Composition of functions, too, is all around us, because these actions can be performed in succession, the output of one serving as the input for the next. In terms of Gray and Tail's (2001) "embodied objects" or Lakoff and Nunez's (2000) "mathematical idea analysis," this "embodied scheme" of action on objects may serve as intuitive grounding for the function concept. However, as Gray, Tall, and their colleagues have shown, such embodied schemes can also lead to serious "epistemological obstacles" in later stages of concept development. In the same vein, our own data show that the intuitions about change and invariance entailed by the action-on-objects scheme, although helpful in earlier stages of learning functions, may later come to clash with the formal concepts of function and of composition of functions.},
  annotation = {00018},
  file = {/Users/igormoreno/Zotero/storage/YNJ7GG73/Paz e Leron - 2009 - The slippery road from actions on objects to funct.pdf;/Users/igormoreno/Zotero/storage/9KNMUF48/40539319.html}
}

@article{peaLanguageindependentConceptualBugs1986,
  title = {Language-Independent Conceptual ``Bugs'' in Novice Programming},
  author = {Pea, Roy D.},
  year = {1986},
  journal = {Journal of educational computing research},
  volume = {2},
  number = {1},
  pages = {25--36},
  publisher = {{SAGE Publications Sage CA: Los Angeles, CA}},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/D8RNSDR7/Pea - 1986 - Language-independent conceptual “bugs” in novice programming.pdf;/Users/igormoreno/Zotero/storage/S5FJ7KN8/689T-1R2A-X4W4-29J2.html}
}

@techreport{peaLogoProgramingProblem1983,
  title = {Logo {{Programing}} and {{Problem Solving}}},
  author = {Pea, Roy D},
  year = {1983},
  month = apr,
  number = {12},
  pages = {10},
  address = {{New York, NY, USA}},
  institution = {{Bank Street College of Education, Center for Children and Technology Bank Street College of Education}},
  abstract = {This paper discusses five points related to developmental research on children learning to do Logo programing: (1) systematic developmental research documenting what children are learning as they learn to program is necessary; (2) Logo is cognitively complex beyond its early steps and difficult to learn without instructional guidance; (3) the pedagogical fantasy that Logo can serve as a stand-alone center in classroms for learning programming and thinking skills does not work; (4) after a year of programing in Logo, following the discovery-learning pedagogy, a group of children did not display greater planning skills than a matched group who did not do Logo programming; and (5) it is necesary to develop an instructional science for teaching programming and to rethink the educational goals programming is meant to fill. Findings of three studies on children learning to program and the cognitive outcomes of such programming are reported: the first was a study of the level of programming expertise children had developed by the year's end; the second consisted of systematic probes of the depth of understanding of programming concepts in studies with individual children; and the last asked whether children doing programming developped planning skills that they spontaneously transferred beyond programming.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/2PH57F5L/Pea - 1983 - Logo Programing and Problem Solving.pdf}
}

@article{pearceImprovingProblemDecomposition2015,
  title = {Improving Problem Decomposition Ability in {{CS1}} through Explicit Guided Inquiry-Based Instruction},
  author = {Pearce, Janice L. and Nakazawa, Mario and Heggen, Scott},
  year = {2015},
  month = dec,
  journal = {Journal of Computing Sciences in Colleges},
  volume = {31},
  number = {2},
  pages = {135--144},
  issn = {1937-4771},
  abstract = {CS1 students are often expected to learn to clarify a problem, decompose it into subproblems, solve and test these subproblems as units, and then recompose the tested units into an overarching solution. As other researchers have noted, problem decomposition is often taught only implicitly, but it is an important skill which benefits from both explicit instruction and practice. This paper describes our efforts to improve student problem decomposition ability by utilizing explicit guided inquiry-based instruction in problem decomposition. We applied a problem decomposition rubric adapted from an Association of American Colleges and Universities VALUE rubric to final course projects in two CS1 sections, a CS1 section with explicit instruction on problem decomposition compared against a CS1 section without the explicit instruction. Students in the section with the explicit instruction realized significant gains in problem decomposition ability and also seeming gains in the elective use of unit tests.},
  file = {/Users/igormoreno/Zotero/storage/K5LGHUWK/Pearce et al. - 2015 - Improving problem decomposition ability in CS1 thr.pdf;/Users/igormoreno/Zotero/storage/V8MTZP4G/Pearce, Nakazawa, Heggen - 2015 - Improving problem decomposition ability in CS1 through explicit guided inquiry-based instruction-annotated.pdf}
}

@inproceedings{pearsConveyingConceptionsQuality2010,
  title = {Conveying {{Conceptions}} of {{Quality}} through {{Instruction}}},
  booktitle = {2010 {{Seventh International Conference}} on the {{Quality}} of {{Information}} and {{Communications Technology}}},
  author = {Pears, Arnold},
  year = {2010},
  month = sep,
  pages = {7--14},
  publisher = {{IEEE}},
  address = {{Porto, Portugal}},
  doi = {10.1109/QUATIC.2010.10},
  urldate = {2020-06-22},
  abstract = {Building up an understanding of aspects of quality, and how to critically assess them, is a complex problem. This paper provides an overview of research on student conceptions of what constitutes quality in different programming domains. These conceptions are linked to tertiary education and computing education research results. Using this literature as a background we discuss how to develop and use instructional approaches that might assist students in developing a better understanding of software quality.},
  isbn = {978-1-4244-8539-0},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/F4AHV5KX/Pears - 2010 - Conveying Conceptions of Quality through Instruction.pdf}
}

@inproceedings{pearsSurveyLiteratureTeaching2007,
  title = {A Survey of Literature on the Teaching of Introductory Programming},
  booktitle = {Working Group Reports on {{ITiCSE}} on {{Innovation}} and Technology in Computer Science Education},
  author = {Pears, Arnold and Seidman, Stephen and Malmi, Lauri and Mannila, Linda and Adams, Elizabeth and Bennedsen, Jens and Devlin, Marie and Paterson, James},
  year = {2007},
  month = dec,
  pages = {204--223},
  publisher = {{ACM}},
  address = {{Dundee Scotland}},
  doi = {10.1145/1345443.1345441},
  urldate = {2023-04-17},
  isbn = {978-1-4503-7842-0},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/DKKEEJ7G/Pears et al. - 2007 - A survey of literature on the teaching of introduc.pdf}
}

@inproceedings{pedroniObjectOrientedModelingObjectOriented2010,
  title = {Object-{{Oriented Modeling}} of {{Object-Oriented Concepts}}},
  booktitle = {Teaching {{Fundamentals Concepts}} of {{Informatics}}},
  author = {Pedroni, Michela and Meyer, Bertrand},
  editor = {Hromkovi{\v c}, Juraj and Kr{\'a}lovi{\v c}, Richard and Vahrenhold, Jan},
  year = {2010},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {155--169},
  publisher = {{Springer}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-11376-5_15},
  abstract = {Teaching introductory object-oriented programming presents considerable challenges. Some of these challenges are due to the intrinsic complexity of the subject matter \textemdash{} object-oriented concepts are tightly interrelated and appear in many combinations. The present work describes an approach to modeling educational domains and reports on the results for object-orientation. It analyzes the dependency structure of object-oriented concepts and describes the implications that the high interrelatedness of concepts has on teaching introductory programming.},
  isbn = {978-3-642-11376-5},
  langid = {english},
  keywords = {Core Group,Feature Call,Information Hiding,Misconceptions Proposal,Primitive Type,System Execution,To Read},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/ICD8KHPJ/Pedroni and Meyer - 2010 - Object-Oriented Modeling of Object-Oriented Concepts.pdf}
}

@article{pepplerConnectedArtsLearning,
  title = {The {{Connected Arts Learning Framework}}: {{An Expanded View}} of the {{Purposes}} and {{Possibilities}} for {{Arts Learning}}},
  author = {Peppler, Kylie},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/FTL46V8G/Peppler - The Connected Arts Learning Framework An Expanded.pdf}
}

@article{perezTestingDebuggingFunctional2017,
  title = {Testing and Debugging Functional Reactive Programming},
  author = {Perez, Ivan and Nilsson, Henrik},
  year = {2017},
  month = aug,
  journal = {Proceedings of the ACM on Programming Languages},
  volume = {1},
  number = {ICFP},
  pages = {2:1--2:27},
  doi = {10.1145/3110246},
  urldate = {2021-12-17},
  abstract = {Many types of interactive applications, including video games, raise particular challenges when it comes to testing and debugging. Reasons include de-facto lack of reproducibility and difficulties of automatically generating suitable test data. This paper demonstrates that certain variants of Functional Reactive Programming (FRP) implemented in pure functional languages can mitigate such difficulties by offering referential transparency at the level of whole programs. This opens up for a multi-pronged approach for assisting with testing and debugging that works across platforms, including assertions based on temporal logic, recording and replaying of runs (also from deployed code), and automated random testing using QuickCheck. The approach has been validated on real, non-trivial games implemented in the FRP system Yampa through a tool providing a convenient Graphical User Interface that allows the execution of the code under scrutiny to be controlled, moving along the execution time line, and pin-pointing of violations of assertions on PCs as well as mobile platforms.},
  keywords = {debugging,Functional Reactive Programming,game programming,temporal logic,testing},
  file = {/Users/igormoreno/Zotero/storage/SIJUVXXU/Perez and Nilsson - 2017 - Testing and debugging functional reactive programming.pdf}
}

@article{perkinsConditionsLearningNovice1986,
  title = {Conditions of {{Learning}} in {{Novice Programmers}}},
  author = {Perkins, D. N. and Hancock, Chris and Hobbs, Renee and Martin, Fay and Simmons, Rebecca},
  year = {1986},
  month = feb,
  journal = {Journal of Educational Computing Research},
  volume = {2},
  number = {1},
  pages = {37--55},
  issn = {0735-6331, 1541-4140},
  doi = {10.2190/GUJT-JCBJ-Q6QU-Q9PL},
  urldate = {2020-06-22},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/7HZLH7PS/Perkins et al - 1986 - Conditions of Learning in Novice Programmers.pdf}
}

@techreport{perlmanTORTISToddlerOwn1974,
  title = {{{TORTIS}}: {{Toddler}}'s {{Own Recursive Turgle Interpreter System}}},
  shorttitle = {{{TORTIS}}},
  author = {Perlman, Radia},
  year = {1974},
  month = dec,
  number = {AIM-311 / LOGO Memo 9},
  institution = {{MIT}},
  urldate = {2022-01-12},
  abstract = {TORTIS is a device for preschool children to  communicated with and program the turtle. It  consistst of several boxes (currently 3 button  boxes and two blox boxes) designed so that  only a few new concepts are introduced at a  time but more can be added when the child  becomes familiar with what he has. Hopefully  transitions are gradual enough so that the  child never thinks talking to the turtle is too  hard or that he is "too dumb". And hopefully  playing with the system should teach such  concepts as numbers, breaking large  problems into small solvable steps, writin and  debugging procedures, recursion, variables,  and conditionals. Most important of all, it  should teach that learning is fun.},
  langid = {american},
  annotation = {Accepted: 2004-10-04T14:46:31Z},
  file = {/Users/igormoreno/Zotero/storage/28AKPKU6/Perlman - 1974 - TORTIS.pdf;/Users/igormoreno/Zotero/storage/Y8WK2LSK/6224.html}
}

@article{peruginiEmergingLanguagesAlternative2019,
  title = {Emerging Languages: {{An}} Alternative Approach to Teaching Programming Languages},
  shorttitle = {Emerging Languages},
  author = {Perugini, Saverio},
  year = {2019/ed},
  journal = {Journal of Functional Programming},
  volume = {29},
  publisher = {{Cambridge University Press}},
  issn = {0956-7968, 1469-7653},
  doi = {10.1017/S095679681900011X},
  urldate = {2020-09-30},
  abstract = {We challenge the idea that a course intended to convey principles of languages should be structured according to those principles, and present an alternate approach to teaching a programming language course. The approach involves teaching emerging programming languages. This approach results in a variety of course desiderata including scope for instructor customization; alignment with current trends in language evolution, practice, and research; and congruence with industrial needs. We discuss the rationale for, the course mechanics supporting, and the consequences of this approach.},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/HIFBYHKE/Perugini - 2019 - Emerging languages An alternative approach to tea.pdf;/Users/igormoreno/Zotero/storage/8CDIGUVI/5AECF8607B5673A1C068D0514EFF9B24.html;/Users/igormoreno/Zotero/storage/GLZJTAJ9/5AECF8607B5673A1C068D0514EFF9B24.html}
}

@article{peruginiEmergingLanguagesAlternative2019a,
  title = {Emerging Languages: {{An}} Alternative Approach to Teaching Programming Languages},
  shorttitle = {Emerging Languages},
  author = {Perugini, Saverio},
  year = {2019/ed},
  journal = {Journal of Functional Programming},
  volume = {29},
  publisher = {{Cambridge University Press}},
  issn = {0956-7968, 1469-7653},
  doi = {10.1017/S095679681900011X},
  urldate = {2021-12-17},
  abstract = {We challenge the idea that a course intended to convey principles of languages should be structured according to those principles, and present an alternate approach to teaching a programming language course. The approach involves teaching emerging programming languages. This approach results in a variety of course desiderata including scope for instructor customization; alignment with current trends in language evolution, practice, and research; and congruence with industrial needs. We discuss the rationale for, the course mechanics supporting, and the consequences of this approach.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/GNJ4XQQ6/Perugini - 2019 - Emerging languages An alternative approach to tea.pdf;/Users/igormoreno/Zotero/storage/ZQLPKIXM/5AECF8607B5673A1C068D0514EFF9B24.html}
}

@inproceedings{peteranetzBuildingComputationalCreativity2019,
  title = {Building {{Computational Creativity}} in an {{Online Course}} for {{Non-Majors}}},
  booktitle = {Proceedings of the 50th {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Peteranetz, Markeya S. and Soh, Leen-Kiat and Ingraham, Elizabeth},
  year = {2019},
  month = feb,
  pages = {442--448},
  publisher = {{ACM}},
  address = {{Minneapolis MN USA}},
  doi = {10.1145/3287324.3287346},
  urldate = {2023-03-16},
  abstract = {In recent years, a growing number of universities have begun to offer specialized courses as a way to make computer science (CS) more accessible to students with little or no prior CS or programming experience, especially non-CS majors. One of the ways courses have been modified for these students is by supplementing the core problem solving and coding aspects of the curriculum with explicit instruction on computational thinking principles. These ``computational thinking'' courses are promising in that they ground computational thinking in discipline-specific contexts and emphasize application of computational principles. However, there is little empirical research evaluating the extent to which students learn computational thinking from these courses. The purpose of this study was to evaluate the impact of an online Computational Creativity course on students' computational thinking skills, creative competencies, and self-efficacy. Students in the Computational Creativity course were predominantly non-CS majors, and they completed four Computational Creativity Exercises (CCEs) that have previously been shown to improve learning and achievement. Results indicate that the Computational Creativity course was effective in increasing students' computational thinking knowledge and self-efficacy for applying computational thinking in their fields, but it did not have an impact on students' creative competencies. Additionally, students' reactions to the course and the CCEs were mostly positive. Thus, this study provides initial evidence that non-CS majors can learn computational thinking through the online Computational Creativity course.},
  isbn = {978-1-4503-5890-3},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/X8FWBAWU/Peteranetz et al. - 2019 - Building Computational Creativity in an Online Cou.pdf}
}

@inproceedings{peteranetzBuildingComputationalCreativity2019a,
  title = {Building {{Computational Creativity}} in an {{Online Course}} for {{Non-Majors}}},
  booktitle = {Proceedings of the 50th {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Peteranetz, Markeya S. and Soh, Leen-Kiat and Ingraham, Elizabeth},
  year = {2019},
  month = feb,
  pages = {442--448},
  publisher = {{ACM}},
  address = {{Minneapolis MN USA}},
  doi = {10.1145/3287324.3287346},
  urldate = {2023-03-16},
  abstract = {In recent years, a growing number of universities have begun to offer specialized courses as a way to make computer science (CS) more accessible to students with little or no prior CS or programming experience, especially non-CS majors. One of the ways courses have been modified for these students is by supplementing the core problem solving and coding aspects of the curriculum with explicit instruction on computational thinking principles. These ``computational thinking'' courses are promising in that they ground computational thinking in discipline-specific contexts and emphasize application of computational principles. However, there is little empirical research evaluating the extent to which students learn computational thinking from these courses. The purpose of this study was to evaluate the impact of an online Computational Creativity course on students' computational thinking skills, creative competencies, and self-efficacy. Students in the Computational Creativity course were predominantly non-CS majors, and they completed four Computational Creativity Exercises (CCEs) that have previously been shown to improve learning and achievement. Results indicate that the Computational Creativity course was effective in increasing students' computational thinking knowledge and self-efficacy for applying computational thinking in their fields, but it did not have an impact on students' creative competencies. Additionally, students' reactions to the course and the CCEs were mostly positive. Thus, this study provides initial evidence that non-CS majors can learn computational thinking through the online Computational Creativity course.},
  isbn = {978-1-4503-5890-3},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/UMFBL95K/Peteranetz et al. - 2019 - Building Computational Creativity in an Online Cou.pdf}
}

@inproceedings{peteranetzDevelopmentValidationComputational2020,
  title = {Development and {{Validation}} of the {{Computational Thinking Concepts}} and {{Skills Test}}},
  booktitle = {Proceedings of the 51st {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Peteranetz, Markeya S. and Morrow, Patrick M. and Soh, Leen-Kiat},
  year = {2020},
  month = feb,
  pages = {926--932},
  publisher = {{ACM}},
  address = {{Portland OR USA}},
  doi = {10.1145/3328778.3366813},
  urldate = {2023-03-16},
  abstract = {Calls for standardized and validated measures of computational thinking have been made repeatedly in recent years. Still, few such tests have been created and even fewer have undergone rigorous psychometric evaluation and been made available to researchers. The purpose of this study is to report our work in developing and validating a test of computational thinking concepts and skills and to compare different scoring methods for the test. This computational thinking exam is intended to be used in computing education research as a common measure of computational thinking so that the research community will be able to make more meaningful comparisons across samples and studies. The Computational Thinking Concepts and Skills Test (CTCAST) was administered to students in several courses, evaluated and revised, and then administered to another group of students. Part of the revision included changing half of the items to a multiple-select format. The test scores using the three scoring methods were compared to each other and to scores on a different test of core computer science knowledge. Results indicate the CTCAST and the test of core computer science knowledge measure similar, but not identical, aspects of students' knowledge and skills, and that itemlevel statistics vary according to the scoring method that is used. Recommendations for using and scoring the test are presented.},
  isbn = {978-1-4503-6793-6},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/738LVG7J/Peteranetz et al. - 2020 - Development and Validation of the Computational Th.pdf}
}

@inproceedings{peteranetzDevelopmentValidationComputational2020a,
  title = {Development and {{Validation}} of the {{Computational Thinking Concepts}} and {{Skills Test}}},
  booktitle = {Proceedings of the 51st {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Peteranetz, Markeya S. and Morrow, Patrick M. and Soh, Leen-Kiat},
  year = {2020},
  month = feb,
  pages = {926--932},
  publisher = {{ACM}},
  address = {{Portland OR USA}},
  doi = {10.1145/3328778.3366813},
  urldate = {2023-03-16},
  abstract = {Calls for standardized and validated measures of computational thinking have been made repeatedly in recent years. Still, few such tests have been created and even fewer have undergone rigorous psychometric evaluation and been made available to researchers. The purpose of this study is to report our work in developing and validating a test of computational thinking concepts and skills and to compare different scoring methods for the test. This computational thinking exam is intended to be used in computing education research as a common measure of computational thinking so that the research community will be able to make more meaningful comparisons across samples and studies. The Computational Thinking Concepts and Skills Test (CTCAST) was administered to students in several courses, evaluated and revised, and then administered to another group of students. Part of the revision included changing half of the items to a multiple-select format. The test scores using the three scoring methods were compared to each other and to scores on a different test of core computer science knowledge. Results indicate the CTCAST and the test of core computer science knowledge measure similar, but not identical, aspects of students' knowledge and skills, and that itemlevel statistics vary according to the scoring method that is used. Recommendations for using and scoring the test are presented.},
  isbn = {978-1-4503-6793-6},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/ZZXUUPBY/Peteranetz et al. - 2020 - Development and Validation of the Computational Th.pdf}
}

@article{peterReconnaissanceMotifsRepetitions2019,
  title = {{Reconnaissance de Motifs et R\'ep\'etitions: Introduction \`a la Pens\'ee Informatique}},
  author = {Peter, Yvan and L{\'e}onard, Marielle and Secq, Yann},
  year = {2019},
  pages = {13},
  abstract = {This article presents an experimentation to introduce primary school pupils to Computational Thinking. The aim is to enhance their capability to spot repetitive patterns and to express them as loops. Unplugged and plugged-in activities are used to train the pupils. Trace analysis and pre and post questionnaires were used to measure the impact of the intervention. This article deals with the 2018 session involving 20 classes. The results show a positive impact of the activities and give information about the competencies acquired.},
  langid = {french},
  file = {/Users/igormoreno/Zotero/storage/7SSFECVF/Peter et al - 2019 - Reconnaissance de Motifs et Répétitions.pdf}
}

@inproceedings{petersenEmployingMultipleAnswerMultiple2016,
  title = {Employing {{Multiple-Answer Multiple Choice Questions}}},
  booktitle = {Proceedings of the 2016 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Petersen, Andrew and Craig, Michelle and Denny, Paul},
  year = {2016},
  month = jul,
  pages = {252--253},
  publisher = {{ACM}},
  address = {{Arequipa Peru}},
  doi = {10.1145/2899415.2925503},
  urldate = {2021-06-16},
  abstract = {Increasing enrollments and adoption of online resources have encouraged the use of multiple choice questions as a means of providing scalable assessment. However, in contexts where formative feedback is desired, standard multiple choice questions may lead students to a false sense of confidence \textendash a result of their small solution space and the temptation to guess. We propose the use of multiple-answer multiple choice questions in situations where formative feedback is desired and present evidence that these questions are well suited for that role.},
  isbn = {978-1-4503-4231-5},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/265E9AQI/Petersen et al. - 2016 - Employing Multiple-Answer Multiple Choice Question.pdf}
}

@article{pettitEmpiricalStudyIterative,
  title = {An {{Empirical Study}} of {{Iterative Improvement}} in {{Programming Assignments}}},
  author = {Pettit, Raymond and Homer, John and Gee, Roger and Starbuck, Adam and Mengel, Susan},
  pages = {6},
  abstract = {As automated tools for grading programming assignments become more widely used, it is imperative that we better understand how students are utilizing them. Other researchers have provided helpful data on the role automated assessment tools (AATs) have played in the classroom. In order to investigate improved practices in using AATs for student learning, we sought to better understand how students iteratively modify their programs toward a solution by analyzing more than 45,000 student submissions over 7 semesters in an introductory (CS1) programming course. The resulting metrics allowed us to study what steps students took toward solutions for programming assignments. This paper considers the incremental changes students make and the correlating score between sequential submissions, measured by metrics including source lines of code, cyclomatic (McCabe) complexity, state space, and the 6 Halstead measures of complexity of the program. We demonstrate the value of throttling and show that generating software metrics for analysis can serve to help instructors better guide student learning.},
  langid = {english},
  annotation = {00029},
  file = {/Users/igormoreno/Zotero/storage/9LNKLTPM/Pettit et al. - An Empirical Study of Iterative Improvement in Pro.pdf}
}

@inproceedings{peytonjonesSimpleUnificationbasedType2006,
  title = {Simple {{Unification-based Type Inference}} for {{GADTs}}},
  booktitle = {Proceedings of the {{Eleventh ACM SIGPLAN International Conference}} on {{Functional Programming}}},
  author = {Peyton Jones, Simon and Vytiniotis, Dimitrios and Weirich, Stephanie and Washburn, Geoffrey},
  year = {2006},
  series = {{{ICFP}} '06},
  pages = {50--61},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1159803.1159811},
  urldate = {2019-06-27},
  abstract = {Generalized algebraic data types (GADTs), sometimes known as "guarded recursive data types" or "first-class phantom types", are a simple but powerful generalization of the data types of Haskell and ML. Recent works have given compelling examples of the utility of GADTs, although type inference is known to be difficult. Our contribution is to show how to exploit programmer-supplied type annotations to make the type inference task almost embarrassingly easy. Our main technical innovation is wobbly types, which express in a declarative way the uncertainty caused by the incremental nature of typical type-inference algorithms.},
  isbn = {978-1-59593-309-6},
  keywords = {generalized algebraic data types,type inference},
  annotation = {00375},
  file = {/Users/igormoreno/Zotero/storage/APCJIHQ9/Peyton Jones et al. - 2006 - Simple Unification-based Type Inference for GADTs.pdf;/Users/igormoreno/Zotero/storage/DI5VFGSI/Peyton Jones et al. - 2006 - Simple Unification-based Type Inference for GADTs.pdf}
}

@misc{philipj.guoPhDGrindPhD2015,
  title = {The {{PhD Grind}}: {{A PhD Student Memoir}}},
  author = {{Philip J. Guo}},
  year = {2015},
  month = may,
  urldate = {2019-04-14},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/VAW7H4KI/Philip J. Guo - 2015 - The PhD Grind.pdf}
}

@misc{PhilosophyBriefGuide,
  title = {Philosophy: {{A}} Brief Guide for Undergraduates - {{The American Philosophical Association}}},
  shorttitle = {Philosophy},
  urldate = {2022-05-28},
  howpublished = {https://www.apaonline.org/page/undergraduates},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/6W7N52LD/undergraduates.html}
}

@article{phipps-costinCombiningInteractiveWholeProgram2021,
  title = {Combining {{Interactive}} and {{Whole-Program Editing}} with {{Repartee}}},
  author = {{Phipps-Costin}, Luna and MacLeod, Michael and Vo, Alex and Nguyen, Tiffany and Politz, Joe Gibbs and Krishnamurthi, Shriram and Lerner, Benjamin S},
  year = {2021},
  abstract = {Interactive evaluation with a REPL (Read-Eval-Print Loop) is a feature of many programming environments, especially in environments for teaching programming. However, REPLs ensnare beginners in confusions and stumbles related to navigating between programs and interactive evaluation. We identify several specific weaknesses of REPLs with a worked example from an existing programming environment in active use, distilled from our experience with novices. We then present an updated programming environment that mitigates these weaknesses by combining the program editor and REPL, so the user can benefit from the best of both.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/NCFM27LX/Phipps-Costin et al. - 2021 - Combining Interactive and Whole-Program Editing wi.pdf}
}

@misc{PhThesisProposal,
  title = {A {{Ph}}.{{D}}. Thesis Proposal Is a Contract},
  urldate = {2020-06-06},
  howpublished = {http://matt.might.net/articles/advice-for-phd-thesis-proposals/},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/7HB9YVEB/advice-for-phd-thesis-proposals.html}
}

@article{phungGeneratingHighPrecisionFeedback,
  title = {Generating {{High-Precision Feedback}} for {{Programming Syntax Errors}} Using {{Large Language Models}}},
  author = {Phung, Tung and Cambronero, Jos{\'e} and Gulwani, Sumit},
  abstract = {Large language models trained on code (LLMCs), such as Codex, hold great promise in enhancing programming education by automatically generating feedback for students. We investigate using LLMCs to generate feedback for fixing syntax errors in Python programs, a key scenario in introductory programming. More concretely, given a student's buggy program, our goal is to generate feedback comprising a fixed program along with a natural language explanation describing the errors/fixes, inspired by how a human tutor would give feedback. While using LLMCs is promising, the critical challenge is to ensure high precision in the generated feedback, which is imperative before deploying such technology in classrooms. The main research question we study is: Can we develop LLMCs-based feedback generation techniques with a tunable precision parameter, giving educators quality control over the feedback that students receive? To this end, we introduce PyFiXV, our technique to generate high-precision feedback powered by Codex. The key idea behind PyFiXV is to use a novel run-time validation mechanism to decide whether the generated feedback is suitable for sharing with the student; notably, this validation mechanism also provides a precision knob to educators. We perform an extensive evaluation using two real-world datasets of Python programs with syntax errors and show the efficacy of PyFiXV in generating high-precision feedback.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/UAHYG6MA/Phung et al. - Generating High-Precision Feedback for Programming.pdf}
}

@article{phungGeneratingHighPrecisionFeedbacka,
  title = {Generating {{High-Precision Feedback}} for {{Programming Syntax Errors}} Using {{Large Language Models}}},
  author = {Phung, Tung and Cambronero, Jos{\'e} and Gulwani, Sumit},
  abstract = {Large language models trained on code (LLMCs), such as Codex, hold great promise in enhancing programming education by automatically generating feedback for students. We investigate using LLMCs to generate feedback for fixing syntax errors in Python programs, a key scenario in introductory programming. More concretely, given a student's buggy program, our goal is to generate feedback comprising a fixed program along with a natural language explanation describing the errors/fixes, inspired by how a human tutor would give feedback. While using LLMCs is promising, the critical challenge is to ensure high precision in the generated feedback, which is imperative before deploying such technology in classrooms. The main research question we study is: Can we develop LLMCs-based feedback generation techniques with a tunable precision parameter, giving educators quality control over the feedback that students receive? To this end, we introduce PyFiXV, our technique to generate high-precision feedback powered by Codex. The key idea behind PyFiXV is to use a novel run-time validation mechanism to decide whether the generated feedback is suitable for sharing with the student; notably, this validation mechanism also provides a precision knob to educators. We perform an extensive evaluation using two real-world datasets of Python programs with syntax errors and show the efficacy of PyFiXV in generating high-precision feedback.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/5Z74VXDC/Phung et al. - Generating High-Precision Feedback for Programming.pdf}
}

@inproceedings{pickeringPatternSynonyms2016,
  title = {Pattern {{Synonyms}}},
  booktitle = {Proceedings of the 9th {{International Symposium}} on {{Haskell}}},
  author = {Pickering, Matthew and {\'E}rdi, Gerg{\textbackslash}Ho and Peyton Jones, Simon and Eisenberg, Richard A.},
  year = {2016},
  series = {Haskell 2016},
  pages = {80--91},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2976002.2976013},
  urldate = {2019-03-12},
  abstract = {Pattern matching has proven to be a convenient, expressive way of inspecting data. Yet this language feature, in its traditional form, is limited: patterns must be data constructors of concrete data types. No computation or abstraction is allowed. The data type in question must be concrete, with no ability to enforce any invariants. Any change in this data type requires all clients to update their code.   This paper introduces pattern synonyms, which allow programmers to abstract over patterns, painting over all the shortcomings listed above. Pattern synonyms are assigned types, enabling a compiler to check the validity of a synonym independent of its definition. These types are intricate; detailing how to assign a type to a pattern synonym is a key contribution of this work. We have implemented pattern synonyms in the Glasgow Haskell Compiler, where they have enjoyed immediate popularity, but we believe this feature could easily be exported to other languages that support pattern matching.},
  isbn = {978-1-4503-4434-0},
  keywords = {functional programming,Haskell,pattern matching,Pattern Matching},
  annotation = {00015},
  file = {/Users/igormoreno/Zotero/storage/43HJJSBA/Pickering et al. - 2016 - Pattern Synonyms.pdf;/Users/igormoreno/Zotero/storage/NV69GQ5R/Pickering et al. - 2016 - Pattern Synonyms.pdf}
}

@book{PictorialFormalAspects,
  title = {Pictorial and {{Formal Aspects}} of {{Shape}} and {{Shape Grammars}}},
  urldate = {2023-01-11},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/G69X8MGJ/978-3-0348-6879-2.html}
}

@inproceedings{piechLearningProgramEmbeddings2015,
  title = {Learning Program Embeddings to Propagate Feedback on Student Code},
  booktitle = {Proceedings of the 32nd {{International Conference}} on {{International Conference}} on {{Machine Learning}} - {{Volume}} 37},
  author = {Piech, Chris and Huang, Jonathan and Nguyen, Andy and Phulsuksombati, Mike and Sahami, Mehran and Guibas, Leonidas},
  year = {2015},
  month = jul,
  series = {{{ICML}}'15},
  pages = {1093--1102},
  publisher = {{JMLR.org}},
  address = {{Lille, France}},
  urldate = {2022-12-07},
  abstract = {Providing feedback, both assessing final work and giving hints to stuck students, is difficult for open-ended assignments in massive online classes which can range from thousands to millions of students. We introduce a neural network method to encode programs as a linear mapping from an embedded precondition space to an embedded postcondition space and propose an algorithm for feedback at scale using these linear maps as features. We apply our algorithm to assessments from the Code.org Hour of Code and Stanford University's CS1 course, where we propagate human comments on student assignments to orders of magnitude more submissions.}
}

@inproceedings{pieperCriticalIncidentsK122020,
  title = {Critical {{Incidents}} in {{K-12 Computer Science Classrooms}} - {{Towards Vignettes}} for {{Computer Science Teacher Training}}},
  booktitle = {Proceedings of the 51st {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Pieper, Ursula and Vahrenhold, Jan},
  year = {2020},
  month = feb,
  pages = {978--984},
  publisher = {{ACM}},
  address = {{Portland OR USA}},
  doi = {10.1145/3328778.3366926},
  urldate = {2021-06-10},
  abstract = {The use of vignettes has been shown to be an effective method both in teacher training and in the assessment of teachers' understanding of instructional strategies. In this paper, we report on a study in which we sought to identify real-world classroom situation that can be used as vignettes for K\textendash 12 Computer Science teacher education and professional development.},
  isbn = {978-1-4503-6793-6},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/V5I6FDDM/Pieper e Vahrenhold - 2020 - Critical Incidents in K-12 Computer Science Classr.pdf}
}

@book{pierceAdvancedTopicsTypes2005,
  title = {Advanced Topics in Types and Programming Languages},
  editor = {Pierce, Benjamin C.},
  year = {2005},
  publisher = {{MIT Press}},
  address = {{Cambridge, Mass}},
  isbn = {978-0-262-16228-9},
  langid = {english},
  lccn = {QA76.7 .A36 2005},
  keywords = {Programming languages (Electronic computers)},
  annotation = {00255},
  file = {/Users/igormoreno/Zotero/storage/SRXTBJN9/Pierce - 2005 - Advanced topics in types and programming languages.pdf}
}

@book{pierceProgrammingLanguageFoundations2020,
  title = {Programming {{Language Foundations}}},
  author = {Pierce, Benjamin C. and {Azevedo de Amorim}, Arthur and Casinghino, Chris and Gaboardi, Marco and Greenberg, Michael and Hri{\c t}cu, C{\u a}t{\u a}lin and Sj{\"o}berg, Vilhelm and Tolmach, Andrew and Yorgey, Brent},
  year = {2020},
  series = {Software {{Foundations}}},
  volume = {2},
  publisher = {{Electronic textbook}},
  urldate = {2020-11-24},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/2JX9CV2K/index.html}
}

@book{pierceTypesProgrammingLanguages2002,
  title = {Types and Programming Languages},
  author = {Pierce, Benjamin C.},
  year = {2002},
  publisher = {{MIT Press}},
  address = {{Cambridge, Mass}},
  isbn = {978-0-262-16209-8},
  langid = {english},
  lccn = {QA76.7 .P54 2002},
  keywords = {Programming languages (Electronic computers)},
  annotation = {03265},
  file = {/Users/igormoreno/Zotero/storage/HAUXKJJ5/Pierce - 2002 - Types and programming languages.pdf;/Users/igormoreno/Zotero/storage/QBWD83QH/week03.pdf}
}

@inproceedings{pieterseAutomatedAssessmentProgramming2013,
  title = {Automated {{Assessment}} of {{Programming Assignments}}},
  booktitle = {Proceedings of the 3rd {{Computer Science Education Research Conference}} on {{Computer Science Education Research}}},
  author = {Pieterse, Vreda},
  year = {2013},
  series = {{{CSERC}} '13},
  pages = {4:45--4:56},
  publisher = {{Open Universiteit, Heerlen}},
  address = {{Open Univ., Heerlen, The Netherlands, The Netherlands}},
  urldate = {2019-09-27},
  abstract = {This is a position paper in which I argue that massive open online programming courses can benefit by the application of automated assessment of programming assignments. I gathered success factors and identified concerns related to automatic assessment through the analysis of experiences other researchers have reported when designing and using automated assessment of programming assignments and interpret their potential applicability in the context of massive open online courses (MOOCs). In this paper I explain the design of our own assessment software and discuss our experience of using it in relation to the above-mentioned factors and concerns. My reflection on this experience can inform MOOC designers when having to make decisions regarding the use of automatic assessment of programming assignments.},
  keywords = {Assessment software,automatic assessment,MOOC},
  file = {/Users/igormoreno/Zotero/storage/9JAJ8XTS/Pieterse - 2013 - Automated Assessment of Programming Assignments.pdf}
}

@article{pilaLearningCodeTablet2019,
  title = {Learning to Code via Tablet Applications: {{An}} Evaluation of {{Daisy}} the {{Dinosaur}} and {{Kodable}} as Learning Tools for Young Children},
  shorttitle = {Learning to Code via Tablet Applications},
  author = {Pila, Sarah and Alad{\'e}, Fashina and Sheehan, Kelly J. and Lauricella, Alexis R. and Wartella, Ellen A.},
  year = {2019},
  month = jan,
  journal = {Computers \& Education},
  volume = {128},
  pages = {52--62},
  issn = {03601315},
  doi = {10.1016/j.compedu.2018.09.006},
  urldate = {2018-11-06},
  abstract = {Despite the growing number of digital apps designed to teach coding skills to young children, we know little about their effectiveness. To formally explore this question, we conducted a naturalistic observation of a one-week program designed to teach foundational coding skills (i.e., sequencing, conditions, loops) to young children (N = 28, Mage = 5.15 years) using two tablet applications: Daisy the Dinosaur and Kodable. Pre- and post-assessments measured familiarity with technology, appeal of coding apps, knowledge of Daisy commands, ability to play Kodable, and conceptual understanding of coding. Participants improved in their knowledge of Daisy commands (i.e., move, grow, jump) and Kodable gameplay (i.e., placing arrows in the correct sequence to move a character through a maze), but did not improve in their ability to verbally explain what coding is. Appeal of the games was significantly related to children's learning of Daisy commands, but child gender was not related to either Daisy or Kodable learning outcomes. Results suggest that young children can learn foundational coding skills via apps, especially when the apps are appealing to children.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/357XI85U/Pila et al - 2019 - Learning to code via tablet applications.pdf}
}

@article{pintrichRoleMetacognitiveKnowledge2002,
  title = {The {{Role}} of {{Metacognitive Knowledge}} in {{Learning}}, {{Teaching}}, and {{Assessing}}},
  author = {Pintrich, Paul R.},
  year = {2002},
  journal = {Theory Into Practice},
  volume = {41},
  number = {4},
  eprint = {1477406},
  eprinttype = {jstor},
  pages = {219--225},
  publisher = {{Taylor \& Francis, Ltd.}},
  issn = {0040-5841},
  urldate = {2020-10-30},
  annotation = {01680},
  file = {/Users/igormoreno/Zotero/storage/CNFG8JBQ/Pintrich - 2002 - The Role of Metacognitive Knowledge in Learning, T.pdf}
}

@inproceedings{pirogStringDiagramsFree2016,
  title = {String Diagrams for Free Monads (Functional Pearl)},
  booktitle = {Proceedings of the 21st {{ACM SIGPLAN International Conference}} on {{Functional Programming}}},
  author = {Pir{\'o}g, Maciej and Wu, Nicolas},
  year = {2016},
  month = sep,
  series = {{{ICFP}} 2016},
  pages = {490--501},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2951913.2951947},
  urldate = {2021-12-17},
  abstract = {We show how one can reason about free monads using their universal properties rather than any concrete implementation. We introduce a graphical, two-dimensional calculus tailor-made to accommodate these properties.},
  isbn = {978-1-4503-4219-3},
  keywords = {distributive law,free monad,monad,string diagram,universal property},
  file = {/Users/igormoreno/Zotero/storage/B3FN7MDA/Piróg and Wu - 2016 - String diagrams for free monads (functional pearl).pdf}
}

@article{piteiraComputerProgrammingLearning2018,
  title = {Computer {{Programming Learning}}: {{How}} to {{Apply Gamification}} on {{Online Courses}}?},
  shorttitle = {Computer {{Programming Learning}}},
  author = {Piteira, Martinha and Costa, Carlos J. and Aparicio, Manuela},
  year = {2018},
  month = apr,
  journal = {Journal of Information Systems Engineering \& Management},
  volume = {3},
  number = {2},
  issn = {24684376},
  doi = {10.20897/jisem.201811},
  urldate = {2020-09-28},
  abstract = {Gamification has attracted the attention of researchers from different areas such as marketing, health, sports, and education. Gamification integrates elements of game design in non-game context, with the purpose of engaging a person in a particular activity. This integration should follow a formal and precise design process. However, these gamification design processes for specific contexts are not still defined. This article presents a proposal for a gamification framework for online distance courses to learn how to program. This framework is composed of the following dimensions: target audience, general goals, learning outcomes, topics, contents, gamification, cognitive absorption, flow, and personality. This article also presents a review of the existing literature on these dimensions. The theoretical framework is a contribution to guide teachers in the gamification of online programming learning courses.},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/Q4PKR3GD/Piteira et al. - 2018 - Computer Programming Learning How to Apply Gamifi.pdf}
}

@article{pittTuringTumbleTuringcomplete2023,
  title = {Turing Tumble Is {{Turing-complete}}},
  author = {Pitt, Lenny},
  year = {2023},
  month = feb,
  journal = {Theoretical Computer Science},
  volume = {948},
  pages = {113734},
  issn = {03043975},
  doi = {10.1016/j.tcs.2023.113734},
  urldate = {2023-02-05},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/E44BZ5BY/Pitt - 2023 - Turing tumble is Turing-complete.pdf}
}

@article{ploetznerDynamicVisualisationsLearning2004,
  title = {Dynamic Visualisations and Learning},
  author = {Ploetzner, Rolf and Lowe, Richard},
  year = {2004},
  month = jun,
  journal = {Learning and Instruction},
  series = {Dynamic {{Visualisations}} and {{Learning}}},
  volume = {14},
  number = {3},
  pages = {235--240},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2004.06.001},
  urldate = {2018-11-06},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/GVZVM72E/Ploetzner and Lowe - 2004 - Dynamic visualisations and learning.pdf;/Users/igormoreno/Zotero/storage/T6NZX3T8/S0959475204000295.html}
}

@article{plotkinCallbynameCallbyvalueLcalculus1975,
  title = {Call-by-Name, Call-by-Value and the {$\lambda$}-Calculus},
  author = {Plotkin, G. D.},
  year = {1975},
  month = dec,
  journal = {Theoretical Computer Science},
  volume = {1},
  number = {2},
  pages = {125--159},
  issn = {0304-3975},
  doi = {10.1016/0304-3975(75)90017-1},
  urldate = {2018-12-01},
  abstract = {This paper examines the old question of the relationship between ISWIM and the {$\lambda$}-calculus, using the distinction between call-by-value and call-by-name. It is held that the relationship should be mediated by a standardisation theorem. Since this leads to difficulties, a new {$\lambda$}-calculus is introduced whose standardisation theorem gives a good correspondence with ISWIM as given by the SECD machine, but without the letrec feature. Next a call-by-name variant of ISWIM is introduced which is in an analogous correspondence withthe usual {$\lambda$}-calculus. The relation between call-by-value and call-by-name is then studied by giving simulations of each language by the other and interpretations of each calculus in the other. These are obtained as another application of the continuation technique. Some emphasis is placed throughout on the notion of operational equality (or contextual equality). If terms can be proved equal in a calculus they are operationally equal in the corresponding language. Unfortunately, operational equality is not preserved by either of the simulations.},
  annotation = {01549},
  file = {/Users/igormoreno/Zotero/storage/6R4HDU2V/Plotkin - 1975 - Call-by-name, call-by-value and the λ-calculus.pdf;/Users/igormoreno/Zotero/storage/UCGX4MM5/0304397575900171.html}
}

@article{pluchinoTALENTLUCKROLE2018,
  title = {{{TALENT VERSUS LUCK}}: {{THE ROLE OF RANDOMNESS IN SUCCESS AND FAILURE}}},
  shorttitle = {{{TALENT VERSUS LUCK}}},
  author = {Pluchino, Alessandro and Biondo, Alessio Emanuele and Rapisarda, Andrea},
  year = {2018},
  month = may,
  journal = {Advances in Complex Systems},
  volume = {21},
  number = {03n04},
  pages = {1850014},
  issn = {0219-5259, 1793-6802},
  doi = {10.1142/S0219525918500145},
  urldate = {2023-01-17},
  abstract = {The largely dominant meritocratic paradigm of highly competitive Western cultures is rooted on the belief that success is mainly due, if not exclusively, to personal qualities such as talent, intelligence, skills, smartness, efforts, willfulness, hard work or risk taking. Sometimes, we are willing to admit that a certain degree of luck could also play a role in achieving significant success. But, as a matter of fact, it is rather common to underestimate the importance of external forces in individual successful stories. It is very well known that intelligence (or, more in general, talent and personal qualities) exhibits a Gaussian distribution among the population, whereas the distribution of wealth \textemdash{} often considered as a proxy of success \textemdash{} follows typically a power law (Pareto law), with a large majority of poor people and a very small number of billionaires. Such a discrepancy between a Normal distribution of inputs, with a typical scale (the average talent or intelligence), and the scale-invariant distribution of outputs, suggests that some hidden ingredient is at work behind the scenes. In this paper, we suggest that such an ingredient is just randomness. In particular, our simple agent-based model shows that, if it is true that some degree of talent is necessary to be successful in life, almost never the most talented people reach the highest peaks of success, being overtaken by averagely talented but sensibly luckier individuals. As far as we know, this counterintuitive result \textemdash{} although implicitly suggested between the lines in a vast literature \textemdash{} is quantified here for the first time. It sheds new light on the effectiveness of assessing merit on the basis of the reached level of success and underlines the risks of distributing excessive honors or resources to people who, at the end of the day, could have been simply luckier than others. We also compare several policy hypotheses to show the most efficient strategies for public funding of research, aiming to improve meritocracy, diversity of ideas and innovation.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/2GFQ6PFD/Pluchino et al. - 2018 - TALENT VERSUS LUCK THE ROLE OF RANDOMNESS IN SUCC.pdf}
}

@article{politzEventLoopsFirstClass2019,
  title = {Event {{Loops}} as {{First-Class Values}}: {{A Case Study}} in {{Pedagogic Language Design}}},
  shorttitle = {Event {{Loops}} as {{First-Class Values}}},
  author = {Politz, Joe and Lerner, Benjamin and Porncharoenwase, Sorawee and Krishnamurthi, Shriram},
  year = {2019},
  month = feb,
  journal = {The Art, Science, and Engineering of Programming},
  volume = {3},
  number = {3},
  pages = {11},
  issn = {2473-7321},
  doi = {10.22152/programming-journal.org/2019/3/11},
  urldate = {2023-02-04},
  abstract = {The World model is an existing functional input-output mechanism for event-driven programming. It is used in numerous popular textbooks and curricular settings. The World model conflates two different tasks\textendash the definition of an event processor and its execution\textendash into one. This conflation imposes a significant (even unacceptable) burden on student users in several educational settings where we have tried to use it, e.g., for teaching physics.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/TP2G4HW4/Politz et al. - 2019 - Event Loops as First-Class Values A Case Study in.pdf}
}

@inproceedings{politzPythonFullMonty2013,
  title = {Python: {{The Full Monty}}},
  shorttitle = {Python},
  booktitle = {Proceedings of the 2013 {{ACM SIGPLAN International Conference}} on {{Object Oriented Programming Systems Languages}} \& {{Applications}}},
  author = {Politz, Joe Gibbs and Martinez, Alejandro and Milano, Matthew and Warren, Sumner and Patterson, Daniel and Li, Junsong and Chitipothu, Anand and Krishnamurthi, Shriram},
  year = {2013},
  series = {{{OOPSLA}} '13},
  pages = {217--232},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2509136.2509536},
  urldate = {2018-12-11},
  abstract = {We present a small-step operational semantics for the Python programming language. We present both a core language for Python, suitable for tools and proofs, and a translation process for converting Python source to this core. We have tested the composition of translation and evaluation of the core for conformance with the primary Python implementation, thereby giving confidence in the fidelity of the semantics. We briefly report on the engineering of these components. Finally, we examine subtle aspects of the language, identifying scope as a pervasive concern that even impacts features that might be considered orthogonal.},
  isbn = {978-1-4503-2374-1},
  keywords = {serpents},
  file = {/Users/igormoreno/Zotero/storage/ZBEE592N/Politz et al - 2013 - Python.pdf}
}

@article{pollardHumanReasoningPossible1982,
  title = {Human Reasoning: {{Some}} Possible Effects of Availability},
  shorttitle = {Human Reasoning},
  author = {Pollard, P.},
  year = {1982},
  month = jul,
  journal = {Cognition},
  volume = {12},
  number = {1},
  pages = {65--96},
  issn = {0010-0277},
  doi = {10.1016/0010-0277(82)90030-0},
  urldate = {2018-12-02},
  abstract = {This paper discusses some possible ways in which the availability heuristic (Tversky and Kahneman, 1973) may mediate subjects' responses to experimental `reasoning' tasks. A brief review of some effects of availability in other areas is given and then the application of availability to reasoning data is considered with respect to problems employing both `thematic' and `abstract' content. In the case of thematic content, it is argued, with reference to a variety of studies, that to produce a differential effect (to abstract content), the content must provide available cues, resulting from the subjects' experience. Differential effects of content are thus interpreted as differential effects of availability. When abstract content is used, there are cues available from the experimental situation itself, and it is shown that several known error tendencies readily lend themselves to an explanation in terms of availability. In the final section, it is pointed out that a focus on available cues, rather than logical structure, provides a psychological, rather than logical, approach to human reasoning. It is argued that a bias may be psychologically, although not logically, optimal in that it may often produce correct responses in `real life'. Accordingly, the possible real life utility of availability is considered, and several ways in which the bias may lead to usually correct decisions are discussed. Given this, it is argued that availability is an effective heuristic and that observed biases on a range of experimental tasks may thus be interpreted as resulting from the application of a behavior that is optimal within the limits of human cognition. However, it is concluded that limitations in both deterministic and probabilistic problem solving may lead to a consistent, but erroneous, view of the world. R\'esum\'e Dans cet article on discute de la fa\c{c}on dont une heuristique fond\'eesur la `disponibilit\'e' (Tversky and Kahneman 1973) peut influencer les r\'eponses de sujets des ta\textasciicircum ches exp\'erimentales de raisonnement. Apr\`es une br\`eve revue de certains effets due\`ala `disponibilit\'e' dans d'autres domaines, on consid\`ere son application aux donn\'ees de raisonnement pour des probl\`emes\`acontenus soit `th\'ematiques' soit `abstraits'. En ce qui concerne les contenus th\'ematiques, on propose, en s'appuyant sur diff\'erentes\'etudes, que pour produire un effet diff\'erentiel (pour un contenu abstrait), ce contenu doit fournir des indices `disponibles' issus de l'exp\'erience des sujets. Les effets diff\'erentiels de contenu sont interpr\'et\'es comme des effets diff\'erentiels de disponibilit\'e. L'utilisation d'un contenu abstrait implique la disponibilit\'ed'indices fournis par la situation exp\'erimentale et l'on peut montrer que plusieurs types d'erreurs bien connues sont int\'erpr\'etables en termes de disponibilit\'e. Dans la section finale, il est propos\'eque la centration sur les indices disponibles pluto\textasciicircum t que sur la structure logique, entra\^ine une approche plus psychologique que logique du raisonnement humain. Il est montr\'equ'un biais peute\textasciicircum tre psychologiquement\textemdash quoique non logiquement\textemdash optimal en conduisant\`aune r\'eponse correcte dans la vie de tous les jours. Donc on consid\`ere l'utilit\'e(dans la vie r\'eelle) de la disponibilit\'eet on envisage les voies selon lesquelles des biais peuvent entra\^iner des d\'ecisions le plus souvent correctes. La disponibilit\'eest pr\'esent\'ee comme une heuristique efficiente et que les biais observ\'es exp\'erimentalement doivente\textasciicircum tre interpr\'et\'es comme le r\'esultat d'un comportement optimal dans les limites de la cognition humaine. Cependant, on conclut que les limitations lors de la r\'esolution de probl\`emes probabilistes ou d\'eterministes peuvent conduire\`aune vue du monde consistante quoique erron\'ee.},
  file = {/Users/igormoreno/Zotero/storage/XAR4WDVD/Pollard - 1982 - Human reasoning Some possible effects of availabi.pdf;/Users/igormoreno/Zotero/storage/EN7B48TR/0010027782900300.html}
}

@article{pollockAssimilatingComplexInformation2002,
  title = {Assimilating Complex Information},
  author = {Pollock, E and Chandler, P and Sweller, J},
  year = {2002},
  month = feb,
  journal = {Learning and Instruction},
  volume = {12},
  number = {1},
  pages = {61--86},
  issn = {0959-4752},
  doi = {10.1016/S0959-4752(01)00016-0},
  urldate = {2018-11-06},
  abstract = {Methods of instruction which are intended to facilitate understanding tend to incorporate all the information elements required for understanding in the instructions. Frequently, these types of instructions may overwhelm a learner's limited working memory and hinder learning. In four experiments, a two-phase, isolated-interacting elements learning approach was developed in which in the first phase, the element interactivity of complex material was artificially reduced by presenting the material as isolated elements of information that could be processed serially, rather than simultaneously, in working memory. In the second phase, all the information for understanding was presented. The control group was simply presented with all the information for understanding in both Phases 1 and 2. The results provided powerful evidence that for certain groups of learners, information is better learnt through the isolated-interacting elements instructional method.},
  keywords = {Cognitive load,Element interactivity,Instruction,Learning,Long-term memory,Schemas,Working memory},
  file = {/Users/igormoreno/Zotero/storage/XDYZWYZB/Pollock et al - 2002 - Assimilating complex information.pdf;/Users/igormoreno/Zotero/storage/HTGTD682/S0959475201000160.html}
}

@inproceedings{pollockTheiaAutomaticallyGenerating2019,
  title = {Theia: Automatically Generating Correct Program State Visualizations},
  shorttitle = {Theia},
  booktitle = {Proceedings of the 2019 {{ACM SIGPLAN Symposium}} on {{SPLASH-E}}},
  author = {Pollock, Josh and Roesch, Jared and Woos, Doug and Tatlock, Zachary},
  year = {2019},
  month = oct,
  series = {{{SPLASH-E}} 2019},
  pages = {46--56},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3358711.3361625},
  urldate = {2021-12-06},
  abstract = {Program state visualizations (PSVs) help programmers understand hidden program state like objects, references, and closures. Unfortunately, existing PSV tools do not support custom language semantics, which educators often use to introduce programming languages gradually. They also fail to visualize key pieces of program state, which can lead to incorrect and confusing visualizations. Theia, a generic PSV framework, uses formal abstract machine definitions to produce complete, continuous, and consistent (CCC) PSVs. To produce CCC visualizations with Theia, an educator only needs to specify an abstract machine and optionally customize the resulting web page, allowing her to visualize custom language semantics without developing a language-specific tool.},
  isbn = {978-1-4503-6989-3},
  keywords = {abstract machine,CS1,CS2,notional machine,operational semantics,program visualization},
  file = {/Users/igormoreno/Zotero/storage/4VNK8S7T/Pollock et al. - 2019 - Theia automatically generating correct program st.pdf}
}

@book{polyaHowSolveIt2004,
  title = {How to {{Solve It}}: {{A New Aspect}} of {{Mathematical Method}}},
  shorttitle = {How to {{Solve It}}},
  author = {Polya, G.},
  year = {2004},
  publisher = {{Princeton University Press}},
  abstract = {A perennial bestseller by eminent mathematician G. Polya, How to Solve It will show anyone in any field how to think straight. In lucid and appealing prose, Polya reveals how the mathematical method of demonstrating a proof or finding an unknown can be of help in attacking any problem that can be "reasoned" out\textemdash from building a bridge to winning a game of anagrams. Generations of readers have relished Polya's deft\textemdash indeed, brilliant\textemdash instructions on stripping away irrelevancies and going straight to the heart of the problem.},
  googlebooks = {z\_hsbu9kyQQC},
  isbn = {978-0-691-11966-3},
  langid = {english},
  keywords = {Mathematics / Geometry / General,Mathematics / Logic},
  file = {/Users/igormoreno/Zotero/storage/AGXDK6E9/(Princeton Science Library) G. Polya - How to Solve It. A New Aspect of Mathematical Method Princeton-Princeton University Press (2004).pdf}
}

@article{ponceEyeMovementAnalysis2014,
  title = {An Eye Movement Analysis of Highlighting and Graphic Organizer Study Aids for Learning from Expository Text},
  author = {Ponce, Hector R. and Mayer, Richard E.},
  year = {2014},
  month = dec,
  journal = {Computers in Human Behavior},
  volume = {41},
  pages = {21--32},
  issn = {0747-5632},
  doi = {10.1016/j.chb.2014.09.010},
  urldate = {2019-09-26},
  abstract = {This study uses eye tracking technology to examine how study aids such as highlighting and graphic organizers affect cognitive processing during learning. Participants were 130 college students randomly assigned to one of five experimental conditions. In the control group, students read a plain text; in two behaviorally passive conditions, students read a text with key words colored in red or read the same text along with a filled-in graphic organizer; and in two behaviorally active conditions, students either highlighted key words in a text or filled in an empty graphic organizer. Students took tests of rote memory (cloze test) and comprehension (summary test). Asking students to fill in a graphic organizer or providing a filled-in graphic organizer resulted in improvements in performance on both tests, whereas asking students to highlight the text or providing highlighted text improved performance only in the rote memory test compared to students who did not receive any study aids. Eye tracking measures showed that highlighting (in both conditions) primed the cognitive process of selecting: students spent more time fixating on those words colored in red compared with the control condition. In contrast, eye tracking measures showed that graphic organizers (in both conditions) primed the cognitive processes of selecting, organizing and integrating since the inclusion of an organizer substantially affected both where their eyes fixated and moved (i.e. transitions) within the text.},
  keywords = {Computer-based learning,Eye tracking,Graphic organizers,Highlighting,Study strategies},
  file = {/Users/igormoreno/Zotero/storage/KFLDBPC9/S0747563214004506.html}
}

@article{popatLearningCodeCoding2019,
  title = {Learning to Code or Coding to Learn? {{A}} Systematic Review},
  shorttitle = {Learning to Code or Coding to Learn?},
  author = {Popat, Shahira and Starkey, Louise},
  year = {2019},
  month = jan,
  journal = {Computers \& Education},
  volume = {128},
  pages = {365--376},
  issn = {03601315},
  doi = {10.1016/j.compedu.2018.10.005},
  urldate = {2018-11-06},
  abstract = {The resurgence of computer programming in the school curriculum brings a promise of preparing students for the future that goes beyond just learning how to code. This study reviewed research to analyse educational outcomes for children learning to code at school. A systematic review was applied to identify relevant articles and a thematic analysis to synthesise the findings. Ten articles were included in the synthesis and an overarching model was developed which depicts the themes. The results demonstrate that although students are learning to code, a range of other educational outcomes can be learnt or practiced through the teaching of coding. These included mathematical problem-solving, critical thinking, social skills, self-management and academic skills. The review also identified the importance of instructional design for developing these educational outcomes through coding.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/J6KJ8XWE/Popat and Starkey - 2019 - Learning to code or coding to learn A systematic .pdf}
}

@misc{POPL2021Abstracting,
  title = {[{{POPL}} 2021] {{Abstracting Gradual Typing Moving Forward}} : {{Precise}} and {{Space-Efficient}} (Full) - {{YouTube}}},
  urldate = {2022-11-21},
  howpublished = {https://www.youtube.com/watch?v=Vh9co9qezcA\&ab\_channel=ACMSIGPLAN},
  file = {/Users/igormoreno/Zotero/storage/9KD34CDA/watch.html}
}

@book{popperLogicScientificDiscovery1959,
  title = {The {{Logic}} of {{Scientific Discovery}}},
  author = {Popper, Karl},
  year = {1959},
  urldate = {2019-09-22},
  abstract = {Described by the philosopher A.J. Ayer as a work of 'great originality and power', this book revolutionized contemporary thinking on science and knowledge. Ideas such as the now legendary doctrine of 'falsificationism' electrified the scientific community, influencing even working scientists, as well as post-war philosophy. This astonishing work ranks alongside The Open Society and Its Enemies as one of Popper's most enduring books and contains insights and arguments that demand to be read to this day.},
  isbn = {978-0-203-99462-7},
  langid = {english},
  annotation = {00000  OCLC: 1048597364},
  file = {/Users/igormoreno/Zotero/storage/Q5YXSSFF/Popper - 1959 - The Logic of Scientific Discovery.pdf}
}

@inproceedings{porterBDSIValidatedConcept2019,
  title = {{{BDSI}}: {{A Validated Concept Inventory}} for {{Basic Data Structures}}},
  shorttitle = {{{BDSI}}},
  booktitle = {Proceedings of the 2019 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Porter, Leo and Zingaro, Daniel and Liao, Soohyun Nam and Taylor, Cynthia and Webb, Kevin C. and Lee, Cynthia and Clancy, Michael},
  year = {2019},
  series = {{{ICER}} '19},
  pages = {111--119},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3291279.3339404},
  urldate = {2019-10-07},
  abstract = {A Concept Inventory (CI) is a validated assessment to measure student conceptual understanding of a particular topic. This work presents a CI for Basic Data Structures (BDSI) and the process by which the CI was designed and validated. We discuss: 1) the collection of faculty opinions from diverse institutions on what belongs on the instrument, 2) a series of interviews with students to identify their conceptions and misconceptions of the content, 3) an iterative design process of developing draft questions, conducting interviews with students to ensure the questions on the instrument are interpreted properly, and collecting faculty feedback on the questions themselves, and 4) a statistical evaluation of final versions of the instrument to ensure its internal validity. We also provide initial results from pilot runs of the CI.},
  isbn = {978-1-4503-6185-9},
  keywords = {assessment,concept inventory,data structures,ForAndrea},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/3JSHH4D4/Porter et al - 2019 - BDSI.pdf}
}

@inproceedings{porterCompositingDigitalImages1984,
  title = {Compositing Digital Images},
  booktitle = {Proceedings of the 11th Annual Conference on {{Computer}} Graphics and Interactive Techniques},
  author = {Porter, Thomas and Duff, Tom},
  year = {1984},
  month = jan,
  pages = {253--259},
  publisher = {{ACM}},
  doi = {10.1145/800031.808606},
  urldate = {2023-08-29},
  isbn = {978-0-89791-138-2},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/HZJXV84A/Porter and Duff - 1984 - Compositing digital images.pdf}
}

@inproceedings{porterLeveragingOpenSource2014,
  title = {Leveraging Open Source Principles for Flexible Concept Inventory Development},
  booktitle = {Proceedings of the 2014 Conference on {{Innovation}} \& Technology in Computer Science Education - {{ITiCSE}} '14},
  author = {Porter, Leo and Taylor, Cynthia and Webb, Kevin C.},
  year = {2014},
  pages = {243--248},
  publisher = {{ACM Press}},
  address = {{Uppsala, Sweden}},
  doi = {10.1145/2591708.2591722},
  urldate = {2020-01-01},
  abstract = {Concept Inventory (CI) assessments, which target high-level learning goals, have proven highly valuable for higher education research. These assessments have helped to evaluate pedagogical practices among individual instructors, both within and across institutions, and have hence elevated the level of discourse on education within the community. The success of CIs in physics has inspired similar developments in computer science, with a few CIs now developed for computer science courses. However, the development of a CI typically follows a burdensome process, requiring a significant investment to produce a single CI that may be difficult to deploy due to institutional curricular differences. Furthermore, as our field continues to be shaped by technological advances, a path to faster, more modular CI development is critical.},
  isbn = {978-1-4503-2833-3},
  langid = {english},
  keywords = {Curriculus,To Read},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/DRLSM7F3/Porter et al. - 2014 - Leveraging open source principles for flexible con.pdf;/Users/igormoreno/Zotero/storage/JB9FMGI7/Porter et al. - 2014 - Leveraging open source principles for flexible con.pdf}
}

@article{portmannExtraktionUndKartografische2010,
  title = {Extraktion Und Kartografische {{Visualisierung}} von {{Informationen}} Aus {{Weblogs}}},
  author = {Portmann, Edy and Kuhn, Adrian},
  year = {2010},
  month = feb,
  journal = {HMD - Praxis der Wirtschaftsinformatik},
  volume = {HMD - Praxis der Wirtschaftsinformatik},
  pages = {81--90},
  doi = {10.1007/BF03340440},
  abstract = {Beim Information Retrieval ist in Anbetracht der Informationsflut entscheidend, relevante Informationen zu finden. Ein vielversprechender Ansatz liegt im Semantischen Web, wobei dem System die Bedeutung von Informationen ontologiebasiert beigebracht wird. Sucht der Benutzer nach Stichworten, werden ihm anhand der Ontologie verwandte Begriffe angezeigt und er kann mittels Mensch-Maschine-Interaktion seine relevanten Informationen extrahieren. Um eine solche Interaktion zu f\"ordern, werden die Ergebnisse visuell aufgearbeitet. Dabei liegt der Mehrwert darin, dass der Benutzer anstelle von Tausenden von Suchresultaten in einer fast endlosen Liste, ein kartographisch visualisiertes Suchresultat geliefert bekommt. Dabei hilft die Visualisierung, unvorhergesehene Beziehungen zu entdecken und zu erforschen.},
  file = {/Users/igormoreno/Zotero/storage/C5XQRRNA/Portmann and Kuhn - 2010 - Extraktion und kartografische Visualisierung von Informationen aus Weblogs.pdf}
}

@article{pousBisimulationCoinductionEnhancements2019,
  title = {Bisimulation and {{Coinduction Enhancements}}: {{A Historical Perspective}}},
  shorttitle = {Bisimulation and {{Coinduction Enhancements}}},
  author = {Pous, Damien and Sangiorgi, Davide},
  year = {2019},
  month = dec,
  journal = {Formal Aspects of Computing},
  volume = {31},
  number = {6},
  pages = {733--749},
  publisher = {{Springer Verlag}},
  doi = {10.1007/s00165-019-00497-w},
  urldate = {2021-12-03},
  abstract = {Bisimulation is an instance of coinduction. Both bisimulation and coinduction are today widely used, in many areas of Computer Science, as well as outside Computer Science. Over, roughly, the last 25 years, enhancements of the principles and methods related to bisimulation and coinduction (i.e., techniques to make proofs shorter and simpler) have become a research topic on its own. In the paper the origins and the developments of the topic are reviewed.},
  file = {/Users/igormoreno/Zotero/storage/GNM7X3D5/Pous and Sangiorgi - 2019 - Bisimulation and Coinduction Enhancements A Histo.pdf}
}

@article{prabawaLearningBasicProgramming2018,
  title = {Learning Basic Programming Using {{CLIS}} through Gamification},
  author = {Prabawa, H W and Sutarno, H and Kusnendar, J and Rahmah, F},
  year = {2018},
  month = may,
  journal = {Journal of Physics: Conference Series},
  volume = {1013},
  pages = {012099},
  issn = {1742-6588, 1742-6596},
  doi = {10.1088/1742-6596/1013/1/012099},
  urldate = {2020-06-22},
  abstract = {The difficulty of understanding programming concept is a major problem in basic programming lessons. Based on the results of preliminary studies, 60\% of students reveal the monotonous of learning process caused by the limited number of media. Children Learning in Science (CLIS) method was chosen as solution because CLIS has facilitated students' initial knowledge to be optimized into conceptual knowledge. Technological involvement in CLIS (gamification) helped students to understand basic programming concept. This research developed a media using CLIS method with gamification elements to increase the excitement of learning process. This research declared that multimedia is considered good by students, especially regarding the mechanical aspects of multimedia, multimedia elements and aspects of multimedia information structure. Multimedia gamification learning with the CLIS model showed increased number of students' concept understanding.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/7KDQZ5Q4/Prabawa et al - 2018 - Learning basic programming using CLIS through gamification.pdf}
}

@article{prasadHowGraduatingStudents2020,
  title = {How Do {{Graduating Students Evaluate Software Design Diagrams}}?},
  author = {Prasad, Prajish and Iyer, Sridhar},
  year = {2020},
  journal = {New Zealand},
  pages = {9},
  abstract = {An important skill graduating computing students require is to evaluate a given software design and ensure that it satisfies the intended requirements. Prior work has shown that while working with software designs, experts think deeply about the design and simulate scenarios where the design does not satisfy the requirements. In this paper, we examine how students evaluate a given set of software design diagrams (UML class and sequence diagrams) against the given requirements.},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/DQ96UMGB/Prasad and Iyer - 2020 - How do Graduating Students Evaluate Software Desig.pdf}
}

@article{prasadMakingHayWheats2022,
  title = {Making {{Hay}} from {{Wheats}}: {{A Classsourcing Method}} to {{Identify Misconceptions}}},
  author = {Prasad, Siddhartha and Greenman, Ben and Nelson, Tim and Wrenn, John and Krishnamurthi, Shriram},
  year = {2022},
  pages = {7},
  abstract = {Novice programmers often begin coding with a poor understanding of the task at hand and end up solving the wrong problem. A promising way to put novices on the right track is to have them write examples first, before coding, and provide them with feedback by evaluating the examples on a suite of chaff implementations that are flawed in subtle ways. This feedback, however, is only as good as the chaffs themselves. Instructors must anticipate misconceptions and avoid expert blind spots to make a useful suite of chaffs.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/TZNS2S5L/Prasad et al. - 2022 - Making Hay from Wheats A Classsourcing Method to .pdf}
}

@article{pratherBESTPAPERSIGCSE2019,
  title = {{{BEST PAPER AT SIGCSE}} 2019 {{IN THE CS EDUCATION TRACK}}: {{First Things First}}: {{Providing Metacognitive Scaffolding}} for {{Interpreting Problem Prompts}}},
  shorttitle = {{{BEST PAPER AT SIGCSE}} 2019 {{IN THE CS EDUCATION TRACK}}},
  author = {Prather, James and Pettit, Raymond and Becker, Brett A. and Denny, Paul and Loksa, Dastyni and Peters, Alani and Albrecht, Zachary and Masci, Krista},
  year = {2019},
  month = apr,
  journal = {ACM Inroads},
  volume = {10},
  number = {2},
  pages = {42--49},
  issn = {2153-2184},
  doi = {10.1145/3324892},
  urldate = {2019-04-30},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/998CV6PJ/Prather et al - 2019 - BEST PAPER AT SIGCSE 2019 IN THE CS EDUCATION TRACK.pdf}
}

@misc{prathyushPrathyvshLambdacalculus2021,
  title = {Prathyvsh/Lambda-Calculus},
  author = {Prathyush},
  year = {2021},
  month = feb,
  urldate = {2021-04-17},
  abstract = {Guide elucidating Lambda Calculus. Contribute to prathyvsh/lambda-calculus development by creating an account on GitHub.}
}

@misc{prathyushPrathyvshLambdacalculusvisualizations2021,
  title = {Prathyvsh/Lambda-Calculus-Visualizations},
  author = {Prathyush, Pramod},
  year = {2021},
  month = mar,
  urldate = {2021-04-17},
  abstract = {Catalog of visual lambda calculi. Contribute to prathyvsh/lambda-calculus-visualizations development by creating an account on GitHub.}
}

@misc{prathyushUnderstandingLambdaCalculus,
  title = {Understanding {{Lambda Calculus}}},
  author = {Prathyush, Pramod},
  journal = {Prabros. - Understanding Lambda Calculus},
  urldate = {2021-04-17},
  abstract = {A guide for developing an intuitive understanding of Lambda Calculus},
  howpublished = {https://prabros.com/lambda-calculus/},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/NKQBVPB6/lambda-calculus.html}
}

@article{precheltEmpiricalComparisonSeven2000,
  title = {An {{Empirical Comparison}} of {{Seven Programming Languages}}},
  author = {Prechelt, L.},
  year = {2000},
  month = oct,
  journal = {Computer},
  volume = {33},
  number = {10},
  pages = {23--29},
  issn = {0018-9162},
  urldate = {2018-08-28},
  abstract = {{$<$}p{$>$}Often heated, debates regarding different programming languages' effectiveness remain inconclusive because of scarce data and a lack of direct comparisons. The author addresses that challenge, comparatively analyzing 80 implementations of the phonecode program in seven different languages (C, C++, Java, Perl, Python, Rexx, and Tcl). Further, for each language, the author analyzes several separate implementations by different programmers. The comparison investigates several aspects of each language, including program length, programming effort, run-time efficiency, memory consumption, and reliability. The author uses comparisons to present insight into program language performance. For example, the study indicates that Java's memory overhead is still huge compared to C or C++, but its runtime efficiency has become quite acceptable. The scripting languages, however, offer reasonable alternatives to C and C++, even for tasks that must handle fair amounts of computation and data.{$<$}/p{$>$}},
  annotation = {00347},
  file = {/Users/igormoreno/Zotero/storage/PWI5RPRA/Prechelt - 2000 - An empirical comparison of seven programming langu.pdf;/Users/igormoreno/Zotero/storage/CS34D549/rx023.html}
}

@misc{pressChangingMinds,
  title = {Changing {{Minds}}},
  author = {Press, The MIT},
  journal = {The MIT Press},
  urldate = {2019-06-24},
  abstract = {An impassioned guide to how computers can fundamentally change how we learn and think.                 Andrea diSessa's career as a scholar, technologist, and teacher has been driven by one important question: can education\textemdash in particular, science education\textemdash be transformed by the computer so that children can learn more, learn more easily at an earlier age, and learn with pleasure and commitment? This book is diSessa's informed and passionate affirmative answer to that question.While written at a level that anyone with a good acquaintance with high school science can understand, the book reflects the depth and breadth of the issues surrounding technology in education. Rejecting the simplistic notion that the computer is merely a tool for more efficient instruction, diSessa shows how computers can be the basis for a new literacy that will change how people think and learn. He discusses the learning theory that explains why computers can be such powerful catalysts for change in education, in particular, how intuitive knowledge is the platform on which students build scientific understanding. He also discusses the material and social reasons for the computer's potential and argues for "two-way literacies," where everyone is a creator as well as consumer of dynamic and interactive expressive forms. DiSessa gives many examples from his work using the Boxer computer environment, an integrated software system designed to investigate computational literacies.},
  howpublished = {https://mitpress.mit.edu/books/changing-minds},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/3VLAVICW/Press - Changing Minds.pdf;/Users/igormoreno/Zotero/storage/3BSEDYPH/changing-minds.html}
}

@misc{ProductivityHintsTips,
  title = {Productivity Hints, Tips, Hacks and Tricks for Graduate Students and Professors},
  urldate = {2020-06-06},
  howpublished = {http://matt.might.net/articles/productivity-tips-hints-hacks-tricks-for-grad-students-academics/},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/DBQ2QRKQ/productivity-tips-hints-hacks-tricks-for-grad-students-academics.html}
}

@inproceedings{ProgrammingConceptsMisconceptions2022,
  title = {Programming Concepts and Misconceptions in Grade 5 and 6 Children: {{Developing}} and Testing a New Assessment Tool},
  shorttitle = {Programming Concepts and Misconceptions in Grade 5 and 6 Children},
  booktitle = {Atti Del 5\textdegree{} {{Convegno}} Sulle Didattiche Disciplinari},
  year = {2022},
  month = dec,
  pages = {328--333},
  publisher = {{Dipartimento formazione e apprendimento \textendash{} SUPSI, Svizzera / swissuniversities, Svizzera}},
  doi = {10.33683/dida.22.05.59},
  urldate = {2023-10-02},
  abstract = {Many countries are implementing computer science education, including programming, into their school curricula. In primary school this topic is new, both for students and teachers. Even though there has been research into the difficulties that high school and adult students face when learning to program, not all these findings translate well to the cognitive abilities of younger students and the environment they learn in. Our research focuses on finding out which misconceptions about programming primary school children hold and develop. This is important because research from other fields has shown that knowledge about misconceptions can improve teaching. This project aims to develop a Programming Misconceptions Assessment Tool (ProMAT) for children in grades 5 and 6 that have learned to program using either xLogo or Scratch \textendash{} two popular educational programming languages currently used in Switzerland. Ultimately, the project should result in an assessment tool that can be used both by researchers and practitioners interested in primary school children's misconceptions about programming. In addition, it should reveal if and how educational programming environments affect the development of these misconceptions. The ProMAT is currently under development and underwent a first pilot testing phase with 57 children. In this paper, we describe the development of the first version of this tool, discuss insights gained from the pilot study, and outline the next steps of the project.},
  isbn = {978-3-033-09419-2},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/7NZ2B4AM/Current list of Misconception used for the development of ProMAT.pdf;/Users/igormoreno/Zotero/storage/H4F8Q3R8/Schlussbericht_MI_2015-02-23_mit_Anhang.pdf;/Users/igormoreno/Zotero/storage/HSCCULFX/Schlussbericht_MI_2015-02-23_mit_Anhang-en_translation.pdf;/Users/igormoreno/Zotero/storage/INZJJBU8/ProMAT xLogo 1.6 annotated copy of online test.pdf;/Users/igormoreno/Zotero/storage/Q5FL4J3W/ProMAT Scratch 1.3 annotated copy of online test.pdf;/Users/igormoreno/Zotero/storage/X6N3LGMU/2022 - Programming concepts and misconceptions in grade 5.pdf}
}

@misc{ProgrammingLanguageFoundations,
  title = {Programming {{Language Foundations}} in {{Agda}} \textendash{} {{Bisimulation}}},
  urldate = {2020-12-14},
  howpublished = {https://plfa.inf.ed.ac.uk/Bisimulation/},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/4SH9BT2J/Bisimulation.html;/Users/igormoreno/Zotero/storage/V4ZQW6N9/Bisimulation.html}
}

@article{proulxConnectionsKafkaExposure2009,
  title = {Connections {{From Kafka}}: {{Exposure}} to {{Meaning Threats Improves Implicit Learning}} of an {{Artificial Grammar}}},
  shorttitle = {Connections {{From Kafka}}},
  author = {Proulx, Travis and Heine, Steven J.},
  year = {2009},
  month = sep,
  journal = {Psychological Science},
  volume = {20},
  number = {9},
  pages = {1125--1131},
  publisher = {{SAGE Publications Inc}},
  issn = {0956-7976},
  doi = {10.1111/j.1467-9280.2009.02414.x},
  urldate = {2021-03-25},
  abstract = {In the current studies, we tested the prediction that learning of novel patterns of association would be enhanced in response to unrelated meaning threats. This prediction derives from the meaning-maintenance model, which hypothesizes that meaning-maintenance efforts may recruit patterns of association unrelated to the original meaning threat. Compared with participants in control conditions, participants exposed to either of two unrelated meaning threats (i.e., reading an absurd short story by Franz Kafka or arguing against one's own self-unity) demonstrated both a heightened motivation to perceive the presence of patterns within letter strings and enhanced learning of a novel pattern actually embedded within letter strings (artificial-grammar learning task). These results suggest that the cognitive mechanisms responsible for implicitly learning patterns are enhanced by the presence of a meaning threat.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/SE9RZLHU/Proulx and Heine - 2009 - Connections From Kafka Exposure to Meaning Threat.pdf}
}

@inproceedings{pruchaComputerScienceTeacher2019,
  title = {Computer {{Science Teacher Preparation}} in an {{International Context}}: {{A Comparative Study}}},
  shorttitle = {Computer {{Science Teacher Preparation}} in an {{International Context}}},
  booktitle = {Proceedings of the 2019 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Pr{\r{u}}cha, Tom{\'a}{\v s}},
  year = {2019},
  series = {{{ICER}} '19},
  pages = {349--350},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3291279.3339435},
  urldate = {2019-10-07},
  abstract = {Since computer science is implemented at all levels of curriculum from kindergarten to high school there is a growing interest in increasing the quality and number of computer science teachers in countries around the world. Innovation in university study programmes and different approaches in computer science teacher preparation can be one of the key elements for success with these problems. In the Czech Republic, as well as in other countries, there is also a problem with the number of qualified computer science teachers, and with how to recruit new teachers. Comparative education as a general cognitive tool can bring important knowledge of foreign development. The main aim of my dissertation thesis is to empirically describe the key elements in computer science teacher preparation in selected contexts. The results can serve as a valuable source of information and inspiration for universities preparing computer science teachers, but also for political representatives of the countries in the field of education who deal with the given issues.},
  isbn = {978-1-4503-6185-9},
  keywords = {comparative education,computer science teacher preparation,multiple case study,teacher training},
  file = {/Users/igormoreno/Zotero/storage/D3BNLAGQ/Průcha - 2019 - Computer Science Teacher Preparation in an International Context.pdf}
}

@article{pumaCognitiveLoadTheory2018,
  title = {Cognitive {{Load Theory}} and {{Time Considerations}}: {{Using}} the {{Time-Based Resource Sharing Model}}},
  shorttitle = {Cognitive {{Load Theory}} and {{Time Considerations}}},
  author = {Puma, S{\'e}bastien and Matton, Nadine and Paubel, Pierre-Vincent and Tricot, Andr{\'e}},
  year = {2018},
  month = sep,
  journal = {Educational Psychology Review},
  volume = {30},
  number = {3},
  pages = {1199--1214},
  issn = {1573-336X},
  doi = {10.1007/s10648-018-9438-6},
  urldate = {2018-11-09},
  abstract = {For a long time, Cognitive Load Theory has considered working memory models as tools to advance research on learning. It has used working memory capacity models, where working memory is viewed as being composed of a discrete number of slots (i.e., chunks) that can be kept active. However, recent results have shown that for a fixed quantity of information, the mere pace of information presentation can affect learning performance. Commonly used working memory models cannot explain such results. Here, we propose to use a new model in the field of Cognitive Load Theory, the Time-Based Resource Sharing model, which enables time to be taken into account when describing working memory solicitation. In two experiments, we tested hypotheses allowed by the model. Results showed that the Time-Based Resource Sharing model can assist the investigation of information presentation pace effects during learning, as long as prior knowledge is taken into account. Particularly, the results suggest a new interpretation of intrinsic and extrinsic load that could relate them to the time needed to process information.},
  langid = {english},
  keywords = {Cognitive Load Theory,Dynamic variations,Expertise,Meaningful items,Time-Based Resource Sharing model,Working memory},
  file = {/Users/igormoreno/Zotero/storage/MXJC4DSU/Puma et al - 2018 - Cognitive Load Theory and Time Considerations.pdf}
}

@article{putnamSummaryMisconceptionsHigh1986,
  ids = {putnamSummaryMisconceptionsHigh1986a},
  title = {A {{Summary}} of {{Misconceptions}} of {{High School Basic Programmers}}},
  author = {Putnam, Ralph T. and Sleeman, D. and Baxter, Juliet A. and Kuspa, Laiani K.},
  year = {1986},
  month = nov,
  journal = {Journal of Educational Computing Research},
  volume = {2},
  number = {4},
  pages = {459--472},
  publisher = {{SAGE Publications Sage CA: Los Angeles, CA}},
  issn = {0735-6331, 1541-4140},
  doi = {10.2190/FGN9-DJ2F-86V8-3FAU},
  urldate = {2020-06-22},
  abstract = {This study examined high school students' knowledge about constructs in the BASIC programming language. A screening test was administered to ninety-six students, fiity-six of whom were interviewed. Students were asked t o trace simple programs and predict their output. Errors in virtually all BASIC constructs we examined were observed, with many of the misconceptions arising from the application of knowledge and reasoning from informal domains to programming. It is argued that a lack of knowledge of basic features of progamming language will prevent students from developing the higher-level cognitive skills that much programming instruction is intended to foster.},
  langid = {english},
  annotation = {00122},
  file = {/Users/igormoreno/Zotero/storage/D5PM4PGW/Putnam et al. - 1986 - A summary of misconceptions of high school Basic p.pdf;/Users/igormoreno/Zotero/storage/NMJ3N86Z/Putnam et al - 1986 - A Summary of Misconceptions of High School Basic Programmers.pdf;/Users/igormoreno/Zotero/storage/GREDRC3T/fgn9-dj2f-86v8-3fau.html}
}

@article{putzCanGamificationHelp2020,
  title = {Can Gamification Help to Improve Education? {{Findings}} from a Longitudinal Study},
  shorttitle = {Can Gamification Help to Improve Education?},
  author = {Putz, Lisa-Maria and Hofbauer, Florian and Treiblmaier, Horst},
  year = {2020},
  month = sep,
  journal = {Computers in Human Behavior},
  volume = {110},
  pages = {106392},
  issn = {07475632},
  doi = {10.1016/j.chb.2020.106392},
  urldate = {2023-06-27},
  abstract = {A goal of any educational measure is to improve students' capability to retain teaching content. In this paper, we investigate the potential of gamification to foster knowledge retention using an action research approach. We present the results from a longitudinal study including 617 secondary and tertiary education students conducted over a period of two years. Various workshop designs that incorporated numerous gamification elements were compared with non-gamified workshop designs, tested and refined over time. The improved workshop designs led to increased levels of knowledge retention that exceeded the benchmark values from educational literature. We found that gamification exerts a positive impact on knowledge retention. We tested for the moderating effects of gender and age and found no effect of the former and inconsistent results for the latter. The steady increase in students' learning performance resulting from constant refinement of the workshops demonstrates the usefulness of incorporating gamification principles into educational activities.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/MTW9I9F3/Putz et al. - 2020 - Can gamification help to improve education Findin.pdf}
}

@article{qianInvestigationHighSchool2019,
  title = {An {{Investigation}} of {{High School Students}}' {{Errors}} in {{Introductory Programming}}: {{A Data-Driven Approach}}},
  shorttitle = {An {{Investigation}} of {{High School Students}}' {{Errors}} in {{Introductory Programming}}},
  author = {Qian, Yizhou and Lehman, James},
  year = {2019},
  month = nov,
  journal = {Journal of Educational Computing Research},
  pages = {073563311988750},
  issn = {0735-6331, 1541-4140},
  doi = {10.1177/0735633119887508},
  urldate = {2020-06-22},
  abstract = {This study implemented a data-driven approach to identify Chinese high school students' common errors in a Java-based introductory programming course using the data in an automated assessment tool called the Mulberry. Students' errorrelated behaviors were also analyzed, and their relationships to success in introductory programming were investigated. This study identified 15 common compilation errors and 6 common test errors. The results showed that these common errors accounted for a large proportion of all errors, so identifying the common errors is important to help students succeed in introductory programming courses. Based on these common errors, five underlying student difficulties were identified and are discussed. In addition, after analyzing existing measures of students' error-related behaviors, we developed a measure called improvement rate to quantify students' success in fixing errors. The results of our study suggest that students' competence of improving code is important to their success in introductory programming. We recommend researchers design and develop automated assessment tools that provide feedback messages for common student errors and instructors who explicitly teach knowledge and skills of improving code in class.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/CIQE76QT/Qian and Lehman - 2019 - An Investigation of High School Students’ Errors in Introductory Programming.pdf}
}

@article{qianStudentsMisconceptionsOther2017,
  ids = {qianStudentsMisconceptionsOther2017a},
  title = {Students' {{Misconceptions}} and {{Other Difficulties}} in {{Introductory Programming}}: {{A Literature Review}}},
  shorttitle = {Students' {{Misconceptions}} and {{Other Difficulties}} in {{Introductory Programming}}},
  author = {Qian, Yizhou and Lehman, James},
  year = {2017},
  month = oct,
  journal = {ACM Transactions on Computing Education},
  volume = {18},
  number = {1},
  pages = {1--24},
  issn = {19466226},
  doi = {10.1145/3077618},
  urldate = {2018-10-22},
  langid = {english},
  keywords = {Misconceptions Proposal},
  file = {/Users/igormoreno/Zotero/storage/6IB6GDEC/Igor copy - Qian and Lehman - 2017 - Students’ Misconceptions and Other Difficulties in Introductory Programming.pdf;/Users/igormoreno/Zotero/storage/A47744W3/Qian e Lehman - 2017 - Students’ Misconceptions and Other Difficulties in.pdf;/Users/igormoreno/Zotero/storage/AJVH96JX/Matthias.pdf;/Users/igormoreno/Zotero/storage/W9PKSBLW/Qian and Lehman - 2017 - Students’ Misconceptions and Other Difficulties in Introductory Programming.pdf}
}

@article{qianTeachersPerceptionsStudent2020,
  title = {Teachers' {{Perceptions}} of {{Student Misconceptions}} in {{Introductory Programming}}},
  author = {Qian, Yizhou and Hambrusch, Susanne and Yadav, Aman and Gretter, Sarah and Li, Yue},
  year = {2020},
  month = apr,
  journal = {Journal of Educational Computing Research},
  volume = {58},
  number = {2},
  pages = {364--397},
  issn = {0735-6331, 1541-4140},
  doi = {10.1177/0735633119845413},
  urldate = {2020-06-22},
  abstract = {A quality computer science (CS) teacher needs to understand students' common misconceptions in learning CS. This study explored one aspect of CS teachers' understanding of student misconceptions: their perceptions of student misconceptions related to introductory programming. Perceptions in this study included three parts: teachers' perceived frequency of a student misconception, teachers' perceived importance of a misconception in learning, and teachers' confidence in addressing a misconception. Teachers in our study taught a Python-based CS course for high schools students. A survey was designed and administered to assess teachers' perceptions of students' misconceptions. Our results indicated that teachers' confidence of addressing misconceptions and the teaching context may affect their perceptions of student misconceptions. We also found that some latent misconceptions are likely to lead to a perception of low frequency as they can be more difficult to detect. Moreover, our study found that teachers' degrees and additional computing training showed positive relationships with their confidence of addressing student misconceptions and that additional computing training also showed a positive relationship with teachers' perceived importance of student misconceptions. Implications of the findings for future research and practice of CS education are discussed.},
  langid = {english},
  keywords = {To Read},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/QVKBEB5H/Qian et al - 2020 - Teachers’ Perceptions of Student Misconceptions in Introductory Programming.pdf}
}

@article{qianUsingTargetedFeedback2019,
  title = {Using {{Targeted Feedback}} to {{Address Common Student Misconceptions}} in {{Introductory Programming}}: {{A Data-Driven Approach}}},
  shorttitle = {Using {{Targeted Feedback}} to {{Address Common Student Misconceptions}} in {{Introductory Programming}}},
  author = {Qian, Yizhou and Lehman, James D.},
  year = {2019},
  month = jul,
  journal = {SAGE Open},
  volume = {9},
  number = {4},
  pages = {215824401988513},
  issn = {2158-2440, 2158-2440},
  doi = {10.1177/2158244019885136},
  urldate = {2020-06-22},
  abstract = {With the expansion of computer science (CS) education, CS teachers in K-12 schools should be cognizant of student misconceptions and be prepared to help students establish accurate understanding of computer science and programming. Digital tools, such as automated assessment systems, can be useful and supportive in teaching CS courses. This two-stage design-based research (DBR) study investigated the effects of targeted feedback in an automated assessment system for addressing common misconceptions of high school students in a Java-based introductory programming course. Based on students' common errors and underlying misconceptions, targeted feedback messages were designed and provided for students. The quantitative analysis found that with targeted feedback students were more likely to correct the errors in their code. The qualitative analysis of students' solutions revealed that when improving the code, students receiving feedback made fewer intermediate incorrect solutions. In other words, the targeted feedback messages may help to promote conceptual change and facilitate learning. Although the findings of this exploratory study showed evidence of the power of digital tools, more research is needed to make technology benefit more CS teachers.},
  langid = {english},
  keywords = {To Read},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/3Z7FN6BI/Qian and Lehman - 2019 - Using Targeted Feedback to Address Common Student Misconceptions in.pdf}
}

@inproceedings{qiUnlimitedTraceTutor2020,
  title = {Unlimited {{Trace Tutor}}: {{Learning Code Tracing With Automatically Generated Programs}}},
  shorttitle = {Unlimited {{Trace Tutor}}},
  booktitle = {Proceedings of the 51st {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Qi, Ruixiang and Fossati, Davide},
  year = {2020},
  month = feb,
  pages = {427--433},
  publisher = {{ACM}},
  address = {{Portland OR USA}},
  doi = {10.1145/3328778.3366939},
  urldate = {2020-06-22},
  abstract = {Previous research showed that creating specific types of tracing tables helps students learn code tracing, a fundamental skill in computer programming. This paper introduces Unlimited Trace Tutor, the first version of a code tracing tutoring system that can automatically generate tracing problems and create such tracing tables. We conducted a pilot experiment with volunteer students from an introductory level Computer Science course. We found that our software effectively helps student learn tracing ``for'' loops, ``while'' loops, and ``if'' statements. In this paper we describe the system's architecture, our algorithms for generating code and tracing tables, and the promising results of our pilot experiment.},
  isbn = {978-1-4503-6793-6},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/4UK39TSH/Qi and Fossati - 2020 - Unlimited Trace Tutor Learning Code Tracing With .pdf}
}

@article{qiuUnderstandingSyntacticRule2017,
  title = {Understanding the Syntactic Rule Usage in Java},
  author = {Qiu, Dong and Li, Bixin and Barr, Earl T. and Su, Zhendong},
  year = {2017},
  month = jan,
  journal = {Journal of Systems and Software},
  volume = {123},
  pages = {160--172},
  issn = {01641212},
  doi = {10.1016/j.jss.2016.10.017},
  urldate = {2019-12-17},
  abstract = {Objective: This study aims to understand how programming language syntax is employed in actual development and explore their potential applications based on the results of syntax usage analysis. Method: We present our results on the first such study on Java, a modern, mature, and widely-used programming language. Our corpus contains over 5000 open-source Java projects, totalling 150 million source lines of code (SLoC). We study both independent (i.e. applications of a single syntax rule) and dependent (i.e. applications of multiple syntax rules) rule usage, and quantify their impact over time and project size. Results: Our study provides detailed quantitative information and yields insight, particularly (i) confirming the conventional wisdom that the usage of syntax rules is Zipfian; (ii) showing that the adoption of new rules and their impact on the usage of pre-existing rules vary significantly over time; and (iii) showing that rule usage is highly contextual. Conclusions: Our findings suggest potential applications across language design, code suggestion and completion, automatic syntactic sugaring, and language restriction. \textcopyright{} 2016 Elsevier Inc. All rights reserved.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/J7F7DUW7/Qiu et al - 2017 - Understanding the syntactic rule usage in java.pdf}
}

@misc{QualitiesSuccessfulPh,
  title = {3 Qualities of Successful {{Ph}}.{{D}}. Students: {{Perseverance}}, Tenacity and Cogency},
  urldate = {2020-06-06},
  howpublished = {http://matt.might.net/articles/successful-phd-students/},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/3YYHP58Q/successful-phd-students.html}
}

@inproceedings{quilleSecondLevelComputer2018,
  title = {Second {{Level Computer Science}}: {{The Irish K-12 Journey Begins}}},
  shorttitle = {Second {{Level Computer Science}}},
  booktitle = {Proceedings of the 18th {{Koli Calling International Conference}} on {{Computing Education Research}}  - {{Koli Calling}} '18},
  author = {Quille, Keith and Faherty, Roisin and Bergin, Susan and Becker, Brett A.},
  year = {2018},
  pages = {1--5},
  publisher = {{ACM Press}},
  address = {{Koli, Finland}},
  doi = {10.1145/3279720.3279742},
  urldate = {2020-06-22},
  abstract = {This paper initially describes the introduction of a new computer science subject for the Irish leaving certificate course. This is comparable to US high school exit exams (AP computer science principals) or the UK A level computer science. In doing so the authors wish to raise international awareness of the new subject's structure and content. Second, this paper presents the current work of the authors, consisting of early initiatives to try and give the new subject the highest chances of success. The initiatives consist of two facets: The first is the delivery of two-hour computing camps at second level schools (to address stereotypes and provide insight on what computer science really is), which was delivered to 2,943 students, in 95 schools between September 2017 and June 2018. Second, the authors followed this with teacher continual professional development (CPD) sessions, totalling 22, to just over 500 teachers. Early findings are presented, showing potentially concerning trends for gender diversity and CPD development. A call is then raised, to the international computer science education community for wisdom and suggestions that the community may have developed from prior experience. This is to obtain feedback and recommendations for the new subject and the authors' current initiatives, to address early concerns and help develop the initiatives further.},
  isbn = {978-1-4503-6535-2},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/WNH2SNDQ/Quille et al - 2018 - Second Level Computer Science.pdf}
}

@misc{quinsonPresentingPhDWork2016,
  title = {Presenting the {{PhD}} Work of {{Mara Saeli}}},
  author = {Quinson, M},
  year = {2016},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/IXMGFKMQ/Quinson - 2016 - Presenting the PhD work of Mara Saeli.pdf}
}

@article{raaijmakersEffectsPerformanceFeedback2017,
  title = {Effects of Performance Feedback Valence on Perceptions of Invested Mental Effort},
  author = {Raaijmakers, Steven F. and Baars, Martine and Schaap, Lydia and Paas, Fred and {van Gog}, Tamara},
  year = {2017},
  month = oct,
  journal = {Learning and Instruction},
  series = {Bridging {{Cognitive Load}} and {{Self-Regulated Learning Research}}},
  volume = {51},
  pages = {36--46},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2016.12.002},
  urldate = {2018-11-06},
  abstract = {We investigated whether the valence of performance feedback provided after a task, would affect participants' perceptions of how much mental effort they invested in that same task. In three experiments, we presented participants with problem-solving tasks and manipulated the presence and valence of feedback between conditions (no, positive, or negative feedback valence), prior to asking them to rate how much mental effort they invested in solving that problem. Across the three experiments\textendash with different problem-solving tasks and participant populations\textendash we found that subjective ratings of effort investment were significantly higher after negative than after positive feedback; ratings given without feedback fell in between. These findings show that feedback valence alters perceived effort investment (possibly via task perceptions or affect), which can be problematic when effort is measured as an indicator of cognitive load. Therefore, it seems advisable to measure mental effort directly after each task, before giving feedback on performance.},
  keywords = {Cognitive load measurement,Feedback valence,Mental effort,Problem solving},
  file = {/Users/igormoreno/Zotero/storage/23LSVD8U/Raaijmakers et al - 2017 - Effects of performance feedback valence on perceptions of invested mental effort.pdf;/Users/igormoreno/Zotero/storage/LJUQYMKQ/S0959475216302869.html}
}

@article{rachmatullahDevelopmentValidationMiddle2020,
  title = {Development and {{Validation}} of the {{Middle Grades Computer Science Concept Inventory}} ({{MG-CSCI}}) {{Assessment}}},
  author = {Rachmatullah, Arif and Akram, Bita and Boulden, Danielle and Mott, Bradford and Boyer, Kristy and Lester, James and Wiebe, Eric},
  year = {2020},
  month = feb,
  journal = {EURASIA Journal of Mathematics, Science and Technology Education},
  volume = {16},
  number = {5},
  issn = {13058223},
  doi = {10.29333/ejmste/116600},
  urldate = {2021-06-23},
  abstract = {The increasing interest in computer science (CS) and CS-integrated STEM teaching and learning has created a need for assessment instruments that can be used to evaluate the efficacy of innovative instructional approaches to K-12 CS education. However, there is a lack of validated assessment tools aligned to core CS concepts for younger students. This paper reports on the development and validation of a CS concept assessment for middle grades (ages 11-13) students. A total of 27 multiple-choice items were developed, guided by focal knowledge, skills and abilities associated with the concepts of variables, loops, conditionals, and algorithms. These items were administered to 457 middle grades students. The items were presented in form of block-based programming code and administered in a week-long computational modeling intervention. A combination of classical test theory and item response theory approaches were used to validate the assessment. Based on results, it was found that only 24 items are considered valid and reliable items to measure CS conceptual understanding. The results also suggested that the assessment can be used as a pre and post-test to investigate students' learning gains. This work fills an important gap by providing a key resource for researchers and practitioners interested in assessing middle grades student CS conceptual understanding.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/RPRKRFML/Rachmatullah et al. - 2020 - Development and Validation of the Middle Grades Co.pdf}
}

@misc{RacketReferenceEvaluation,
  title = {The {{Racket Reference}} - 1.1~{{Evaluation Model}}},
  urldate = {2020-11-12},
  howpublished = {https://docs.racket-lang.org/reference/eval-model.html},
  annotation = {00010},
  file = {/Users/igormoreno/Zotero/storage/8AG8CCG6/eval-model.html}
}

@misc{RacketSchoolSemantics,
  title = {The {{Racket School}} of {{Semantics}} and {{Languages}} 2017},
  urldate = {2020-11-12},
  howpublished = {https://summer-school.racket-lang.org/2017/notes/index.html},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/BTQE8ZI2/index.html}
}

@inproceedings{raderDegreesComprehensionChildren1997,
  title = {Degrees of Comprehension: Children's Understanding of a Visual Programming Environment},
  shorttitle = {Degrees of Comprehension},
  booktitle = {Proceedings of the {{ACM SIGCHI Conference}} on {{Human}} Factors in Computing Systems},
  author = {Rader, Cyndi and Brand, Cathy and Lewis, Clayton},
  year = {1997},
  month = mar,
  pages = {351--358},
  publisher = {{ACM}},
  address = {{Atlanta Georgia USA}},
  doi = {10.1145/258549.258793},
  urldate = {2022-08-27},
  abstract = {A new generation of innovative, highly visual children's programming environments is under development. In this paper, we consider the instructional requirements for children learning to program in a visual environment. Based on our year-long experience using Apple Computer's KidSim/Cocoa prototype [2] and the results of a year-end assessment, we conclude that the children failed to grasp many aspects of the program operation. The children readily mastered drawing and animating characters in imaginary worlds, but struggled to achieve more complex behaviors. Lack of explicit instruction on program functionality hindered these children in their attempts to create more sophisticated science programs. We explore the prospects for more effective instruction and suggest some guidelines for designing visual programming environments.},
  isbn = {978-0-89791-802-2},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/TNK2R24D/Rader et al. - 1997 - Degrees of comprehension children's understanding.258793}
}

@article{radfordLayersGeneralityTypes2010,
  title = {Layers of {{Generality}} and {{Types}} of {{Generalization}} in {{Pattern Activities}}},
  author = {Radford, Luis},
  year = {2010},
  pages = {26},
  langid = {english},
  keywords = {LearnToAbstract,To Read},
  file = {/Users/igormoreno/Zotero/storage/HVHEURXT/Radford - 2010 - Layers of Generality and Types of Generalization in Pattern Activities.pdf}
}

@article{radosevicAnalysisNoviceCompilation,
  title = {An Analysis of Novice Compilation Behavior Using {{Verificator}}},
  author = {Radosevic, Danijel and Orehovacki, Tihomir},
  pages = {6},
  abstract = {Tutor is part of a C++ learning programming interface named Verificator. It explains to students the causes of syntactic and certain logical incorrectness in their programs. In order to be helpful, tutor messages need to be more intuitive and clear in relation to the existing compiler error messages and warnings. The research presented in this paper analyses the frequencies of different kinds of error-related messages in students' programs, as well as their mutual correlations. It has been shown that tutor messages are more strongly related to error messages than to standard compiler warnings.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/CJVYL5UH/Radosevic and Orehovacki - An analysis of novice compilation behavior using Verificator.pdf}
}

@inproceedings{ragonisDisciplinaryPedagogicalTeacherPreparation2008,
  title = {Disciplinary-{{Pedagogical Teacher Preparation}} for {{Pre-service Computer Science Teachers}}: {{Rational}} and {{Implementation}}},
  shorttitle = {Disciplinary-{{Pedagogical Teacher Preparation}} for {{Pre-service Computer Science Teachers}}},
  booktitle = {Informatics {{Education}} - {{Supporting Computational Thinking}}},
  author = {Ragonis, Noa and Hazzan, Orit},
  editor = {Mittermeir, Roland T. and Sys{\l}o, Maciej M.},
  year = {2008},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {253--264},
  publisher = {{Springer Berlin Heidelberg}},
  abstract = {This paper presents a case study of an academic course for pre-service computer science teachers that focus on teaching the discipline. The paper specifies and explains the rationale behind the development of the course and its explicit objectives. Achievement of the objectives is explained by describing the subject and content of the lessons, the types of activities integrated into the lessons and the tasks required of the students. All those engaged in teaching computer science: developers of curricula, lecturers in teacher training programs, and lecturers involved in the professional development of computer science teachers, can intend the course model for use.},
  isbn = {978-3-540-69924-8},
  langid = {english},
  keywords = {Computer science education,computer science teacher preparation curriculum,pre-service computer science teachers training,prospective computer science teachers},
  annotation = {00021},
  file = {/Users/igormoreno/Zotero/storage/XTGMW2ZC/Ragonis and Hazzan - 2008 - Disciplinary-Pedagogical Teacher Preparation for Pre-service Computer Science.pdf}
}

@article{ragonisLongtermInvestigationComprehension2005,
  ids = {ragonisLongtermInvestigationComprehension2005a},
  title = {A Long-Term Investigation of the Comprehension of {{OOP}} Concepts by Novices},
  author = {Ragonis, Noa and {Ben-Ari}, Mordechai},
  year = {2005},
  month = sep,
  journal = {Computer Science Education},
  volume = {15},
  number = {3},
  pages = {203--221},
  publisher = {{Taylor \& Francis}},
  issn = {0899-3408, 1744-5175},
  doi = {10.1080/08993400500224310},
  urldate = {2018-10-22},
  langid = {english},
  keywords = {Misconceptions Proposal},
  annotation = {00148},
  file = {/Users/igormoreno/Zotero/storage/RYWKJA6I/Ragonis and Ben-Ari - 2005 - A long-term investigation of the comprehension of OOP concepts by novices.pdf;/Users/igormoreno/Zotero/storage/VKSKNX8X/Ragonis e Ben-Ari - 2005 - A long-term investigation of the comprehension of .pdf;/Users/igormoreno/Zotero/storage/VR6LRXJW/08993400500224310.html}
}

@inproceedings{ragonisSurveyComputerScience2010,
  title = {A {{Survey}} of {{Computer Science Teacher Preparation Programs}} in {{Israel Tells Us}}: {{Computer Science Deserves}} a {{Designated High School Teacher Preparation}}!},
  shorttitle = {A {{Survey}} of {{Computer Science Teacher Preparation Programs}} in {{Israel Tells Us}}},
  booktitle = {Proceedings of the 41st {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Ragonis, Noa and Hazzan, Orit and {Gal-Ezer}, Judith},
  year = {2010},
  series = {{{SIGCSE}} '10},
  pages = {401--405},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1734263.1734402},
  urldate = {2019-05-16},
  abstract = {This paper focuses on the development and implementation of computer science (CS) teacher preparation programs, which are among the educational and pedagogical challenges faced by those involved in the current development of CS. It presents a survey that reflects the accumulative knowledge gained in Israel over the past twenty years with respect to CS teacher preparation. We explored nine institutes (six universities and three teacher education colleges) that offer CS teacher preparation programs. The survey indicates that while the programs vary in their implementation details, they are all motivated by the unique characteristics of CS, which play a central role in their design. We suggest that this observation further emphasizes the obvious: CS deserves designated CS teacher preparation programs. We therefore hope that this survey will contribute to the community of CS educators in general and to practitioners involved in developing CS teacher preparation programs in particular.},
  isbn = {978-1-4503-0006-3},
  keywords = {computer science education,computer science teacher preparation,methods of teaching computer science course,practicum in computer science},
  file = {/Users/igormoreno/Zotero/storage/RDLW7AG3/Ragonis et al - 2010 - A Survey of Computer Science Teacher Preparation Programs in Israel Tells Us.pdf}
}

@inproceedings{ragonisTutoringModelPromoting2008,
  title = {Tutoring {{Model}} for {{Promoting Teaching Skills}} of {{Computer Science Prospective Teachers}}},
  booktitle = {Proceedings of the 13th {{Annual Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Ragonis, Noa and Hazzan, Orit},
  year = {2008},
  series = {{{ITiCSE}} '08},
  pages = {276--280},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1384271.1384345},
  urldate = {2019-05-16},
  abstract = {One of the greatest challenges Computer Science (CS) teachers face is that of guiding their pupils through problem-solving processes, i.e., the process of constructing a solution for a given problem as an algorithm or a computer program. This paper suggests a tutoring model, to be implemented by prospective CS teachers, that aims at training them to accomplish this challenge. The model is based on one-on-one tutoring sessions, in which the prospective teacher meets a novice undergraduate student taking an introductory CS course and guides him or her through problem-solving processes. The tutoring activity provides the prospective CS teachers with an opportunity to experience teaching situations, especially learners' difficulties with respect to problem-solving processes, and consequently, to improve their teaching skills. The tutoring model was integrated into the Methods of Teaching Computer Science course and was accompanied by a qualitative research. The main research findings indicate that the prospective CS teachers: (a) change their perspective with respect to teaching processes; (b) focus in their teaching on learners' difficulties; (c) increase their awareness to problem-solving processes and to the need to adapt different teaching approaches for different learners; (d) become reflective practitioners; and (e) increase their confidence with respect to teaching processes.},
  isbn = {978-1-60558-078-4},
  keywords = {computer science education,computer science teacher preparation.,problem solving,prospective computer science teachers,training,tutoring in computer science},
  file = {/Users/igormoreno/Zotero/storage/74SQ64CS/Ragonis and Hazzan - 2008 - Tutoring Model for Promoting Teaching Skills of Computer Science Prospective.pdf}
}

@incollection{rahimiIdentifyingStudentsMisconceptions2017,
  title = {Identifying {{Students}}' {{Misconceptions}} on {{Basic Algorithmic Concepts Through Flowchart Analysis}}},
  booktitle = {Informatics in {{Schools}}: {{Focus}} on {{Learning Programming}}},
  author = {Rahimi, Ebrahim and Barendsen, Erik and Henze, Ineke},
  editor = {Dagien{\.e}, Valentina and Hellas, Arto},
  year = {2017},
  volume = {10696},
  pages = {155--168},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-71483-7_13},
  urldate = {2020-06-22},
  abstract = {In this paper, a flowchart-based approach to identifying secondary school students' misconceptions (in a broad sense) on basic algorithm concepts is introduced. This approach uses student-generated flowcharts as the units of analysis and examines them against plan composition and construct-based programming problems to identify students' misconceptions. In this study, 102 flowcharts, generated by 50 students in two informatics classes in the Netherlands, were examined and various sorts of misconceptions were identified. The results suggest that, given their abstract and language-independent nature, flowcharts can be considered as an effective tool for revealing students' difficulties in understanding algorithmic concepts. Our approach contrasts the more traditional use of program code to investigate students' misconceptions. We found several misconceptions mentioned in the literature, together with two misconceptions which appear not to have been described before. Our research contributes to the usage of flowcharts as a formative assessment tool, directing informatics teachers' instruction toward resolving these misconceptions.},
  isbn = {978-3-319-71482-0 978-3-319-71483-7},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/ZX8XQ6Q3/Rahimi et al - 2017 - Identifying Students’ Misconceptions on Basic Algorithmic Concepts Through.pdf}
}

@article{rajagopalanInferenceDesignKuba2006,
  title = {Inference and {{Design}} in {{Kuba}} and {{Zillij Art}} with {{Shape Grammars}}},
  author = {Rajagopalan, Ramgopal and Hortop, Eric and {El-Khechen}, Dania and Dudek, Cheryl Kolak and Szabo, Fred and Fevens, Thomas and Mudur, Sudhir},
  year = {2006},
  abstract = {We present a simple method for structural inference in African Kuba cloth, and Moorish zillij mosaics. Our work is based on Stiny and Gips' formulation of ``Shape Grammars''. It provides art scholars and geometers with a simple yet powerful medium to perform analysis of existing art and draw inspiration for new designs. The analysis involves studying an artwork and capturing its structure as simple shape grammar rules. We then show how interesting families of artworks could be generated using simple variations in their corresponding grammars.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/SFYVNCUD/Rajagopalan et al. - Inference and Design in Kuba and Zillij Art with S.pdf}
}

@article{rajanPrinciplesDesignDynamic,
  title = {Principles for the Design of Dynamic Tracing Environments for Novice Programmers},
  author = {Rajan, Tim},
  pages = {30},
  abstract = {This paper describes the principled design of a computational envirotament which depicts an animated story of the execution of programs for novice programmers. The design principles are aimed at solving the problems that novice programmers face when learning new programming languages, and are embodied in an Animated Program Tracer (APT) for Prolog. The goal of this research is to develop a more systematic, if not yet scientific, basis for the design of animated tracing tools.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/FV3GVFSX/Rajan - Principles for the design of dynamic tracing environments for novice programmers.pdf}
}

@inproceedings{rajImpactBilingualCS2019,
  title = {Impact of {{Bilingual CS Education}} on {{Student Learning}} and {{Engagement}} in a {{Data Structures Course}}},
  booktitle = {Proceedings of the 19th {{Koli Calling International Conference}} on {{Computing Education Research}}},
  author = {Raj, Adalbert Gerald Soosai and Zhang, Hanqi and Abhyankar, Viren and Mukerjee, Saswati and Zhang, Eda and Williams, Jim and Halverson, Richard and Patel, Jignesh M.},
  year = {2019},
  month = nov,
  pages = {1--10},
  publisher = {{ACM}},
  address = {{Koli Finland}},
  doi = {10.1145/3364510.3364518},
  urldate = {2021-06-14},
  isbn = {978-1-4503-7715-7},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/5FARDQTP/Raj et al. - 2019 - Impact of Bilingual CS Education on Student Learni.pdf}
}

@misc{ralphACMSIGSOFTEmpirical2020,
  title = {{{ACM SIGSOFT Empirical Standards}} v0.10},
  author = {Ralph, Paul},
  year = {2020},
  month = oct,
  abstract = {Empirical Standard: A brief public document that communicates expectations for a specific kind of study (e.g. a questionnaire survey). Why are so many manuscripts rejected by peer review? Constant rejection is neither intrinsic to science nor necessary for quality control. Rather, constant rejection is rooted in dissensus within scientific communities regarding how research should be conducted. The SIGSOFT Paper and Peer Review Quality Initiative seeks to increase paper quality, review quality, acceptance rates and consensus around research practices by generating and evolving empirical standards. Empirical standards are not vague criteria like ``soundness'' and ``presentation.'' Empirical standards contain lists of specific practices or attributes related to a particular methodology, e.g., ``uses random assignment'' (experiment) or ``presents clear chain of evidence from interviewee quotations to proposed concepts'' (qualitative survey). Empirical standards do not replace expert judgment with inflexible rubrics. For example, if researchers do not report effect sizes with confidence intervals because they took a Bayesian approach and report posterior probabilities instead, they just say so. Furthermore, empirical standards focus on the methodological substance of a study; they do not micromanage style. Empirical standards allow crucial decisions about what is and is not acceptable scientific practice to be made by a community, collectively, rather than by a reviewer, individually. For example, we, as a community should decide whether a single in-depth case study is sufficient for a full-length technical article. This decision should not be made by individual reviewers, case-by-case. The best way to understand what we mean by an empirical standard is to review the draft standards themselves (next), perhaps beginning with a standard for a familiar methodology. Note that we try to avoid duplication, so, for example, the Case Study Standard does not say ``states a clear research question'' because that is already in the General Standard. After the standards, we include several supplements for cross-cutting concerns such information visualization and sampling. We then explain how they might be used, discuss their benefits and relate they were generated.},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/7ZTSAMEU/Ralph - Empirical Standards v0.10.pdf}
}

@article{ramadhanImprovingEngineeringModel1997,
  title = {Improving the Engineering of Model Tracing Based Intelligent Program Diagnosis},
  author = {Ramadhan, H.A.},
  year = {1997},
  journal = {IEE Proceedings - Software Engineering},
  volume = {144},
  number = {3},
  pages = {149},
  issn = {13645080},
  doi = {10.1049/ip-sen:19971234},
  urldate = {2020-06-22},
  abstract = {The model tracing based approach to intelligent program diagnosis and tutoring emphasises the fact that the student's design decisions are traced as the student develops the program. A system based on this model monitors the user's actions as helshe moves along the solution path, automatically analyses partial solutions for semantic errors and misconceptions, and offers guidance whenever helshe deviates from the correct solution path. In this way, the system always checks to see if the student is following the design path of an ideal model. Buggy paths are pruned as soon as they are discovered. Through this approach to automatic diagnosis and tutoring, a model-tracing system can, first, diagnose very specific errors and misconceptions and provide clear advice and explanations within a proper and immediate context; secondly, explicitly guide the user in the process of organising different programming concepts and statements, and, thirdly, simplify the engineering of automatic diagnosis by preventing multiple bugs and errors. However, this approach is very directive and interventionist. The user is highly constrained in the solutions that can be developed, as helshe must conform to the task decomposition and coding sequence enforced by model-tracing systems. To bypass these pitfalls associated with the traditional model-tracing approach, solutions and guidelines are suggested for improving the engineering of model tracing based diagnosis.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/GJFPLQ5P/Ramadhan - 1997 - Improving the engineering of model tracing based intelligent program diagnosis.pdf}
}

@article{ramadhanIncorporatingSoftwareVisualization,
  title = {Incorporating {{Software Visualization}} in the {{Design}} of {{Intelligent Diagnosis Systems}} for {{User Programming}}},
  author = {Ramadhan, Haider A and Deek, Fadi and Shihab, Khalil},
  pages = {24},
  abstract = {Program diagnosis systems were developed to help users solve programming problems. By providing guidence on errors and misconceptions, these systems can help the users in writing programs and understanding their dynamic behavior. Features of software visualization which aim at providing visual and concrete depictions to the abstractions and operations of programs have also shown to be making programs more understandable. The main theme of this paper is to asses the usefulness of incorporating features of software visualization into the design of program diagnosis systems intended for novices. We report an empirical evaluation to assess the effectiveness of supporting visualization features during problem solving. The system used in the evaluation integrates visualzation and immediacy features and supports a model-tracing based approach to program diagnosis. Unlike other similar systems, our prototype system supports a more flexible style of interaction by increasing the grain size of diagnosis to a complete programming statement. The evaluation reported here seems to suggest that when supported with visualization features, systems for program diagnosis tend to be more effective in helping the users during problem solving.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/8NWUWQ3R/Ramadhan et al - Incorporating Software Visualization in the Design of Intelligent Diagnosis.pdf}
}

@inproceedings{ramadhanIntelligentDiscoveryProgramming1992,
  title = {An {{Intelligent Discovery Programming System}}},
  author = {Ramadhan, Haider},
  year = {1992},
  pages = {11},
  publisher = {{ACM}},
  abstract = {This paper introduces and describes an intelligent discovery programming system called DISCOVER. The system synthesizes features of Human Computer Interface (HCI) with features of an Intelligent Tutoring System (ITS). In terms of HCI, the system is capable of providing novices with an open-ended, exploratory, and free discovery programming environment (microworld) that enablea them to explore, observe and discover the dynamic behavior of both individual element ary programming concepts and whole programs as well as of the underlying notional machine, and thus build the underlying conceptual knowledge associated with these concepts and a mental model of program execution and machine behavior. In terlns of an ITS, the system is capable of automatically analyzing and debugging novices' partial solutions f'or semantic errors during a guided discovery programming phase and provides them with intelligent feedback that guides them in the problem solving process.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/AQDCCJGU/Ramadhan - 1992 - An Intelligent Discovery Programming System.pdf}
}

@inproceedings{ramadhanIntelligentVsUnintelligent1992,
  title = {Intelligent vs. Unintelligent Programming Systems for Novices},
  booktitle = {[1992] {{Proceedings}}. {{The Sixteenth Annual International Computer Software}} and {{Applications Conference}}},
  author = {Ramadhan, H.},
  year = {1992},
  pages = {375--380},
  publisher = {{IEEE Comput. Soc. Press}},
  address = {{Chicago, IL, USA}},
  doi = {10.1109/CMPSAC.1992.217576},
  urldate = {2020-06-22},
  isbn = {978-0-8186-3000-2},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/SF9L86A4/Ramadhan - 1992 - Intelligent vs. unintelligent programming systems .pdf}
}

@article{ramadhanProgrammingDiscoveryProgramming2001,
  title = {Programming by Discovery: {{Programming}} by Discovery},
  shorttitle = {Programming by Discovery},
  author = {Ramadhan, H. A.},
  year = {2001},
  month = dec,
  journal = {Journal of Computer Assisted Learning},
  volume = {16},
  number = {1},
  pages = {83--93},
  issn = {02664909, 13652729},
  doi = {10.1046/j.1365-2729.2000.00118.x},
  urldate = {2020-06-22},
  abstract = {The concept of Programming by Discovery refers to the process of designing programming environments and systems which use various visualisation, programming and interaction technologies in an effective way to help users, especially beginner programmers, in writing computer programs, understanding their dynamic behaviour, detecting any misconceptions and bugs associated with them, and seeing the effect of these programs on the underlying machine. A system for programming by discovery encourages a user to become an active learner by allowing him to form his own hypotheses, explore his own questions, and draw his own conclusions. This paper reports on the design and evaluation of a system for programming by discovery which embodies the principles outlined above. To assess the usefulness of the design framework presented in this paper, a pilot empirical evaluation was conducted. The results provided a number of interesting insights into the implication of incorporating visualisation and immediacy features along with graphical notional machine and algorithm-like language into the design of programming systems.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/HLLRXW6D/Ramadhan - 2001 - Programming by discovery Programming by discovery.pdf}
}

@inproceedings{ramseyTeachingHowDesign2014,
  title = {On {{Teaching}} *{{How}} to {{Design Programs}}*: {{Observations}} from a {{Newcomer}}},
  shorttitle = {On {{Teaching}} *{{How}} to {{Design Programs}}*},
  booktitle = {Proceedings of the 19th {{ACM SIGPLAN International Conference}} on {{Functional Programming}}},
  author = {Ramsey, Norman},
  year = {2014},
  series = {{{ICFP}} '14},
  pages = {153--166},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2628136.2628137},
  urldate = {2019-07-13},
  abstract = {This paper presents a personal, qualitative case study of a first course using How to Design Programs and its functional teaching languages. The paper reconceptualizes the book's six-step design process as an eight-step design process ending in a new "review and refactor" step. It recommends specific approaches to students' difficulties with function descriptions, function templates, data examples, and other parts of the design process. It~connects the process to interactive "world programs." It recounts significant, informative missteps in course design and delivery. Finally, it identifies some unsolved teaching problems and some potential solutions.},
  isbn = {978-1-4503-2873-9},
  keywords = {how to design programs,introductory programming course,program by design,racket,reflective practice},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/ERGQHJQK/Ramsey - 2014 - On Teaching How to Design Programs.pdf}
}

@article{randolphComparisonMethodologicalQuality2007,
  title = {A Comparison of the Methodological Quality of Articles in Computer Science Education Journals and Conference Proceedings},
  author = {Randolph, Justus J. and Julnes, George and Bednarik, Roman and Sutinen, Erkki},
  year = {2007},
  month = dec,
  journal = {Computer Science Education},
  volume = {17},
  number = {4},
  pages = {263--274},
  issn = {0899-3408, 1744-5175},
  doi = {10.1080/08993400701483517},
  urldate = {2021-06-21},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/MNHB4XS3/Randolph et al. - 2007 - A comparison of the methodological quality of arti.pdf}
}

@book{rapaportPhilosophyComputerScience2020,
  title = {Philosophy of {{Computer Science}}},
  author = {Rapaport, William J},
  year = {2020},
  month = jan,
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/RCG435ET/Rapaport - Philosophy of Computer Science.pdf}
}

@article{rappDesigningInteractiveSystems2017,
  title = {Designing Interactive Systems through a Game Lens: {{An}} Ethnographic Approach},
  shorttitle = {Designing Interactive Systems through a Game Lens},
  author = {Rapp, Amon},
  year = {2017},
  month = jun,
  journal = {Computers in Human Behavior},
  volume = {71},
  pages = {455--468},
  issn = {07475632},
  doi = {10.1016/j.chb.2015.02.048},
  urldate = {2023-06-27},
  abstract = {This research has the aim to find new meaningful elements, in the video game world, that could inspire the design of novel gamified systems. Starting from the players' point of view, I looked at the field of the Massively Multi Player Online Role-Playing Games as a source of inspiration, conducting an ethnographic study in World of Warcraft. Thus, drawing on the findings gathered in my empirical work, I identified 9 recommendations to suggest new directions for the gamification design of interactive systems. Some of these recommendations are devised to suit the applications that pivot on user social participation. Others are aimed at imagining new forms of online communities. Others address those interactive systems that aim at changing user behaviors. These recommendations, by suggesting to support the development of intrinsic motivations, proposing new and diversified game elements and recommending to look at systemic design strategies, aim at addressing the limits of the current gamification techniques. At the high grade of abstraction they are left, they are meant to be applied to different fields.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/4LCFEQB8/Rapp - 2017 - Designing interactive systems through a game lens.pdf}
}

@incollection{rappMentalModelsTheoretical2005,
  title = {Mental {{Models}}: {{Theoretical Issues}} for {{Visualizations}} in {{Science Education}}},
  shorttitle = {Mental {{Models}}},
  booktitle = {Visualization in {{Science Education}}},
  author = {Rapp, David N},
  editor = {Gilbert, John K.},
  year = {2005},
  pages = {43--60},
  publisher = {{Springer Netherlands}},
  address = {{Dordrecht}},
  doi = {10.1007/1-4020-3613-2_4},
  urldate = {2018-12-28},
  abstract = {Mental models have been outlined as internal representations of concepts and ideas. They are memory structures that can be used to extrapolate beyond a surface understanding of presented information, to build deeper comprehension of a conceptual domain. Thus, these constructs align with the explicit objectives of science education; instructors want students to understand the underlying principles of scientific theories, to reason logically about those principles, and to be able to apply them in novel settings with new problem sets. In this chapter, I review cognitive and educational psychological research on mental models. Specific attention is given to factors that may facilitate students' construction of mental models for scientific information. In addition, these factors are related directly to the use (and potential) of visualizations as educational methodologies. The chapter concludes with several challenges for future work on visualizations in science education.},
  isbn = {978-1-4020-3612-5 978-1-4020-3613-2},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/862CSHA5/Rapp - 2005 - Mental Models.pdf}
}

@article{rappStrengtheningGamificationStudies2019,
  title = {Strengthening Gamification Studies: {{Current}} Trends and Future Opportunities of Gamification Research},
  shorttitle = {Strengthening Gamification Studies},
  author = {Rapp, Amon and Hopfgartner, Frank and Hamari, Juho and Linehan, Conor and Cena, Federica},
  year = {2019},
  month = jul,
  journal = {International Journal of Human-Computer Studies},
  volume = {127},
  pages = {1--6},
  issn = {10715819},
  doi = {10.1016/j.ijhcs.2018.11.007},
  urldate = {2023-06-27},
  abstract = {Gamification is now a well-established technique in Human-Computer Interaction. However, research on gamification still faces a variety of empirical and theoretical challenges. Firstly, studies of gamified systems typically focus narrowly on understanding individuals. short-term interactions with the system, ignoring more difficult to measure outcomes. Secondly, academic research on gamification has been slow to improve the techniques through which gamified applications are designed. Third, current gamification research lacks a critical lens capable of exploring unintended consequences of designs. The 14 articles published in this special issue face these challenges with great methodological rigor. We summarize them by identifying three main themes: the determination to improve the quality and usefulness of theory in the field of gamification, the improvements in design practice, and the adoption of a critical gaze to uncover side-effects of gamification designs. We conclude by providing an overview of the questions that we feel must be addressed by future work in gamification. Gamification studies would benefit from a wider use of theories to account for the complexity of human behavior, a more thorough exploration of the many opportunities coming from the world of games, and an ethical reflection on the use of game design elements in serious domains.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/KPA5QT5N/Rapp et al. - 2019 - Strengthening gamification studies Current trends.pdf}
}

@article{raschInteractiveNoninteractivePictures2009,
  title = {Interactive and Non-Interactive Pictures in Multimedia Learning Environments: {{Effects}} on Learning Outcomes and Learning Efficiency},
  shorttitle = {Interactive and Non-Interactive Pictures in Multimedia Learning Environments},
  author = {Rasch, Thorsten and Schnotz, Wolfgang},
  year = {2009},
  month = oct,
  journal = {Learning and Instruction},
  series = {Cognitive Load in Interactive Knowledge Construction},
  volume = {19},
  number = {5},
  pages = {411--422},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2009.02.008},
  urldate = {2018-11-06},
  abstract = {New technologies enable flexible combinations of text and interactive or non-interactive pictures. The aim of the present study was to investigate (a) whether adding pictures to texts is generally beneficial for learning or whether it can also have detrimental effects, (b) how interactivity of pictures affects learning, (c) whether the visualization format of pictures affects the structure of the learner's mental model, and (d) whether the visualization format modifies the effects of interactivity. One hundred university students were randomly assigned to five groups. In four groups, a text about the different daytimes and days on the earth was combined with interactive or non-interactive pictures of different visualization formats. In the fifth group, the text was presented without pictures. According to the results, adding pictures to text was neither beneficial nor harmful for learning. In terms of learning efficiency, however, learning from text only was more successful than learning from text and pictures. Interactivity was beneficial for one learning task, but not for the other task. The visualization format affected participants' interaction with pictures, but not the learning outcomes; however this effect was not influenced by interactivity. Implications for multimedia design and for further research are pointed out.},
  keywords = {Animation,Interactivity,Learning efficiency,Learning from pictures,Learning from text,Multimedia learning},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/M46VUGFF/Rasch and Schnotz - 2009 - Interactive and non-interactive pictures in multimedia learning environments.pdf;/Users/igormoreno/Zotero/storage/JP4ITXHU/S0959475209000115.html}
}

@article{ratanLevelingStereotypeThreat2015,
  title = {Leveling up on Stereotype Threat: {{The}} Role of Avatar Customization and Avatar Embodiment},
  shorttitle = {Leveling up on Stereotype Threat},
  author = {Ratan, Rabindra and Sah, Young June},
  year = {2015},
  month = sep,
  journal = {Computers in Human Behavior},
  volume = {50},
  pages = {367--374},
  issn = {07475632},
  doi = {10.1016/j.chb.2015.04.010},
  urldate = {2023-06-27},
  abstract = {Digital games often benefit players, whether in learning, health, or simply entertainment, but some game design elements (e.g., avatars) potentially disadvantage certain social groups (e.g., women). To counteract such potential effects, we explore the moderating role of avatar self-relevance in avatar-induced stereotype threat effects. Specifically, we examine how avatar customization (i.e., designing an avatar) and avatar-body connection (i.e., the perception that the avatar is incorporated into body schema) interact with avatar gender to influence user's post-game behavior in ways that conform to gendered stereotypes. In an experimental study (N = 64, all female), participants completed a competitive math task after playing a digital sword-fighting game. For participants who customized an avatar and experienced low avatar embodiment, those who used male avatar performed better at the math task than those who used a female avatar. These findings extend our understanding of avatar use effects, especially as they relate to avatar self-relevance, avatar customization, avatar embodiment, and stereotype threat, thereby providing insights into the ways that digital games can be designed to maximize positive outcomes for players in a variety of meaningful contexts.},
  langid = {english},
  keywords = {READ},
  file = {/Users/igormoreno/Zotero/storage/V8IDMKMT/Ratan and Sah - 2015 - Leveling up on stereotype threat The role of avat.pdf}
}

@article{rauFrameworkEducationalTechnologies2017,
  title = {A {{Framework}} for {{Educational Technologies}} That {{Support Representational Competencies}}},
  author = {Rau, M. A.},
  year = {July-Sept. 2017},
  journal = {IEEE Transactions on Learning Technologies},
  volume = {10},
  number = {3},
  pages = {290--305},
  issn = {1939-1382},
  doi = {10.1109/TLT.2016.2623303},
  urldate = {2018-10-06},
  abstract = {Visual representations are ubiquitous in STEM disciplines. Yet, students' difficulties in learning with visual representations are well documented. Therefore, to succeed in STEM, students need representational competencies\textemdash the ability to use visual representations for problem solving and learning. Educational technologies that support students' acquisition of representational competencies can significantly enhance their success in STEM disciplines. Current design frameworks for educational technologies do not offer sufficient guidance to develop supports for representational competencies. This paper presents a new design framework that describes an iterative, step-by-step approach for the design of educational technologies that support representational competencies (SUREC) in a way that aligns with the demands specific to the target discipline. The paper illustrates how this framework was used to inform the design of an intelligent tutoring system for undergraduate chemistry. An evaluation study suggests that the SUREC framework yielded an effective educational technology that enhances students' learning of content knowledge.},
  keywords = {Chemistry,Complexity theory,Context,Educational technology,Iterative methods,STEM,Visualization},
  file = {/Users/igormoreno/Zotero/storage/M9TNL9WY/Rau - 2017 - A Framework for Educational Technologies that Support Representational.pdf;/Users/igormoreno/Zotero/storage/HZ2B9LIA/07725936-abs.html}
}

@misc{ravanoPianoDiStudio2018,
  title = {{Piano di studio Informatica nei Licei}},
  author = {Ravano, Giambattista},
  year = {2018},
  month = nov,
  langid = {italian},
  file = {/Users/igormoreno/Zotero/storage/XAD7WI6F/Ravano - 2018 - Piano di studio Informatica nei Licei.pdf}
}

@book{reaDesigningConductingSurvey2005,
  title = {Designing and {{Conducting Survey Research}}: {{A Comprehensive Guide}}},
  shorttitle = {Designing and {{Conducting Survey Research}}},
  author = {Rea, Louis M. and Parker, Richard A.},
  year = {2005},
  month = sep,
  edition = {3 edition},
  publisher = {{Jossey-Bass}},
  address = {{San Francisco}},
  abstract = {Designing \& Conducting Survey Research, third edition  Since it was first published in 1992, Designing and Conducting Survey Research has become the standard reference in the field for public and nonprofit managers who are responsible for conducting effective and meaningful survey research. This updated and expanded third edition builds on the first two volumes and contains additional statistical techniques, new reporting methods that meet the growing demands for accountability, and more user-friendly analysis methods.  Designing and Conducting Survey Research is a complete, practical guide to conducting sample survey research. In a comprehensive manner, it explains all major components of survey research, including construction of the instrument, administration of the process, and analysis and reporting of results. Clear, concise, and accessible, this guide explains how to conduct a survey research project from start to finish. Further, it shows how this research method can be applied in such diverse fields as urban affairs, social science, and public administration. Designing and Conducting Survey Research is an excellent tool that will help both professionals and students understand and explain the validity of sample survey research.  Praise for the Previous Edition of Designing \& Conducting Survey Research  "Clear, thorough, well-written, and eminently practical. Takes you step by step through all you need to know to conduct a survey or evaluate one and provides a basic understanding of the theoretical basis of sampling. The clarity of the book makes it a model for effective instruction and one that opens the road for those who must master the subject themselves." -Norton Long, professor emeritus of political science, University of Missouri, St. Louis  "A basic tool for conducting survey research projects that any researcher can understand and use. Freed of confusing statistical theory yet comprehensive in approach, with step by step details." -John B. Sauvajot, public management consultant and former deputy chief administrative officer, San Diego County  "Demystifies the arcane world of pollsters and survey research. Anyone who conducts surveys, hires survey consultants, reads reports, or makes policy based on survey data will benefit from this book." -Robert J. Waste, Survey Research Center, California State University, Chico},
  isbn = {978-0-7879-7546-3},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/8YSGC52N/Rea_Parker_2005_TOC.pdf;/Users/igormoreno/Zotero/storage/GTDAYDI7/Rea_Parker_2005_Chapter-1.pdf;/Users/igormoreno/Zotero/storage/JYSIPRMA/Rea_Parker_2005_Chapters-6-7.pdf}
}

@misc{RedexModelsProgramming,
  title = {From {{Redex Models}} to {{Programming Languages}}},
  urldate = {2020-11-12},
  howpublished = {https://docs.racket-lang.org/redex-to-lang@pcf/index.html\#\%28part.\_doc-bibliography\%29},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/NMK9ZWWT/index.html}
}

@misc{RedexPracticalSemantics,
  title = {Redex: {{Practical Semantics Engineering}}},
  urldate = {2020-11-12},
  howpublished = {https://docs.racket-lang.org/redex/index.html},
  annotation = {00004},
  file = {/Users/igormoreno/Zotero/storage/HP4SI2TV/index.html}
}

@article{reedRoleAnalogyTransfer1974,
  title = {The Role of Analogy in Transfer between Similar Problem States},
  author = {Reed, Stephen K. and Ernst, George W. and Banerji, Ranan},
  year = {1974},
  month = jul,
  journal = {Cognitive Psychology},
  volume = {6},
  number = {3},
  pages = {436--450},
  issn = {0010-0285},
  doi = {10.1016/0010-0285(74)90020-6},
  urldate = {2018-12-02},
  abstract = {The study investigated the effect of transfer between two problems having similar (homomorphic) problem states. The results of three experiments revealed that although transfer occurred between repetition of the same problems, transfer occurred between the Jealous Husbands problem and the Missionary\textemdash Cannibal problem only when (a) Ss were told the relationship between the two problems and (b) the Jealous Husbands problem was given first. The results are related to the formal structure of the problem space and to alternative explanations of the use of analogy in problem solving. These include memory for individual moves, memory for general strategies, and practice in applying operators.},
  file = {/Users/igormoreno/Zotero/storage/3XR9QETP/Reed et al - 1974 - The role of analogy in transfer between similar problem states.pdf;/Users/igormoreno/Zotero/storage/FMSMZ3H9/0010028574900206.html}
}

@inproceedings{reestmanNativeLanguageEffect2019,
  title = {Native {{Language}}'s {{Effect}} on {{Java Compiler Errors}}},
  booktitle = {Proceedings of the 2019 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Reestman, Kyle and Dorn, Brian},
  year = {2019},
  month = jul,
  pages = {249--257},
  publisher = {{ACM}},
  address = {{Toronto ON Canada}},
  doi = {10.1145/3291279.3339423},
  urldate = {2021-01-27},
  abstract = {Novice student compilation behaviors are well documented by prior research, but those findings are derived from instructional contexts that are largely in English-dominant locales. Speakers of languages other than English face unique challenges while learning to program like partial localization of applications and programming language syntax based on English-only keywords. This study examines compiler errors of novice programming students from different native language backgrounds to explore potential differences in their error distributions relative to those in English dominant contexts. For example, it is plausible that students from non-English language backgrounds would experience more ``unknown identifier'' types of errors while programming with English keywords and API methods. Using data from the BlueJ Blackbox database, we analyzed error distributions for users based on country and language group characteristics. Statistical analysis showed a statistically significant difference in error distributions between native language groups; however, effect sizes were very weak indicating that the differences have little practical significance in terms of guiding either language or instructional design. However, these results may support drawing broader inferences from earlier Java compilation behavior studies to global contexts.},
  isbn = {978-1-4503-6185-9},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/MHR8M4AD/Reestman and Dorn - 2019 - Native Language's Effect on Java Compiler Errors.pdf}
}

@article{reimannMultimediaLearningModality2003,
  title = {Multimedia Learning: Beyond Modality},
  shorttitle = {Multimedia Learning},
  author = {Reimann, P},
  year = {2003},
  month = apr,
  journal = {Learning and Instruction},
  series = {External and {{Internal Representations}} in {{Multimedia Learning}}},
  volume = {13},
  number = {2},
  pages = {245--252},
  issn = {0959-4752},
  doi = {10.1016/S0959-4752(02)00024-5},
  urldate = {2018-11-06},
  file = {/Users/igormoreno/Zotero/storage/R4GU7YC3/Reimann - 2003 - Multimedia learning beyond modality.pdf;/Users/igormoreno/Zotero/storage/GDFCMKC9/S0959475202000245.html}
}

@inproceedings{reimersStudentFocusedDashboards2019,
  title = {Student {{Focused Dashboards}} - {{An Analysis}} of {{Current Student Dashboards}} and {{What Students Really Want}}},
  booktitle = {7th {{International Conference}} on {{Computer Supported Education}}},
  author = {Reimers, Gabriel and Neovesky, Anna},
  year = {2019},
  month = sep,
  pages = {399--404},
  urldate = {2019-09-25},
  abstract = {Digital Library},
  isbn = {978-989-758-107-6},
  keywords = {To Read},
  file = {/Users/igormoreno/Zotero/storage/UJW3H28M/Reimers and Neovesky - 2019 - Student Focused Dashboards - An Analysis of Current Student Dashboards and What.pdf;/Users/igormoreno/Zotero/storage/NPS3RUS6/Link.html}
}

@article{reissleinEncounteringExpertiseReversal2006,
  title = {Encountering the Expertise Reversal Effect with a Computer-Based Environment on Electrical Circuit Analysis},
  author = {Reisslein, Jana and Atkinson, Robert K. and Seeling, Patrick and Reisslein, Martin},
  year = {2006},
  month = apr,
  journal = {Learning and Instruction},
  series = {Recent {{Worked Examples Research}}: {{Managing Cognitive Load}} to {{Foster Learning}} and {{Transfer}}},
  volume = {16},
  number = {2},
  pages = {92--103},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2006.02.008},
  urldate = {2018-11-06},
  abstract = {This study examined the effectiveness of a computer-based environment employing three example-based instructional procedures (example\textendash problem, problem\textendash example, and fading) to teach series and parallel electrical circuit analysis to learners classified by two levels of prior knowledge (low and high). Although no differences between the instructional procedures were observed, low prior knowledge learners benefited most from traditional example\textendash problem pairs while their high prior knowledge counterparts benefited most from problem\textendash example pairs. Overall, this study provides empirical support for the expertise reversal effect, which suggests that the effectiveness of certain instruction procedures in example-based learning environments depends upon the learners' level of prior knowledge.},
  keywords = {Engineering education,Expertise reversal effect,Fading,Worked-out examples},
  file = {/Users/igormoreno/Zotero/storage/KGJRYZXP/Reisslein et al - 2006 - Encountering the expertise reversal effect with a computer-based environment on.pdf;/Users/igormoreno/Zotero/storage/GBKXN6WW/S0959475206000132.html}
}

@article{renklLearningWorkedOutExamples1998,
  title = {Learning from {{Worked-Out Examples}}: {{The Effects}} of {{Example Variability}} and {{Elicited Self-Explanations}}},
  shorttitle = {Learning from {{Worked-Out Examples}}},
  author = {Renkl, Alexander and Stark, Robin and Gruber, Hans and Mandl, Heinz},
  year = {1998},
  month = jan,
  journal = {Contemporary Educational Psychology},
  volume = {23},
  number = {1},
  pages = {90--108},
  issn = {0361-476X},
  doi = {10.1006/ceps.1997.0959},
  urldate = {2018-11-06},
  abstract = {It was investigated to what extent example variability and the elicitation of sophisticated self-explanations foster the acquisition of transferable knowledge by learning from worked-out examples. In addition, it was asked whether the effects of these factors are moderated by the learners' levels of prior topic knowledge. To this end, we had 56 apprentices from a bank learn calculation of compound interest and real interest. They were randomly assigned to the four conditions of a 2 \texttimes{} 2-factorial design (factor 1: uniform vs. multiple examples; factor 2: spontaneous vs. elicited self-explanations). The learning results were measured by a post-test comprising near-transfer problems and far-transfer problems. It was found that the acquisition of transferable knowledge can be supported by eliciting self-explanations. In the case of near transfer, especially learners with low levels of prior topic knowledge profited from the elicitation procedure. On the whole, the findings underline the ``causal'' relevance of the quality of self-explanations for knowledge acquisition by learning from worked-out examples. The assumption that multiple examples foster transfer performance, at least when sophisticated self-explanations are elicited, was not supported.},
  file = {/Users/igormoreno/Zotero/storage/IDR8S6QL/Renkl et al - 1998 - Learning from Worked-Out Examples.pdf;/Users/igormoreno/Zotero/storage/MNI5RL6H/S0361476X97909590.html}
}

@article{renklStudyingExamplesSolving2000,
  title = {From {{Studying Examples}} to {{Solving Problem}}: {{Fading Worked-Out Solution Steps Helps Learning}}},
  shorttitle = {From {{Studying Examples}} to {{Solving Problem}}},
  author = {Renkl, Alexander and Atkinson, Robert K. and Maier, Uwe H.},
  year = {2000},
  journal = {Proceedings of the Annual Meeting of the Cognitive Science Society},
  volume = {22},
  number = {22},
  issn = {1069-7977},
  urldate = {2018-11-30},
  abstract = {Author(s): Renkl, Alexander; Atkinson, Robert K.; Maier, Uwe H.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/G5IB762J/Renkl et al - 2000 - From Studying Examples to Solving Problem.pdf;/Users/igormoreno/Zotero/storage/JIQZ8ERV/81b9j9hs.html}
}

@article{renumolIdentificationCognitiveProcesses2010,
  title = {Identification of {{Cognitive Processes}} of {{Effective}} and {{Ineffective Students During Computer Programming}}},
  author = {Renumol, V.G. and Janakiram, Dharanipragada and Jayaprakash, S.},
  year = {2010},
  month = aug,
  journal = {ACM Transactions on Computing Education},
  volume = {10},
  number = {3},
  pages = {1--21},
  issn = {1946-6226, 1946-6226},
  doi = {10.1145/1821996.1821998},
  urldate = {2020-11-23},
  langid = {english},
  annotation = {00042},
  file = {/Users/igormoreno/Zotero/storage/DDSDNYVV/Renumol et al. - 2010 - Identification of Cognitive Processes of Effective.pdf}
}

@inproceedings{renzellaSplashKitDevelopmentFramework2018,
  title = {{{SplashKit}}: {{A Development Framework}} for {{Motivating}} and {{Engaging Students}} in {{Introductory Programming}}},
  shorttitle = {{{SplashKit}}},
  booktitle = {2018 {{IEEE International Conference}} on {{Teaching}}, {{Assessment}}, and {{Learning}} for {{Engineering}} ({{TALE}})},
  author = {Renzella, Jake and Cummaudo, Alex and Cain, Andrew and Grundy, John and Meyers, Jonathon},
  year = {2018},
  month = dec,
  pages = {40--47},
  publisher = {{IEEE}},
  address = {{Wollongong, NSW}},
  doi = {10.1109/TALE.2018.8615203},
  urldate = {2020-06-22},
  abstract = {Learning to program is known to be challenging for many students. Upon entry, students often have poor perceptions of their capabilities with some anxiety around the challenges they expect to face in learning to code. Lowering the barriers to entry will help ease students into programming and enable a broader range of student to continue programming. SplashKit is an educationally focused development framework designed to aid the teaching of programming by empowering students to create interesting and dynamic programs from their first programming tasks. This paper explores how SplashKit can be used in tertiary education to underpin a range of introductory programming approaches.},
  isbn = {978-1-5386-6522-0},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/MC7XUBDN/Renzella et al - 2018 - SplashKit.pdf}
}

@inproceedings{repenningComputationalThinkingTools2016,
  title = {Computational Thinking Tools},
  author = {Repenning, Alexander and Basawapatna, Ashok and Escherle, Nora},
  year = {2016},
  month = sep,
  pages = {218--222},
  doi = {10.1109/VLHCC.2016.7739688},
  abstract = {Computational Thinking is an essential skill for all students in the 21 st Century. A fundamental question is how can we create computer affordances to empower novice teachers and students, in a variety of STEM and art disciplines, to think computationally while avoiding difficult overhead emerging from traditional coding? Over the last 20 years we have iteratively developed tools that aim to support computational thinking. As these tools evolved a philosophy emerged to support Computational Thinking by joining human abilities with computer affordances. Chief among these findings is that supporting Computational Thinking is much more than making coding accessible. Computational Thinking Tools aim to minimize coding overhead by supporting users through three fundamental stages of the Computational Thinking development cycle: problem formulation, solution expression, and solution execution/evaluation.},
  file = {/Users/igormoreno/Zotero/storage/PWJYBYNG/Repenning et al - 2016 - Computational thinking tools.pdf}
}

@book{repettoDaiGiochiAgli2012,
  title = {{Dai giochi agli algoritmi. Un'introduzione non convenzionale all'informatica}},
  author = {Repetto, Lorenzo},
  year = {2012},
  publisher = {{Kangourou Italia}},
  isbn = {978-88-89249-29-1},
  langid = {italian}
}

@book{resnickEducationLearningThink1987,
  title = {Education and Learning to Think},
  author = {Resnick, Lauren B.},
  year = {1987},
  publisher = {{National Academy Press}},
  address = {{Washington, D.C}},
  collaborator = {National Research Council (U.S.)},
  isbn = {978-0-309-03785-3},
  langid = {english},
  lccn = {LB1590.3 .R47 1987},
  keywords = {Cognitive learning,Curriculum change,Study and teaching,Thought and thinking,United States},
  file = {/Users/igormoreno/Zotero/storage/376N2I38/Resnick - 1987 - Education and learning to think.pdf}
}

@article{resnickScratchProgrammingAll2009,
  title = {Scratch: Programming for All},
  shorttitle = {Scratch},
  author = {Resnick, Mitchel and Maloney, John and {Monroy-Hern{\'a}ndez}, Andr{\'e}s and Rusk, Natalie and Eastmond, Evelyn and Brennan, Karen and Millner, Amon and Rosenbaum, Eric and Silver, Jay and Silverman, Brian and Kafai, Yasmin},
  year = {2009},
  month = nov,
  journal = {Communications of the ACM},
  volume = {52},
  number = {11},
  pages = {60--67},
  issn = {0001-0782},
  doi = {10.1145/1592761.1592779},
  urldate = {2022-01-14},
  abstract = {"Digital fluency" should mean designing, creating, and remixing, not just browsing, chatting, and interacting.},
  file = {/Users/igormoreno/Zotero/storage/P2FSD85Z/Resnick et al - 2009 - Scratch.pdf;/Users/igormoreno/Zotero/storage/YL93ULB5/Resnick et al - 2009 - Scratch.pdf}
}

@misc{RespondingPeerReview,
  title = {Responding to Peer Review},
  urldate = {2020-06-06},
  howpublished = {http://matt.might.net/articles/peer-review-rebuttals/},
  annotation = {01241},
  file = {/Users/igormoreno/Zotero/storage/8EBAD82W/peer-review-rebuttals.html}
}

@misc{RevisedScheme,
  title = {Revised(5) {{Scheme}}},
  urldate = {2022-09-27},
  howpublished = {https://people.csail.mit.edu/jaffer/r5rs/index.html\#Top}
}

@article{revlisImportanceUniversalQuantifiers1971,
  title = {The Importance of Universal Quantifiers in a Hypothetical Reasoning Task},
  author = {Revlis, R. and Lipkin, S. G. and Hayes, J. R.},
  year = {1971},
  month = feb,
  journal = {Journal of Verbal Learning and Verbal Behavior},
  volume = {10},
  number = {1},
  pages = {86--91},
  issn = {0022-5371},
  doi = {10.1016/S0022-5371(71)80098-1},
  urldate = {2018-12-02},
  abstract = {Subjects were presented belief-contravening problems which required a forced choice between accepting either a general law (a universally quantified statement of the form All A's are B's) or a particular fact (This Y is a Z). The Ss consistently rejected the fact in favor of the generality. Laws with the affirmative quantifier (All) were accepted more often than those with the negative quantifier (No). Generalities expressing class-inclusion (is a) were accepted more often than those expressing property assignment (has a). Laws with familiar content were accepted more often than those with unfamiliar content. The contexts for the assertions (definitional, empirical, and unspecified) contributed to the acceptability of the generalities by providing Ss with an interpretation of the assertions.},
  file = {/Users/igormoreno/Zotero/storage/LB2Z479M/Revlis et al - 1971 - The importance of universal quantifiers in a hypothetical reasoning task.pdf;/Users/igormoreno/Zotero/storage/JEK8JMS4/S0022537171800981.html}
}

@article{revlisPrimacyGeneralitiesHypothetical1972,
  title = {The Primacy of Generalities in Hypothetical Reasoning},
  author = {Revlis, R. and Hayes, J. R.},
  year = {1972},
  month = apr,
  journal = {Cognitive Psychology},
  volume = {3},
  number = {2},
  pages = {268--290},
  issn = {0010-0285},
  doi = {10.1016/0010-0285(72)90008-4},
  urldate = {2018-12-02},
  abstract = {Subjects were given a noncontradictory set of propositions followed by a sentence which they had to accept as true. This sentence introduced an inconsistency which the Ss were required to resolve by assigning truth values to the statements. In previous work, the authors found that when forced to choose between the truth of a generality (All A's are B's) and that of a particular fact (This Y is a Z), subjects consistently rejected the fact in favor of the generality. Affirmative generalities were accepted more often than negative ones, and those expressing class-inclusion were accepted more often than those expressing property-assignment. The present experiments show that preference for generalities is independent of (a) the superficial form of the generality (i.e., the surface presence of a quantifier), (b) the polarity of the contrasted fact (affirmative or negative), and (c) the terms used to express the relations (is a and has a). The preference for reasoning with generalities is enhanced when they assert generally known facts which are not delimited in space or time. A theoretical treatment of the results employing the calculus of modal logic was explored.},
  file = {/Users/igormoreno/Zotero/storage/ZJ2TH4BI/Revlis and Hayes - 1972 - The primacy of generalities in hypothetical reasoning.pdf;/Users/igormoreno/Zotero/storage/Y4D7V2B6/0010028572900084.html}
}

@article{revlisTwoModelsSyllogistic1975,
  title = {Two Models of Syllogistic Reasoning: {{Feature}} Selection and Conversion},
  shorttitle = {Two Models of Syllogistic Reasoning},
  author = {Revlis, Russell},
  year = {1975},
  month = apr,
  journal = {Journal of Verbal Learning and Verbal Behavior},
  volume = {14},
  number = {2},
  pages = {180--195},
  issn = {0022-5371},
  doi = {10.1016/S0022-5371(75)80064-8},
  urldate = {2018-12-02},
  abstract = {The present paper offers two processing models of how reasoners solve categorical syllogisms. The models are based on traditional statements of the atmosphere effect and the conversion hypothesis. A test of the two models shows that previous studies of formal reasoning have unnecessarily restricted the scope of the hypotheses and have failed to compare them on the critical conditions and in their intended senses. Both models are reasonably accurate in predicting the overall distribution of errors. While the feature selection model is superior to the conversion model in predicting the decisions on a set of critical problems, the underlying assumption of the feature selection model is not supported by the data.},
  file = {/Users/igormoreno/Zotero/storage/CP7XZZ5K/Revlis - 1975 - Two models of syllogistic reasoning Feature selec.pdf;/Users/igormoreno/Zotero/storage/78748357/S0022537175800648.html}
}

@inproceedings{reynoldsTheoryTypeStructure1974,
  title = {Towards a {{Theory}} of {{Type Structure}}},
  booktitle = {Programming {{Symposium}}, {{Proceedings Colloque Sur La Programmation}}},
  author = {Reynolds, John C.},
  year = {1974},
  pages = {408--423},
  publisher = {{Springer-Verlag}},
  address = {{Berlin, Heidelberg}},
  urldate = {2018-12-01},
  isbn = {978-3-540-06859-4},
  annotation = {01162},
  file = {/Users/igormoreno/Zotero/storage/XS8KLS86/Reynolds - 1974 - Towards a theory of type structure.pdf;/Users/igormoreno/Zotero/storage/7TLVJ6VC/10.html}
}

@incollection{richarde.clarkCognitiveTaskAnalysis2008,
  title = {Cognitive {{Task Analysis}}},
  booktitle = {Handbook of Research on Educational Communications and Technology},
  author = {{Richard E. Clark} and {David F. Feldon} and {Jeroen J. G. van Merri\"enboer} and {Kenneth A. Yates} and {Sean Early}},
  editor = {Spector, J. M. and Merrill, M. D. and {van Merri{\"e}nboer}, J. J. G. and Driscoll, M. P.},
  year = {2008},
  edition = {3},
  pages = {18},
  publisher = {{Lawrence Erlbaum Associates}},
  address = {{Mahwah, NJ, USA}},
  abstract = {This chapter presents an overview of the current state of cognitive task analysis (CTA) in research and practice. CTA uses a variety of interview and observation strategies to capture a description of the explicit and implicit knowledge that experts use to perform complex tasks. The captured knowledge is most often transferred to training or the development of expert systems. The first section presents descriptions of a variety of CTA techniques, their common characteristics, and the typical strategies used to elicit knowledge from experts and other sources. The second section describes research on the impact of CTA and synthesizes a number of studies and reviews pertinent to issues underlying knowledge elicitation. In the third section, we discuss the integration of CTA with training design. Finally, in the fourth section, we present a number of recommendations for future research and conclude with general comments.},
  langid = {english},
  keywords = {To Read},
  file = {/Users/igormoreno/Zotero/storage/4UJEIYVL/Richard E. Clark et al - 2008 - Cognitive Task Analysis.pdf}
}

@article{richarde.mayerMultimediaLearning2002,
  title = {Multimedia {{Learning}}},
  author = {{Richard E. Mayer}},
  year = {2002},
  journal = {The Annual Report of Educational Psychologyin Japan},
  volume = {41},
  pages = {27--29},
  file = {/Users/igormoreno/Zotero/storage/LHFXQ6T6/Richard E. Mayer - 2002 - Multimedia Learning.pdf}
}

@misc{richardmillwoodLearningTheoryConcept2013,
  title = {Learning {{Theory Concept Map}}},
  author = {{Richard Millwood}},
  year = {2013},
  month = may,
  file = {/Users/igormoreno/Zotero/storage/RTFGFTZU/Richard Millwood - 2013 - Learning Theory Concept Map.pdf}
}

@article{richardp.gabrielDefamiliarizationFlarfConceptual2012,
  title = {Defamiliarization: {{Flarf}}, Conceptual Writing, and Using Flawed Software Tools as Creative Partners},
  shorttitle = {Defamiliarization},
  author = {{Richard P. Gabriel} and {Allen Newell}},
  year = {2012},
  journal = {Knowledge Management \& E-Learning: An International Journal},
  volume = {4},
  number = {2},
  pages = {134--145},
  issn = {2073-7904},
  urldate = {2021-03-25},
  abstract = {One form of creativity uses defamiliarization, a mechanism that frees the brain from its rational shackles and permits the abducing brain to run free. Mistakes and flaws in several software tools are shown to be the starting points for increased creativity and better art, and a theory explaining the phenomenon is proposed.https://doi.org/10.34105/j.kmel.2012.04.013},
  copyright = {Copyright (c) 2018 Richard P. Gabriel (ACM Fellow; Allen Newell Award)},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/XBSBUFJH/Richard P. Gabriel and Allen Newell - 2012 - Defamiliarization.pdf;/Users/igormoreno/Zotero/storage/BQA4QXQG/160.html}
}

@article{richardsPracticalGuideCollaborative2018,
  title = {A {{Practical Guide}} to {{Collaborative Qualitative Data Analysis}}},
  author = {Richards, K. Andrew R. and Hemphill, Michael A.},
  year = {2018},
  month = apr,
  journal = {Journal of Teaching in Physical Education},
  volume = {37},
  number = {2},
  pages = {225--231},
  issn = {0273-5024, 1543-2769},
  doi = {10.1123/jtpe.2017-0084},
  urldate = {2023-03-28},
  abstract = {The purpose of this article is to provide an overview of a structured, rigorous approach to collaborative qualitative analysis while attending to challenges associated with working in team environments. The method is rooted in qualitative data analysis literature related to thematic analysis, as well as the constant comparative method. It seeks to capitalize on the benefits of coordinating qualitative data analysis in groups, while controlling for some of the challenges introduced when working with multiple analysts. The method includes the following six phases: (a) preliminary organization and planning, (b) open and axial coding, (c) development of a preliminary codebook, (d) pilot testing the codebook, (e) the final coding process, and (f) reviewing the codebook and finalizing themes. These phases are supported by strategies to enhance trustworthiness, such as (a) peer debriefing, (b) researcher and data triangulation, (c) an audit trail and researcher journal, and (d) a search for negative cases.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/F32QMS6B/Richards and Hemphill - 2018 - A Practical Guide to Collaborative Qualitative Dat.pdf}
}

@inproceedings{richDecompositionK8Computational2018,
  title = {Decomposition: {{A K-8 Computational Thinking Learning Trajectory}}},
  shorttitle = {Decomposition},
  booktitle = {Proceedings of the 2018 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Rich, Kathryn M. and Binkowski, T. Andrew and Strickland, Carla and Franklin, Diana},
  year = {2018},
  month = aug,
  series = {{{ICER}} '18},
  pages = {124--132},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3230977.3230979},
  urldate = {2021-04-03},
  abstract = {As new initiatives in computational thinking and computer science (CS/CT) are being developed and deployed, it is important to identify and understand the key concepts that are essential for student learning. In this study, we present the phases of construction of a learning trajectory (LT) for Decomposition in the context of CS/CT in K-8 education. From an extensive literature review, 63 learning goals representative of decomposition understanding and practices were identified and synthesized into 13 consensus goals. The focus of this paper is how relationships between these consensus goals were identified and used to place the goals into a learning trajectory. We discuss the theories and frameworks that guided the trajectory's construction as well as the methodology and justifications used to draw pathways through the trajectory in each phase. Finally, we discuss potential uses for the trajectory and suggest further explorations for decomposition in CS/CT.},
  isbn = {978-1-4503-5628-2},
  keywords = {computational thinking,decomposition,k-8},
  file = {/Users/igormoreno/Zotero/storage/LQDDH44V/Rich et al - 2018 - Decomposition.pdf}
}

@inproceedings{richDecompositionK8Computational2018a,
  title = {Decomposition: {{A K-8 Computational Thinking Learning Trajectory}}},
  shorttitle = {Decomposition},
  booktitle = {Proceedings of the 2018 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Rich, Kathryn M. and Binkowski, T. Andrew and Strickland, Carla and Franklin, Diana},
  year = {2018},
  month = aug,
  series = {{{ICER}} '18},
  pages = {124--132},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3230977.3230979},
  urldate = {2022-07-28},
  abstract = {As new initiatives in computational thinking and computer science (CS/CT) are being developed and deployed, it is important to identify and understand the key concepts that are essential for student learning. In this study, we present the phases of construction of a learning trajectory (LT) for Decomposition in the context of CS/CT in K-8 education. From an extensive literature review, 63 learning goals representative of decomposition understanding and practices were identified and synthesized into 13 consensus goals. The focus of this paper is how relationships between these consensus goals were identified and used to place the goals into a learning trajectory. We discuss the theories and frameworks that guided the trajectory's construction as well as the methodology and justifications used to draw pathways through the trajectory in each phase. Finally, we discuss potential uses for the trajectory and suggest further explorations for decomposition in CS/CT.},
  isbn = {978-1-4503-5628-2},
  keywords = {computational thinking,decomposition,k-8},
  file = {/Users/igormoreno/Zotero/storage/YGHMN2UU/Rich et al - 2018 - Decomposition.pdf}
}

@inproceedings{richFrameworkDecompositionComputational2019,
  title = {A {{Framework}} for {{Decomposition}} in {{Computational Thinking}}},
  booktitle = {Proceedings of the 2019 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Rich, Peter J. and Egan, Garrett and Ellsworth, Jordan},
  year = {2019},
  month = jul,
  series = {{{ITiCSE}} '19},
  pages = {416--421},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3304221.3319793},
  urldate = {2022-07-28},
  abstract = {Computational Thinking has become an important cognitive skill to develop in all areas of education. Despite its increasing popularity, the construct itself is only partially understood. There are few measures currently in place that advance our understanding of computational thinking and its subconstructs. In this article, we analyze existing measures of computational thinking (CT), looking specifically at their measures of decomposition. Decomposition is defined as the process of breaking down a problem into its sub-components. Even though most definitions of computational thinking include decomposition, fewbreak down the decompositional process beyond a basic definition. As one of the first steps in the computational thinking process, it is important to better understand the various manners in which decomposition occurs, which methods are most effective, and under what conditions. To better understand the decompositional process, we analyze evidence of decompositional process in a variety of disciplines. We then present a framework for decomposition in computational thinking. We demonstrate how this framework may help educators to better prepare students to break down complex problems, as well as provide guidance for how decompositional ability might be measured.},
  isbn = {978-1-4503-6895-7},
  keywords = {assessment,computational thinking,decomposition,framework},
  file = {/Users/igormoreno/Zotero/storage/BG3HTY9Z/Rich et al - 2019 - A Framework for Decomposition in Computational Thinking.pdf}
}

@inproceedings{richK8DebuggingLearning2019,
  title = {A {{K-8 Debugging Learning Trajectory Derived}} from {{Research Literature}}},
  booktitle = {Proceedings of the 50th {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Rich, Kathryn M. and Strickland, Carla and Binkowski, T. Andrew and Franklin, Diana},
  year = {2019},
  month = feb,
  series = {{{SIGCSE}} '19},
  pages = {745--751},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3287324.3287396},
  urldate = {2021-04-03},
  abstract = {Curriculum development is dependent on the following question: What are the learning goals for a specific topic, and what are reasonable ways to organize and order those goals? Learning trajectories (LTs) for computational thinking (CT) topics will help to guide emerging curriculum development efforts for computer science in elementary school. This study describes the development of an LT for Debugging. We conducted a rigorous analysis of scholarly research on K-8 computer science education to extract what concepts in debugging students should and are capable of learning. The concepts were organized into the LT presented within. In this paper, we describe the three dimensions of debugging that emerged during the creation of the trajectory: (1) strategies for finding and fixing errors, (2) types of errors, and (3) the role of errors in problem solving. In doing so, we go beyond identification of specific debugging strategies to further articulate knowledge that would help students understand when to use those techniques and why they are successful. Finally, we illustrate how the Debugging LT has guided our efforts to develop an integrated mathematics and CT curriculum for grades 3-5.},
  isbn = {978-1-4503-5890-3},
  keywords = {computational thinking,debugging,k-8,learning trajectory},
  file = {/Users/igormoreno/Zotero/storage/DA3TJYWQ/Rich et al - 2019 - A K-8 Debugging Learning Trajectory Derived from Research Literature.pdf}
}

@inproceedings{richK8LearningTrajectories2017,
  ids = {richK8LearningTrajectories2017a},
  title = {K-8 {{Learning Trajectories Derived}} from {{Research Literature}}: {{Sequence}}, {{Repetition}}, {{Conditionals}}},
  shorttitle = {K-8 {{Learning Trajectories Derived}} from {{Research Literature}}},
  booktitle = {Proceedings of the 2017 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Rich, Kathryn M. and Strickland, Carla and Binkowski, T. Andrew and Moran, Cheryl and Franklin, Diana},
  year = {2017},
  series = {{{ICER}} '17},
  pages = {182--190},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3105726.3106166},
  urldate = {2019-09-28},
  abstract = {Computing curricula are being developed for elementary school classrooms, yet research evidence is scant for learning trajectories that drive curricular decisions about what topics should be addressed at each grade level, at what depth, and in what order. This study presents learning trajectories based on an in-depth review of over 100 scholarly articles in computer science education research. We present three levels of results. First, we present the characteristics of the 600+ learning goals and their research context that affected the learning trajectory creation process. Second, we describe our first three learning trajectories (Sequence, Repetition, and Conditionals), and the relationship between the learning goals and the resulting trajectories. Finally, we discuss the ways in which assumptions about the context (mathematics) and language (e.g., Scratch) directly influenced the trajectories.},
  isbn = {978-1-4503-4968-0},
  keywords = {computational thinking,K-6,learning trajectories},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/42TMMQWA/Rich et al - 2017 - K-8 Learning Trajectories Derived from Research Literature.pdf;/Users/igormoreno/Zotero/storage/I8A7V4YY/Rich et al - 2017 - K-8 Learning Trajectories Derived from Research Literature.pdf}
}

@article{rieberDiscoveryLearningRepresentation2004,
  title = {Discovery Learning, Representation, and Explanation within a Computer-Based Simulation: Finding the Right Mix},
  shorttitle = {Discovery Learning, Representation, and Explanation within a Computer-Based Simulation},
  author = {Rieber, Lloyd P. and Tzeng, Shyh-Chii and Tribble, Kelly},
  year = {2004},
  month = jun,
  journal = {Learning and Instruction},
  series = {Dynamic {{Visualisations}} and {{Learning}}},
  volume = {14},
  number = {3},
  pages = {307--323},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2004.06.008},
  urldate = {2018-11-06},
  abstract = {The purpose of this research was to explore how adult users interact and learn during an interactive computer-based simulation supplemented with brief multimedia explanations of the content. A total of 52 college students interacted with a computer-based simulation of Newton's laws of motion in which they had control over the motion of a simple screen object\textemdash an animated ball. Two simulation conditions were studied, each differing in how the feedback of the ball's speed, direction, and position was represented: graphical feedback consisted of animated graphics and textual feedback consisted of numeric displays. In addition, half of the participants were given simulations supplemented with brief multimedia explanations of the content modeled by the simulation in order to investigate how to promote referential processing, a key component of dual coding theory. Results showed significant differences for both the use of the explanations and simulations containing graphical feedback in helping participants gain both implicit and explicit understanding of the science principles.},
  file = {/Users/igormoreno/Zotero/storage/IVZ665YZ/Rieber et al - 2004 - Discovery learning, representation, and explanation within a computer-based.pdf;/Users/igormoreno/Zotero/storage/CA97K452/S0959475204000349.html}
}

@article{rinderknechtSurveyTeachingLearning2014,
  title = {A {{Survey}} on {{Teaching}} and {{Learning Recursive Programming}}},
  author = {Rinderknecht, Christian},
  year = {2014},
  journal = {Informatics in Education},
  volume = {13},
  number = {1},
  pages = {87--119},
  abstract = {We survey the literature about the teaching and learning of recursive programming. After a short history of the advent of recursion in programming languages and its adoption by programmers, we present curricular approaches to recursion, including a review of textbooks and some programming methodology, as well as the functional and imperative paradigms and the distinction between control flow vs. data flow. We follow the researchers in stating the problem with base cases, noting the similarity with induction in mathematics, making concrete analogies for recursion, using games, visualizations, animations, multimedia environments, intelligent tutoring systems and visual programming. We cover the usage in schools of the Logo programming language and the associated theoretical didactics, including a brief overview of the constructivist and constructionist theories of learning; we also sketch the learners' mental models which have been identified so far, and nonclassical remedial strategies, such as kinesthesis and syntonicity. We append an extensive and carefully collated bibliography, which we hope will facilitate new research.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/KZZ4FCB2/Rinderknecht - 2014 - A Survey on Teaching and Learning Recursive Programming.pdf}
}

@article{ritschelCanGuidedDecomposition2022,
  title = {Can Guided Decomposition Help End-Users Write Larger Block-Based Programs? A Mobile Robot Experiment},
  shorttitle = {Can Guided Decomposition Help End-Users Write Larger Block-Based Programs?},
  author = {Ritschel, Nico and Fronchetti, Felipe and Holmes, Reid and Garcia, Ronald and Shepherd, David C.},
  year = {2022},
  month = oct,
  journal = {Proceedings of the ACM on Programming Languages},
  volume = {6},
  number = {OOPSLA2},
  pages = {233--258},
  issn = {2475-1421},
  doi = {10.1145/3563296},
  urldate = {2022-12-09},
  abstract = {Block-based programming environments, already popular in computer science education, have been successfully used to make programming accessible to end-users in domains like robotics, mobile apps, and even DevOps. Most studies of these applications have examined small programs that fit within a single screen, yet real-world programs often grow large, and editing these large block-based programs quickly becomes unwieldy. Traditional programming language features, like functions, allow programmers to decompose their programs. Unfortunately, both previous work, and our own findings, suggest that end-users rarely use these features, resulting in large monolithic code blocks that are hard to understand. In this work, we introduce a block-based system that provides users with a hierarchical, domain-specific program structure and requires them to decompose their programs accordingly. Through a user study with 92 users, we compared this approach, which we call guided program decomposition, to a traditional system that supports functions, but does not require decomposition. We found that while almost all users could successfully complete smaller tasks, those who decomposed their programs were significantly more successful as the tasks grew larger. As expected, most users without guided decomposition did not decompose their programs, resulting in poor performance on larger problems. In comparison, users of guided decomposition performed significantly better on the same tasks. Though this study investigated only a limited selection of tasks in one specific domain, it suggests that guided decomposition can benefit end-user programmers. While no single decomposition strategy fits all domains, we believe that similar domain-specific sub-hierarchies could be found for other application areas, increasing the scale of code end-users can create and understand.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/WT4UCCDD/Ritschel et al. - 2022 - Can guided decomposition help end-users write larg.pdf}
}

@article{ritschelCanGuidedDecomposition2022a,
  title = {Can Guided Decomposition Help End-Users Write Larger Block-Based Programs? A Mobile Robot Experiment},
  shorttitle = {Can Guided Decomposition Help End-Users Write Larger Block-Based Programs?},
  author = {Ritschel, Nico and Fronchetti, Felipe and Holmes, Reid and Garcia, Ronald and Shepherd, David C.},
  year = {2022},
  month = oct,
  journal = {Proceedings of the ACM on Programming Languages},
  volume = {6},
  number = {OOPSLA2},
  pages = {233--258},
  issn = {2475-1421},
  doi = {10.1145/3563296},
  urldate = {2022-12-09},
  abstract = {Block-based programming environments, already popular in computer science education, have been successfully used to make programming accessible to end-users in domains like robotics, mobile apps, and even DevOps. Most studies of these applications have examined small programs that fit within a single screen, yet real-world programs often grow large, and editing these large block-based programs quickly becomes unwieldy. Traditional programming language features, like functions, allow programmers to decompose their programs. Unfortunately, both previous work, and our own findings, suggest that end-users rarely use these features, resulting in large monolithic code blocks that are hard to understand. In this work, we introduce a block-based system that provides users with a hierarchical, domain-specific program structure and requires them to decompose their programs accordingly. Through a user study with 92 users, we compared this approach, which we call guided program decomposition, to a traditional system that supports functions, but does not require decomposition. We found that while almost all users could successfully complete smaller tasks, those who decomposed their programs were significantly more successful as the tasks grew larger. As expected, most users without guided decomposition did not decompose their programs, resulting in poor performance on larger problems. In comparison, users of guided decomposition performed significantly better on the same tasks. Though this study investigated only a limited selection of tasks in one specific domain, it suggests that guided decomposition can benefit end-user programmers. While no single decomposition strategy fits all domains, we believe that similar domain-specific sub-hierarchies could be found for other application areas, increasing the scale of code end-users can create and understand.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/6UG67UTX/Ritschel et al. - 2022 - Can guided decomposition help end-users write larg.pdf}
}

@article{ritschelCanGuidedDecomposition2022b,
  title = {Can Guided Decomposition Help End-Users Write Larger Block-Based Programs? A Mobile Robot Experiment},
  shorttitle = {Can Guided Decomposition Help End-Users Write Larger Block-Based Programs?},
  author = {Ritschel, Nico and Fronchetti, Felipe and Holmes, Reid and Garcia, Ronald and Shepherd, David C.},
  year = {2022},
  month = oct,
  journal = {Proceedings of the ACM on Programming Languages},
  volume = {6},
  number = {OOPSLA2},
  pages = {233--258},
  issn = {2475-1421},
  doi = {10.1145/3563296},
  urldate = {2022-12-09},
  abstract = {Block-based programming environments, already popular in computer science education, have been successfully used to make programming accessible to end-users in domains like robotics, mobile apps, and even DevOps. Most studies of these applications have examined small programs that fit within a single screen, yet real-world programs often grow large, and editing these large block-based programs quickly becomes unwieldy. Traditional programming language features, like functions, allow programmers to decompose their programs. Unfortunately, both previous work, and our own findings, suggest that end-users rarely use these features, resulting in large monolithic code blocks that are hard to understand. In this work, we introduce a block-based system that provides users with a hierarchical, domain-specific program structure and requires them to decompose their programs accordingly. Through a user study with 92 users, we compared this approach, which we call guided program decomposition, to a traditional system that supports functions, but does not require decomposition. We found that while almost all users could successfully complete smaller tasks, those who decomposed their programs were significantly more successful as the tasks grew larger. As expected, most users without guided decomposition did not decompose their programs, resulting in poor performance on larger problems. In comparison, users of guided decomposition performed significantly better on the same tasks. Though this study investigated only a limited selection of tasks in one specific domain, it suggests that guided decomposition can benefit end-user programmers. While no single decomposition strategy fits all domains, we believe that similar domain-specific sub-hierarchies could be found for other application areas, increasing the scale of code end-users can create and understand.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/6EJBNSCM/Ritschel et al. - 2022 - Can guided decomposition help end-users write larg.pdf}
}

@article{rittle-johnsonDoesComparingSolution2007,
  title = {Does Comparing Solution Methods Facilitate Conceptual and Procedural Knowledge? {{An}} Experimental Study on Learning to Solve Equations.},
  shorttitle = {Does Comparing Solution Methods Facilitate Conceptual and Procedural Knowledge?},
  author = {{Rittle-Johnson}, Bethany and Star, Jon R.},
  year = {2007},
  month = aug,
  journal = {Journal of Educational Psychology},
  volume = {99},
  number = {3},
  pages = {561--574},
  issn = {1939-2176, 0022-0663},
  doi = {10.1037/0022-0663.99.3.561},
  urldate = {2022-08-26},
  abstract = {Encouraging students to share and compare solution methods is a key component of reform efforts in mathematics, and comparison is emerging as a fundamental learning mechanism. To experimentally evaluate the effects of comparison for mathematics learning, the authors randomly assigned 70 seventhgrade students to learn about algebra equation solving by either (a) comparing and contrasting alternative solution methods or (b) reflecting on the same solution methods one at a time. At posttest, students in the compare group had made greater gains in procedural knowledge and flexibility and comparable gains in conceptual knowledge. These findings suggest potential mechanisms behind the benefits of comparing contrasting solutions and ways to support effective comparison in the classroom.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/7B9AF25L/Rittle-Johnson and Star - 2007 - Does comparing solution methods facilitate concept.pdf}
}

@inproceedings{riveraPlanCompositionUsing2022,
  title = {Plan {{Composition Using Higher-Order Functions}}},
  booktitle = {Proceedings of the 2022 {{ACM Conference}} on {{International Computing Education Research V}}.1},
  author = {Rivera, Elijah and Krishnamurthi, Shriram and Goldstone, Robert},
  year = {2022},
  month = aug,
  pages = {84--104},
  publisher = {{ACM}},
  address = {{Lugano and Virtual Event Switzerland}},
  doi = {10.1145/3501385.3543965},
  urldate = {2023-02-18},
  abstract = {Background and Context. Program planning has been a longstanding and important problem in computing education. Finding useful primitives for planning and assessing whether students are able to understand and use these primitives remain open problems. We make progress on this problem by using higher-order functions (hofs) as planning operations. Not only are hofs increasingly prevalent in computing broadly, some data science programming sources also recommend their use in planning solutions to data-processing pipelines, giving our task additional applicability.},
  isbn = {978-1-4503-9194-8},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/L4KY9CQF/Rivera et al. - 2022 - Plan Composition Using Higher-Order Functions.pdf}
}

@article{riveraStructuralPipelineComposition2022a,
  title = {Structural versus Pipeline Composition of Higher-Order Functions (Experience Report)},
  author = {Rivera, Elijah and Krishnamurthi, Shriram},
  year = {2022},
  month = aug,
  journal = {Proceedings of the ACM on Programming Languages},
  volume = {6},
  number = {ICFP},
  pages = {102:343--102:356},
  doi = {10.1145/3547633},
  urldate = {2023-10-31},
  abstract = {In teaching students to program with compositions of higher-order functions, we have encountered a sharp distinction in the difficulty of problems as perceived by students. This distinction especially matters as growing numbers of programmers learn about functional programming for data processing. We have made initial progress on identifying this distinction, which appears counter-intuitive to some. We describe the phenomenon, provide some preliminary evidence of the difference in difficulty, and suggest consequences for functional programming pedagogy.},
  keywords = {composition,higher-order functions,plans,program structure},
  file = {/Users/igormoreno/Zotero/storage/CMU7GGZ3/Rivera and Krishnamurthi - 2022 - Structural versus pipeline composition of higher-o.pdf}
}

@phdthesis{riversAutomatedDataDrivenHint2017,
  title = {Automated {{Data-Driven Hint Generation}} for {{Learning Programming}}},
  author = {Rivers, Kelly},
  year = {2017},
  month = jul,
  abstract = {Feedback is an essential component of the learning process, but in fields like computer science, which have rapidly increasing class sizes, it can be difficult to provide feedback to students at scale. Intelligent tutoring systems can provide personalized feedback to students automatically, but they can take large amounts of time and expert knowledge to build, especially when determining how to give students hints. Data-driven approaches can be used to provide personalized next-step hints automatically and at scale, by mining previous students' solutions. I have created ITAP, the Intelligent Teaching Assistant for Programming, which automatically generates next-step hints for students in basic Python programming assignments. ITAP is composed of three stages: canonicalization, where a student's code is transformed to an abstracted representation; path construction, where the closest correct state is identified and a series of edits to that goal state are generated; and reification, where the edits are transformed back into the student's original context. With these techniques, ITAP can generate next-step hints for 100\% of student submissions, and can even chain these hints together to generate a worked example. Initial analysis showed that hints could be used in practice problems in a real classroom environment, but also demonstrated that students' relationships with hints and help-seeking were complex and required deeper investigation. In my thesis work, I surveyed and interviewed students about their experience with help- seeking and using feedback, and found that students wanted more detail in hints than was initially provided. To determine how hints should be structured, I ran a usability study with programmers at varying levels of knowledge, where I found that more novice students needed much higher levels of content and detail in hints than was traditionally given. I also found that examples were commonly used in the learning process, and could serve an integral role in the feedback provision process. I then ran a randomized control trial experiment to determine the effect of next-step hints on learning and time-on-task in a practice session, and found that having hints available resulted in students spending 13.7\% less time during practice while achieving the same learning results as the control group. Finally, I used the data collected during these experiments to measure ITAP's performance over time, and found that generated hints improved as data was added to the system. My dissertation has contributed to the fields of computer science education, learning science, human-computer interaction, and data-driven tutoring. In computer science education, I have created ITAP, which can serve as a practice resource for future programming students during learning. In the learning sciences, I have replicated the expertise reversal effect by finding that more expert programmers want less detail in hints than novice programmers; this finding is important as it implies that programming teachers may provide novices with less assistance than they need. I have contributed to the literature on human-computer interaction by identifying multiple possible representations of hint messages, and analyzing how users react to and learn from these different formats during program debugging. Finally, I have contributed to the new field of data-driven tutoring by establishing that it is possible to always provide students with next-step hints, even without a starting dataset beyond the instructor's solution, and by demonstrating that those hints can be improved automatically over time.},
  langid = {english},
  school = {CMU},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/E3EAWKYK/Rivers - Automated Data-Driven Hint Generation for Learning.pdf}
}

@article{riversDataDrivenHintGeneration2017,
  title = {Data-{{Driven Hint Generation}} in {{Vast Solution Spaces}}: A {{Self-Improving Python Programming Tutor}}},
  shorttitle = {Data-{{Driven Hint Generation}} in {{Vast Solution Spaces}}},
  author = {Rivers, Kelly and Koedinger, Kenneth R.},
  year = {2017},
  month = mar,
  journal = {International Journal of Artificial Intelligence in Education},
  volume = {27},
  number = {1},
  pages = {37--64},
  issn = {1560-4306},
  doi = {10.1007/s40593-015-0070-z},
  urldate = {2020-10-13},
  abstract = {To provide personalized help to students who are working on code-writing problems, we introduce a data-driven tutoring system, ITAP (Intelligent Teaching Assistant for Programming). ITAP uses state abstraction, path construction, and state reification to automatically generate personalized hints for students, even when given states that have not occurred in the data before. We provide a detailed description of the system's implementation and perform a technical evaluation on a small set of data to determine the effectiveness of the component algorithms and ITAP's potential for self-improvement. The results show that ITAP is capable of producing hints for almost any given state after being given only a single reference solution, and that it can improve its performance by collecting data over time.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/7QK95PUV/Rivers and Koedinger - 2017 - Gallidabino.pdf;/Users/igormoreno/Zotero/storage/8XE4EDS7/Rivers and Koedinger - 2017 - Data-Driven Hint Generation in Vast Solution Space - Igor's copy.pdf;/Users/igormoreno/Zotero/storage/HAQXRDNI/Rivers and Koedinger - 2017 - Matthias.pdf;/Users/igormoreno/Zotero/storage/URS26M65/Rivers and Koedinger - 2017 - Data-Driven Hint Generation in Vast Solution Space.pdf;/Users/igormoreno/Zotero/storage/WWQU8952/Luce - Group reading - Data-Driven Hint Generation in Vast Solution Spaces.pdf}
}

@inproceedings{riversLearningCurveAnalysis2016,
  title = {Learning {{Curve Analysis}} for {{Programming}}: {{Which Concepts Do Students Struggle With}}?},
  shorttitle = {Learning {{Curve Analysis}} for {{Programming}}},
  booktitle = {Proceedings of the 2016 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Rivers, Kelly and Harpstead, Erik and Koedinger, Ken},
  year = {2016},
  series = {{{ICER}} '16},
  pages = {143--151},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2960310.2960333},
  urldate = {2019-08-08},
  abstract = {The recent surge in interest in using educational data mining on student written programs has led to discoveries about which compiler errors students encounter while they are learning how to program. However, less attention has been paid to the actual code that students produce. In this paper, we investigate programming data by using learning curve analysis to determine which programming elements students struggle with the most when learning in Python. Our analysis extends the traditional use of learning curve analysis to include less structured data, and also reveals new possibilities for when to teach students new programming concepts. One particular discovery is that while we find evidence of student learning in some cases (for example, in function definitions and comparisons), there are other programming elements which do not demonstrate typical learning. In those cases, we discuss how further changes to the model could affect both demonstrated learning and our understanding of the different concepts that students learn.},
  isbn = {978-1-4503-4449-4},
  keywords = {educational data mining,knowledge components,learning curve analysis,programming syntax,To Read},
  file = {/Users/igormoreno/Zotero/storage/MQ4P93FL/gallidabino.pdf;/Users/igormoreno/Zotero/storage/PRREJP6V/Learning Curve Analysis for Programming - notes.jpg;/Users/igormoreno/Zotero/storage/QLDJM85G/Rivers et al - 2016 - Learning Curve Analysis for Programming.pdf}
}

@inproceedings{robbesAPIFluency2019,
  title = {{{API}} Fluency},
  booktitle = {Proceedings of the 41st {{International Conference}} on {{Software Engineering}}: {{New Ideas}} and {{Emerging Results}}},
  author = {Robbes, Romain and Lungu, Mircea and Janes, Andrea},
  year = {2019},
  month = may,
  series = {{{ICSE-NIER}} '19},
  pages = {97--100},
  publisher = {{IEEE Press}},
  address = {{Montreal, Quebec, Canada}},
  doi = {10.1109/ICSE-NIER.2019.00033},
  urldate = {2020-02-10},
  abstract = {Application Programming Interfaces (APIs) are critical to improve developer productivity: developers can reuse a significant amount of functionality instead of writing it themselves. The flip side of API popularity is that APIs are large and numerous: developers often spend significant time searching for the functionality they need. Worse, they may not even be aware that an API exists for a given task and thus waste time reinventing the wheel. We argue for API fluency: the ability for developers to internalize how an API is used. The more developers have internalized the APIs they need, the more productive they can become. We propose an approach to improve API fluency, relying on spaced repetition of recommended API elements.},
  keywords = {APIs,MSR,spaced repetition},
  file = {/Users/igormoreno/Zotero/storage/HEG3T4DI/Robbes et al - 2019 - API fluency.pdf}
}

@book{robertsArtScienceJava2014,
  title = {The Art and Science of {{Java}}: An Introduction to Computer Science},
  shorttitle = {The Art and Science of {{Java}}},
  author = {Roberts, Eric S.},
  year = {2014},
  series = {Always Learning},
  edition = {Pearson new international edition, first edition},
  publisher = {{Pearson}},
  address = {{Harlow, Essex}},
  isbn = {978-1-292-02603-9},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/WUK8K55M/Roberts - 2014 - The art and science of Java an introduction to co.pdf}
}

@article{robertsAttemptingRigourReplicability2019,
  title = {Attempting Rigour and Replicability in Thematic Analysis of Qualitative Research Data; a Case Study of Codebook Development},
  author = {Roberts, Kate and Dowell, Anthony and Nie, Jing-Bao},
  year = {2019},
  month = dec,
  journal = {BMC Medical Research Methodology},
  volume = {19},
  number = {1},
  pages = {66},
  issn = {1471-2288},
  doi = {10.1186/s12874-019-0707-y},
  urldate = {2023-03-28},
  abstract = {Background: Navigating the world of qualitative thematic analysis can be challenging. This is compounded by the fact that detailed descriptions of methods are often omitted from qualitative discussions. While qualitative research methodologies are now mature, there often remains a lack of fine detail in their description both at submitted peer reviewed article level and in textbooks. As one of research's aims is to determine the relationship between knowledge and practice through the demonstration of rigour, more detailed descriptions of methods could prove useful. Rigour in quantitative research is often determined through detailed explanation allowing replication, but the ability to replicate is often not considered appropriate in qualitative research. However, a well described qualitative methodology could demonstrate and ensure the same effect. Methods: This article details the codebook development which contributed to thematic analysis of qualitative data. This analysis formed part of a mixed methods multiphase design research project, with both qualitative and quantitative inquiry and involving the convergence of data and analyses. This design consisted of three distinct phases: quantitative, qualitative and implementation phases. Results and conclusions: This article is aimed at researchers and doctoral students new to thematic analysis by describing a framework to assist their processes. The detailed description of the methods used supports attempts to utilise the thematic analysis process and to determine rigour to support the establishment of credibility. This process will assist practitioners to be confident that the knowledge and claims contained within research are transferable to their practice. The approach described within this article builds on, and enhances, current accepted models.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/CDCWPRG9/Roberts et al. - 2019 - Attempting rigour and replicability in thematic an.pdf}
}

@article{robertsLoopExitsStructured,
  title = {Loop {{Exits}} and {{Structured Programming}}: {{Reopening}} the {{Debate}}},
  author = {Roberts, Eric S},
  pages = {5},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/JCTQ7BZA/Roberts - Loop Exits and Structured Programming Reopening t.pdf}
}

@article{robertsOverviewMiniJava2001,
  title = {An Overview of {{MiniJava}}},
  author = {Roberts, Eric},
  year = {2001},
  month = feb,
  journal = {ACM SIGCSE Bulletin},
  volume = {33},
  number = {1},
  pages = {1--5},
  issn = {0097-8418},
  doi = {10.1145/366413.364525},
  urldate = {2021-10-25},
  abstract = {This paper describes the implementation of MiniJava, a teaching-oriented programming language closely based on the Java language developed by Sun Microsystems [6]. The core of the MiniJava environment is a restricted subset of the standard Java release and is designed to reduce the intimidation factor introductory students experience when they encounter a system as large as the Java environment. The paper outlines the particular restrictions and extensions that define MiniJava along with pedagogical justifications for each.},
  file = {/Users/igormoreno/Zotero/storage/Y6EHZD52/Roberts - 2001 - An overview of MiniJava.pdf}
}

@inproceedings{robertsPortableGraphicsLibrary2013,
  title = {A Portable Graphics Library for Introductory {{CS}}},
  booktitle = {Proceedings of the 18th {{ACM}} Conference on {{Innovation}} and Technology in Computer Science Education - {{ITiCSE}} '13},
  author = {Roberts, Eric and Schwarz, Keith},
  year = {2013},
  pages = {153},
  publisher = {{ACM Press}},
  address = {{Canterbury, England, UK}},
  doi = {10.1145/2462476.2465590},
  urldate = {2022-01-20},
  abstract = {For several decades, instructors who focus on introductory computer science courses have recognized the value of graphical examples. Supporting a graphics library that is appropriate for beginning students has become more difficult over time. This paper describes a new approach to building a graphics library that allows for multiple source languages and a wide range of target architectures and platforms. The key to this approach is using an interprocess pipe to communicate between a platform-independent client library and a Java-based process to perform the graphical operations specific to each platform.},
  isbn = {978-1-4503-2078-8},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/URBCCB4M/Roberts e Schwarz - 2013 - A portable graphics library for introductory CS.pdf}
}

@article{robillardRoleKnowledgeSoftware1999,
  title = {The Role of Knowledge in Software Development},
  author = {Robillard, Pierre N.},
  year = {1999},
  month = jan,
  journal = {Communications of the ACM},
  volume = {42},
  number = {1},
  pages = {87--92},
  issn = {0001-0782},
  doi = {10.1145/291469.291476},
  urldate = {2021-03-15},
  file = {/Users/igormoreno/Zotero/storage/SFJC9L5Q/Robillard - 1999 - The role of knowledge in software development.pdf}
}

@article{robinsLearningEdgeMomentum2010,
  title = {Learning Edge Momentum: A New Account of Outcomes in {{CS1}}},
  shorttitle = {Learning Edge Momentum},
  author = {Robins, Anthony},
  year = {2010},
  month = mar,
  journal = {Computer Science Education},
  volume = {20},
  number = {1},
  pages = {37--71},
  issn = {0899-3408, 1744-5175},
  doi = {10.1080/08993401003612167},
  urldate = {2020-06-22},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/HVMI5MPF/Robins - 2010 - Learning edge momentum a new account of outcomes .pdf}
}

@article{robinsLearningTeachingProgramming2003,
  title = {Learning and {{Teaching Programming}}: {{A Review}} and {{Discussion}}},
  shorttitle = {Learning and {{Teaching Programming}}},
  author = {Robins, Anthony and Rountree, Janet and Rountree, Nathan},
  year = {2003},
  month = jun,
  journal = {Computer Science Education},
  volume = {13},
  number = {2},
  pages = {137--172},
  issn = {0899-3408, 1744-5175},
  doi = {10.1076/csed.13.2.137.14200},
  urldate = {2020-06-22},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/NNNBCCYB/Robins et al - 2003 - Learning and Teaching Programming.pdf}
}

@inproceedings{robinsonScratchPatchEasing2016,
  title = {From {{Scratch}} to {{Patch}}: {{Easing}} the {{Blocks-Text Transition}}},
  shorttitle = {From {{Scratch}} to {{Patch}}},
  booktitle = {Proceedings of the 11th {{Workshop}} in {{Primary}} and {{Secondary Computing Education}} on {{ZZZ}} - {{WiPSCE}} '16},
  author = {Robinson, William},
  year = {2016},
  pages = {96--99},
  publisher = {{ACM Press}},
  address = {{M\&\#252;nster, Germany}},
  doi = {10.1145/2978249.2978265},
  urldate = {2020-06-22},
  abstract = {A significant consequence of the phenomenal success of blockbased languages such as Scratch in introducing novices to computer programming, coupled with the fact that "real world" programming is generally performed via textual languages, has been that educators have been increasingly forced to address the question of how one may best facilitate this transition. Yet if transfer of computational thinking (CT) skills from one language to another is to occur such skills must exist in the first place, and therefore prior to the issue of transition one must also consider the extent to which a first language provides support for their development. Drawing upon experience gained as a teacher of Computing to children in UK Key Stages 1, 2 and 3, using both Scratch and Python, this discussion presents the pedagogical arguments for a modified version of Scratch 1.4 called "Patch". Patch addresses these issues by providing inter alia an integrated tracing/debugging tool and user-editable pseudo-code blocks to assist algorithm development and implementation. In addition to providing enhanced support for the teaching of CT skills, Patch also introduces new iterator blocks and user-defined functions with Python-like syntax, as well as a number of other syntactical changes, in order to prepare for and minimise the gap between these two languages.},
  isbn = {978-1-4503-4223-0},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/42AIVA6C/Robinson - 2016 - From Scratch to Patch Easing the Blocks-Text Tran.pdf}
}

@article{robsonItAllGame2015,
  title = {Is It All a Game? {{Understanding}} the Principles of Gamification},
  shorttitle = {Is It All a Game?},
  author = {Robson, Karen and Plangger, Kirk and Kietzmann, Jan H. and McCarthy, Ian and Pitt, Leyland},
  year = {2015},
  month = jul,
  journal = {Business Horizons},
  volume = {58},
  number = {4},
  pages = {411--420},
  issn = {00076813},
  doi = {10.1016/j.bushor.2015.03.006},
  urldate = {2023-06-27},
  abstract = {There is growing interest in how gamification\textendash\textemdash defined as the application of game design principles in non-gaming contexts\textendash\textemdash can be used in business. However, academic research and management practice have paid little attention to the challenges of how best to design, implement, manage, and optimize gamification strategies. To advance understanding of gamification, this article defines what it is and explains how it prompts managers to think about business practice in new and innovative ways. Drawing upon the game design literature, we present a framework of three gamification principles\textendash\textemdash mechanics, dynamics, and emotions (MDE)\textendash\textemdash to explain how gamified experiences can be created. We then provide an extended illustration of gamification and conclude with ideas for future research and application opportunities.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/NPVK79YB/Robson et al. - 2015 - Is it all a game Understanding the principles of .pdf}
}

@book{rodrigoArtificialIntelligenceEducation2022,
  title = {Artificial {{Intelligence}} in {{Education}}: 23rd {{International Conference}}, {{AIED}} 2022, {{Durham}}, {{UK}}, {{July}} 27\textendash 31, 2022, {{Proceedings}}, {{Part I}}},
  shorttitle = {Artificial {{Intelligence}} in {{Education}}},
  editor = {Rodrigo, Maria Mercedes and Matsuda, Noburu and Cristea, Alexandra I. and Dimitrova, Vania},
  year = {2022},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  volume = {13355},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-031-11644-5},
  urldate = {2023-03-22},
  isbn = {978-3-031-11643-8 978-3-031-11644-5},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/TWBRYKNC/Rodrigo et al. - 2022 - Artificial Intelligence in Education 23rd Interna.pdf}
}

@incollection{roelsInteractiveSourceCode2016,
  title = {An {{Interactive Source Code Visualisation Plug-in}} for the {{MindXpres Presentation Platform}}},
  booktitle = {Computer {{Supported Education}}},
  author = {Roels, Reinout and Me{\c s}tereag{\u a}, Paul and Signer, Beat},
  editor = {Zvacek, Susan and Restivo, Maria Teresa and Uhomoibhi, James and Helfert, Markus},
  year = {2016},
  volume = {583},
  pages = {169--188},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-29585-5_10},
  urldate = {2020-06-22},
  abstract = {Nowadays, the teaching of programming concepts and algorithms is often conducted via slideware such as PowerPoint or Keynote, with the instructor going through a sequential series of slides showing static pieces of program code. As outlined in this paper, such a slidewarebased approach has its limitations in terms of the authoring as well as the delivery of content for a programming course. Nevertheless, there is a rich body of research on how to best teach programming concepts and algorithms where it has been shown that this process very much depends on the mental models developed by scholars when learning how to program. Based on this existing body of research, we derived a number of requirements for an improved source code visualisation and presentation in slideware tools. We present an interactive source code visualisation plug-in for the MindXpres presentation platform, which addresses these requirements and introduces a number of innovative concepts for an interactive visualisation of source code. Based on two concrete examples showing how our solution can be used for the teaching of recursion by means of a recursion tree or to explain sorting algorithms by using animation, we illustrate the extensibility and flexibility of the presented interactive source code visualisation approach. Ultimately, the presented solution should help in reinforcing a student's mental model about a presented algorithm and improve the knowledge transfer of presentations delivered in programming courses.},
  isbn = {978-3-319-29584-8 978-3-319-29585-5},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/B2ZITSCH/Roels et al - 2016 - An Interactive Source Code Visualisation Plug-in for the MindXpres Presentation.pdf}
}

@article{rohrerEffectsOverlearningDistributed2006,
  title = {The Effects of Overlearning and Distributed Practise on the Retention of Mathematics Knowledge},
  author = {Rohrer, Doug and Taylor, Kelli},
  year = {2006},
  month = dec,
  journal = {Applied Cognitive Psychology},
  volume = {20},
  number = {9},
  pages = {1209--1224},
  issn = {08884080, 10990720},
  doi = {10.1002/acp.1266},
  urldate = {2020-02-11},
  abstract = {In two experiments, 216 college students learned to solve one kind of mathematics problem before completing one of various practise schedules. In Experiment 1, students either massed 10 problems in a single session or distributed these 10 problems across two sessions separated by 1 week. The benefit of distributed practise was nil among students who were tested 1 week later but extremely large among students tested 4 weeks later. In Experiment 2, students completed three or nine practise problems in one session. The additional six problems constituted a strategy known as overlearning, but this extra effort had no effect on test scores 1 or 4 weeks later. Thus, long-term retention was boosted by distributed practise and unaffected by overlearning. Unfortunately, most mathematics textbooks rely on a format that emphasises overlearning and minimises distributed practise. An easily adopted alternative format is advocated. Copyright \# 2006 John Wiley \& Sons, Ltd.},
  langid = {english},
  annotation = {00286},
  file = {/Users/igormoreno/Zotero/storage/Q5CPN9FB/Rohrer and Taylor - 2006 - The effects of overlearning and distributed practise on the retention of.pdf}
}

@article{rohrmanRoleSyntacticStructure1968,
  title = {The Role of Syntactic Structure in the Recall of {{English}} Nominalizations},
  author = {Rohrman, Nicholas L.},
  year = {1968},
  month = oct,
  journal = {Journal of Verbal Learning and Verbal Behavior},
  volume = {7},
  number = {5},
  pages = {904--912},
  issn = {0022-5371},
  doi = {10.1016/S0022-5371(68)80095-7},
  urldate = {2018-12-02},
  abstract = {Current linguistic theory holds that there are two levels of sentence structure, derived constituent or surface structure and underlying or deep structure. Some investigators have argued that sentences are remembered in terms of their deep structures, but recently other investigators have countered that sentence recall is better predicted by surface structure. Five experiments were conducted to determine which of these views more adequately characterizes the memory representation of a sentence. Experiments I-IV demonstrate that with materials with identical surface structures, but differing in deep-structure complexity, differences in recall are predictable from the latter. Thus, the underlying structures seem to be the level which is represented in memory. Experiment V attempted to determine whether transformational history or deep-structure complexity is the more important determinant of recall. Deep-structure complexity, indicated by number of nodes, seems to be the more important.},
  file = {/Users/igormoreno/Zotero/storage/Y4NKBX4E/Rohrman - 1968 - The role of syntactic structure in the recall of English nominalizations.pdf;/Users/igormoreno/Zotero/storage/QQAE2UZP/S0022537168800957.html}
}

@inproceedings{rojasCodeDefendersMutation2016,
  title = {Code {{Defenders}}: {{A Mutation Testing Game}}},
  shorttitle = {Code {{Defenders}}},
  booktitle = {2016 {{IEEE Ninth International Conference}} on {{Software Testing}}, {{Verification}} and {{Validation Workshops}} ({{ICSTW}})},
  author = {Rojas, Jos{\'e} Miguel and Fraser, Gordon},
  year = {2016},
  month = apr,
  pages = {162--167},
  doi = {10.1109/ICSTW.2016.43},
  abstract = {Mutation testing is endorsed by software testing researchers for its unique capability of providing pragmatic estimates of a test suite's fault detection capability, and for guiding testers in improving their test suites. In practice, however, wide-spread adoption of mutation testing is hampered because any non-trivial program results in huge numbers of mutants, many of which are either trivial or equivalent, and thus useless. Trivial mutants reduce the motivation of developers in trusting and using the technique, while equivalent mutants are frustratingly difficult to handle. These problems are exacerbated by insufficient education on testing, which often means that mutation testing is not well understood in practice. These are examples of the types of problems that gamification aims to overcome by making such tedious activities competitive and entertaining. In this paper, we introduce the first steps towards building Code Defenders, a mutation testing game where players take the role of an attacker, who aims to create the most subtle non-equivalent mutants, or a defender, who aims to create strong tests to kill these mutants. The benefits of such an approach are manifold: The game can serve an educational role by engaging learners in mutation testing activities in a fun way. Experienced players will produce strong test suites, capable of detecting even the most subtle bugs that other players can conceive. Equivalent mutants are handled by making them a special part of the gameplay, where points are at stake in duels between attackers and defenders.},
  keywords = {code defender,Conferences,Context,Education,fault detection,Games,gamification,Gamification,Mutation testing,mutation testing game,program testing,Software,software quality,software testing,Software testing,Testing education},
  annotation = {00034},
  file = {/Users/igormoreno/Zotero/storage/36B89HQV/Rojas and Fraser - 2016 - Code Defenders A Mutation Testing Game.pdf;/Users/igormoreno/Zotero/storage/5YITGABV/7528958.html}
}

@inproceedings{rokhmawatiIdentifyingStudentsMental2019,
  title = {Identifying {{Students}}' {{Mental Model}} for {{Java Programming Subject}}},
  booktitle = {Proceedings of the 2019 3rd {{International Conference}} on {{Education}} and {{Multimedia Technology}}  - {{ICEMT}} 2019},
  author = {Rokhmawati, Retno Indah and {Az-zahra}, Hanifah Muslimah},
  year = {2019},
  pages = {165--169},
  publisher = {{ACM Press}},
  address = {{Nagoya, Japan}},
  doi = {10.1145/3345120.3345146},
  urldate = {2020-06-22},
  abstract = {Since the beginning of learning programming, the first-year student felt intimidated when learning to programme. Coding ability is a basic competency as a programmer, especially for Computer Science students. The limitation of class study time requires a self-learning. This study will identify students' Mental Model to help define the design of tailored e-learning in programming subject. This study was exploratory research involving 100 students that were purposively sampling from five departments. They answered an online questionnaire containing 16 questions about motivation to learn, competency levels, reasons/constraints in learning, efforts to learn, and expectations about the proposed systems. In the second session data collection, 20 students were selected who had detailed answers, and they represented each department. These twenty students were involved in the Focus Group Discussion to produce a mutually agreed mental model. The results are students believe that the programming logic is difficult to understand; the syntax is hard to remember, the logic is difficult to implement into coding, the students feel overwhelmed and the unsupported environment. The solution was found through a mental model in the form of the grouping of features that consider cognitive, behavioral, and student competency levels in programming subject, especially in Java Programming. The future work of this research is the simplification of learning material to provide the right portion for students by applying the three levels of mental models, so that proposed e-learning can accommodate learning needs of various user needs.},
  isbn = {978-1-4503-7210-7},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/HWRXPNUQ/Rokhmawati and Az-zahra - 2019 - Identifying Students' Mental Model for Java Programming Subject.pdf}
}

@article{roman-gonzalezWhichCognitiveAbilities2017,
  title = {Which Cognitive Abilities Underlie Computational Thinking? {{Criterion}} Validity of the {{Computational Thinking Test}}},
  shorttitle = {Which Cognitive Abilities Underlie Computational Thinking?},
  author = {{Rom{\'a}n-Gonz{\'a}lez}, Marcos and {P{\'e}rez-Gonz{\'a}lez}, Juan-Carlos and {Jim{\'e}nez-Fern{\'a}ndez}, Carmen},
  year = {2017},
  month = jul,
  journal = {Computers in Human Behavior},
  volume = {72},
  pages = {678--691},
  issn = {07475632},
  doi = {10.1016/j.chb.2016.08.047},
  urldate = {2023-03-15},
  abstract = {Computational thinking (CT) is being located at the focus of educational innovation, as a set of problemsolving skills that must be acquired by the new generations of students to thrive in a digital world full of objects driven by software. However, there is still no consensus on a CT definition or how to measure it. In response, we attempt to address both issues from a psychometric approach. On the one hand, a Computational Thinking Test (CTt) is administered on a sample of 1,251 Spanish students from 5th to 10th grade, so its descriptive statistics and reliability are reported in this paper. On the second hand, the criterion validity of the CTt is studied with respect to other standardized psychological tests: the Primary Mental Abilities (PMA) battery, and the RP30 problem-solving test. Thus, it is intended to provide a new instrument for CT measurement and additionally give evidence of the nature of CT through its associations with key related psychological constructs. Results show statistically significant correlations at least moderately intense between CT and: spatial ability (r {$\frac{1}{4}$} 0.44), reasoning ability (r {$\frac{1}{4}$} 0.44), and problemsolving ability (r {$\frac{1}{4}$} 0.67). These results are consistent with recent theoretical proposals linking CT to some components of the Cattel-Horn-Carroll (CHC) model of intelligence, and corroborate the conceptualization of CT as a problem-solving ability.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/ATV63ZQR/Román-González et al. - 2017 - Which cognitive abilities underlie computational t.pdf}
}

@inproceedings{roman-mendozaEngagingStudentsCurriculum2016,
  title = {Engaging Students in Curriculum Development: The Case of an Undergraduate Course in Digital Humanities},
  shorttitle = {Engaging Students in Curriculum Development},
  booktitle = {Proceedings of the {{Fourth International Conference}} on {{Technological Ecosystems}} for {{Enhancing Multiculturality}}},
  author = {{Rom{\'a}n-Mendoza}, Esperanza},
  year = {2016},
  month = nov,
  series = {{{TEEM}} '16},
  pages = {965--969},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3012430.3012633},
  urldate = {2020-09-22},
  abstract = {Digital Humanities (DH) and their relevance in U.S. university undergraduate and graduate programs have increased exponentially in the past 15 years. Nevertheless, courses in DH are still usually hosted by English, History or Social Sciences departments, with little or no room for courses offered by Foreign/Modern Language departments. In addition, both undergraduate and graduate humanities students may not feel attracted by courses that focus on digital technologies. In order to overcome these challenges, the Department of Modern and Classical Languages at George Mason University (Virginia, U.S.) is currently carrying out an innovative, participatory curriculum development project involving undergraduate students as consultants and co-producers of course content. This paper describes the theoretical framework for the project and its current stage of development. Advantages and limitations of student engagement in curriculum design are also addressed.},
  isbn = {978-1-4503-4747-1},
  keywords = {digital competencies,digital humanities,modern languages,participatory curriculum design},
  annotation = {00001},
  file = {/Users/igormoreno/Zotero/storage/7KENVMJ8/Román-Mendoza - 2016 - Engaging students in curriculum development.pdf}
}

@inproceedings{romeikeWhatMyChallenge2008,
  title = {What's {{My Challenge}}? {{The Forgotten Part}} of {{Problem Solving}} in {{Computer Science Education}}},
  shorttitle = {What's {{My Challenge}}?},
  booktitle = {Informatics {{Education}} - {{Supporting Computational Thinking}}},
  author = {Romeike, Ralf},
  editor = {Mittermeir, Roland T. and Sys{\l}o, Maciej M.},
  year = {2008},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {122--133},
  publisher = {{Springer Berlin Heidelberg}},
  abstract = {In this paper we present a teaching framework that extends the traditional problem solving method in computer science education in order to increase student motivation. It replaces problems by so-called challenges and in particular emphasizes the learning situation and inspiration of the students. Furthermore it combines several pedagogical principles and applies them in a process of how students learn in a motivating and self-regulated way. In order to justify the necessity of a new concept, problems in the traditional problem solving approaches in general high school education are highlighted. Implications from research addressing similar issues are summarized. In order for addressing students' motivation changes are necessary; challenges can provide a basis to start from.},
  isbn = {978-3-540-69924-8},
  langid = {english},
  keywords = {Algorithmic Problem,Computer Science,Greatest Common Divisor,Learning Situation,Traditional Problem},
  file = {/Users/igormoreno/Zotero/storage/5EJ9IZUQ/Romeike - 2008 - What’s My Challenge The Forgotten Part of Problem.pdf}
}

@article{romeroDebuggingStrategiesTactics2007,
  title = {Debugging Strategies and Tactics in a Multi-Representation Software Environment},
  author = {Romero, Pablo and {du Boulay}, Benedict and Cox, Richard and Lutz, Rudi and Bryant, Sallyann},
  year = {2007},
  month = dec,
  journal = {International Journal of Human-Computer Studies},
  volume = {65},
  number = {12},
  pages = {992--1009},
  issn = {10715819},
  doi = {10.1016/j.ijhcs.2007.07.005},
  urldate = {2018-11-06},
  abstract = {This paper investigates the interplay between high level debugging strategies and low level tactics in the context of a multirepresentation software development environment (SDE). It investigates three questions. 1. How do programmers integrate debugging strategies and tactics when working with SDEs? 2. What is the relationship between verbal ability, level of graphical literacy and debugging (task) performance. 3. How do modality and perspective influence debugging strategy and deployment of tactics? The paper extends the work of Katz and Anderson [1988. Debugging: an analysis of bug location strategies. Human-Computer Interaction 3, 359\textendash 399] and others in terms of identifying high level debugging strategies, in this case when working with SDEs. It also describes how programmers of different backgrounds and degrees of experience make differential use of the multiple sources of information typically available in a software debugging environment. Individual difference measures considered among the participants were their programming experience and their knowledge of external representation formalisms. The debugging environment enabled the participants, computer science students, to view the execution of a program in steps and provided them with concurrently displayed, adjacent, multiple and linked programming representations. These representations comprised the program code, two visualisations of the program and its output. The two visualisations of the program were available, in either a largely textual format or a largely graphical format so as to track interactions between experience and low level mode-specific tactics, for example.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/JSK4ML3K/Romero et al - 2007 - Debugging strategies and tactics in a multi-representation software environment.pdf}
}

@inproceedings{romkeyStudentCurriculumMapping2007,
  title = {Student {{Curriculum Mapping}}: {{A More Authentic Way Of Examining And Evaluating Curriculum}}},
  shorttitle = {Student {{Curriculum Mapping}}},
  booktitle = {2007 {{Annual Conference}} \& {{Exposition}}},
  author = {Romkey, Lisa and Bradbury, Laura},
  year = {2007},
  month = jun,
  pages = {12.1307.1-12.1307.13},
  issn = {2153-5965},
  urldate = {2020-09-22},
  annotation = {00004},
  file = {/Users/igormoreno/Zotero/storage/VNB9Z3FG/Romkey and Bradbury - 2007 - Student Curriculum Mapping.pdf;/Users/igormoreno/Zotero/storage/YVBYCXR3/student-curriculum-mapping-a-more-authentic-way-of-examining-and-evaluating-curriculum.html}
}

@article{romliDesigningTestSet,
  title = {Designing a {{Test Set}} for {{Structural Testing}} in {{Automatic Programming Assessment}}},
  author = {Romli, Rohaida and Sulaiman, Shahida and Zamli, Kamal Zuhairi},
  pages = {24},
  abstract = {An automatic programming assessment (APA) method aims to support marking and grading of students' programming exercises. APA requires a test data generation to perform a dynamic testing on students' programs. In software testing field, diverse automated methods for test data generation are proposed. Unfortunately, APA seldom adopts these methods. Merely limited studies have attempted to integrate APA and test data generation to include more useful features and to provide a precise and thorough quality of program testing coverage. Thus, we propose a test data generation approach to cover both the functional and structural testing of a program for APA by focusing the structural testing in this paper. We design a test set based on the integration of positive and negative testing criteria that enhanced path coverage criterion to select the desired test data. It supports lecturers of programming courses to furnish an adequate set of test data to assess students' programming solutions in term of structural testing without necessarily having the expertise in a particular knowledge of test cases. The findings from the experiment depict that the test set improves the criteria of reliability and validity for test data adequacy in programming assessments.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/785DT62L/Romli et al. - Designing a Test Set for Structural Testing in Aut.pdf}
}

@article{romliImprovingAutomatedProgramming2015,
  title = {Improving {{Automated Programming Assessments}}: {{User Experience Evaluation Using FaSt-generator}}},
  shorttitle = {Improving {{Automated Programming Assessments}}},
  author = {Romli, Rohaida and Sulaiman, Shahida and Zamli, Kamal Zuhairi},
  year = {2015},
  month = jan,
  journal = {Procedia Computer Science},
  series = {The {{Third Information Systems International Conference}} 2015},
  volume = {72},
  pages = {186--193},
  issn = {1877-0509},
  doi = {10.1016/j.procs.2015.12.120},
  urldate = {2020-07-22},
  abstract = {Automatic Programming Assessment (APA) has been known as a method used to automatically mark and grade students' programming solutions. In order to realise APA as a tangible deliverable, a number of automated tools which are called Automated Programming Assessment Systems (APAS) have been developed and tested for decades. Basically, the need for decreasing the load of work among lecturers, timely feedback to students and accuracy on the grading results are the common reasons that motivate the need for APAS. In order to carry out a dynamic testing in APA, it is necessary to prepare an appropriate and adequate set of test data to judge the correctness quality of students' programming solutions in terms of the aspects of functional and/or structural testing. Manual preparation of quality test data becomes a hard, time consuming, and feasible task in the practice of both software testing and APA. Thus, the generation of automated test data is highly desirable to alleviate the humans' burden from performing repetitive tasks. This paper aims to describe the design, implementation and user experience when evaluating a tool developed to support APA as a test data generator that is called FaSt-generator. The tool plays an important role to furnish a test set that includes an adequate set of test data to execute both the functional and structural testing in APA. Results collected from the conducted user experience evaluation using FaSt-generator reveal that all the subjects had relatively positive opinions and greatly favour the criteria of User Perception and End-User Computing Satisfaction (EUCS).},
  langid = {english},
  keywords = {automatic programming assessment,functional testing,structural testing,test data generation,user experience},
  file = {/Users/igormoreno/Zotero/storage/3RXDJVHK/Romli et al. - 2015 - Improving Automated Programming Assessments User .pdf;/Users/igormoreno/Zotero/storage/7LXHD239/S1877050915035814.html}
}

@article{ronaldk.hambletonItemResponseTheory1994,
  title = {Item {{Response Theory}}: {{A Broad Psychometric Framework}} for {{Measurement Advances}}},
  author = {{Ronald K. Hambleton}},
  year = {1994},
  journal = {Psicothema},
  volume = {6},
  number = {3},
  pages = {535--556},
  issn = {0214-9915},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/5EZPTPD4/Ronald K. Hambleton - 1994 - Item Response Theory.pdf}
}

@inproceedings{rondonLiquidTypes2008,
  title = {Liquid Types},
  booktitle = {Proceedings of the 29th {{ACM SIGPLAN Conference}} on {{Programming Language Design}} and {{Implementation}}},
  author = {Rondon, Patrick M. and Kawaguci, Ming and Jhala, Ranjit},
  year = {2008},
  month = jun,
  series = {{{PLDI}} '08},
  pages = {159--169},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1375581.1375602},
  urldate = {2023-07-06},
  abstract = {We present Logically Qualified Data Types, abbreviated to Liquid Types, a system that combines Hindley-Milner type inference with Predicate Abstraction to automatically infer dependent types precise enough to prove a variety of safety properties. Liquid types allow programmers to reap many of the benefits of dependent types, namely static verification of critical properties and the elimination of expensive run-time checks, without the heavy price of manual annotation. We have implemented liquid type inference in DSOLVE, which takes as input an OCAML program and a set of logical qualifiers and infers dependent types for the expressions in the OCAML program. To demonstrate the utility of our approach, we describe experiments using DSOLVE to statically verify the safety of array accesses on a set of OCAML benchmarks that were previously annotated with dependent types as part of the DML project. We show that when used in conjunction with a fixed set of array bounds checking qualifiers, DSOLVE reduces the amount of manual annotation required for proving safety from 31\% of program text to under 1\%.},
  isbn = {978-1-59593-860-2},
  keywords = {dependent types,hindley-milner,predicate abstraction,type inference},
  file = {/Users/igormoreno/Zotero/storage/8Z5G77RX/Rondon et al. - 2008 - Liquid types.pdf}
}

@article{roschelleRecruitingParticipantsLargeScale2014,
  title = {Recruiting {{Participants}} for {{Large-Scale Random Assignment Experiments}} in {{School Settings}}},
  author = {Roschelle, Jeremy and Feng, Mingyu and Gallagher, H. Alix and Murphy, Robert and Harris, Christopher and Kamdar, Danae and Trinidad, Gucci},
  year = {2014},
  journal = {Grantee Submission},
  publisher = {{ERIC}},
  file = {/Users/igormoreno/Zotero/storage/X3W4WVTU/Roschelle et al. - 2014 - Recruiting Participants for Large-Scale Random Ass.pdf;/Users/igormoreno/Zotero/storage/TXIHKBDE/eric.ed.gov.html}
}

@inproceedings{rosenbergConsideredHarmfulLeast1996,
  title = {I/{{O}} Considered Harmful (at Least for the First Few Weeks)},
  booktitle = {Proceedings of the Second {{Australasian}} Conference on {{Computer}} Science Education  - {{ACSE}} '97},
  author = {Rosenberg, John and K{\"o}lling, Michael},
  year = {1996},
  pages = {216--223},
  publisher = {{ACM Press}},
  address = {{The Univ. of Melbourne, Australia}},
  doi = {10.1145/299359.299390},
  urldate = {2023-11-07},
  isbn = {978-0-89791-958-6},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/HEN27D8L/Rosenberg and Kölling - 1996 - IO considered harmful (at least for the first few.pdf}
}

@article{rosuOverviewSemanticFramework2010,
  title = {An Overview of the {{K}} Semantic Framework},
  author = {Roșu, Grigore and Șerb{\u a}nut{\u a}, Traian Florin},
  year = {2010},
  month = aug,
  journal = {The Journal of Logic and Algebraic Programming},
  series = {Membrane Computing and Programming},
  volume = {79},
  number = {6},
  pages = {397--434},
  issn = {1567-8326},
  doi = {10.1016/j.jlap.2010.03.012},
  urldate = {2018-12-02},
  abstract = {K is an executable semantic framework in which programming languages, calculi, as well as type systems or formal analysis tools can be defined, making use of configurations, computations and rules. Configurations organize the system/program state in units called cells, which are labeled and can be nested. Computations carry ``computational meaning'' as special nested list structures sequentializing computational tasks, such as fragments of program; in particular, computations extend the original language or calculus syntax. K (rewrite) rules generalize conventional rewrite rules by making explicit which parts of the term they read, write, or do not care about. This distinction makes K a suitable framework for defining truly concurrent languages or calculi, even in the presence of sharing. Since computations can be handled like any other terms in a rewriting environment, that is, they can be matched, moved from one place to another in the original term, modified, or even deleted, K is particularly suitable for defining control-intensive language features such as abrupt termination, exceptions, or call/cc. This paper gives an overview of the K framework: what it is, how it can be used, and where it has been used so far. It also proposes and discusses the K definition of Challenge, a programming language that aims to challenge and expose the limitations of existing semantic frameworks.},
  file = {/Users/igormoreno/Zotero/storage/823BECV7/Roșu and Șerbănută - 2010 - An overview of the K semantic framework.pdf;/Users/igormoreno/Zotero/storage/ETSY4VHX/S1567832610000160.html}
}

@article{rothQuadrateErforschenMathematik2009,
  title = {Quadrate Erforschen - {{Mathematik}} an Konkreter {{Kunst}} Entdecken},
  author = {Roth, J{\"u}rgen},
  year = {2009},
  month = dec,
  journal = {Mathematik lehren},
  pages = {49--53},
  abstract = {In Bildern der Konkreten Kunst sind geometrische Figuren und deren Eigenschaften wesentliche Gestaltungselemente, deren Analyse Erkenntnisse zu Aspekten der Schulmathematik in unterschiedlichen Klassenstufen gewinnen l\"asst. Der Beitrag gibt anhand dreier Kunstwerke, in denen das Quadrat die bestimmende Figur ist, Anregungen f\"ur die Gestaltung von Lernumgebungen, in denen die Sch\"ulerinnen und Sch\"uler selbstst\"andig geometrische Inhalte erarbeiten, vernetzen oder vertiefen k\"onnen. Die zugeh\"origen Arbeitsbl\"atter beinhalten die Themen Fl\"achen, Symmetrie und Pythagoras (6./9. Klasse), L\"angenbeziehungen und F\"acheninhalte (9. Klasse) und Kongruenzabbildungen (7. Klasse).},
  file = {/Users/igormoreno/Zotero/storage/9RLKTP9C/Roth - 2009 - Quadrate erforschen - Mathematik an konkreter Kunst entdecken.pdf}
}

@article{rouetManagingCognitiveLoad2009,
  title = {Managing Cognitive Load during Document-Based Learning},
  author = {Rouet, Jean-Fran{\c c}ois},
  year = {2009},
  month = oct,
  journal = {Learning and Instruction},
  series = {Cognitive Load in Interactive Knowledge Construction},
  volume = {19},
  number = {5},
  pages = {445--450},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2009.02.007},
  urldate = {2018-11-06},
  abstract = {Designers of interactive learning environments face the issue of managing the learner's cognitive load, reducing irrelevant sources while optimizing useful sources of load. I propose a conceptual framework aimed at organizing the contributions of the papers presented in this special issue. The framework identifies three main dimensions, namely individual, task and environment, which may have specific or combined effects on the amount and type of cognitive load experienced during learning activities. I summarize some of the findings presented in the special issue with respect to each of these dimensions. Then I discuss some limitations of the studies and some perspectives for further research in the domain. I emphasize the need to control learners' level of familiarity with the task setting and environment features, not just their prior knowledge of the content area, in order to obtain reliable assessments of cognitive load and learning outcomes.},
  keywords = {Cognitive load,Hypertext,Multimedia,Prior knowledge,Problem solving,Self-regulated learning,Strategies},
  file = {/Users/igormoreno/Zotero/storage/HP2MIVXQ/Rouet - 2009 - Managing cognitive load during document-based learning.pdf;/Users/igormoreno/Zotero/storage/7VUL2EBE/S0959475209000127.html}
}

@article{rouhaniTeachingProgrammingSecondary2021,
  title = {Teaching {{Programming}} in {{Secondary Schools}}: {{Stepping}} and {{Stumbling Stones}}},
  author = {Rouhani, Majid and Farshchian, Veronica and Divitini, Monica},
  year = {2021},
  month = apr,
  journal = {Interaction Design and Architecture(s) Journal - IxD\&A},
  number = {47},
  pages = {21},
  abstract = {Programming is introduced in secondary education in a growing number of subjects. This results in an increasing number of teachers teaching programming in their classes, often without proper training. Learning programming might be complicated, even more so is teaching it. In this context, there is a need to understand teachers' perspectives on teaching programming. This paper aims to identify challenges that teachers in secondary schools face and might negatively impact their teaching, i.e., stumbling stones, as well as elements that promote teaching and give motivation, i.e., stepping stones. The paper is based on the analysis of reflection notes delivered by in-service teachers attending a university-level course on teaching programming. The teachers compile the reflection notes after they complete their final project. Projects are centred around the definition of teaching plans to be tried out in class. The reflection notes of 173 students are analysed to identify issues related to: programming; teaching programming; recurrent didactic issues; and external challenges. The analysis is then summarised in a set of stumbling and stepping stones. For example, time is identified as one of the main stumbling stones by teachers. On the other side, motivation is one of the central stepping stones that we can identify in the data, often connected to the excitement of teaching something that was not previously taught in schools or that teachers perceive as highly relevant for society and the future job market. Implications for teacher training are also identified.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/ADDWTWMW/Rouhani et al. - Teaching Programming in Secondary Schools Steppin.pdf}
}

@inproceedings{roweAssessmentFrameworkIdentifying2011,
  title = {An Assessment Framework for Identifying Information Technology Programs},
  booktitle = {Proceedings of the 2011 Conference on {{Information}} Technology Education},
  author = {Rowe, Dale C. and Lunt, Barry M. and Helps, Richard G.},
  year = {2011},
  month = oct,
  series = {{{SIGITE}} '11},
  pages = {123--128},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2047594.2047630},
  urldate = {2020-09-22},
  abstract = {What is an IT Bachelor program and how can one be identified? In recent years, specific IT programs have arisen in the US to fill an industry need not directly provided for by other computing disciplines. IT programs are growing in number and influence yet can be hard to identify for several reasons: They are not always titled "Information Technology." They are housed in various colleges and schools - such as engineering, business, computing, and information science. Also, they may not have associated themselves with ABET and hence may not be accredited. We have undertaken research that uses the ACM IT 2008 model curriculum to identify the "fit" between a set of minimum criteria and published university undergraduate curriculum regardless of the title, college, or professional association of the program. Our results show three groups of IT-related programs: 1. Programs that meet all the ACM IT 2008 model curriculum guidelines. 2. Programs that only partially meet the ACM IT 2008 model curriculum guidelines because they require a significant amount of courses from unrelated disciplines like business, psychology, engineering, etc. 3. Programs that partially meet the ACM IT 2008 model curriculum guidelines because the program specializes in an IT-related major such as networking, embedded systems, database administration, HCI, etc. This paper will present the criteria we propose to use as we attempt to identify all the 4-year IT programs in the USA.},
  isbn = {978-1-4503-1017-8},
  keywords = {information technology,model curriculum},
  annotation = {00006},
  file = {/Users/igormoreno/Zotero/storage/TQYRYJ4W/Rowe et al - 2011 - An assessment framework for identifying information technology programs.pdf}
}

@article{ruckerReviewDiscussionChildren2016,
  title = {Review and {{Discussion}} of {{Children}}'s {{Conceptions}} of {{Computers}}},
  author = {R{\"u}cker, Michael T. and Pinkwart, Niels},
  year = {2016},
  month = apr,
  journal = {Journal of Science Education and Technology},
  volume = {25},
  number = {2},
  pages = {274--283},
  issn = {1059-0145, 1573-1839},
  doi = {10.1007/s10956-015-9592-2},
  urldate = {2020-06-22},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/26H9ZHQA/Rücker and Pinkwart - 2016 - Review and Discussion of Children’s Conceptions of Computers.pdf}
}

@article{ruiperez-valienteAnalyzingImpactUsing2016,
  title = {Analyzing the {{Impact}} of {{Using Optional Activities}} in {{Self-Regulated Learning}}},
  author = {{Ruiperez-Valiente}, J. A. and {Munoz-Merino}, P. J. and Kloos, C. D. and Niemann, K. and Scheffel, M. and Wolpers, M.},
  year = {July-Sept. 2016},
  journal = {IEEE Transactions on Learning Technologies},
  volume = {9},
  number = {3},
  pages = {231--243},
  issn = {1939-1382},
  doi = {10.1109/TLT.2016.2518172},
  urldate = {2018-10-06},
  abstract = {Self-regulated learning (SRL) environments provide students with activities to improve their learning (e.g., by solving exercises), but they might also provide optional activities (e.g., changing an avatar image or setting goals) where students can decide whether they would like to use or do them and how. Few works have dealt with the use of optional activities in SRL environments. This paper thus analyzes the use of optional activities in two case studies with a SRL approach. We found that the level of use of optional activites was low with only 23.1 percent of students making use of some functionality, while the level of use of learning activities was higher. Optional activities which are not related to learning are used more. We also explored the behavior of students using some of the optional activities in the courses such as setting goals and voting comments, finding that students finished the goals they set in more than 50 percent of the time and that they voted their peers' comments in a positive way. We also found that gender and the type of course can influence which optional activities are used. Moreover, the relations of the use of optional activities with proficient exercises and learning gains is low when taking out third variables, but we believe that optional activities might motivate students and produce better learning in an indirect way.},
  keywords = {Avatars,Context,Electronic mail,Electronic publishing,Information services,Process control,Reflection},
  annotation = {00012},
  file = {/Users/igormoreno/Zotero/storage/BSVE3LUP/Ruiperez-Valiente et al - 2016 - Analyzing the Impact of Using Optional Activities in Self-Regulated Learning.pdf}
}

@article{ruiz-banulsGamificationTransmediaInterdisciplinary2021,
  title = {Gamification and Transmedia in Interdisciplinary Contexts: {{A}} Didactic Intervention for the Primary School Classroom},
  shorttitle = {Gamification and Transmedia in Interdisciplinary Contexts},
  author = {{Ruiz-Ba{\~n}uls}, M{\'o}nica and {G{\'o}mez-Trigueros}, Isabel Mar{\'i}a and {Rovira-Collado}, Jos{\'e} and {Rico-G{\'o}mez}, Mar{\'i}a Luisa},
  year = {2021},
  month = jun,
  journal = {Heliyon},
  volume = {7},
  number = {6},
  pages = {e07374},
  issn = {24058440},
  doi = {10.1016/j.heliyon.2021.e07374},
  urldate = {2023-06-27},
  abstract = {Previous research has established the lack of motivation by primary education students vis- a-vis the acquisition of the necessary key competencies compulsory in the Spanish school curriculum and this is closely linked to poor academic performance on the part of the aforesaid students. Based on this current educational reality, we present a quantitative study regarding the perception of students after the implementation of a new gamified experience in the classroom such that it integrates, for the first time and jointly, the benefits of gamification (Deterding et al., 2011a; Deterding \& Zagal, 2018) with interdisciplinary methodologies (Candel, 2018; Cruz-Pichardo \& CaberoAlmenara, 2020; Flores-Aguilar, 2019) and technology-enhanced transmedia narratives (Scolari 2018a, 2018b; Jenkins, 2003; Scolari 2018a, 2018b). This integrative and innovative proposal was implemented in a primary school in Valencia (Spain) between October 2019 and February 2020. The research is designed based on surveytype studies, employing an experimental cross-sectional quantitative methodology with pretest and posttest, in addition to experimental and control groups. Regarding the cross-sectional approach, descriptive analyses (means and standard deviation) have been conducted, together with histograms of each of the items in the questionnaire, as well as the Student's t test and an analysis of variance, which is of significant value when working with independent samples from a normal distribution, as in our case. The instrument utilised in the present study confirms the existence of a high and adequate internal consistency (Alpha {$\frac{1}{4}$} .873). The results obtained, as presented herein, confirm that the incorporation of the gamified proposals in primary school classes, unprecedentedly intertwined with the benefits provided by interdisciplinary work and transmedia narratives, notably improves the students' training process and their motivation, while also contributing to the better acquisition of compulsory curricular contents and enhanced academic performance.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/Y3EKD79F/Ruiz-Bañuls et al. - 2021 - Gamification and transmedia in interdisciplinary c.pdf}
}

@article{ruiz-primoProblemsIssuesUse1996,
  title = {Problems and Issues in the Use of Concept Maps in Science Assessment},
  author = {{Ruiz-Primo}, Maria Araceli and Shavelson, Richard J.},
  year = {1996},
  month = aug,
  journal = {Journal of Research in Science Teaching},
  volume = {33},
  number = {6},
  pages = {569--600},
  issn = {0022-4308, 1098-2736},
  doi = {10.1002/(SICI)1098-2736(199608)33:6<569::AID-TEA1>3.0.CO;2-M},
  urldate = {2023-03-16},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/5BPESITZ/Ruiz-Primo and Shavelson - 1996 - Problems and issues in the use of concept maps in .pdf}
}

@article{ruizTILCInteractiveLambdaCalculus2009,
  title = {{{TILC}}: {{The Interactive Lambda-Calculus Tracer}}},
  shorttitle = {{{TILC}}},
  author = {Ruiz, David and Villaret, Mateu},
  year = {2009},
  month = aug,
  journal = {Electronic Notes in Theoretical Computer Science},
  volume = {248},
  pages = {173--183},
  issn = {15710661},
  doi = {10.1016/j.entcs.2009.07.067},
  urldate = {2021-04-17},
  abstract = {This paper introduces TILC: the interactive lambda-calculus tracer. TILC aims to be a friendly user graphical application that helps teaching/studying the main basic concepts of pure untyped lambda-calculus. This is achieved by allowing users to graphically interact with a sort of parse-tree of the lambda-terms and automatically reproducing these interactions in the lambda-term. This graphical interaction encourages students to practice with lambda-terms easing the learning of the syntax and of the operational semantics of lambda-calculus.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/KBJ4L7C5/Ruiz and Villaret - 2009 - TILC The Interactive Lambda-Calculus Tracer.pdf}
}

@misc{RunYourResearch2012,
  title = {Run {{Your Research}}: {{POPL}} 2012 Talk},
  shorttitle = {Run {{Your Research}}},
  year = {2012},
  month = oct,
  urldate = {2020-11-12},
  abstract = {by Casey Klein, John Clements, Christos Dimoulas, Carl Eastlund, Matthias Felleisen, Matthew Flatt, Jay A. McCarthy, Jon Rafkind, Sam Tobin-Hochstadt, and Robert Bruce Findler Formal models serve in many roles in the programming language community. In its primary role, a model communicates the idea of a language design; the architecture of a language tool; or the essence of a program analysis. No matter which role it plays, however, a faulty model doesn't serve its purpose. One way to eliminate flaws from a model is to write it down in a mechanized formal language. It is then possible to state theorems about the model, to prove them, and to check the proofs. Over the past nine years, PLT has developed and explored a lightweight version of this approach, dubbed Redex. In a nutshell, Redex is a domain-specific language for semantic models that is embedded in the Racket programming language. The effort of creating a model in Redex is often no more burdensome than typesetting it with LaTeX; the difference is that Redex comes with tools for the semantics engineering life cycle. In this paper we report on a validation of this form of lightweight mechanization. The largest part of this validation concerns the formalization and exploration of nine ICFP 2009 papers in Redex, an effort that uncovered mistakes in all nine papers. The results suggest that Redex-based lightweight modeling is effective and easy to integrate into the work flow of a semantics engineer. This experience also suggests lessons for the developers of other mechanization tools. See also the paper: http://eecs.northwestern.edu/\textasciitilde robby/l...},
  annotation = {00000}
}

@misc{ruskScratchProgrammingConcepts2009,
  title = {Scratch {{Programming Concepts}}},
  author = {Rusk, Natalie},
  year = {2009},
  urldate = {2022-01-18},
  file = {/Users/igormoreno/Zotero/storage/NNMWAC7U/scratchprogrammingconcepts-v14.pdf}
}

@techreport{ruthhallToolkitParticipatoryAction,
  title = {A Toolkit for Participatory Action Research},
  author = {{Ruth Hall} and {Zoe Brent} and {Jenny Franco} and {Moenieba Isaacs} and {Tsegaye Shegro}},
  editor = {{Katie Sandwell}},
  urldate = {2021-02-12},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/7ZDPKUB4/Ruth Hall et al - A toolkit for participatory action research.pdf}
}

@techreport{ryallsIDEAEditorialNote,
  title = {{{IDEA Editorial Note}} \#3 \textbullet{} {{Response}} to ``{{Zero Correlation Between Evaluations}} and {{Learning}} ''},
  author = {Ryalls, Ken and Benton, Steve},
  pages = {7},
  address = {{Manhattan, KS, USA}},
  institution = {{The IDEA Center}},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/MSAG2RIX/Ryalls and Benton - IDEA Editorial Note #3 • Response to “Zero Correlation Between Evaluations and.pdf}
}

@article{ryooItTakesVillage2015,
  title = {It Takes a Village: Supporting Inquiry- and Equity-Oriented Computer Science Pedagogy through a Professional Learning Community},
  shorttitle = {It Takes a Village},
  author = {Ryoo, Jean and Goode, Joanna and Margolis, Jane},
  year = {2015},
  month = oct,
  journal = {Computer Science Education},
  volume = {25},
  number = {4},
  pages = {351--370},
  publisher = {{Routledge}},
  issn = {0899-3408},
  doi = {10.1080/08993408.2015.1130952},
  urldate = {2021-01-30},
  abstract = {This article describes the importance that high school computer science teachers place on a teachers' professional learning community designed around an inquiry- and equity-oriented approach for broadening participation in computing. Using grounded theory to analyze four years of teacher surveys and interviews from the Exploring Computer Science (ECS) program in the Los Angeles Unified School District, this article describes how participating in professional development activities purposefully aimed at fostering a teachers' professional learning community helps ECS teachers make the transition to an inquiry-based classroom culture and break professional isolation. This professional learning community also provides experiences that challenge prevalent deficit notions and stereotypes about which students can or cannot excel in computer science.},
  keywords = {broadening participation in computing,exploring computer science,pedagogy,professional development,professional learning community,teacher learning},
  annotation = {00052},
  file = {/Users/igormoreno/Zotero/storage/GIKXVGCM/08993408.2015.html}
}

@inproceedings{saarinenHarnessingWisdomClasses2019,
  title = {Harnessing the {{Wisdom}} of the {{Classes}}: {{Classsourcing}} and {{Machine Learning}} for {{Assessment Instrument Generation}}},
  shorttitle = {Harnessing the {{Wisdom}} of the {{Classes}}},
  booktitle = {Proceedings of the 50th {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Saarinen, Sam and Krishnamurthi, Shriram and Fisler, Kathi and Tunnell Wilson, Preston},
  year = {2019},
  month = feb,
  series = {{{SIGCSE}} '19},
  pages = {606--612},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3287324.3287504},
  urldate = {2022-04-19},
  abstract = {Generating questions to engage and measure students is often challenging and time-consuming. Furthermore, these questions do not always transfer well between student populations due to differences in background, course emphasis, or ambiguity in the questions or answers. We introduce a contributing student pedagogy activity facilitated by machine learning that can generate questions with associated answer-reasoning sets. We call this process Adaptive Tool-Driven Conception Generation. A tool implementing this process has been deployed, and it explicitly optimizes the process for questions that divide student opinion. In a study involving arrays in Java, this novel process: generates questions similar to expert-designed questions, produces novel questions that identify potential student misconceptions, and provides statistical estimates of the prevalence of misconceptions. This process allows the generation of quiz and discussion questions with less expert effort, facilitates a subprocess in the creation of concept inventories, and also raises the possibility of running reproduction studies relatively cheaply.},
  isbn = {978-1-4503-5890-3},
  keywords = {contributing student pedagogy,instrument development,learning analytics},
  file = {/Users/igormoreno/Zotero/storage/KW6IL62A/Saarinen et al. - 2019 - Harnessing the Wisdom of the Classes Classsourcin.pdf}
}

@article{sadlerUnderstandingMisconceptionsTeaching2016,
  title = {Understanding {{Misconceptions}}: {{Teaching}} and {{Learning}} in {{Middle School Physical Science}}},
  shorttitle = {Understanding {{Misconceptions}}},
  author = {Sadler, Philip M. and Sonnert, Gerhard},
  year = {2016},
  journal = {American Educator},
  volume = {40},
  number = {1},
  pages = {26--32},
  publisher = {{American Federation of Teachers}},
  issn = {0148-432X},
  urldate = {2021-01-13},
  abstract = {In this study the authors set out to better understand the relationship between teacher knowledge of science and student learning. The authors administered identical multiple-choice assessment items both to teachers of middle school physical science and to their students throughout the school year. The authors found that teachers who have strong content knowledge and can identify students' most common misconceptions in science are more likely to increase their students' science knowledge than teachers who do not.},
  langid = {english},
  keywords = {Academic Achievement,Grade 7,Grade 8,Middle School Students,Middle School Teachers,Misconceptions,Multiple Choice Tests,Pedagogical Content Knowledge,Physical Sciences,Predictive Measurement,Pretests Posttests,Science Achievement,Science Curriculum,Science Education,Science Instruction,Science Process Skills,Scientific Concepts,Test Items},
  annotation = {00059},
  file = {/Users/igormoreno/Zotero/storage/9DE9QNCI/Matthias-annotated.pdf;/Users/igormoreno/Zotero/storage/SK52VDSL/Sadler and Sonnert - 2016 - Understanding Misconceptions.pdf;/Users/igormoreno/Zotero/storage/VAIBAKZ9/Sadler e Sonnert - 2016 - Understanding Misconceptions Teaching and Learnin.pdf;/Users/igormoreno/Zotero/storage/HDHUAX42/eric.ed.gov.html}
}

@phdthesis{saeliTeachingProgrammingSecondary2012,
  title = {Teaching {{Programming}} for {{Secondary School}}: A {{Pedagogical Content Knowledge Based Approach}}},
  author = {Saeli, M},
  year = {2012},
  abstract = {Computer science is a subject that is increasingly being taught in schools at secondary level in the past twenty years. One of the reasons for this choice is that citizens of this century are surrounded by products and other results of Computer Science (CS) and are asked to develop an attitude and skills that allows them to be able to use them properly. Also, with the recent evolution of social media, music players and mobile phones, users are inspired to develop their own applications and the Internet offers a multitude of online tutorials. Teaching CS at secondary school means enabling new generation citizens to acquire skills to develop applications, but also much more such as: learning to recognize when, how and why CS can be used to address and solve all sort of problems (develop methods/instruments for concrete problems), viewing the possibilities and limits of CS, and understand the social and ethical aspects of users interacting with IT tools. Because the teaching of CS at secondary school has only been relatively re- cently introduced, still discussion is open on agreeing what to teach, how to teach, with which reasons to teach and what students' difficulties to cope with. In other words the Pedagogical Content Knowledge (PCK), a construct defined by Lee Shulman (1986). For Computer Science it is still in its very early infancy. This thesis focuses on this topic, with special attention on programming. PCK is that expertise that allows teachers to represent, in an effective way, the subject to their students, it is the special amalgam between general and specific pedagogical knowledge and content knowledge. It is a knowledge that grows with the years of teaching experience. The general research aim of this thesis is to understand what the PCK of CS for secondary school is, with a special focus on the subject ``programming'', being programming one of the core subjects of CS. Knowledge of PCK will then be used to assess the Dutch situation, with special focus on Dutch CS textbooks and Dutch teachers. The final aim is to find tailor made solutions for the Dutch CS scenario, where CS risks to disappear from the secondary school curriculum due to several problems. Among the problems evidenced: most Dutch teachers have no solid disciplinary background, being mostly teachers from other disciplines re-trained to teach CS. To support these teachers ad hoc solution, it is necessary to understand the PCK of CS. To do so a preparatory literature study reveals to what extent the PCK of programming has been explored. Because no real effort to portray such knowledge has been done in CS before, an exploratory study has been designed and conducted with expert CS teachers in order to unveil this knowledge. With the knowledge about PCK gathered through this exploratory study, the PCK of textbooks and teachers in the Dutch scenario is evaluated. Summarizing, the research questions addressed in this thesis are: 1. To what extent is it possible to recognize aspects of Pedagogical Content Knowledge of programming for secondary education in current literature? 2. What is the Pedagogical Content Knowledge of programming in the context of secondary school education? 3. To what extent is it possible to identify the Pedagogical Content Knowledge of programming in Dutch secondary school textbooks? 4. What is Dutch teachers' Pedagogical Content Knowledge of programming for secondary school?},
  langid = {english},
  school = {Eindhoven University of Technology},
  annotation = {00035},
  file = {/Users/igormoreno/Zotero/storage/FPX2B5P8/Saeli - 2012 - Teaching Programming for Secondary School.pdf}
}

@article{sahinComputerSupportedConceptual2010,
  title = {Computer Supported Conceptual Change Text: {{Fluid}} Pressure},
  shorttitle = {Computer Supported Conceptual Change Text},
  author = {{\c S}ahin, {\c C}i{\u g}dem and {\.I}pek, Hava and {\c C}epni, Salih},
  year = {2010},
  month = jan,
  journal = {Procedia - Social and Behavioral Sciences},
  series = {Innovation and {{Creativity}} in {{Education}}},
  volume = {2},
  number = {2},
  pages = {922--927},
  issn = {1877-0428},
  doi = {10.1016/j.sbspro.2010.03.127},
  urldate = {2021-03-21},
  abstract = {Conceptual Change Text (CCT) is a technique, started with a situation about common misconceptions. Students are asked to predict what will happen at the situation. Then general misconceptions are stated and the wrong parts of these misconceptions are explained. New and scientifically correct knowledge about the topic is presented with examples in the CCT material. At the end the situations are discussed with the students. When in the literature studies were examined it has seen that there weren't any CCT material about fluid pressure. The aim of this study is to develop and introduce a computer supported CCT material to remove the common misconceptions in teaching fluid pressure.},
  langid = {english},
  keywords = {animation,conceptual change text,fluid pressure,Science teaching},
  file = {/Users/igormoreno/Zotero/storage/RHIN9QV5/Şahin et al - 2010 - Computer supported conceptual change text.pdf;/Users/igormoreno/Zotero/storage/X7YYS25I/S1877042810001679.html}
}

@article{sajaniemiExperimentUsingRoles2005,
  title = {An {{Experiment}} on {{Using Roles}} of {{Variables}} in {{Teaching Introductory Programming}}},
  author = {Sajaniemi, Jorma and Kuittinen, Marja},
  year = {2005},
  month = mar,
  journal = {Computer Science Education},
  volume = {15},
  number = {1},
  pages = {59--82},
  issn = {0899-3408, 1744-5175},
  doi = {10.1080/08993400500056563},
  urldate = {2020-06-22},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/Q49DP8AE/Sajaniemi and Kuittinen - 2005 - An Experiment on Using Roles of Variables in Teaching Introductory Programming.pdf}
}

@article{sajaniemiStudyDevelopmentStudents2008,
  ids = {sajaniemiStudyDevelopmentStudents2008a},
  title = {A Study of the Development of Students' Visualizations of Program State during an Elementary Object-Oriented Programming Course},
  author = {Sajaniemi, Jorma and Kuittinen, Marja and Tikansalo, Taina},
  year = {2008},
  month = jan,
  journal = {Journal on Educational Resources in Computing},
  volume = {7},
  number = {4},
  pages = {1--31},
  publisher = {{ACM New York, NY, USA}},
  issn = {15314278},
  doi = {10.1145/1316450.1316453},
  urldate = {2020-06-22},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/KJB55DZ4/Sajaniemi et al - 2008 - A study of the development of students' visualizations of program state during.pdf;/Users/igormoreno/Zotero/storage/QFEK7QHZ/Sajaniemi et al. - 2008 - A study of the development of students' visualizat.pdf;/Users/igormoreno/Zotero/storage/3LCM8CL2/1316450.html}
}

@article{samurcayConceptVariableProgramming1989,
  title = {The Concept of Variable in Programming: {{Its}} Meaning and Use in Problem-Solving by Novice Programmers},
  shorttitle = {The Concept of Variable in Programming},
  author = {Samur{\c c}ay, Renan},
  year = {1989},
  journal = {Studying the novice programmer},
  volume = {9},
  pages = {161--178},
  publisher = {{Lawrence Erlbaum Associates, Hillsdale, NJ}},
  annotation = {00000}
}

@article{sanchezGamificationClassroomExamining2020,
  title = {Gamification in the Classroom: {{Examining}} the Impact of Gamified Quizzes on Student Learning},
  shorttitle = {Gamification in the Classroom},
  author = {Sanchez, Diana R. and Langer, Markus and Kaur, Rupinder},
  year = {2020},
  month = jan,
  journal = {Computers \& Education},
  volume = {144},
  pages = {103666},
  issn = {03601315},
  doi = {10.1016/j.compedu.2019.103666},
  urldate = {2023-06-27},
  abstract = {Gamification is emerging as a method aimed at enhancing instructional contents in educational settings. However, theoretical underpinnings of the proposed effects of gamification are lacking. This paper applies the theory of gamified learning and extends research exploring the benefits of gamification on student learning through the testing effect. In a quasi-experimental design, university students (N = 473) prepared for three tests using traditional quizzes (i.e., a question, four response options) or gamified online quizzes (i.e., a wager option, a progress bar, encouraging messages). We assumed that students completing gamified quizzes would complete more quizzes and, through the benefits of the testing effect, would demonstrate better learning. Findings supported the testing effect in that students who completed more quizzes performed better on subsequent tests. Furthermore, students who completed the gamified quizzes had significantly better scores on the first test. However, this effect was not due to students completing more quizzes in the gamification group. Additionally, the beneficial effect of gamification did not persist for subsequent tests. This supports that gamification might work through a novelty effect where its influence may not be sustainable. Further analyses showed that higher achieving students benefited more from gamification than lower achieving students. Overall, the results (a) imply that gamification may be a viable option for short-term assignments, (b) highlight concerns of a novelty effect possibly recommending instructors not to use the same gamification method permanently, and (c) indicate that there are contexts where gamification might not be adequate to target low achieving students. Given these results we call for longitudinal studies investigating the novelty effects of gamification and research examining individual differences moderating the effects of gamification.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/2AZLJE5W/Sanchez et al. - 2020 - Gamification in the classroom Examining the impac.pdf}
}

@inproceedings{sandersCanterburyQuestionBankBuilding2013,
  title = {The {{Canterbury QuestionBank}}: Building a Repository of Multiple-Choice {{CS1}} and {{CS2}} Questions},
  shorttitle = {The {{Canterbury QuestionBank}}},
  booktitle = {Proceedings of the {{ITiCSE}} Working Group Reports Conference on {{Innovation}} and Technology in Computer Science Education-Working Group Reports - {{ITiCSE}} -{{WGR}} '13},
  author = {Sanders, Kate and Spacco, Jaime and Ahmadzadeh, Marzieh and Clear, Tony and Edwards, Stephen H. and Goldweber, Mikey and Johnson, Chris and Lister, Raymond and McCartney, Robert and Patitsas, Elizabeth},
  year = {2013},
  pages = {33--52},
  publisher = {{ACM Press}},
  address = {{Canterbury, England, United Kingdom}},
  doi = {10.1145/2543882.2543885},
  urldate = {2020-06-22},
  abstract = {In this paper, we report on an ITiCSE-13 Working Group that developed a set of 654 multiple-choice questions on CS1 and CS2 topics, the Canterbury QuestionBank. We describe the questions, the metadata we investigated, and some preliminary investigations of possible research uses of the QuestionBank. The QuestionBank is publicly available as a repository for computing education instructors and researchers.},
  isbn = {978-1-4503-2665-0},
  langid = {english},
  keywords = {ForAndrea},
  file = {/Users/igormoreno/Zotero/storage/ASBK7WE4/Sanders et al - 2013 - The Canterbury QuestionBank.pdf}
}

@inproceedings{sandersChecklistsGradingObjectoriented2007,
  title = {Checklists for {{Grading Object-oriented CS1 Programs}}: {{Concepts}} and {{Misconceptions}}},
  shorttitle = {Checklists for {{Grading Object-oriented CS1 Programs}}},
  booktitle = {Proceedings of the 12th {{Annual SIGCSE Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Sanders, Kate and Thomas, Lynda},
  year = {2007},
  series = {{{ITiCSE}} '07},
  pages = {166--170},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1268784.1268834},
  urldate = {2019-10-30},
  abstract = {In this paper, we begin by considering object-oriented programming concepts and typical novice misconceptions as identified in the literature. We then present the results of a close examination of student programs, in an objects-first CS1 course, in which we find concrete evidence of students learning these concepts while also displaying some of these misconceptions. This leads to the development of two checklists that educators can use when designing or grading student programs.},
  isbn = {978-1-59593-610-3},
  keywords = {assessment,CS1,empirical research,misconceptions,object-oriented concepts},
  annotation = {00088},
  file = {/Users/igormoreno/Zotero/storage/2RA2CRIY/Sanders and Thomas - 2007 - Checklists for Grading Object-oriented CS1 Programs.pdf}
}

@inproceedings{sandersInferentialStatisticsComputing2019,
  title = {Inferential {{Statistics}} in {{Computing Education Research}}: {{A Methodological Review}}},
  shorttitle = {Inferential {{Statistics}} in {{Computing Education Research}}},
  booktitle = {Proceedings of the 2019 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Sanders, Kate and Sheard, Judy and Becker, Brett A. and Eckerdal, Anna and Hamouda, Sally and {Simon}},
  year = {2019},
  month = jul,
  pages = {177--185},
  publisher = {{ACM}},
  address = {{Toronto ON Canada}},
  doi = {10.1145/3291279.3339408},
  urldate = {2021-10-03},
  abstract = {The goal of most computing education research is to effect positive change in how computing is taught and learned. Statistical techniques are one important tool for achieving this goal. In this paper we report on an analysis of ICER papers that use inferential statistics. We present the most commonly used techniques; an overview of the techniques the ICER community has used over its first 14 years of papers, grouped according to the purpose of the technique; and a detailed analysis of three of the most commonly used techniques (t-test, chi-squared test, and Mann-Whitney-Wilcoxon). We identify common flaws in reporting and give examples of papers where statistics are reported well. In sum, the paper draws a picture of the use of inferential statistics by the ICER community. This picture is intended to help orient researchers who are new to the use of statistics in computing education research and to encourage reflection by the ICER community on how it uses statistics and how it can improve that use.},
  isbn = {978-1-4503-6185-9},
  langid = {english},
  keywords = {alphabet soup,empirical research,methodology,reporting,statistical significance,statistics},
  file = {/Users/igormoreno/Zotero/storage/9T8UU7DE/Sanders et al. - 2019 - Inferential Statistics in Computing Education Rese.pdf;/Users/igormoreno/Zotero/storage/UKPDWB44/Sanders et al - 2019 - Inferential Statistics in Computing Education Research.pdf}
}

@inproceedings{sandersMentalModelsRecursion2006,
  title = {Mental Models of Recursion Revisited},
  booktitle = {Proceedings of the 11th Annual {{SIGCSE}} Conference on {{Innovation}} and Technology in Computer Science Education},
  author = {Sanders, Ian and Galpin, Vashti and G{\"o}tschi, Tina},
  year = {2006},
  month = jun,
  series = {{{ITICSE}} '06},
  pages = {138--142},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1140124.1140162},
  urldate = {2020-10-04},
  abstract = {Students struggle to understand recursion and we need to find good ways to teach the concept. We believe that an understanding of the mental models of recursion that students develop will assist us in teaching them more effectively. In 2003 we reported on a study of the mental models our students developed. This paper discusses some changes that we made to our teaching in 2003 after that study. An analysis of the students' mental models in 2003, 2004 and 2005 shows that more students are developing the copies model of recursion which is always a viable model.},
  isbn = {978-1-59593-055-2},
  keywords = {mental models,recursion},
  file = {/Users/igormoreno/Zotero/storage/X9ZU8LMQ/Sanders et al. - 2006 - Mental models of recursion revisited.pdf;/Users/igormoreno/Zotero/storage/ZD5P6GB8/Sanders et al - 2006 - Mental models of recursion revisited.pdf;/Users/igormoreno/Zotero/storage/T8DLB9UW/1140124.html}
}

@inproceedings{sandersStudentsMentalModels2007,
  title = {Students' {{Mental Models}} of {{Recursion}} at {{Wits}}},
  booktitle = {{{ITiCSE}}},
  author = {Sanders, Ian and Galpin, Vashti},
  year = {2007},
  pages = {1},
  address = {{Dundee, Scotland, UK}},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/Y98YQIPG/Sanders and Galpin - 2007 - Students’ Mental Models of Recursion at Wits.pdf}
}

@inproceedings{sandersStudentUnderstandingObjectoriented2008,
  title = {Student {{Understanding}} of {{Object-oriented Programming As Expressed}} in {{Concept Maps}}},
  booktitle = {Proceedings of the 39th {{SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  author = {Sanders, Kate and Boustedt, Jonas and Eckerdal, Anna and McCartney, Robert and Mostr{\"o}m, Jan Erik and Thomas, Lynda and Zander, Carol},
  year = {2008},
  series = {{{SIGCSE}} '08},
  pages = {332--336},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1352135.1352251},
  urldate = {2018-10-22},
  abstract = {In this paper, we present the results of an experiment in which we sought to elicit students' understanding of object-oriented (OO) concepts using concept maps. Our analysis confirmed earlier research indicating that students do not have a firm grasp on the distinction between "class" and "instance." Unlike earlier research, we found that our students generally connect classes with both data and behavior. Students rarely included any mention of the hardware/software context of programs, their users, or their real-world domains. Students do mention inheritance, but not encapsulation or abstraction. And the picture they draw of OO is a static one: we found nothing that could be construed as referring to interaction among objects in a program. We then discuss the implications for teaching introductory OO programming.},
  isbn = {978-1-59593-799-5},
  keywords = {concept maps,cs1,empirical research,object-oriented},
  file = {/Users/igormoreno/Zotero/storage/B4CV6JLX/Sanders et al - 2008 - Student Understanding of Object-oriented Programming As Expressed in Concept.pdf}
}

@inproceedings{sandersThresholdConceptsComputing2016,
  title = {Threshold Concepts in Computing: Past, Present, and Future},
  shorttitle = {Threshold Concepts in Computing},
  booktitle = {Proceedings of the 16th {{Koli Calling International Conference}} on {{Computing Education Research}} - {{Koli Calling}} '16},
  author = {Sanders, Kate and McCartney, Robert},
  year = {2016},
  pages = {91--100},
  publisher = {{ACM Press}},
  address = {{Koli, Finland}},
  doi = {10.1145/2999541.2999546},
  urldate = {2020-06-22},
  abstract = {In this paper, we survey the work that has been done in threshold concepts in computing since they were first discussed in 2005: concepts that have been identified, methodologies used, and issues discussed. Based on this survey, we then identify some promising unexplored areas for future work.},
  isbn = {978-1-4503-4770-9},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/RWQL8MLX/Sanders and McCartney - 2016 - Threshold concepts in computing past, present, an.pdf}
}

@article{sandinNotChoosingMultiple1985,
  title = {On Not Choosing Multiple Choice},
  author = {Sandin, T. R.},
  year = {1985},
  month = apr,
  journal = {American Journal of Physics},
  volume = {53},
  number = {4},
  pages = {299--300},
  publisher = {{American Association of Physics Teachers}},
  issn = {0002-9505},
  doi = {10.1119/1.14149},
  urldate = {2021-05-04},
  file = {/Users/igormoreno/Zotero/storage/SBXT9QFS/Sandin - 1985 - On not choosing multiple choice.pdf;/Users/igormoreno/Zotero/storage/Z2Q6EG52/1.html}
}

@article{sangiorgiIntroductionBisimulationCoinduction,
  title = {An {{Introduction}} to {{Bisimulation}} and {{Coinduction}}},
  author = {Sangiorgi, Davide},
  pages = {136},
  langid = {english}
}

@book{sangiorgiIntroductionBisimulationCoinduction2011,
  title = {Introduction to {{Bisimulation}} and {{Coinduction}}},
  author = {Sangiorgi, Davide},
  year = {2011},
  publisher = {{Cambridge University Press}},
  address = {{Cambridge}},
  doi = {10.1017/CBO9780511777110},
  urldate = {2021-12-03},
  isbn = {978-0-511-77711-0},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/JN3HH3PV/Sangiorgi - 2011 - Introduction to Bisimulation and Coinduction.pdf;/Users/igormoreno/Zotero/storage/LH5ATLTL/Davide Sangiorgi - Introduction to Bisimulation and Coinduction-Cambridge University Press (2011).pdf;/Users/igormoreno/Zotero/storage/T89VJKET/Sangiorgi - An Introduction to Bisimulation and Coinduction.pdf}
}

@inproceedings{santistebanComparingTopicsCS2016,
  title = {Comparing {{Topics}} in {{CS Syllabus}} with {{Topics}} in {{CS Research}}},
  booktitle = {Proceedings of the 2016 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Santisteban, Julio and {Delgado-Castillo}, Danet},
  year = {2016},
  month = jul,
  series = {{{ITiCSE}} '16},
  pages = {360},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2899415.2925483},
  urldate = {2020-09-22},
  abstract = {This study quantifies and compares the computer security themes found in the ACM Computer Science curricula with the themes addressed in top-ranked computer security re- search conferences over the past six years. On the understanding that current research should help set the agenda for course coverage, we use a strategic diagram to compare the research topics with the curriculum topics and identify specific future directions for the ACM CS curriculum and for computer security courses.},
  isbn = {978-1-4503-4231-5},
  keywords = {educational performance indicators,quality assurance},
  annotation = {00001},
  file = {/Users/igormoreno/Zotero/storage/FGVTUE37/Santisteban and Delgado-Castillo - 2016 - Comparing Topics in CS Syllabus with Topics in CS Research.pdf}
}

@inproceedings{santosExperiencesBridgingFunctional2019,
  title = {Experiences in Bridging from Functional to Object-Oriented Programming},
  booktitle = {Proceedings of the 2019 {{ACM SIGPLAN Symposium}} on {{SPLASH-E}}  - {{SPLASH-E}} 2019},
  author = {Santos, Igor Moreno and Hauswirth, Matthias and Nystrom, Nathaniel},
  year = {2019},
  pages = {36--40},
  publisher = {{ACM Press}},
  address = {{Athens, Greece}},
  doi = {10.1145/3358711.3361628},
  urldate = {2020-06-22},
  abstract = {Understanding how students' prior knowledge affects their learning of new concepts is essential for effective teaching. The same learning activity, or the same explanation, may have very different effects on students with different prior knowledge.},
  isbn = {978-1-4503-6989-3},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/VV4ZD96A/Santos et al - 2019 - Experiences in bridging from functional to object-oriented programming.pdf}
}

@inproceedings{santosJaskGenerationQuestions2022,
  title = {Jask: {{Generation}} of {{Questions About Learners}}' {{Code}} in {{Java}}},
  shorttitle = {Jask},
  booktitle = {Proceedings of the 27th {{ACM Conference}} on on {{Innovation}} and {{Technology}} in {{Computer Science Education Vol}}. 1},
  author = {Santos, Andr{\'e} and Soares, Tiago and Garrido, Nuno and Lehtinen, Teemu},
  year = {2022},
  month = jul,
  pages = {117--123},
  publisher = {{ACM}},
  address = {{Dublin Ireland}},
  doi = {10.1145/3502718.3524761},
  urldate = {2022-07-18},
  abstract = {We present Jask, a system capable of generating questions about a learner's code written in Java. Given Java code as input, Jask provides a set of meaningful questions formulated in terms of the actual code (using its constructs and identifiers) and the corresponding correct answers. We integrated Jask in a web-based system where students submit their code (e.g., from lab exercises), answer questions about it, and obtain immediate formative feedback with the correct answers. An initial study involving 123 distinct introductory programming students providing 2274 answers revealed that questions pertaining to program dynamics tend to register low scores, possibly evidencing fragile comprehension of programming constructs. Participants were surveyed, revealing a positive view towards the usefulness of Jask, especially with respect to consolidating terminology.},
  isbn = {978-1-4503-9201-3},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/67ATUAZG/Santos et al. - 2022 - Jask Generation of Questions About Learners' Code.pdf}
}

@inproceedings{sarsaAutomaticGenerationProgramming2022,
  title = {Automatic {{Generation}} of {{Programming Exercises}} and {{Code Explanations Using Large Language Models}}},
  booktitle = {Proceedings of the 2022 {{ACM Conference}} on {{International Computing Education Research V}}.1},
  author = {Sarsa, Sami and Denny, Paul and Hellas, Arto and Leinonen, Juho},
  year = {2022},
  month = aug,
  pages = {27--43},
  publisher = {{ACM}},
  address = {{Lugano and Virtual Event Switzerland}},
  doi = {10.1145/3501385.3543957},
  urldate = {2022-10-17},
  abstract = {This article explores the natural language generation capabilities of large language models with application to the production of two types of learning resources common in programming courses. Using OpenAI Codex as the large language model, we create programming exercises (including sample solutions and test cases) and code explanations, assessing these qualitatively and quantitatively. Our results suggest that the majority of the automatically generated content is both novel and sensible, and in some cases ready to use as is. When creating exercises we find that it is remarkably easy to influence both the programming concepts and the contextual themes they contain, simply by supplying keywords as input to the model. Our analysis suggests that there is significant value in massive generative machine learning models as a tool for instructors, although there remains a need for some oversight to ensure the quality of the generated content before it is delivered to students. We further discuss the implications of OpenAI Codex and similar tools for introductory programming education and highlight future research streams that have the potential to improve the quality of the educational experience for both teachers and students alike.},
  isbn = {978-1-4503-9194-8},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/6XLBZJHQ/Sarsa et al. - 2022 - Automatic Generation of Programming Exercises and .pdf}
}

@inproceedings{satratzemiSystemProgramVisualization2001,
  title = {A System for Program Visualization and Problem-Solving Path Assessment of Novice Programmers},
  booktitle = {{{ITiCSE}}},
  author = {Satratzemi, Maria and Dagdilelis, Vassilios and Evagelidis, Georgios},
  year = {2001},
  pages = {4},
  abstract = {This paper describes an educational programming environment, called AnimPascal. AnimPascal is a program animator that incorporates the ability to record problem-solving paths followed by students. The aim of AnimPascal is to help students understand the phases of developing, verifying, debugging, and executing a program. Also, by recording the different versions of student programs, it can help teachers discover student conceptions about programming. In this paper we describe how our system works and present some empirical results concerning student conceptions when trying to solve a problem of algorithmic or programming nature. Finally, we present our plans for further extensions to our software.},
  langid = {english},
  keywords = {To Read},
  file = {/Users/igormoreno/Zotero/storage/96Y6IMP6/Satratzemi et al - 2001 - A system for program visualization and problem-solving path assessment of.pdf}
}

@inproceedings{sauroMethodStandardizeUsability2005,
  title = {A Method to Standardize Usability Metrics into a Single Score},
  booktitle = {Proceedings of the {{SIGCHI Conference}} on {{Human Factors}} in {{Computing Systems}}},
  author = {Sauro, Jeff and Kindlund, Erika},
  year = {2005},
  month = apr,
  series = {{{CHI}} '05},
  pages = {401--409},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1054972.1055028},
  urldate = {2020-11-19},
  abstract = {Current methods to represent system or task usability in a single metric do not include all the ANSI and ISO defined usability aspects: effectiveness, efficiency \& satisfaction. We propose a method to simplify all the ANSI and ISO aspects of usability into a single, standardized and summated usability metric (SUM). In four data sets, totaling 1860 task observations, we show that these aspects of usability are correlated and equally weighted and present a quantitative model for usability. Using standardization techniques from Six Sigma, we propose a scalable process for standardizing disparate usability metrics and show how Principal Components Analysis can be used to establish appropriate weighting for a summated model. SUM provides one continuous variable for summative usability evaluations that can be used in regression analysis, hypothesis testing and usability reporting.},
  isbn = {978-1-58113-998-3},
  keywords = {measurement,principal components analysis,six sigma,standardization,usability},
  annotation = {00376},
  file = {/Users/igormoreno/Zotero/storage/X5JXRRSL/Sauro and Kindlund - 2005 - A method to standardize usability metrics into a s.pdf}
}

@book{sauroQuantifyingUserExperience2012,
  title = {Quantifying the User Experience: Practical Statistics for User Research},
  shorttitle = {Quantifying the User Experience},
  author = {Sauro, Jeff and Lewis, James R.},
  year = {2012},
  publisher = {{Elsevier/Morgan Kaufmann}},
  address = {{Amsterdam ; Waltham, MA}},
  abstract = {"The primary purpose of this book is to provide a statistical resource for those who measure the behavior and attitudes of people as they interact with interfaces. The focus is on methods applicable to practical user research, based on our experience, investigations, and reviews of the latest statistical literature"--},
  isbn = {978-0-12-384968-7},
  langid = {english},
  lccn = {QA76.9.U83 S33 2012},
  keywords = {Testing Statistical methods,User interfaces (Computer systems)},
  annotation = {00921},
  file = {/Users/igormoreno/Zotero/storage/4AQCYFWX/Sauro and Lewis - 2012 - Quantifying the user experience practical statist.pdf}
}

@book{savitchAbsoluteJava2015,
  title = {Absolute {{Java}}},
  author = {Savitch, Walter and Mock, Kenrick},
  year = {2015},
  month = may,
  edition = {6th edition},
  publisher = {{Pearson}},
  address = {{Boston}},
  isbn = {978-0-13-404167-4},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/JNL9GQZN/Walter Savitch, Kenrick Mock - Absolute Java (Global Edition)-Pearson (2015).pdf}
}

@book{sawyerCambridgeHandbookLearning2014,
  title = {The {{Cambridge Handbook}} of the {{Learning Sciences}}},
  editor = {Sawyer, R. Keith},
  year = {2014},
  series = {Cambridge {{Handbooks}} in {{Psychology}}},
  edition = {2},
  publisher = {{Cambridge University Press}},
  address = {{Cambridge}},
  doi = {10.1017/CBO9781139519526},
  urldate = {2020-11-06},
  abstract = {The interdisciplinary field of the learning sciences encompasses educational psychology, cognitive science, computer science, and anthropology, among other disciplines. The Cambridge Handbook of the Learning Sciences is the definitive introduction to this innovative approach to teaching, learning, and educational technology. This dramatically revised second edition incorporates the latest research in the field, includes twenty new chapters on emerging areas of interest, and features contributors who reflect the increasingly international nature of the learning sciences. The authors address the best ways to design educational software, prepare effective teachers, organize classrooms, and use the internet to enhance student learning. They illustrate the importance of creating productive learning environments both inside and outside school, including after-school clubs, libraries, museums, and online learning environments. Accessible and engaging, the Handbook has proven to be an essential resource for graduate students, researchers, teachers, administrators, consultants, educational technology designers, and policy makers on a global scale.},
  isbn = {978-1-107-03325-2},
  annotation = {01757},
  file = {/Users/igormoreno/Zotero/storage/2PQWY2AC/Sawyer - 2014 - The Cambridge Handbook of the Learning Sciences.pdf;/Users/igormoreno/Zotero/storage/EMJZX3SI/2E4224681267E61DBCE9B27630ED17BA.html}
}

@article{scaifeExternalCognitionHow1996,
  title = {External Cognition: How Do Graphical Representations Work?},
  shorttitle = {External Cognition},
  author = {Scaife, Mike and Rogers, Yvonne},
  year = {1996},
  month = aug,
  journal = {International Journal of Human-Computer Studies},
  volume = {45},
  number = {2},
  pages = {185--213},
  issn = {1071-5819},
  doi = {10.1006/ijhc.1996.0048},
  urldate = {2018-12-02},
  abstract = {Advances in graphical technology have now made it possible for us to interact with information in innovative ways, most notably by exploring multimedia environments and by manipulating three-dimensional virtual worlds. Many benefits have been claimed for this new kind of interactivity, a general assumption being that learning and cognitive processing are facilitated. We point out, however, that little is known about the cognitive value ofanygraphical representations, be they good old-fashioned (e.g. diagrams) or more advanced (e.g. animations, multimedia, virtual reality). In our paper, we critique the disparate literature on graphical representations, focusing on four representative studies. Our analysis reveals a fragmented and poorly understood account of how graphical representations work, exposing a number of assumptions and fallacies. As an alternative we propose a new agenda for graphical representation research. This builds on the nascent theoretical approach within cognitive science that analyses the role played by external representations in relation to internal mental ones. We outline some of the central properties of this relationship that are necessary for the processing of graphical representations. Finally, we consider how this analysis can inform the selection and design of both traditional and advanced forms of graphical technology.},
  file = {/Users/igormoreno/Zotero/storage/SWSDMHGI/Scaife and Rogers - 1996 - External cognition how do graphical representatio.pdf;/Users/igormoreno/Zotero/storage/4ZELWSNR/S1071581996900488.html}
}

@incollection{scapinExplorationTeachersPerspective2019,
  title = {An {{Exploration}} of {{Teachers}}' {{Perspective About}} the {{Learning}} of {{Iteration-Control Constructs}}},
  booktitle = {Informatics in {{Schools}}. {{New Ideas}} in {{School Informatics}}},
  author = {Scapin, Emanuele and Mirolo, Claudio},
  editor = {Pozdniakov, Sergei N. and Dagien{\.e}, Valentina},
  year = {2019},
  volume = {11913},
  pages = {15--27},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-030-33759-9_2},
  urldate = {2020-06-22},
  abstract = {A number of studies report about students' difficulties with basic flow-control constructs, and specifically with iteration. Although such issues are less explored in the context of pre-tertiary education, this seems to be especially the case for high-school programming learning, where the difficulties concern both the ``mechanical'' features of the notional machine as well as the logical aspects connected with the constructs, ranging from the implications of loop conditions to a more abstract grasp of the underlying algorithms.},
  isbn = {978-3-030-33758-2 978-3-030-33759-9},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/NQ7D456R/Scapin and Mirolo - 2019 - An Exploration of Teachers’ Perspective About the Learning of Iteration-Control.pdf}
}

@article{schalkApproachesFosterTransfer2016,
  title = {Approaches to {{Foster Transfer}} of {{Formal Principles}}: {{Which Route}} to {{Take}}?},
  shorttitle = {Approaches to {{Foster Transfer}} of {{Formal Principles}}},
  author = {Schalk, Lennart and Saalbach, Henrik and Stern, Elsbeth},
  editor = {De Smedt, Bert},
  year = {2016},
  month = feb,
  journal = {PLOS ONE},
  volume = {11},
  number = {2},
  pages = {e0148787},
  issn = {1932-6203},
  doi = {10.1371/journal.pone.0148787},
  urldate = {2018-10-02},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/H8EHGCWX/Schalk et al - 2016 - Approaches to Foster Transfer of Formal Principles.pdf}
}

@article{schalkRelationalQuantitativeReasoning2016,
  title = {Relational Quantitative Reasoning in Kindergarten Predicts Mathematical Achievement in Third Grade},
  author = {Schalk, Lennart and Saalbach, Henrik and Grabner, Roland H. and Stern, Elsbeth},
  year = {2016},
  month = aug,
  journal = {Journal of Numerical Cognition},
  volume = {2},
  number = {2},
  pages = {77--90},
  issn = {2363-8761},
  doi = {10.5964/jnc.v2i2.29},
  urldate = {2018-10-02},
  abstract = {Tremendous variation in elementary school children's mathematical achievement can partly be traced back to differences in early domain-specific quantitative competencies. While previous research mainly focused on numerical magnitude representation and counting, we tested the long-term effects of relational quantitative reasoning. Before children (N = 51) entered school (i.e. at age 5-6), we assessed this competence with a test that required no knowledge about Arabic numerals. Two and a half years later, when children were in third grade of elementary school, we gauged mathematical achievement, general reasoning ability, and reading skills. A multiple regression analysis with mathematical achievement as outcome variable revealed a small but unique impact of children's relational quantitative reasoning in kindergarten on their later mathematical achievement after controlling for general reasoning and reading abilities. Thus, a considerable amount of individual differences in mathematics achievement in elementary school results from differences in early relational quantity understanding that emerge before systematic instruction starts.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/Q7VKCW4J/Schalk et al - 2016 - Relational quantitative reasoning in kindergarten predicts mathematical.pdf}
}

@article{schankConceptualDependencyTheory1972,
  title = {Conceptual Dependency: {{A}} Theory of Natural Language Understanding},
  shorttitle = {Conceptual Dependency},
  author = {Schank, Roger C.},
  year = {1972},
  month = oct,
  journal = {Cognitive Psychology},
  volume = {3},
  number = {4},
  pages = {552--631},
  issn = {0010-0285},
  doi = {10.1016/0010-0285(72)90022-9},
  urldate = {2018-12-02},
  file = {/Users/igormoreno/Zotero/storage/WE7PRUG7/Schank - 1972 - Conceptual dependency A theory of natural languag.pdf;/Users/igormoreno/Zotero/storage/V5TGMM93/0010028572900229.html}
}

@phdthesis{schanzerAlgebraicFunctionsComputer2015,
  title = {Algebraic Functions, Computer Programming, and the Challenge of Transfer},
  author = {Schanzer, Emmanuel Tanenbaum},
  year = {2015},
  file = {/Users/igormoreno/Zotero/storage/2RS68RGX/Schanzer - 2015 - Algebraic functions, computer programming, and the.pdf;/Users/igormoreno/Zotero/storage/8G8HLM4M/16461037.html}
}

@inproceedings{schanzerBootstrapGoingProgramming2013,
  title = {Bootstrap: {{Going}} beyond Programming in after-School Computer Science},
  shorttitle = {Bootstrap},
  booktitle = {{{SPLASH}} Education Symposium},
  author = {Schanzer, Emmanuel and Fisler, Kathi and Krishnamurthi, Shriram},
  year = {2013},
  file = {/Users/igormoreno/Zotero/storage/IXX2JZDP/Schanzer et al. - 2013 - Bootstrap Going beyond programming in after-schoo.pdf}
}

@inproceedings{schanzerCreativityCustomizationOwnership2018,
  title = {Creativity, {{Customization}}, and {{Ownership}}: {{Game Design}} in {{Bootstrap}}: {{Algebra}}},
  shorttitle = {Creativity, {{Customization}}, and {{Ownership}}},
  booktitle = {Proceedings of the 49th {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Schanzer, Emmanuel and Krishnamurthi, Shriram and Fisler, Kathi},
  year = {2018},
  month = feb,
  pages = {161--166},
  publisher = {{ACM}},
  address = {{Baltimore Maryland USA}},
  doi = {10.1145/3159450.3159471},
  urldate = {2023-04-24},
  isbn = {978-1-4503-5103-4},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/ZBFVLQAC/Schanzer et al. - 2018 - Creativity, Customization, and Ownership Game Des.pdf}
}

@inproceedings{schanzerTransferringSkillsSolving2015,
  title = {Transferring {{Skills}} at {{Solving Word Problems}} from {{Computing}} to {{Algebra Through Bootstrap}}},
  booktitle = {Proceedings of the 46th {{ACM Technical Symposium}} on {{Computer Science Education}} - {{SIGCSE}} '15},
  author = {Schanzer, Emmanuel and Fisler, Kathi and Krishnamurthi, Shriram and Felleisen, Matthias},
  year = {2015},
  pages = {616--621},
  publisher = {{ACM Press}},
  address = {{Kansas City, Missouri, USA}},
  doi = {10.1145/2676723.2677238},
  urldate = {2018-11-30},
  abstract = {Many educators have tried to leverage computing or programming to help improve students' achievement in mathematics. However, several hopes of performance gains\textemdash particularly in algebra\textemdash have come up short. In part, these e{$\carriagereturn$}orts fail to align the computing and mathematical concepts at the level of detail typically required to achieve transfer of learning. This paper describes Bootstrap, an earlyprogramming curriculum that is designed to teach key algebra topics as students build their own videogames. We discuss the curriculum, explain how it aligns with algebra, and present initial data showing student performance gains on standard algebra problems after completing Bootstrap.},
  isbn = {978-1-4503-2966-8},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/RBLEGZRC/Schanzer et al - 2015 - Transferring Skills at Solving Word Problems from Computing to Algebra Through.pdf}
}

@article{schauerFirstCourseComputer1991,
  title = {A First Course in Computer Science at the {{University}} of {{Zurich}}},
  author = {Schauer, Helmut},
  year = {1991},
  month = jan,
  journal = {Education and Computing},
  volume = {7},
  number = {1-2},
  pages = {87--95},
  issn = {01679287},
  doi = {10.1016/S0167-9287(05)80084-6},
  urldate = {2018-11-06},
  abstract = {After sketching the basic concepts of informatics, a schedule is presented that allows the teaching of these concepts using current technology. Throughout the course, the usage of formalized notations for the specification and the solution of problems is emphasized. The work in the computer labs includes applications of standard software as well as problem solving using HyperCard and Object-Pascal. Even x\textasciitilde ithinexperienced students, object-oriented programming has proved to be a perfect means for design and implementation.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/J5B3D95A/Schauer - 1991 - A first course in computer science at the University of Zurich.pdf}
}

@article{scheffelWidgetWidgetWall2017,
  title = {Widget, {{Widget}} on the {{Wall}}, {{Am I Performing Well}} at {{All}}?},
  author = {Scheffel, M. and Drachsler, H. and de Kraker, J. and Kreijns, K. and Slootmaker, A. and Specht, M.},
  year = {2017},
  month = jan,
  journal = {IEEE Transactions on Learning Technologies},
  volume = {10},
  number = {1},
  pages = {42--52},
  doi = {10.1109/TLT.2016.2622268},
  abstract = {In collaborative learning environments, students work together on assignments in virtual teams and depend on each other's contribution to achieve their learning objectives. The online learning environment, however, may not only facilitate but also hamper group communication, coordination, and collaboration. Group awareness widgets that visualize information about the different group members based on information collected from the individuals can foster awareness and reflection processes within the group. In this paper, we present a formative data study about the predictive power of several indicators of an awareness widget based on automatically logged user data from an online learning environment. In order to test whether the information visualized by the widget is in line with the study outcomes, we instantiated the widget indicators with data from four previous runs of the European Virtual Seminar on Sustainable Development (EVS). We analyzed whether the tutor gradings in these previous years correlated with the students' scores calculated for the widget indicators. Furthermore, we tested the predictive power of the widget indicators at various points in time with respect to the final grades of the students. The results of our analysis show that the grades and widget indicator scores are significantly and positively correlated, which provides a useful empirical basis for the development of guidelines for students and tutors on how to interpret the widget's visualizations in live runs.},
  keywords = {collaborative learning environment,Collaborative work,computer aided instruction,correlation analysis,data visualisation,Data visualization,Europe,group awareness,group awareness widget,information visualization,Learning analytics,online learning environment,regression analysis,Seminars,Virtual groups,visualization,widget indicator},
  file = {/Users/igormoreno/Zotero/storage/TY4TXAV7/Scheffel et al - 2017 - Widget, Widget on the Wall, Am I Performing Well at All.pdf;/Users/igormoreno/Zotero/storage/TPSPQTYL/7723865.html}
}

@article{scheiterImpactLearnerCharacteristics2009,
  title = {The Impact of Learner Characteristics on Information Utilization Strategies, Cognitive Load Experienced, and Performance in Hypermedia Learning},
  author = {Scheiter, Katharina and Gerjets, Peter and Vollmann, Brigitte and Catrambone, Richard},
  year = {2009},
  month = oct,
  journal = {Learning and Instruction},
  series = {Cognitive Load in Interactive Knowledge Construction},
  volume = {19},
  number = {5},
  pages = {387--401},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2009.02.004},
  urldate = {2018-11-06},
  abstract = {Against the background of an adaptation of Cognitive Load Theory to learner-controlled settings we investigated the impact of learner characteristics on information utilization strategies, cognitive load, and learning outcomes in a hypermedia environment. Based on the data of 79 students, five clusters of students were identified according to their learner characteristics by means of a cluster analysis. Further analyses showed that learners with more favorable characteristics (i.e., higher prior knowledge, more complex epistemological beliefs, more positive attitudes towards mathematics, better cognitive and metacognitive strategy use) tended to show a more adaptive example utilization behavior, reported less cognitive load, and solved more problems correctly than learners with less favorable characteristics.},
  keywords = {Cognitive Load Theory,Hypermedia,Learner characteristics,Learner control,Logfile analyses,Problem solving,Strategies},
  file = {/Users/igormoreno/Zotero/storage/FA5IIKGH/Scheiter et al - 2009 - The impact of learner characteristics on information utilization strategies,.pdf;/Users/igormoreno/Zotero/storage/HVMITC5G/S0959475209000164.html}
}

@incollection{scheutzComputationPhilosophicalIssues2006,
  title = {Computation, {{Philosophical Issues}} About},
  booktitle = {Encyclopedia of {{Cognitive Science}}},
  author = {Scheutz, Matthias},
  editor = {Nadel, Lynn},
  year = {2006},
  month = jan,
  pages = {s00209},
  publisher = {{John Wiley \& Sons, Ltd}},
  address = {{Chichester}},
  doi = {10.1002/0470018860.s00209},
  urldate = {2022-05-28},
  abstract = {Computation' is a cluster concept and has been characterized in many different ways (e.g. `the execution of algorithms'). It underwrites philosophical analyses of what can be done in principle by a mechanism, and is intrinsically connected to the idea of manipulating symbols or representations by formal rules.},
  isbn = {978-0-470-01619-0 978-0-470-01886-6},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/V3ZHSHJU/Scheutz - 2006 - Computation, Philosophical Issues about.pdf}
}

@article{schez-sobrinoIntelligentTutoringSystem2020,
  title = {An {{Intelligent Tutoring System}} to {{Facilitate}} the {{Learning}} of {{Programming}} through the {{Usage}} of {{Dynamic Graphic Visualizations}}},
  author = {{Schez-Sobrino}, Santiago and {Gmez-Portes}, Cristian and Vallejo, David and {Glez-Morcillo}, Carlos and Redondo, Miguel {\'A}.},
  year = {2020},
  month = feb,
  journal = {Applied Sciences},
  volume = {10},
  number = {4},
  pages = {1518},
  issn = {2076-3417},
  doi = {10.3390/app10041518},
  urldate = {2021-05-23},
  abstract = {The learning of programming is a field of research with relevant studies and publications for more than 25 years. Since its inception, it has been shown that its difficulty lies in the high level of abstraction required to understand certain programming concepts. However, this level can be reduced by using tools and graphic representations that motivate students and facilitate their understanding, associating real-world elements with specific programming concepts. Thus, this paper proposes the use of an intelligent tutoring system (ITS) that helps during the learning of programming by using a notation based on a metaphor of roads and traffic signs represented by 3D graphics in an augmented reality (AR) environment. These graphic visualizations can be generated automatically from the source code of the programs thanks to the modular and scalable design of the system. Students can use them by leveraging the available feedback system, and teachers can also use them in order to explain programming concepts during the classes. This work highlights the flexibility and extensibility of the proposal through its application in different use cases that we have selected as examples to show how the system could be exploited in a multitude of real learning scenarios.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/W3M5QNN7/Schez-Sobrino et al. - 2020 - An Intelligent Tutoring System to Facilitate the L.pdf}
}

@article{schiffDoesComplexityMatter2014,
  title = {Does Complexity Matter? {{Meta-analysis}} of Learner Performance in Artificial Grammar Tasks},
  shorttitle = {Does Complexity Matter?},
  author = {Schiff, Rachel and Katan, Pesia},
  year = {2014},
  month = sep,
  journal = {Frontiers in Psychology},
  volume = {5},
  pages = {1084},
  issn = {1664-1078},
  doi = {10.3389/fpsyg.2014.01084},
  urldate = {2021-10-10},
  abstract = {Complexity has been shown to affect performance on artificial grammar learning (AGL) tasks (categorization of test items as grammatical/ungrammatical according to the implicitly trained grammar rules). However, previously published AGL experiments did not utilize consistent measures to investigate the comprehensive effect of grammar complexity on task performance. The present study focused on computerizing Bollt and Jones's () technique of calculating topological entropy (TE), a quantitative measure of AGL charts' complexity, with the aim of examining associations between grammar systems' TE and learners' AGL task performance. We surveyed the literature and identified 56 previous AGL experiments based on 10 different grammars that met the sampling criteria. Using the automated matrix-lift-action method, we assigned a TE value for each of these 10 previously used AGL systems and examined its correlation with learners' task performance. The meta-regression analysis showed a significant correlation, demonstrating that the complexity effect transcended the different settings and conditions in which the categorization task was performed. The results reinforced the importance of using this new automated tool to uniformly measure grammar systems' complexity when experimenting with and evaluating the findings of AGL studies.},
  pmcid = {PMC4174743},
  pmid = {25309495},
  file = {/Users/igormoreno/Zotero/storage/8BEZIQ59/Schiff and Katan - 2014 - Does complexity matter.pdf}
}

@article{schleinschokDrawingTasksImprove2017,
  title = {Do Drawing Tasks Improve Monitoring and Control during Learning from Text?},
  author = {Schleinschok, Katrin and Eitel, Alexander and Scheiter, Katharina},
  year = {2017},
  month = oct,
  journal = {Learning and Instruction},
  series = {Bridging {{Cognitive Load}} and {{Self-Regulated Learning Research}}},
  volume = {51},
  pages = {10--25},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2017.02.002},
  urldate = {2018-11-06},
  abstract = {In two experiments it was investigated how drawing as a monitoring task affects self-regulated learning and cognitive load. To this end, participants (Exp. 1: N~=~73, Exp. 2: N~=~69) were randomly assigned to one of two conditions. In the experimental condition, students were asked to read an expository text on the formation of polar lights consisting of five paragraphs, whereby, after each paragraph, they had to create a drawing of the text's content. In the control condition, students read the same text, but performed no drawing task. In both conditions, students had to give judgments of learning (JoLs) after each paragraph and after reading the whole text as well as rate their cognitive load. Then, they were asked to select paragraphs for restudy. In Experiment 1, participants continued with an assessment of their learning outcomes immediately after their restudy selection, whereas in Experiment 2 they were first given the opportunity to actually restudy the selected paragraphs before working on the posttest. Results of both experiments indicate that JoLs rather than cognitive load predicted posttest performance. Moreover, students in the drawing condition compared with the control condition exhibited more accurate (relative) monitoring in Experiment 1 in that their JoLs were more strongly related to performance. Moreover, JoLs predicted students' restudy decisions in both experiments; however, this effect was by-and-large independent of whether they had to draw. Overall, results hint towards the potential of drawing to support metacognitive monitoring.},
  keywords = {Cognitive load,Drawing,Learning from text,Metacognition,Monitoring,Self-regulated learning},
  file = {/Users/igormoreno/Zotero/storage/RHYZ9EBW/Schleinschok et al - 2017 - Do drawing tasks improve monitoring and control during learning from text.pdf;/Users/igormoreno/Zotero/storage/VUJLJYRK/Schleinschok et al - 2017 - Do drawing tasks improve monitoring and control during learning from text.pdf;/Users/igormoreno/Zotero/storage/5USQWQGS/S0959475217300774.html;/Users/igormoreno/Zotero/storage/XI6S6KEU/S0959475217300774.html}
}

@article{schmidhuberLowComplexityArt1997,
  title = {Low-{{Complexity Art}}},
  author = {Schmidhuber, Jurgen},
  year = {1997},
  journal = {Leonardo},
  volume = {30},
  number = {2},
  eprint = {1576418},
  eprinttype = {jstor},
  pages = {97},
  issn = {0024094X},
  doi = {10.2307/1576418},
  urldate = {2022-12-30},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/95FBEJ85/Schmidhuber - 1997 - Low-Complexity Art.pdf}
}

@article{schmidt-weigandRoleSpatialDescriptions2011,
  title = {The Role of Spatial Descriptions in Learning from Multimedia},
  author = {{Schmidt-Weigand}, Florian and Scheiter, Katharina},
  year = {2011},
  month = jan,
  journal = {Computers in Human Behavior},
  series = {Current {{Research Topics}} in {{Cognitive Load Theory}}},
  volume = {27},
  number = {1},
  pages = {22--28},
  issn = {0747-5632},
  doi = {10.1016/j.chb.2010.05.007},
  urldate = {2018-11-06},
  abstract = {In the reported experiment we investigated how spatial information conveyed in an expository text influenced multimedia learning. It was based on a 2\texttimes 2-design with the degree of spatial information given in the text (high vs. low spatial text) and the presentation format (written text-only vs. written text+animation) as between-subjects factors. As dependent variables learning outcomes as well as self-reported cognitive load were assessed. The results revealed that there was a multimedia effect with regard to learning outcomes only for low spatial text, but not for high spatial text. Moreover, the cognitive load measures showed an overall multimedia effect irrespective of the degree of spatial information conveyed by the text (i.e., higher cognitive load ratings in the text-only conditions). These results can be explained as a special instance of the redundancy effect as well as a consequence of processing interference within visuo-spatial working memory.},
  keywords = {Animation,Conjoint retention,Multimedia,Redundancy,Spatial information,Working memory},
  file = {/Users/igormoreno/Zotero/storage/H3S585EC/Schmidt-Weigand and Scheiter - 2011 - The role of spatial descriptions in learning from multimedia.pdf;/Users/igormoreno/Zotero/storage/R4YW55YI/S0747563210001445.html}
}

@inproceedings{schmolitzkyGuessMyObject2014,
  title = {Guess My Object: An 'objects First' Game on Objects' Behavior and Implementation with Bluej},
  shorttitle = {Guess My Object},
  booktitle = {Proceedings of the 2014 Conference on {{Innovation}} \& Technology in Computer Science Education - {{ITiCSE}} '14},
  author = {Schmolitzky, Axel W. and G{\"o}ttel, Timo},
  year = {2014},
  pages = {219--224},
  publisher = {{ACM Press}},
  address = {{Uppsala, Sweden}},
  doi = {10.1145/2591708.2591725},
  urldate = {2020-06-22},
  abstract = {Introductory programming education following the Objects First approach introduces the concepts of object-oriented programming early on. Objects with state (fields) and behavior (methods) that offer services to their clients (via their public interface) and hide the way these services are implemented (in their implementation) are the building blocks of any larger object system. These basic properties of objects are so crucial for understanding object-oriented programming (and later on object-oriented design) that diverse approaches to teaching them should be offered. In this paper we introduce Guess My Object (GMO) as a new approach to getting in contact with objects early that can complement existing teaching approaches. In essence, GMO is a way of using BlueJ for an interactive round-based game, each consisting of two stages, behavior exploration and behavior implementation.},
  isbn = {978-1-4503-2833-3},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/WFEBUR9R/Schmolitzky and Göttel - 2014 - Guess my object an 'objects first' game on object.pdf}
}

@article{schnotzConstructionInterferenceLearning2003,
  title = {Construction and Interference in Learning from Multiple Representation},
  author = {Schnotz, Wolfgang and Bannert, Maria},
  year = {2003},
  month = apr,
  journal = {Learning and Instruction},
  series = {External and {{Internal Representations}} in {{Multimedia Learning}}},
  volume = {13},
  number = {2},
  pages = {141--156},
  issn = {0959-4752},
  doi = {10.1016/S0959-4752(02)00017-8},
  urldate = {2018-11-06},
  abstract = {This paper presents an integrated view of learning from verbal and pictorial representations. Learning from these representations is considered as a task oriented process of constructing multiple mental representations. Construction of these representations includes information selection and information organisation, parsing of symbol structures, mapping of analog structures as well as model construction and model inspection. Based on this theoretical view an experiment was conducted to analyse the effects of different kinds of multiple external representations on the structure of mental models. Sixty university students were randomly assigned to one of the three experimental conditions. The text-only group learned the subject matter with a hypertext, whereas the other two groups learned the subject matter with a hypermedium including this hypertext and different kinds of graphics. The findings indicate that the structure of graphics affects the structure of the mental model. They also indicate that presenting graphics is not always beneficial for the acquisition of knowledge. Whereas task-appropriate graphics may support learning, task-inappropriate graphics may interfere with mental model construction.},
  keywords = {Depictive representations,Descriptive representations,Interference with mental model construction,Mental models,Picture comprehension,Propositional representations,Support of mental model construction,Text comprehension,Visual images},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/S49WT9CF/Schnotz and Bannert - 2003 - Construction and interference in learning from multiple representation.pdf;/Users/igormoreno/Zotero/storage/MFW29EVR/S0959475202000178.html}
}

@article{schnotzExternalInternalRepresentations2003,
  title = {External and Internal Representations in Multimedia Learning},
  author = {Schnotz, Wolfgang and Lowe, Richard},
  year = {2003},
  month = apr,
  journal = {Learning and Instruction},
  series = {External and {{Internal Representations}} in {{Multimedia Learning}}},
  volume = {13},
  number = {2},
  pages = {117--123},
  issn = {0959-4752},
  doi = {10.1016/S0959-4752(02)00015-4},
  urldate = {2018-11-06},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/NNC2AV3U/Schnotz and Lowe - 2003 - External and internal representations in multimedia learning.pdf;/Users/igormoreno/Zotero/storage/CCE3WU4P/S0959475202000154.html}
}

@inproceedings{scholtzMentalModelsRecursion2010,
  title = {Mental Models of Recursion: Investigating Students' Understanding of Recursion},
  shorttitle = {Mental Models of Recursion},
  booktitle = {Proceedings of the Fifteenth Annual Conference on {{Innovation}} and Technology in Computer Science Education - {{ITiCSE}} '10},
  author = {Scholtz, Tamarisk Lurlyn and Sanders, Ian},
  year = {2010},
  pages = {103},
  publisher = {{ACM Press}},
  address = {{Bilkent, Ankara, Turkey}},
  doi = {10.1145/1822090.1822120},
  urldate = {2018-11-30},
  abstract = {Mental models of recursion provide some idea into a student's understanding of recursion. However there has been concern regarding whether viable trace mental models of recursion show students' true understanding of recursion. We have conducted an investigation to further examine the understanding of recursion of students with viable trace mental models. The investigation looked at students' understanding of the termination of a recursive function, their descriptive mental models and their ability to generate a recursive function. This research provides evidence to show that trace methods are essentially mechanical processes that can allow students with little understanding of recursion to correctly evaluate a recursive function but that students do not fully understand recursion and in particular have difficulties with the passive flow. Based on the results of the study, this paper discusses possible changes that can be made to our teaching in order to more effectively teach recursion to first year students.},
  isbn = {978-1-60558-729-5},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/V76CNACP/Scholtz and Sanders - 2010 - Mental models of recursion investigating students.pdf}
}

@article{schrawMetacognitiveTheories1995,
  title = {Metacognitive Theories},
  author = {Schraw, Gregory and Moshman, David},
  year = {1995},
  month = dec,
  journal = {Educational Psychology Review},
  volume = {7},
  number = {4},
  pages = {351--371},
  issn = {1573-336X},
  doi = {10.1007/BF02212307},
  urldate = {2018-11-09},
  abstract = {This paper proposes a framework for understanding people's theories about their own cognition. Metacognitive theories are defined broadly as systematic frameworks used to explain and direct cognition, metacognitive knowledge, and regulatory skills. We distinguish tacit, informal, and formal metacognitive theories and discuss critical differences among them using criteria borrowed from the developmental literature. We also consider the origin and development of these theories, as well as implications for educational research and practice.},
  langid = {english},
  keywords = {knowledge,metacognition,metacognitive theories,self-regulation,Strong},
  annotation = {01920},
  file = {/Users/igormoreno/Zotero/storage/WZSFH7TE/Schraw and Moshman - 1995 - Metacognitive theories.pdf}
}

@article{schroederStudyingConstructingConcept2018,
  ids = {schroederStudyingConstructingConcept2018a},
  title = {Studying and {{Constructing Concept Maps}}: A {{Meta-Analysis}}},
  shorttitle = {Studying and {{Constructing Concept Maps}}},
  author = {Schroeder, Noah L. and Nesbit, John C. and Anguiano, Carlos J. and Adesope, Olusola O.},
  year = {2018},
  month = jun,
  journal = {Educational Psychology Review},
  volume = {30},
  number = {2},
  pages = {431--455},
  issn = {1573-336X},
  doi = {10.1007/s10648-017-9403-9},
  urldate = {2018-11-09},
  abstract = {A concept map is a node-link diagram in which each node represents a concept and each link identifies the relationship between the two concepts it connects. We investigated how using concept maps influences learning by synthesizing the results of 142 independent effect sizes (n = 11,814). A random-effects model meta-analysis revealed that learning with concept and knowledge maps produced a moderate, statistically significant effect (g = 0.58, p {$<$} 0.001). A moderator analysis revealed that creating concept maps (g = 0.72, p {$<$} 0.001) was associated with greater benefit relative to respective comparison conditions than studying concept maps (g = 0.43, p {$<$} 0.001). Additional moderator analyses indicated learning with concept maps was superior to other instructional comparison conditions, and was effective across science, technology, engineering, and math (STEM) and non-STEM knowledge domains. Further moderator analyses, as well as implications for theory and practice, are provided.},
  langid = {english},
  keywords = {cmap,Concept map,kmap,Knowledge map,Meta-analysis,Strong,To Read},
  file = {/Users/igormoreno/Zotero/storage/WNZAGP3Y/Schroeder et al. - 2018 - Studying and Constructing Concept Maps a Meta-Ana.pdf;/Users/igormoreno/Zotero/storage/ZDDUJ6VJ/Schroeder et al - 2018 - Studying and Constructing Concept Maps.pdf}
}

@book{schubertDidaktikInformatik2011,
  title = {{Didaktik der Informatik}},
  author = {Schubert, Sigrid and Schwill, Andreas},
  year = {2011},
  month = mar,
  edition = {2. Aufl. 2011},
  publisher = {{Spektrum Akademischer Verlag}},
  address = {{Heidelberg}},
  abstract = {Wer Informatik unterrichten will, muss nicht nur das Fach beherrschen, sondern seine Kenntnisse und Freude am Fach auch Schulerinnen und Schulern vermitteln konnen. Dieses Buch hilft Ihnen dabei. Es bietet eine ausgewogene und praxisorientierte Gesamtdarstellung der Didaktik der Informatik. Nach der Klarung von Grundbegriffen der Informatik und ihrer Didaktik stellen die Autoren das verwendete Grundmodell fur Ziele, Inhalte und Lehrmethoden und die theoretische Fundierung des Informatikunterrichts vor. Hierauf aufbauend untersuchen sie eine Vielzahl von Informatikprinzipien im Hinblick auf Ihre Bedeutung fur die Informatikgrundausbildung. Den Themenkomplexen "Problemlosen in der Informatik" "Informatisches Modellieren und Konstruieren" "Objektorientierung" und "Informatiksysteme" sind jeweils eigene Kapitel gewidmet, in denen das didaktisch Machbare im Spannungsfeld von fachwissenschaftlich Wunschenswertem und bildungspolitisch Notwendigem diskutiert wird.Die Neuauflage enthalt die aktuellen Entwicklungen zur kompetenzorientierten Didaktik sowie deutliche Erweiterungen zur Vermittlung ausgewahlter Informatikinhalte, wie Vernetzung, Internet, Sprachen und Automaten. Neu sind ebenfalls ein Kapitel mit einem Zugang zur Vermittlung informatischer Inhalte, der allgemein als "unplugged" bezeichnet wird, und ein Kapitel "Unterrichtsmittel" Zwei Gastbeitrage zur Kompetenzentwicklung mit Informatiksystemen und zum Stellenwert von Kreativitat im Informatikunterricht vertiefen Perspektiven der Unterrichtspraxis.},
  isbn = {978-3-8274-2652-9},
  langid = {ngerman},
  annotation = {00250},
  file = {/Users/igormoreno/Zotero/storage/LLUMS753/Schubert and Schwill - 2011 - Didaktik der Informatik.pdf}
}

@incollection{schubotzVMEXTVisualizationTool2017,
  title = {{{VMEXT}}: {{A Visualization Tool}} for {{Mathematical Expression Trees}}},
  shorttitle = {{{VMEXT}}},
  booktitle = {Intelligent {{Computer Mathematics}}},
  author = {Schubotz, Moritz and Meuschke, Norman and Hepp, Thomas and Cohl, Howard S. and Gipp, Bela},
  editor = {Geuvers, Herman and England, Matthew and Hasan, Osman and Rabe, Florian and Teschke, Olaf},
  year = {2017},
  volume = {10383},
  pages = {340--355},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-62075-6_24},
  urldate = {2021-05-23},
  abstract = {Mathematical expressions can be represented as a tree consisting of terminal symbols, such as identifiers or numbers (leaf nodes), and functions or operators (non-leaf nodes). Expression trees are an important mechanism for storing and processing mathematical expressions as well as the most frequently used visualization of the structure of mathematical expressions. Typically, researchers and practitioners manually visualize expression trees using general-purpose tools. This approach is laborious, redundant, and error-prone. Manual visualizations represents a user's notion of what the markup of an expression should be, but not necessarily what the actual markup is. This paper presents VMEXT \textendash{} a free and open source tool to directly visualize expression trees from parallel MathML. VMEXT simultaneously visualizes the presentation elements and the semantic structure of mathematical expressions to enable users to quickly spot deficiencies in the Content MathML markup that does not affect the presentation of the expression. Identifying such discrepancies previously required reading the verbose and complex MathML markup. VMEXT also allows one to visualize similar and identical elements of two expressions. Visualizing expression similarity can support developers in designing retrieval approaches and enable improved interaction concepts for users of mathematical information retrieval systems. We demonstrate VMEXT's visualizations in two web-based applications. The first application presents the visualizations alone. The second application shows a possible integration of the visualizations in systems for mathematical knowledge management and mathematical information retrieval. The application converts LATEX input to parallel MathML, computes basic similarity measures for mathematical expressions, and visualizes the results using VMEXT.},
  isbn = {978-3-319-62074-9 978-3-319-62075-6},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/QBPMFR8B/Schubotz et al. - 2017 - VMEXT A Visualization Tool for Mathematical Expre.pdf}
}

@incollection{schubotzVMEXTVisualizationTool2017a,
  title = {{{VMEXT}}: {{A Visualization Tool}} for {{Mathematical Expression Trees}}},
  shorttitle = {{{VMEXT}}},
  booktitle = {Intelligent {{Computer Mathematics}}},
  author = {Schubotz, Moritz and Meuschke, Norman and Hepp, Thomas and Cohl, Howard S. and Gipp, Bela},
  editor = {Geuvers, Herman and England, Matthew and Hasan, Osman and Rabe, Florian and Teschke, Olaf},
  year = {2017},
  volume = {10383},
  pages = {340--355},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-62075-6_24},
  urldate = {2022-08-26},
  abstract = {Mathematical expressions can be represented as a tree consisting of terminal symbols, such as identifiers or numbers (leaf nodes), and functions or operators (non-leaf nodes). Expression trees are an important mechanism for storing and processing mathematical expressions as well as the most frequently used visualization of the structure of mathematical expressions. Typically, researchers and practitioners manually visualize expression trees using general-purpose tools. This approach is laborious, redundant, and error-prone. Manual visualizations represents a user's notion of what the markup of an expression should be, but not necessarily what the actual markup is. This paper presents VMEXT \textendash{} a free and open source tool to directly visualize expression trees from parallel MathML. VMEXT simultaneously visualizes the presentation elements and the semantic structure of mathematical expressions to enable users to quickly spot deficiencies in the Content MathML markup that does not affect the presentation of the expression. Identifying such discrepancies previously required reading the verbose and complex MathML markup. VMEXT also allows one to visualize similar and identical elements of two expressions. Visualizing expression similarity can support developers in designing retrieval approaches and enable improved interaction concepts for users of mathematical information retrieval systems. We demonstrate VMEXT's visualizations in two web-based applications. The first application presents the visualizations alone. The second application shows a possible integration of the visualizations in systems for mathematical knowledge management and mathematical information retrieval. The application converts LATEX input to parallel MathML, computes basic similarity measures for mathematical expressions, and visualizes the results using VMEXT.},
  isbn = {978-3-319-62074-9 978-3-319-62075-6},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/6RB6D7QE/Schubotz et al. - 2017 - VMEXT A Visualization Tool for Mathematical Expre.pdf}
}

@inproceedings{schulteBlockModelEducational2008,
  title = {Block {{Model}}: An Educational Model of Program Comprehension as a Tool for a Scholarly Approach to Teaching},
  shorttitle = {Block {{Model}}},
  booktitle = {Proceedings of the {{Fourth}} International {{Workshop}} on {{Computing Education Research}}},
  author = {Schulte, Carsten},
  year = {2008},
  month = sep,
  series = {{{ICER}} '08},
  pages = {149--160},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1404520.1404535},
  urldate = {2021-01-30},
  abstract = {In this paper, the Block Model, an educational model of program comprehension, is introduced. Its use for planning and analyzing lessons on algorithms is evaluated in a qualitative study with prospective computer science teachers. In addition, the background of the model, its use in computer science education research and for developing competence models is discussed.},
  isbn = {978-1-60558-216-0},
  keywords = {CS,CS ed research,educational model,pedagogy,program comprehension,teaching algorithms,teaching teacher students},
  annotation = {00076},
  file = {/Users/igormoreno/Zotero/storage/H23YCBQC/Schulte - 2008 - Block Model an educational model of program compr.pdf}
}

@inproceedings{schulteIntroductionProgramComprehension2010,
  title = {An Introduction to Program Comprehension for Computer Science Educators},
  booktitle = {Proceedings of the 2010 {{ITiCSE}} Working Group Reports on {{Working}} Group Reports - {{ITiCSE-WGR}} '10},
  author = {Schulte, Carsten and Clear, Tony and Taherkhani, Ahmad and Busjahn, Teresa and Paterson, James H.},
  year = {2010},
  pages = {65},
  publisher = {{ACM Press}},
  address = {{Ankara, Turkey}},
  doi = {10.1145/1971681.1971687},
  urldate = {2020-06-22},
  abstract = {The area of program comprehension comprises a vast body of literature, with numerous conflicting models having been proposed. Models are typically grounded in experimental studies mostly involving experienced programmers. The question of how to relate this material to the teaching and learning of programming for novices has proven challenging for many researchers.},
  isbn = {978-1-4503-0677-5},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/YG4NUTNT/Schulte et al - 2010 - An introduction to program comprehension for computer science educators.pdf}
}

@inproceedings{schulteReflectionsRoleProgramming2013,
  title = {Reflections on the Role of Programming in Primary and Secondary Computing Education},
  booktitle = {Proceedings of the 8th {{Workshop}} in {{Primary}} and {{Secondary Computing Education}} on - {{WiPSE}} '13},
  author = {Schulte, Carsten},
  year = {2013},
  pages = {17--24},
  publisher = {{ACM Press}},
  address = {{Aarhus, Denmark}},
  doi = {10.1145/2532748.2532754},
  urldate = {2020-06-22},
  abstract = {In this paper, we aim to discuss the role of programming as substantial part of the What and the How of teaching computing at school. In contrast to other approaches, we aim to do so from an outside perspective, which is based on a discussion of general goals of education at school.},
  isbn = {978-1-4503-2455-7},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/UNTDCRMR/Schulte - 2013 - Reflections on the role of programming in primary and secondary computing.pdf}
}

@inproceedings{schulteWhatTeachersTeach2006,
  title = {What Do Teachers Teach in Introductory Programming?},
  booktitle = {Proceedings of the 2006 International Workshop on {{Computing}} Education Research  - {{ICER}} '06},
  author = {Schulte, Carsten and Bennedsen, Jens},
  year = {2006},
  pages = {17},
  publisher = {{ACM Press}},
  address = {{Canterbury, United Kingdom}},
  doi = {10.1145/1151588.1151593},
  urldate = {2020-06-22},
  isbn = {978-1-59593-494-9},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/QWPVJ9LG/Schulte and Bennedsen - 2006 - What do teachers teach in introductory programming.pdf}
}

@book{schumacherSoftwareSolutions1994,
  title = {Software {{Solutions}} in {{C}}},
  author = {Schumacher, Dale},
  year = {1994},
  publisher = {{AP Professional}},
  abstract = {Software Solutions in C contains a diverse collection of flexible and portable solutions to common programming problems. These are tried and true implementations, which can be incorporated into any programs. This guide contains working C and C++ code, along with articles explaining the code. Each article focuses on a specific problem and its solution. The usage explanation of the working solutions should allow for quick implementation of these routines into existing applications. All of the design trade-offs involved in the implementation are explained thoroughly and, within the direct solutions, a wealth of tricks, tips and techniques are included.},
  googlebooks = {Lr\_VAAAACAAJ},
  isbn = {978-0-12-632360-3},
  langid = {english}
}

@article{schwambornCognitiveLoadInstructionally2011,
  title = {Cognitive Load and Instructionally Supported Learning with Provided and Learner-Generated Visualizations},
  author = {Schwamborn, Annett and Thillmann, Hubertina and Opfermann, Maria and Leutner, Detlev},
  year = {2011},
  month = jan,
  journal = {Computers in Human Behavior},
  series = {Current {{Research Topics}} in {{Cognitive Load Theory}}},
  volume = {27},
  number = {1},
  pages = {89--93},
  issn = {0747-5632},
  doi = {10.1016/j.chb.2010.05.028},
  urldate = {2018-11-06},
  abstract = {This study investigated, whether learning from science texts can be enhanced by providing learners with different forms of visualizations (pictures) in addition to text. One-hundred-two 9th and 10th graders read a computer-based text on chemical processes of washing and answered questions on cognitive load (mental effort, perceived difficulty) and comprehension (retention, transfer, drawing). Instruction varied according to a 2\texttimes 2-factorial design with `learner-generated pictures' (yes, no) and `provided pictures' (yes, no) as factors. Results indicate positive main effects of provided pictures on all three comprehension measures and negative main effects on both cognitive load measures. Additional analyses revealed a mediation effect of perceived difficulty on retention and transfer, that is learning with provided pictures decreased cognitive load and enhanced comprehension. Furthermore, results show a positive main effect of learner-generated pictures on drawing and mental effort, but no mediation effect. Taken together, computer-based learning with provided pictures enhances comprehension as it seems to promote active processing while reducing extraneous cognitive processing. Learners, generating pictures, however, seem to have less cognitive resources available for essential and generative processing, resulting in reduced comprehension. These results are in line with cognitive load theory, cognitive theories of multimedia learning, and generative theories of learning.},
  keywords = {Cognitive load,Generative processes,Multimedia learning,Reading comprehension},
  file = {/Users/igormoreno/Zotero/storage/3AGP8RYB/Schwamborn et al - 2011 - Cognitive load and instructionally supported learning with provided and.pdf;/Users/igormoreno/Zotero/storage/E2JTKQZW/S0747563210001688.html}
}

@article{schwanCognitiveBenefitsInteractive2004,
  title = {The Cognitive Benefits of Interactive Videos: Learning to Tie Nautical Knots},
  shorttitle = {The Cognitive Benefits of Interactive Videos},
  author = {Schwan, Stephan and Riempp, Roland},
  year = {2004},
  month = jun,
  journal = {Learning and Instruction},
  series = {Dynamic {{Visualisations}} and {{Learning}}},
  volume = {14},
  number = {3},
  pages = {293--305},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2004.06.005},
  urldate = {2018-11-06},
  abstract = {In contrast to their traditional, non-interactive counterparts, interactive dynamic visualisations allow users to adapt their form and content to their individual cognitive skills and needs. Provided that the interactive features allow for intuitive use without increasing cognitive load, interactive videos should therefore lead to more efficient forms of learning. This notion was tested in an experimental study, where participants learned to tie four nautical knots of different complexity by watching either non-interactive or interactive videos. The results show that in the interactive condition, participants used the interactive features like stopping, replaying, reversing or changing speed to adapt the pace of the video demonstration. This led to an uneven distribution of their attention and cognitive resources across the videos, which was more pronounced for the difficult knots. Consequently users of non-interactive video presentations, needed substantially more time than users of the interactive videos to acquire the necessary skills for tying the knots.},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/4SGFPRUX/Schwan and Riempp - 2004 - The cognitive benefits of interactive videos lear.pdf;/Users/igormoreno/Zotero/storage/XW2KLKGM/S0959475204000337.html}
}

@article{schwartzInventingPrepareFuture2004,
  title = {Inventing to {{Prepare}} for {{Future Learning}}: {{The Hidden Efficiency}} of {{Encouraging Original Student Production}} in {{Statistics Instruction}}},
  shorttitle = {Inventing to {{Prepare}} for {{Future Learning}}},
  author = {Schwartz, Daniel L. and Martin, Taylor},
  year = {2004},
  month = jun,
  journal = {Cognition and Instruction},
  volume = {22},
  number = {2},
  pages = {129--184},
  publisher = {{Routledge}},
  issn = {0737-0008},
  doi = {10.1207/s1532690xci2202_1},
  urldate = {2022-08-27},
  abstract = {Activities that promote student invention can appear inefficient, because students do not generate canonical solutions, and therefore the students may perform badly on standard assessments. Two studies on teaching descriptive statistics to 9th-grade students examined whether invention activities may prepare students to learn. Study 1 found that invention activities, when coupled with subsequent learning resources like lectures, led to strong gains in procedural skills, insight into formulas, and abilities to evaluate data from an argument. Additionally, an embedded assessment experiment crossed the factors of instructional method by type of transfer test, with 1 test including resources for learning and 1 not. A "tell-and-practice" instructional condition led to the same transfer results as an invention condition when there was no learning resource, but the invention condition did better than the tell-and-practice condition when there was a learning resource. This demonstrates the value of invention activities for future learning from resources, and the value of assessments that include opportunities to learn during a test. In Study 2, classroom teachers implemented the instruction and replicated the results. The studies demonstrate that intuitively compelling student-centered activities can be both pedagogically tractable and effective at preparing students to learn.},
  file = {/Users/igormoreno/Zotero/storage/ZJWYCEKQ/Schwartz and Martin - 2004 - Inventing to Prepare for Future Learning The Hidd.pdf}
}

@article{schwartzPracticingInventingContrasting2011,
  title = {Practicing versus Inventing with Contrasting Cases: {{The}} Effects of Telling First on Learning and Transfer},
  shorttitle = {Practicing versus Inventing with Contrasting Cases},
  author = {Schwartz, Daniel L. and Chase, Catherine C. and Oppezzo, Marily A. and Chin, Doris B.},
  year = {2011},
  journal = {Journal of Educational Psychology},
  volume = {103},
  number = {4},
  pages = {759--775},
  publisher = {{American Psychological Association}},
  address = {{US}},
  issn = {1939-2176},
  doi = {10.1037/a0025140},
  abstract = {Being told procedures and concepts before problem solving can inadvertently undermine the learning of deep structures in physics. If students do not learn the underlying structure of physical phenomena, they will exhibit poor transfer. Two studies on teaching physics to adolescents compared the effects of ``telling'' students before and after problem solving. In Experiment 1 (N = 128), students in a tell-and-practice condition were told the relevant concepts and formulas (e.g., density) before practicing on a set of contrasting cases for each lesson. Students in an invent-with-contrasting-cases (ICC) condition had to invent formulas using the same cases and were told only afterward. Both groups exhibited equal proficiency at using the formulas on word problems. However, ICC students better learned the ratio structure of the physical phenomena and transferred more frequently to semantically unrelated topics that also had a ratio structure (e.g., spring constant). Experiment 2 (N = 120) clarified the sources of the effects while showing that ICC benefited both low- and high-achieving students. (PsycINFO Database Record (c) 2016 APA, all rights reserved)},
  keywords = {Physics,Practice,Problem Based Learning,Problem Solving,Reasoning,Science Education,Transfer (Learning)},
  file = {/Users/igormoreno/Zotero/storage/CZTB4QFQ/Schwartz et al - 2011 - Practicing versus inventing with contrasting cases.pdf;/Users/igormoreno/Zotero/storage/F6RYFEKI/doiLanding.html}
}

@article{schwartzTimeTelling1998,
  title = {A {{Time For Telling}}},
  author = {Schwartz, Daniel L. and Bransford, John D.},
  year = {1998},
  month = dec,
  journal = {Cognition and Instruction},
  volume = {16},
  number = {4},
  pages = {475--5223},
  publisher = {{Routledge}},
  issn = {0737-0008},
  doi = {10.1207/s1532690xci1604_4},
  urldate = {2022-08-26},
  file = {/Users/igormoreno/Zotero/storage/C8QB6SPS/Schwartz and Bransford - 1998 - A Time For Telling.pdf}
}

@article{schwendimannPerceivingLearningGlance2017,
  title = {Perceiving {{Learning}} at a {{Glance}}: {{A Systematic Literature Review}} of {{Learning Dashboard Research}}},
  shorttitle = {Perceiving {{Learning}} at a {{Glance}}},
  author = {Schwendimann, B. A. and {Rodr{\'i}guez-Triana}, M. J. and Vozniuk, A. and Prieto, L. P. and Boroujeni, M. S. and Holzer, A. and Gillet, D. and Dillenbourg, P.},
  year = {2017},
  month = jan,
  journal = {IEEE Transactions on Learning Technologies},
  volume = {10},
  number = {1},
  pages = {30--41},
  doi = {10.1109/TLT.2016.2599522},
  abstract = {This paper presents a systematic literature review of the state-of-the-art of research on learning dashboards in the fields of Learning Analytics and Educational Data Mining. Research on learning dashboards aims to identify what data is meaningful to different stakeholders and how data can be presented to support sense-making processes. Learning dashboards are becoming popular due to the increased use of educational technologies, such as Learning Management Systems (LMS) and Massive Open Online Courses (MOOCs). The initial search of five main academic databases and GScholar resulted in 346 papers out of which 55 papers were included in the final analysis. Our review distinguishes different kinds of research studies as well as various aspects of learning dashboards and their maturity regarding evaluation. As the research field is still relatively young, most studies are exploratory and proof-of-concept. The review concludes by offering a definition for learning dashboards and by outlining open issues and future lines of work in the area of learning dashboards. There is a need for longitudinal research in authentic settings and studies that systematically compare different dashboard designs.},
  keywords = {academic databases,Bibliographies,computer aided instruction,Context,dashboards,Data mining,data visualisation,Data visualization,Databases,educational data mining,educational technologies,GScholar,information visualization,learning analytics,Learning analytics,learning dashboard,learning management systems,LMS,massive open online courses,MOOC,Proposals,sense-making processes,systematic review,Systematics,To Read},
  file = {/Users/igormoreno/Zotero/storage/PN8CFP47/Schwendimann et al - 2017 - Perceiving Learning at a Glance.pdf;/Users/igormoreno/Zotero/storage/UEAE7X9T/7542151.html}
}

@article{schwonkeEffectsDifferentRatios2011,
  title = {Effects of Different Ratios of Worked Solution Steps and Problem Solving Opportunities on Cognitive Load and Learning Outcomes},
  author = {Schwonke, Rolf and Renkl, Alexander and Salden, Ron and Aleven, Vincent},
  year = {2011},
  month = jan,
  journal = {Computers in Human Behavior},
  series = {Current {{Research Topics}} in {{Cognitive Load Theory}}},
  volume = {27},
  number = {1},
  pages = {58--62},
  issn = {0747-5632},
  doi = {10.1016/j.chb.2010.03.037},
  urldate = {2018-11-06},
  abstract = {A crucial challenge for instructional designers is to determine the amount of support that is most beneficial for learning. This experiment investigated effects of different ratios of worked solution steps (high assistance) and to-be-solved problem steps (low assistance) on cognitive skill acquisition in geometry. High-school students (N=125) worked on a geometry lesson in a Cognitive Tutor under five different ratios (from zero worked steps and five to-be-solved steps to four worked steps and one to-be-solved step). Effects on cognitive load and learning outcomes were assessed. We expected the effectiveness of different ratios to vary with the type of learning outcomes (i.e., procedural vs. conceptual knowledge) and the difficulty of the to-be-learned principles. Results showed that for procedural knowledge (but not for conceptual knowledge) problem solving alone was most beneficial for the acquisition of procedural knowledge related to an easy principle. For a difficult principle, no ratio of worked steps and problem solving showed an advantage over another. Problem solving induced more extraneous load than studying worked examples. Thus, in determining optimal amounts of guidance type of knowledge and difficulty of the single to-be learned knowledge chunks should be considered.},
  keywords = {Cognitive load,Cognitive Tutors,Computer-supported learning,Mathematics education,Tutored problem solving,Worked examples},
  file = {/Users/igormoreno/Zotero/storage/329J5HNN/Schwonke et al - 2011 - Effects of different ratios of worked solution steps and problem solving.pdf;/Users/igormoreno/Zotero/storage/SU9S46GI/S0747563210001500.html}
}

@inproceedings{scottEducationalImpactLecture2017,
  title = {On the {{Educational Impact}} of {{Lecture Recording Reduction}}: {{Evidence}} from a {{Randomised Trial}}},
  shorttitle = {On the {{Educational Impact}} of {{Lecture Recording Reduction}}},
  booktitle = {Proceedings of the 2017 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Scott, Michael James and Ghinea, Gheorghita},
  year = {2017},
  month = jun,
  pages = {287--292},
  publisher = {{ACM}},
  address = {{Bologna Italy}},
  doi = {10.1145/3059009.3059037},
  urldate = {2021-06-14},
  abstract = {Students often use lecture recordings to learn and revise. This approach, however, demands time to locate and review relevant topics. The automatic reduction and indexing of lecture recordings, then, could focus students' attention on the most relevant content. This article investigates whether lecture recording reduction leads to improved learning outcomes on an undergraduate computer networking module. Students participated in a randomised trial which compared lightly edited full lecture recordings to those that had been significantly reduced in duration and indexed. A pre-test conducted after the initial lecture series was followed up with a posttest after several weeks of using the recordings. The results show a statistically significant difference between the groups in terms of perceived effort. However, only the students with little prior knowledge showed a statistically significant difference in learning outcome in favour of the reduced lecture recordings. Moderating factors, such as prior knowledge, warrant further research to help elicit guidelines to inform the design and deployment of future lecture video reduction approaches.},
  isbn = {978-1-4503-4704-4},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/PPWY7Z5A/Scott e Ghinea - 2017 - On the Educational Impact of Lecture Recording Red.pdf}
}

@article{segalEmpiricalStudiesFunctional1994,
  title = {Empirical Studies of Functional Programming Learners Evaluating Recursive Functions},
  author = {Segal, Judith},
  year = {1994},
  month = sep,
  journal = {Instructional Science},
  volume = {22},
  number = {5},
  pages = {385--411},
  issn = {1573-1952},
  doi = {10.1007/BF00891962},
  urldate = {2020-10-04},
  abstract = {In this paper, we report some empirical studies of students evaluating recursive functions defined according to the rules of the functional programming language Miranda, and describe the misconceptions and processing strategies observed. We then discuss the implications of these observations as regards teaching content.},
  langid = {english},
  annotation = {00028},
  file = {/Users/igormoreno/Zotero/storage/44R9NI9E/Segal - 1994 - Empirical studies of functional programming learners evaluating recursive.pdf}
}

@inproceedings{sekiyaAnalysisComputerScience2010,
  title = {Analysis of Computer Science Related Curriculum on {{LDA}} and {{Isomap}}},
  booktitle = {Proceedings of the Fifteenth Annual Conference on {{Innovation}} and Technology in Computer Science Education},
  author = {Sekiya, Takayuki and Matsuda, Yoshitatsu and Yamaguchi, Kazunori},
  year = {2010},
  month = jun,
  series = {{{ITiCSE}} '10},
  pages = {48--52},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1822090.1822106},
  urldate = {2020-09-22},
  abstract = {A good curriculum is crucial for a successful university education. When developing a curriculum, topics, such as natural science, informatics, and so on are set first, course syllabi are written accordingly. However, the topics actually by the courses are not guaranteed to be identical to the initially set topics. To find out if the actual topics are covered by the developed course syllabi, we developed a method of systematically analyzing syllabi that uses latent Dirichlet allocation (LDA) and Isomap. We applied this method to the syllabi of MIT and those of the Open University, and verified that the method is effective.},
  isbn = {978-1-60558-820-9},
  keywords = {curriculum,curriculum analysis,isomap,LDA,syllabus},
  annotation = {00017},
  file = {/Users/igormoreno/Zotero/storage/BRXZPTF7/Sekiya et al - 2010 - Analysis of computer science related curriculum on LDA and Isomap.pdf}
}

@inproceedings{sekiyaCurriculumAnalysisCS2015,
  title = {Curriculum Analysis of {{CS}} Departments Based on {{CS2013}} by Simplified, Supervised {{LDA}}},
  booktitle = {Proceedings of the {{Fifth International Conference}} on {{Learning Analytics And Knowledge}}},
  author = {Sekiya, Takayuki and Matsuda, Yoshitatsu and Yamaguchi, Kazunori},
  year = {2015},
  month = mar,
  series = {{{LAK}} '15},
  pages = {330--339},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2723576.2723594},
  urldate = {2020-09-22},
  abstract = {The curricula higher educational institutions offer is a key asset in enabling them to systematically educate their students. We have been developing a curriculum analysis method that can help to find out differences among curricula. On the basis of "Computing Science Curricula CS2013", a report released by the ACM and IEEE Computer Society, we applied our method to analyzing 10 computer science (CS) related curricula offered by CS departments of universities in the United States. Using the method enables us to compare courses across universities. Through an analysis of course syllabi distribution, we found that CS2013 uniformly covered a wide area of computer science. Some universities emphasized human factors, while others attached greater importance to theoretical ones. We also found that some CS departments offered not only a CS curriculum but also an electrical engineering one, and those departments showed a tendency to have more "Architecture and Organization (AR)" related curricula. Furthermore, we found that even though "Information Assurance and Security (IAS)" has not yet become a very popular field, some universities are already offering IAS related courses.},
  isbn = {978-1-4503-3417-4},
  keywords = {curriculum,curriculum analysis,supervised LDA,syllabus},
  annotation = {00019},
  file = {/Users/igormoreno/Zotero/storage/P7WGZQ4Y/Sekiya et al - 2015 - Curriculum analysis of CS departments based on CS2013 by simplified, supervised.pdf}
}

@book{sennewaldTraitsJackassManager2012,
  title = {Traits of a Jackass Manager: {{A}} How-Not-to Guide for Managers Old and New},
  author = {Sennewald, Charles A},
  year = {2012},
  publisher = {{Elsevier ; Butterworth-Heinemann}},
  address = {{Amsterdam; Boston; Waltham, Mass.}},
  urldate = {2021-12-17},
  langid = {english},
  annotation = {OCLC: 840841086},
  file = {/Users/igormoreno/Zotero/storage/KGW7B6KZ/Sennewald - 2012 - Traits of a jackass manager.pdf}
}

@article{sentanceClassroomBasedResearchProjects2018,
  title = {Classroom-{{Based Research Projects}} for {{Computing Teachers}}: {{Facilitating Professional Learning}}},
  shorttitle = {Classroom-{{Based Research Projects}} for {{Computing Teachers}}},
  author = {Sentance, Sue and Sinclair, Jane and Simmons, Carl and Csizmadia, Andrew},
  year = {2018},
  month = aug,
  journal = {ACM Transactions on Computing Education},
  volume = {18},
  number = {3},
  pages = {14:1--14:26},
  doi = {10.1145/3171129},
  urldate = {2021-01-30},
  abstract = {The introduction of Computing to the national curriculum in England has led to a situation where in-service teachers need to develop subject knowledge and pedagogical expertise in computer science, which presents a significant challenge. Professional learning opportunities can support this; these may be most effective when situated in the teachers' own working practices. This article describes a project to support Computing teachers in developing pedagogical skills by carrying out classroom-based research in their schools. A group of 22 primary (Grades K--5) and secondary (Grades 6--10) teachers from schools across England planned, designed, and implemented research projects either individually or in small groups, supported by a team of university colleagues. Inter and intra group progress was shared online and face-to-face within a distributed community of inquiry. Data collection included surveys, video data, and the projects completed by the teachers. The findings from the project are analysed using Clarke and Hollingsworth's Interconnected Model of Teacher Professional Growth (IMTPG), which enables an identification and exploration of teacher change. Results of the analysis demonstrate that the approach can foster ``growth networks''\textemdash the construct used within IMTPG to indicate teacher change which is likely to be sustained and fundamental to teachers' understanding. The individual nature of this change indicates that the approach supports personal change related to each teacher's specific situation. Although there is a huge literature on action research as part of teacher professional learning, we believe this to be the first time this has been carried out in the context of computer science education. We conclude by critically reflecting on the lessons that we have learned in leading this project.},
  keywords = {Action research,computer science education,computing teachers,professional learning},
  annotation = {00003},
  file = {/Users/igormoreno/Zotero/storage/NWHUGP7R/Sentance et al. - 2018 - Classroom-Based Research Projects for Computing Te.pdf}
}

@article{sentanceTeachingComputerProgramming2019,
  title = {Teaching Computer Programming with {{PRIMM}}: A Sociocultural Perspective},
  shorttitle = {Teaching Computer Programming with {{PRIMM}}},
  author = {Sentance, Sue and Waite, Jane and Kallia, Maria},
  year = {2019},
  month = jul,
  journal = {Computer Science Education},
  volume = {29},
  number = {2-3},
  pages = {136--176},
  issn = {0899-3408, 1744-5175},
  doi = {10.1080/08993408.2019.1608781},
  urldate = {2020-06-22},
  abstract = {Background and Context: Vygotsky's sociocultural theory emphasises the importance of language, mediation, and the transfer of skills and knowledge from the social into the cognitive plane. This perspective has influenced the development of PRIMM (Predict, Run, Investigate, Modify, Make), a structured approach to teaching programming.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/FX7X8H2J/Sentance et al - 2019 - Teaching computer programming with PRIMM.pdf}
}

@misc{sentanceTeachingComputingSchool2021,
  title = {Teaching {{Computing}} in {{School}}: {{Is Research Reaching Classroom Practice}}?},
  author = {Sentance, Sue},
  year = {2021},
  month = nov,
  address = {{Koli Finland}},
  file = {/Users/igormoreno/Zotero/storage/GKPFY3HQ/Sentance - 2021 - Teaching Computing in School.pdf}
}

@inproceedings{seppalaWeKnowHow2015,
  title = {Do {{We Know How Difficult}} the {{Rainfall Problem}} Is?},
  booktitle = {Proceedings of the 15th {{Koli Calling Conference}} on {{Computing Education Research}}},
  author = {Sepp{\"a}l{\"a}, Otto and Ihantola, Petri and Isohanni, Essi and Sorva, Juha and Vihavainen, Arto},
  year = {2015},
  series = {Koli {{Calling}} '15},
  pages = {87--96},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2828959.2828963},
  urldate = {2018-12-11},
  abstract = {The programming task known as the Rainfall Problem has developed a reputation for being surprisingly difficult for introductory-level (CS1) students. We contribute a survey of studies of the problem as well as a new study of students' solutions collected at three institutions. In all three CS1s, at least about half of the students were able to fully solve the problem and the large majority were at least close. Failure to handle invalid or missing input accounted for most bugs. Our survey and study together suggest that the Rainfall Problem is not necessarily overwhelmingly difficult: Success rates vary and some reasonably good results have been achieved under multiple programming paradigms. We provide a breakdown of confounding factors and suggest improvements and hypotheses for future studies of the Rainfall Problem.},
  isbn = {978-1-4503-4020-5},
  keywords = {benchmark,CS1,novice programmers,rainfall problem,To Read},
  file = {/Users/igormoreno/Zotero/storage/WSH9L849/Seppälä et al - 2015 - Do We Know How Difficult the Rainfall Problem is.pdf}
}

@article{serbanutaRewritingLogicApproach2009,
  title = {A Rewriting Logic Approach to Operational Semantics},
  author = {{\c S}erb{\u a}nu{\c t}{\u a}, Traian Florin and Ro{\c s}u, Grigore and Meseguer, Jos{\'e}},
  year = {2009},
  month = feb,
  journal = {Information and Computation},
  series = {Special Issue on {{Structural Operational Semantics}} ({{SOS}})},
  volume = {207},
  number = {2},
  pages = {305--340},
  issn = {0890-5401},
  doi = {10.1016/j.ic.2008.03.026},
  urldate = {2018-12-02},
  abstract = {This paper shows how rewriting logic semantics (RLS) can be used as a computational logic framework for operational semantic definitions of programming languages. Several operational semantics styles are addressed: big-step and small-step structural operational semantics (SOS), modular SOS, reduction semantics with evaluation contexts, continuation-based semantics, and the chemical abstract machine. Each of these language definitional styles can be faithfully captured as an RLS theory, in the sense that there is a one-to-one correspondence between computational steps in the original language definition and computational steps in the corresponding RLS theory. A major goal of this paper is to show that RLS does not force or pre-impose any given language definitional style, and that its flexibility and ease of use makes RLS an appealing framework for exploring new definitional styles.},
  keywords = {Operational semantics,Rewriting logic,Rewriting logic semantics},
  file = {/Users/igormoreno/Zotero/storage/8DN7787Q/Şerbănuţă et al - 2009 - A rewriting logic approach to operational semantics.pdf;/Users/igormoreno/Zotero/storage/KVENJZIV/S0890540108001302.html}
}

@misc{ServicesAssociationComputing,
  title = {Services \textendash{} {{Association}} for {{Computing Machinery}} ({{myACM}})},
  urldate = {2022-04-28},
  howpublished = {https://myacm.acm.org/dashboard.cfm?svc=services\&CFID=27730326\&CFTOKEN=6a0b457e2ecd3fbf-683ED94C-DFA8-69EF-C169452D3A7BC7C0},
  file = {/Users/igormoreno/Zotero/storage/GL7Q7KC9/dashboard.html}
}

@techreport{settleWhatMotivationGot2014,
  type = {Technical {{Report}}},
  title = {What's {{Motivation Got}} to {{Do}} with {{It}}? {{A Survey}} of {{Recursion}} in the {{Computing Education Literature}}},
  author = {Settle, Amber},
  year = {2014},
  number = {2-2014},
  pages = {6},
  institution = {{DePaul University}},
  abstract = {One of the most challenging topics for both computing educators and students is recursion. Pedagogical approaches for teaching recursion have appeared in the computing education literature for over 30 years, and the topic has generated a significant body of work. Given its persistence, relatively little attention has been paid to student motivation. This article summarizes results on teaching and learning recursion explored by the computing education community, noting the relative lack of interest in motivation. It concludes by briefly discussing an approach to teaching recursion is appealing for students interested in web development.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/S4AFR2R7/Settle - 2014 - What’s Motivation Got to Do with It.pdf}
}

@article{seufertSupportingCoherenceFormation2003,
  title = {Supporting Coherence Formation in Learning from Multiple Representations},
  author = {Seufert, Tina},
  year = {2003},
  month = apr,
  journal = {Learning and Instruction},
  series = {External and {{Internal Representations}} in {{Multimedia Learning}}},
  volume = {13},
  number = {2},
  pages = {227--237},
  issn = {0959-4752},
  doi = {10.1016/S0959-4752(02)00022-1},
  urldate = {2018-11-06},
  abstract = {Multimedia learning environments combine multiple forms of representations like texts, static and animated pictures or graphs. Knowledge acquisition from multiple representations requires that the learner create referential connections between corresponding elements and corresponding structures in different representations. As this process is usually difficult, learners frequently fail to construct coherent mental representations and, thus, do not sufficiently understand the subject matter. This paper analyzes the effects of different kinds of instructional help on the process of coherence formation from multiple representations by learners with different prior knowledge. Three groups of university students with different domain-specific knowledge had to learn a complex subject matter from chemistry using six different forms of representation. In addition, a first group received directive help for coherence formation. A second group received non-directive help, and a third group received no instructional help. Results indicate that directive help is effective for recall performance because of its summarizing and repeating function. Furthermore, learners with different levels of prior knowledge show different reactions when help is given. For learners with insufficient prior knowledge help is not helpful or, in case of recall performance, even harmful. Learners with a medium level of prior knowledge can increase especially their comprehension performance when help is offered, whereas learners with too much prior knowledge seem not to be affected by help.},
  keywords = {Coherence formation,Directivity of help,Multiple representations,Prior knowledge,Structure mapping},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/IA7RWD97/Seufert - 2003 - Supporting coherence formation in learning from multiple representations.pdf;/Users/igormoreno/Zotero/storage/KXNL6ZLM/S0959475202000221.html}
}

@article{sewellOttEffectiveTool2010,
  title = {Ott: {{Effective}} Tool Support for the Working Semanticist},
  shorttitle = {Ott},
  author = {Sewell, Peter and Nardelli, Francesco Zappa and Owens, Scott and Peskine, Gilles and Ridge, Thomas and Sarkar, Susmit and Strni{\v s}a, Rok},
  year = {2010},
  month = jan,
  journal = {Journal of Functional Programming},
  volume = {20},
  number = {1},
  pages = {71--122},
  issn = {1469-7653, 0956-7968},
  doi = {10.1017/S0956796809990293},
  urldate = {2019-11-11},
  abstract = {Semantic definitions of full-scale programming languages are rarely given, despite the many potential benefits. Partly this is because the available metalanguages for expressing semantics \textendash{} usually either  for informal mathematics or the formal mathematics of a proof assistant \textendash{} make it much harder than necessary to work with large definitions. We present a metalanguage specifically designed for this problem, and a tool, Ott, that sanity-checks such definitions and compiles them into proof assistant code for Coq, HOL, and Isabelle/HOL, together with  code for production-quality typesetting, and OCaml boilerplate. The main innovations are (1) metalanguage design to make definitions concise, and easy to read and edit; (2) an expressive but intuitive metalanguage for specifying binding structures; and (3) compilation to proof assistant code. This has been tested in substantial case studies, including modular specifications of calculi from the TAPL text, a Lightweight Java with Java JSR 277/294 module system proposals, and a large fragment of OCaml (OCamllight, 310 rules), with mechanised proofs of various soundness results. Our aim with this work is to enable a phase change: making it feasible to work routinely, without heroic effort, with rigorous semantic definitions of realistic languages.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/XCZN84JN/Sewell et al - 2010 - Ott.pdf;/Users/igormoreno/Zotero/storage/GXW38PV5/4F02FB206B5209D42B3BF2ED2240A802.html}
}

@article{sfardDualNatureMathematical1991,
  title = {On the Dual Nature of Mathematical Conceptions: {{Reflections}} on Processes and Objects as Different Sides of the Same Coin},
  shorttitle = {On the Dual Nature of Mathematical Conceptions},
  author = {Sfard, Anna},
  year = {1991},
  month = feb,
  journal = {Educational Studies in Mathematics},
  volume = {22},
  number = {1},
  pages = {1--36},
  issn = {1573-0816},
  doi = {10.1007/BF00302715},
  urldate = {2020-10-04},
  abstract = {This paper presents a theoretical framework for investigating the role of algorithms in mathematical thinking. In the study, a combined ontological-psychological outlook is applied. An analysis of different mathematical definitions and representations brings us to the conclusion that abstract notions, such as number or function, can be conceived in two fundamentally different ways: structurally-as objects, and operationally-as processes. These two approaches, although ostensibly incompatible, are in fact complementary. It will be shown that the processes of learning and of problem-solving consist in an intricate interplay between operational and structural conceptions of the same notions.},
  langid = {english},
  annotation = {03168},
  file = {/Users/igormoreno/Zotero/storage/IAWEX8JX/Sfard - 1991 - On the dual nature of mathematical conceptions.pdf}
}

@inproceedings{shaochunxuCognitiveProcessProgram2004,
  title = {Cognitive Process during Program Debugging},
  booktitle = {Proceedings of the {{Third IEEE International Conference}} on {{Cognitive Informatics}}, 2004.},
  author = {{Shaochun Xu} and Rajlich, V.},
  year = {2004},
  month = aug,
  pages = {176--182},
  doi = {10.1109/COGINF.2004.1327473},
  abstract = {Program debugging is a critical and complex activity in software engineering. Accurate and fast debugging leads to high quality software and a short time-to-market. Debugging involves a very demanding cognitive process. In a case study, we found all six levels of Bloom's taxonomy of cognitive learning, from "knowledge" through "comprehension", "application", "analysis", "synthesis", and "evaluation". The involvement of the higher levels of Bloom's taxonomy, such as synthesis and evaluation, indicates that program debugging is a difficult cognitive task. This fact may explain the difference between novices and experts in debugging effectiveness.},
  keywords = {Bloom taxonomy,cognition,cognitive learning,cognitive process,Computer science,learning (artificial intelligence),Medical diagnostic imaging,program debugging,Programming profession,Psychology,Software debugging,software engineering,Software engineering,Software quality,Taxonomy,Testing,Time to market},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/6UBYCNSB/Shaochun Xu e Rajlich - 2004 - Cognitive process during program debugging.pdf;/Users/igormoreno/Zotero/storage/HQF265T2/1327473.html}
}

@article{shapiroHowMachineLearning2018,
  title = {How Machine Learning Impacts the Undergraduate Computing Curriculum},
  author = {Shapiro, R. Benjamin and Fiebrink, Rebecca and Norvig, Peter},
  year = {2018},
  month = oct,
  journal = {Communications of the ACM},
  volume = {61},
  number = {11},
  pages = {27--29},
  issn = {0001-0782, 1557-7317},
  doi = {10.1145/3277567},
  urldate = {2020-06-22},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/2J9P28S3/Shapiro et al - 2018 - How machine learning impacts the undergraduate computing curriculum.pdf}
}

@article{shapiroImprovingComputingEducation2023,
  title = {Improving {{Computing Education Research}} through {{Valuing Design}}},
  author = {Shapiro, R. Benjamin and DesPortes, Kayla and DiSalvo, Betsy},
  year = {2023},
  month = aug,
  journal = {Communications of the ACM},
  volume = {66},
  number = {8},
  pages = {24--26},
  issn = {0001-0782, 1557-7317},
  doi = {10.1145/3604633},
  urldate = {2023-07-29},
  abstract = {Exploring alternatives to existing research systems and methods.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/6EBAGAYN/Shapiro et al - 2023 - Improving Computing Education Research through Valuing Design.pdf}
}

@article{sharminCreativityCS1Literature2022,
  title = {Creativity in {{CS1}}: {{A Literature Review}}},
  shorttitle = {Creativity in {{CS1}}},
  author = {Sharmin, Sadia},
  year = {2022},
  month = jun,
  journal = {ACM Transactions on Computing Education},
  volume = {22},
  number = {2},
  pages = {1--26},
  issn = {1946-6226, 1946-6226},
  doi = {10.1145/3459995},
  urldate = {2023-09-10},
  abstract = {Computer science is a fast-growing field in today's digitized age, and working in this industry often requires creativity and innovative thought. An issue within computer science education, however, is that large introductory programming courses often involve little opportunity for creative thinking within coursework. The undergraduate introductory programming course (CS1) is notorious for its poor student performance and retention rates across multiple institutions. Integrating opportunities for creative thinking may help combat this issue by adding a personal touch to course content, which could allow beginner CS students to better relate to the abstract world of programming. Research on the role of creativity in computer science education (CSE) is an interesting area with a lot of room for exploration due to the complexity of the phenomenon of creativity as well as the CSE research field being fairly new compared to some other education fields where this topic has been more closely explored.             To contribute to this area of research, this article provides a literature review exploring the concept of creativity as relevant to computer science education and CS1 in particular. Based on the review of the literature, we conclude creativity is an essential component to computer science, and the type of creativity that computer science requires is in fact, a teachable skill through the use of various tools and strategies. These strategies include the integration of open-ended assignments, large collaborative projects, learning by teaching, multimedia projects, small creative computational exercises, game development projects, digitally produced art, robotics, digital story-telling, music manipulation, and project-based learning. Research on each of these strategies and their effects on student experiences within CS1 is discussed in this review. Last, six main components of creativity-enhancing activities are identified based on the studies about incorporating creativity into CS1. These components are as follows: Collaboration, Relevance, Autonomy, Ownership, Hands-On Learning, and Visual Feedback. The purpose of this article is to contribute to computer science educators' understanding of how creativity is best understood in the context of computer science education and explore practical applications of creativity theory in CS1 classrooms. This is an important collection of information for restructuring aspects of future introductory programming courses in creative, innovative ways that benefit student learning.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/UGHZ9XTX/Sharmin - 2022 - Creativity in CS1 A Literature Review.pdf}
}

@article{shawInformaticsNewCentury1991,
  title = {Informatics for a New Century: {{Computing}} Education for the 1990s and Beyond},
  shorttitle = {Informatics for a New Century},
  author = {Shaw, Mary},
  year = {1991},
  month = jan,
  journal = {Education and Computing},
  volume = {7},
  number = {1-2},
  pages = {9--17},
  issn = {01679287},
  doi = {10.1016/S0167-9287(05)80078-0},
  urldate = {2018-11-06},
  abstract = {Information technology and computer science have not only reshaped computation, communication and commerce; they have expanded the basic models and paradigms of many disciplines. Informatics education has obligations to all the communities that rely on information technology, not just the computing professionals. Serving this extended audience well requires changes in the content and presentation of computing curricula. This paper sketches the coming needs for information processing and analyzes the populations that will require informatics education. It considers curriculum requirements through two examples, one outside the traditional boundary of computer science and one inside.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/87SJ8X75/Shaw - 1991 - Informatics for a new century Computing education.pdf}
}

@inproceedings{shawkath.bhuiyanCharacterizingRationalizingReifying1991,
  title = {Characterizing, {{Rationalizing}}, and {{Reifying Mental Models}} of {{Recursion}}},
  booktitle = {Proceedings of the {{Thirteenth Annual Conference}} of the {{Cognitive Science Society}}},
  author = {{Shawkat H. Bhuiyan} and {Jim E. Greer} and {Gordon I. McCalla}},
  year = {1991},
  month = aug,
  pages = {120--125},
  publisher = {{Psychology Press}},
  address = {{Chicago, IL, USA}},
  file = {/Users/igormoreno/Zotero/storage/MWVB47XL/Shawkat H. Bhuiyan et al - 1991 - Characterizing, Rationalizing, and Reifying Mental Models of Recursion.pdf}
}

@phdthesis{shawkathamidbhuiyanIdentifyingSupportingMental1992,
  title = {Identifying and {{Supporting Mental Methods}} of {{Recursion}} in a {{Learning Environment}}},
  author = {{Shawkat Hamid Bhuiyan}},
  year = {1992},
  month = oct,
  address = {{Saskatoon, Canada}},
  school = {University of Saskatchewan},
  file = {/Users/igormoreno/Zotero/storage/7Y85INN4/Shawkat Hamid Bhuiyan - 1992 - Identifying and Supporting Mental Methods of Recursion in a Learning Environment.pdf}
}

@article{shayerThirtyYearsLarge2007,
  title = {Thirty Years on - a Large Anti-{{Flynn}} Effect? {{The Piagetian}} Test {{Volume}} \& {{Heaviness}} Norms 1975-2003},
  shorttitle = {Thirty Years on - a Large Anti-{{Flynn}} Effect?},
  author = {Shayer, Michael and Ginsburg, Denise and Coe, Robert},
  year = {2007},
  month = mar,
  journal = {British Journal of Educational Psychology},
  volume = {77},
  number = {1},
  pages = {25--41},
  issn = {00070998},
  doi = {10.1348/000709906X96987},
  urldate = {2018-10-02},
  abstract = {Background. Volume \& Heaviness was one of three Piagetian tests used in the CSMS survey in 1975/76. However unlike psychometric tests showing the Flynn effect \textendash{} that is with students showing steady improvements year by year requiring tests to be restandardized \textendash{} it appeared that the performance of Y7 students has recently been getting steadily worse. Aims. A sample of schools sufficiently large and representative was chosen so that the hypothesis of worsening performance could be tested, and estimated quantitatively. Sample. Sixty-nine Y7 school year groups containing pupil data on the Volume \& Heaviness test and the University of Durham CEM Centre MidYIS test were located giving a sample of 10, 023 students covering the years 2000 to 2003. Method. Regression of the students' school mean on Volume \& Heaviness on the schools' mean MidYIS 1999 standardized score, and computing the regression at MidYS {$\frac{1}{4}$} 100 allows comparison with that found in 1976. Results. The mean drops in scores from 1976 to 2003 were boys {$\frac{1}{4}$} 1.13 and girls {$\frac{1}{4}$} 0.6 levels. A differential of 0.50 standard deviations in favour of boys in 1976 had completely disappeared by the year 2002. Between 1976 and 2003 the effect-size of the drop in the boys' performance was 1.04 standard deviations, and for girls was 0.55 standard deviations. Conclusion. The idea that children leaving primary school are getting more and more intelligent and competent \textendash{} whether it is viewed in terms of the Flynn effect, or in terms of government statistics on performance in Key Stage 2 SATS in mathematics and science \textendash{} is put into question by these findings.},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/P2ZW5TQS/Shayer et al - 2007 - Thirty years on - a large anti-Flynn effect.pdf}
}

@article{shayerThirtyYearsLarge2009,
  title = {Thirty Years on - a Large Anti-{{Flynn}} Effect/ ({{II}}): 13- and 14-Year-Olds. {{Piagetian}} Tests of Formal Operations Norms 1976-2006/7},
  shorttitle = {Thirty Years on - a Large Anti-{{Flynn}} Effect/ ({{II}})},
  author = {Shayer, Michael and Ginsburg, Denise},
  year = {2009},
  month = sep,
  journal = {British Journal of Educational Psychology},
  volume = {79},
  number = {3},
  pages = {409--418},
  issn = {00070998},
  doi = {10.1348/978185408X383123},
  urldate = {2018-10-02},
  abstract = {Background. Shayer, Ginsburg, and Coe (2007) showed that children leaving primary school in Y6 entered secondary school with much lower levels of understanding of the physical conservations than in 1976. It seemed desirable to investigate cognitive development in the first three years of secondary education. Aims. By using two Piagetian tests of formal operations, one of which had been used in the 1976 CSMS survey, the performance of Y8 and Y9 pupils would be compared with the survey results published in 1978. Sample. Eight schools were selected as willing to test their Y9 or Y8 classes on either the Pendulum (in 2007) or the Equilibrium in the Balance tests (in 2006), giving 39 classes on which to make the comparison with 1976 performance. Method. Regression of the pupils' class mean on each formal test on either the class's 2004 MidYIS or nferCAT standardized scores, and computing the regression at IQ {$\frac{1}{4}$} 100 allows comparison with that found in 1976. Results. On Equilibrium in the Balance the Y8 pupils were down on the proportion at the early formal level or above by 20.61 standard deviations (SD) for boys and 2 0.63 SD for girls on the 1976 results. On the Pendulum the Y9 boys were down by 2 0.49 SD and the girls by 20.48 SD on the proportion at the early formal level or above. Conclusion. The negative Flynn-effect found on Volume \& Heaviness for Y7 pupils is paralleled by a similar negative effect on attainment of formal operations by Y8 and Y9, compared with 1976. Yet at the same time the proportion of pupils using the top level of concrete operational thinking has increased on both tests. It seems that there has been a change either in general societal pressures on the individual or in the style of teaching in schools \textendash{} or both \textendash{} favouring a lower level of processing of reality.},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/N2FW2YIU/Shayer and Ginsburg - 2009 - Thirty years on - a large anti-Flynn effect- (II).pdf}
}

@article{sherinAssemblyRequiredHow2012,
  title = {Some Assembly Required: {{How}} Scientific Explanations Are Constructed during Clinical Interviews},
  shorttitle = {Some Assembly Required},
  author = {Sherin, Bruce L. and Krakowski, Moshe and Lee, Victor R.},
  year = {2012},
  journal = {Journal of Research in Science Teaching},
  volume = {49},
  number = {2},
  pages = {166--198},
  issn = {1098-2736},
  doi = {10.1002/tea.20455},
  urldate = {2020-10-16},
  abstract = {This article is concerned with commonsense science knowledge, the informally gained knowledge of the natural world that students possess prior to formal instruction in a scientific discipline. Although commonsense science has been the focus of substantial study for more than two decades, there are still profound disagreements about its nature and origin, and its role in science learning. What is the reason that it has been so difficult to reach consensus? We believe that the problems run deep; there are difficulties both with how the field has framed questions and the way that it has gone about seeking answers. In order to make progress, we believe it will be helpful to focus on one type of research instrument\textemdash the clinical interview\textemdash that is employed in the study of commonsense science. More specifically, we argue that we should seek to understand and model, on a moment-by-moment basis, student reasoning as it occurs in the interviews employed to study commonsense science. To illustrate and support this claim, we draw on a corpus of interviews with middle school students in which the students were asked questions pertaining to the seasons and climate phenomena. Our analysis of this corpus is based on what we call the mode-node framework. In this framework, student reasoning is seen as drawing on a set of knowledge elements we call nodes, and this set produces temporary explanatory structures we call dynamic mental constructs. Furthermore, the analysis of our corpus seeks to highlight certain patterns of student reasoning that occur during interviews, patterns in what we call conceptual dynamics. These include patterns in which students can be seen to search through available knowledge (nodes), in which they assemble nodes into an explanation, and in which they converge on and shift among alternative explanations. \textcopyright{} 2011 Wiley Periodicals, Inc. J Res Sci Teach 49: 166\textendash 198, 2012},
  langid = {english},
  keywords = {clinical interviews,conceptual change,misconceptions,science learning,seasons},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/S6F845TZ/Sherin et al. - 2012 - Some assembly required How scientific explanation.pdf}
}

@article{sherinComparisonProgrammingLanguages2001,
  title = {A {{Comparison}} of {{Programming Languages}} and {{Algebraic Notation}} as {{Expressive Languages}} for {{Physics}}},
  author = {Sherin, Bruce L.},
  year = {2001},
  month = may,
  journal = {International Journal of Computers for Mathematical Learning},
  volume = {6},
  number = {1},
  pages = {1--61},
  issn = {1573-1766},
  doi = {10.1023/A:1011434026437},
  urldate = {2020-10-21},
  abstract = {The purpose of the present work is to consider some of the implications of replacing, for the purposes of physics instruction, algebraic notation with a programming language. Whatis novel is that, more than previous work, I take seriously the possibility that a programming language can function as the principle representational system for physics instruction. This means treating programming as potentially having a similar status and performing a similar function to algebraic notation in physics learning. In order to address the implications of replacing the usual notational system with programming, I begin with two informal conjectures: (1) Programming-based representations might be easier for students to understand than equation-based representations, and (2) programming-based representations might privilege a somewhat different ``intuitive vocabulary.'' If the second conjecture is correct, it means that the nature of the understanding associated with programming-physics might be fundamentally different than the understanding associated with algebra-physics.},
  langid = {english},
  annotation = {00132},
  file = {/Users/igormoreno/Zotero/storage/57AB67R4/Sherin - 2001 - A Comparison of Programming Languages and Algebraic Notation as Expressive.pdf}
}

@article{sherinComparisonProgrammingLanguages2001a,
  title = {A {{Comparison}} of {{Programming Languages}} and {{Algebraic Notation}} as {{Expressive Languages}} for {{Physics}}},
  author = {Sherin, Bruce},
  year = {2001},
  month = may,
  journal = {International Journal of Computers for Mathematical Learning},
  volume = {6},
  pages = {1--61},
  doi = {10.1023/A:1011434026437},
  abstract = {The purpose of the present work is to consider some of the implications of replacing, for the purposes of physics instruction, algebraic notation with a programming language. Whatis novel is that, more than previous work, I take seriously the possibility that a programming language can function as the principle representational system for physics instruction. This means treating programming as potentially having a similar status and performing a similar function to algebraic notation in physics learning. In order to address the implications of replacing the usual notational system with programming, I begin with two informal conjectures: (1) Programming-based representations might be easier for students to understand than equation-based representations, and (2) programming-based representations might privilege a somewhat different ``intuitive vocabulary.'' If the second conjecture is correct, it means that the nature of the understanding associated with programming-physics might be fundamentally different than the understanding associated with algebra-physics. In order to refine and address these conjectures, I introduce a framework based around two theoretical constructs, what I callinterpretive devices and symbolic forms. A conclusion of this work is that algebra-physics can be characterized as a physics of balance and equilibrium, and programming-physics as a physics of processes and causation. More generally, this work provides a theoretical and empirical basis for understanding how the use of particular symbol systems affects students' conceptualization.},
  file = {/Users/igormoreno/Zotero/storage/EKWXWIMN/Sherin - 2001 - A Comparison of Programming Languages and Algebraic Notation as Expressive.pdf}
}

@article{sherinHowStudentsUnderstand2001,
  title = {How {{Students Understand Physics Equations}}},
  author = {Sherin, Bruce L.},
  year = {2001},
  month = dec,
  journal = {Cognition and Instruction},
  volume = {19},
  number = {4},
  pages = {479--541},
  issn = {0737-0008, 1532-690X},
  doi = {10.1207/S1532690XCI1904_3},
  urldate = {2022-11-02},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/TXTPMU4U/Sherin - 2001 - How Students Understand Physics Equations.pdf}
}

@article{sherinRepresentingGeometricConstructions2002,
  title = {Representing {{Geometric Constructions As Programs}}: {{A Brief Exploration}}},
  shorttitle = {Representing {{Geometric Constructions As Programs}}},
  author = {Sherin, Bruce},
  year = {2002},
  month = jun,
  journal = {International Journal of Computers for Mathematical Learning},
  volume = {7},
  number = {1},
  pages = {101--115},
  issn = {1573-1766},
  doi = {10.1023/A:1016047330286},
  urldate = {2022-11-02},
  langid = {english},
  keywords = {Geometric Construction},
  file = {/Users/igormoreno/Zotero/storage/R89B4F7P/Sherin - 2002 - Representing Geometric Constructions As Programs.pdf}
}

@article{shiEffectsVisualizingRoles2017,
  title = {Effects of Visualizing Roles of Variables with Animation and {{IDE}} in Novice Program Construction},
  author = {Shi, Nianfeng and Min, Zhiyu and Zhang, Ping},
  year = {2017},
  month = aug,
  journal = {Telematics and Informatics},
  volume = {34},
  number = {5},
  pages = {743--754},
  issn = {07365853},
  doi = {10.1016/j.tele.2017.02.005},
  urldate = {2020-06-22},
  abstract = {In this research, the researchers apply the roles of variables visualization to the teaching of novice C language programmers. The results are evaluated using the Structure of Observed Learning Outcomes (SOLO) taxonomy. The participants of the research were fifty-five undergraduates who major in computer science at a polytechnic institute. They were divided into an experimental group and a control group. The students from the control group learned programming in the traditional role-based teaching method. The students in the experimental group learned programming using variables visualization with the support of PlanAni and generic integrated development environment (IDE). For the purposes of determining the effects of the role-based visualization teaching, the SOLO level of the code writing was graded according the SOLO categories for program construction. A course satisfaction questionnaire was conducted. Data analyses show there was a significant improvement of SOLO level of program construction and a higher approval about the roles of variables. These results indicate that visualizing the roles of variables with animations and IDE can provide novices with a new conceptual framework that enables them to design relational program from a holistic point of view and helps them learn the concept of the roles of variables.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/7YAJWCIU/Shi et al - 2017 - Effects of visualizing roles of variables with animation and IDE in novice.pdf}
}

@inproceedings{shinners-kennedyIdentifyingThresholdConcepts2013,
  title = {Identifying Threshold Concepts: From Dead End to a New Direction},
  shorttitle = {Identifying Threshold Concepts},
  booktitle = {Proceedings of the Ninth Annual International {{ACM}} Conference on {{International}} Computing Education Research - {{ICER}} '13},
  author = {{Shinners-Kennedy}, Dermot and Fincher, Sally A.},
  year = {2013},
  pages = {9},
  publisher = {{ACM Press}},
  address = {{San Diego, San California, USA}},
  doi = {10.1145/2493394.2493396},
  urldate = {2018-10-22},
  abstract = {Since they were first described by Meyer and Land [1] the classification of concepts as ``threshold'' concepts has engaged many researchers, including a number of CS researchers. A variety of approaches have been employed to identify concepts that could be classified as threshold concepts, with varying success. Our own frustrations in identifying them led us to identify shortcomings in commonly-used approaches, and to the promising possibilities offered by a new direction. We describe that new direction here, and detail the path that led us to it.},
  isbn = {978-1-4503-2243-0},
  langid = {english},
  keywords = {Curriculus},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/S2M2VH3I/Shinners-Kennedy and Fincher - 2013 - Identifying threshold concepts from dead end to a.pdf}
}

@inproceedings{shinners-kennedyNoviceProgrammerDevice2011,
  title = {The Novice Programmer's "Device to Think With"},
  booktitle = {Proceedings of the 42nd {{ACM}} Technical Symposium on {{Computer}} Science Education},
  author = {{Shinners-Kennedy}, Dermot and Barnes, David J.},
  year = {2011},
  month = mar,
  series = {{{SIGCSE}} '11},
  pages = {511--516},
  publisher = {{Association for Computing Machinery}},
  address = {{Dallas, TX, USA}},
  doi = {10.1145/1953163.1953310},
  urldate = {2020-06-12},
  abstract = {We present some ideas for course material for the introductory teaching of programming that are based on the principle of allowing the students to be the domain experts. The idea is that the students' familiarity with the domain of discourse will make course material more motivating, and that it will be more likely that they will be able to model the concepts and artifacts being discussed. This approach thereby seeks to scaffold the students' understanding of programming-related concepts. For reasons discussed in the paper, we have chosen mobile phone technology for this discussion, but there is no reason why the same principles should not be applied to other culturally-accessible domains.},
  isbn = {978-1-4503-0500-6},
  keywords = {CS1,curriculum ideas,mobile phones,student-centered learning},
  file = {/Users/igormoreno/Zotero/storage/846N8GUQ/Shinners-Kennedy and Barnes - 2011 - The novice programmer's device to think with.pdf}
}

@incollection{shiSemiAutomaticMisconceptionDiscovery2021,
  title = {Toward {{Semi-Automatic Misconception Discovery Using Code Embeddings}}},
  booktitle = {{{LAK21}}: 11th {{International Learning Analytics}} and {{Knowledge Conference}}},
  author = {Shi, Yang and Shah, Krupal and Wang, Wengran and Marwan, Samiha and Penmetsa, Poorvaja and Price, Thomas},
  year = {2021},
  month = apr,
  pages = {606--612},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  urldate = {2021-07-26},
  abstract = {Understanding students' misconceptions is important for effective teaching and assessment. However, discovering such misconceptions manually can be time-consuming and laborious. Automated misconception discovery can address these challenges by highlighting patterns in student data, which domain experts can then inspect to identify misconceptions. In this work, we present a novel method for the semi-automated discovery of problem-specific misconceptions from students' program code in computing courses, using a state-of-the-art code classification model. We trained the model on a block-based programming dataset and used the learned embedding to cluster incorrect student submissions. We found these clusters correspond to specific misconceptions about the problem and would not have been easily discovered with existing approaches. We also discuss potential applications of our approach and how these misconceptions inform domain-specific insights into students' learning processes.},
  isbn = {978-1-4503-8935-8},
  keywords = {Automatic Assessment,Code Analysis,Learning Representation,Neural Network},
  file = {/Users/igormoreno/Zotero/storage/6Z3TGD7Z/Shi et al. - 2021 - Toward Semi-Automatic Misconception Discovery Usin.pdf}
}

@inproceedings{shresthaHereWeGo2020,
  title = {Here We Go Again: Why Is It Difficult for Developers to Learn Another Programming Language?},
  shorttitle = {Here We Go Again},
  booktitle = {Proceedings of the {{ACM}}/{{IEEE}} 42nd {{International Conference}} on {{Software Engineering}}},
  author = {Shrestha, Nischal and Botta, Colton and Barik, Titus and Parnin, Chris},
  year = {2020},
  month = jun,
  series = {{{ICSE}} '20},
  pages = {691--701},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3377811.3380352},
  urldate = {2021-11-09},
  abstract = {Once a programmer knows one language, they can leverage concepts and knowledge already learned, and easily pick up another programming language. But is that always the case? To understand if programmers have difficulty learning additional programming languages, we conductedan empirical study of Stack Overflow questions across 18 different programming languages. We hypothesized that previous knowledge could potentially interfere with learning a new programming language. From our inspection of 450 Stack Overflow questions, we found 276 instances of interference that occurred due to faulty assumptions originating from knowledge about a different language. To understand why these difficulties occurred, we conducted semi-structured interviews with 16 professional programmers. The interviews revealed that programmers make failed attempts to relate a new programming language with what they already know. Our findings inform design implications for technical authors, toolsmiths, and language designers, such as designing documentation and automated tools that reduce interference, anticipating uncommon language transitions during language design, and welcoming programmers not just into a language, but its entire ecosystem.},
  isbn = {978-1-4503-7121-6},
  keywords = {interference theory,learning,program comprehension,programming environments,programming languages},
  file = {/Users/igormoreno/Zotero/storage/VWKHZP6U/Shrestha et al - 2020 - Here we go again.pdf}
}

@article{shulmanThoseWhoUnderstand1986,
  title = {Those {{Who Understand}}: {{Knowledge Growth}} in {{Teaching}}},
  shorttitle = {Those {{Who Understand}}},
  author = {Shulman, Lee S.},
  year = {1986},
  month = feb,
  journal = {Educational Researcher},
  volume = {15},
  number = {2},
  pages = {4--14},
  issn = {0013-189X},
  doi = {10.3102/0013189X015002004},
  urldate = {2018-10-05},
  langid = {english},
  keywords = {Curriculus,To Read},
  annotation = {26472},
  file = {/Users/igormoreno/Zotero/storage/V4N5TCIY/Shulman - 1986 - Those Who Understand.pdf}
}

@article{shuteFocusFormativeFeedback2008,
  title = {Focus on {{Formative Feedback}}},
  author = {Shute, Valerie J.},
  year = {2008},
  month = mar,
  journal = {Review of Educational Research},
  volume = {78},
  number = {1},
  pages = {153--189},
  publisher = {{American Educational Research Association}},
  issn = {0034-6543},
  doi = {10.3102/0034654307313795},
  urldate = {2023-03-17},
  abstract = {This article reviews the corpus of research on feedback, with a focus on formative feedback?defined as information communicated to the learner that is intended to modify his or her thinking or behavior to improve learning. According to researchers, formative feedback should be nonevaluative, supportive, timely, and specific. Formative feedback is usually presented as information to a learner in response to some action on the learner?s part. It comes in a variety of types (e.g., verification of response accuracy, explanation of the correct answer, hints, worked examples) and can be administered at various times during the learning process (e.g., immediately following an answer, after some time has elapsed). Finally, several variables have been shown to interact with formative feedback?s success at promoting learning (e.g., individual characteristics of the learner and aspects of the task). All of these issues are discussed. This review concludes with guidelines for generating formative feedback.},
  file = {/Users/igormoreno/Zotero/storage/ZJKEZD6A/Shute - 2008 - Focus on Formative Feedback.pdf}
}

@incollection{shuteModelBasedMethodsAssessment2009,
  title = {Model-{{Based Methods}} for {{Assessment}}, {{Learning}}, and {{Instruction}}: {{Innovative Educational Technology}} at {{Florida State University}}},
  shorttitle = {Model-{{Based Methods}} for {{Assessment}}, {{Learning}}, and {{Instruction}}},
  booktitle = {Educational {{Media}} and {{Technology Yearbook}}},
  author = {Shute, Valerie J. and Jeong, Allan C. and Spector, J. Michael and Seel, Norbert M. and Johnson, Tristan E.},
  editor = {Orey, Michael and McClendon, V. J. and Branch, Robert Maribe},
  year = {2009},
  volume = {34},
  pages = {61--79},
  publisher = {{Springer US}},
  address = {{Boston, MA}},
  doi = {10.1007/978-0-387-09675-9_5},
  urldate = {2018-12-28},
  abstract = {In this chapter, we describe our research and development efforts relating to eliciting, representing, and analyzing how individuals and small groups conceptualize complex problems. The methods described herein have all been developed and are in various states of being validated. In addition, the methods we describe have been automated and most have been integrated in an online modelbased set of tools called HIMATT (Highly Interactive Model-based Assessment Tools and Technologies; available for research purposes at http://himatt.ezw.unifreiburg.de/cgi-bin/hrun/himatt.pl and soon to be available on a server at Florida State University). HIMATT continues to expand in terms of the tools and technologies included. Our methods and tools represent an approach to learning and instruction that is now embedded in many of the graduate courses at Florida State University and also at the University of Freiburg. We call our approach model-based because it integrates representations of mental models and internal cognitive processes with tools that are used to (a) assess progress of learning, and (b) provide the basis for informative and reflective feedback during instruction.},
  isbn = {978-0-387-09674-2 978-0-387-09675-9},
  langid = {english},
  keywords = {Belief networks,Causal diagrams,Cognitive modeling,Concept mapping,Mental models,Model-based assessment,Technology-based assessment,To Read},
  file = {/Users/igormoreno/Zotero/storage/IK95E57H/Shute et al - 2009 - Model-Based Methods for Assessment, Learning, and Instruction.pdf}
}

@incollection{shuteStealthAssessmentComputerBased2011,
  title = {Stealth {{Assessment}} in~{{Computer-Based Games}} to {{Support Learning}}},
  booktitle = {Computer {{Games}} and {{Instruction}}},
  author = {Shute, Valerie J},
  year = {2011},
  pages = {503--523},
  publisher = {{Information Age Publishing}},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/UCXISLU3/Shute - 2011 - Stealth Assessment in Computer-Based Games to Support Learning.pdf}
}

@book{shuteStealthAssessmentMeasuring2013,
  title = {Stealth Assessment: Measuring and Supporting Learning in Video Games},
  shorttitle = {Stealth Assessment},
  author = {Shute, Valerie J. and Ventura, Matthew},
  year = {2013},
  series = {The {{John D}}. and {{Catherine T}}. {{Macarthur Foundation}} Reports on Digital Media and Learning},
  publisher = {{The MIT Press}},
  address = {{Cambridge, Massachusetts}},
  isbn = {978-0-262-51881-9},
  langid = {english},
  lccn = {LB3051 .S518 2013},
  keywords = {Educational tests and measurements,Video games},
  file = {/Users/igormoreno/Zotero/storage/ZFH6S7PM/Shute and Ventura - 2013 - Stealth assessment measuring and supporting learn.pdf}
}

@incollection{sibyllereinfriedWarumSubjektiveErklarungen2016,
  title = {Warum Subjektive {{Erkl\"arungen}} von Geographischen {{Ph\"anomenen Sinn}} Machen \textendash{} {{Ein Blick}} in Die {{Denkprozesse}} Eines {{Sch\"ulers}}},
  booktitle = {Geographie Und Naturwissenschaftliche {{Bildung}} - {{Der Beitrag}} Des {{Faches}} F\"ur Die {{Schule}}, {{Lernlabor}} Und {{Hochschule}}},
  author = {{Sibylle Reinfried}},
  year = {2016},
  series = {Geographiedidaktische {{Forschungen}}},
  number = {63},
  pages = {124--138},
  urldate = {2019-06-24},
  abstract = {Subjektive Vorstellungen \"uber Ph\"anomene der physischen Welt k\"onnen sehr stabil sein und sich der Ver\"anderung durch Unterricht widersetzen. Eine Erkl\"arung f\"ur die Best\"andigkeit subjektiver Vorstellungen bietet der Kowledge-in-Pieces-Ansatz (KIP) von Andrea diSessa (1993). Gem\"a\ss{} dem konstruktivistischen Lernverst\"andnis die- ses Ansatzes bilden Menschen bei der Interaktion mit der Welt Wissensschemata, sogenannte ph\"anomenologische Primitive (P-Prims). Diese einfachen, allgemein g\"ultigen stabilen Elemente sind stark abstrahierte prototypische Repr\"asentationen von Erfahrungen und bilden die Grundlage des intuitiven Denkens. Sie werden kontextabh\"angig mit bestimmten Informationen zu konzeptuellen Wissenssyste- men verkn\"upft, die aus der Sicht des Individuums Sinn ergeben, auch wenn sie aus wissenschaftlicher Sicht nicht koh\"arent und widerspruchsfrei sind. Da P-Prims unver\"anderlich sind und viele Erfahrungen, mit denen Menschen ihre Wissensnetze konstruieren, Teil ihrer Biographie sind, ver\"andern sich Vorstellungen nur durch die Verkn\"upfung von bestehendem Wissen mit neuen kognitiv-affektiven Erfahrungen und durch die Re-Kontextualisierung von bestehenden konzeptuellen Vorstellun- gen. Der KIP-Ansatz versteht diesen Prozess als Conceptual Change. In der deut- schen geographiedidaktischen Forschung wurde der KIP-Ansatz bisher noch nicht f\"ur die Analyse von Wissensrepr\"asentationen verwendet, obwohl er aufgrund der feink\"ornigen Analysemethoden, die ihm zugrunde liegen, tiefe Einblicke in die Denkprozesse von Lernenden erm\"oglicht. Der KIP-Ansatz wird im vorliegenden Beitrag vorgestellt und auf eine Episode aus einem Interviewprotokoll, in der ein Sch\"uler seine Vorstellungen \"uber Wasserquellen erkl\"art, angewendet. Anschlie- \ss end wird diskutiert, wie Conceptual Change in Bezug auf den vorgestellten Fall zu verstehen ist. Das Thema Quellen steht in diesem Beitrag exemplarisch f\"ur andere Lerngegenst\"ande der physischen Geographie.},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/Z4MPQULM/Sibylle Reinfried - 2016 - Warum subjektive Erklärungen von geographischen Phänomenen Sinn machen – Ein.pdf}
}

@article{sidiUnderstandingMetacognitiveInferiority2017,
  title = {Understanding Metacognitive Inferiority on Screen by Exposing Cues for Depth of Processing},
  author = {Sidi, Yael and Shpigelman, Maya and Zalmanov, Hagar and Ackerman, Rakefet},
  year = {2017},
  month = oct,
  journal = {Learning and Instruction},
  series = {Bridging {{Cognitive Load}} and {{Self-Regulated Learning Research}}},
  volume = {51},
  pages = {61--73},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2017.01.002},
  urldate = {2018-11-06},
  abstract = {Paper-and-pencil learning and testing are gradually shifting to computerized environments. Cognitive and metacognitive researchers find screen inferiority compared to paper in effort regulation, test performance, and extent of overconfidence, in some cases, with unknown differentiating factors. Notably, these studies used reading comprehension tasks involving lengthy texts, which confound technology-related and cognitive factors. We hypothesized that the medium provides a contextual cue which leads to shallower processing on screen regardless of text length, particularly when task characteristics hint that shallow processing is legitimate. To test this hypothesis, we used briefly phrased yet challenging problems for solving on screen or on paper. In Experiment 1, the time frame for solving the problems was manipulated. As with lengthy texts, only time pressure resulted in screen inferiority. In Experiment 2, under a loose time frame, the same problems were now framed as a preliminary task performed before a main problem-solving task. Only the initial task, with reduced perceived importance, revealed screen inferiority similarly to time pressure. In Experiment 3, we replicated Experiment 1's time frame manipulation, using a problem-solving task which involved reading only three isolated words. Screen inferiority in overconfidence was found again only under time pressure. The results suggest that metacognitive processes are sensitive to contextual cues that hint at the expected depth of processing, regardless of the reading burden involved.},
  keywords = {Depth of processing,Effort regulation,Human-computer interaction,Metacognition,Monitoring and control,Problem solving},
  annotation = {00047},
  file = {/Users/igormoreno/Zotero/storage/LB38T3L2/Sidi et al - 2017 - Understanding metacognitive inferiority on screen by exposing cues for depth of.pdf;/Users/igormoreno/Zotero/storage/7EZB55N3/S0959475217300178.html}
}

@article{sidneyHowContrastingCases2015,
  title = {How Do Contrasting Cases and Self-Explanation Promote Learning? {{Evidence}} from Fraction Division},
  shorttitle = {How Do Contrasting Cases and Self-Explanation Promote Learning?},
  author = {Sidney, Pooja G. and Hattikudur, Shanta and Alibali, Martha W.},
  year = {2015},
  month = dec,
  journal = {Learning and Instruction},
  volume = {40},
  pages = {29--38},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2015.07.006},
  urldate = {2022-08-26},
  abstract = {Past research has shown that both contrasting cases instruction and prompts to self-explain promote students' learning in mathematics. However, it is not clear whether these instructional approaches enhance learning through similar mechanisms or whether each supports learning in distinct ways. The purpose of this study was to investigate the unique and combined effects of comparison, defined as noticing similarities and differences, and explanation, defined as making sense of problems, on student learning, and to assess whether these processes are more effective when combined than when implemented separately. We also investigated potential mechanisms involved in comparison and explanation. We addressed these issues in the domain of fraction division. Prompts to self-explain promoted conceptual learning, but inviting comparison, without prompts to self-explain, did not. The quality of students' self-explanations was affected by both prompts to self-explain and encouragement to compare. The findings suggest that contrasting cases instruction is effective, at least in part, because it typically involves self-explanation.},
  langid = {english},
  keywords = {Comparison,Contrasting cases,Explanation,Fraction division,Self-explanation},
  file = {/Users/igormoreno/Zotero/storage/PBDYAAPB/Sidney et al - 2015 - How do contrasting cases and self-explanation promote learning.pdf;/Users/igormoreno/Zotero/storage/A8WVSSTL/S0959475215300207.html}
}

@inproceedings{siegfriedImprovedMobileRobot2017,
  title = {Improved {{Mobile Robot Programming Performance}} through {{Real-time Program Assessment}}},
  booktitle = {Proceedings of the 2017 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Siegfried, R{\'e}my and Klinger, Severin and Gross, Markus and Sumner, Robert W. and Mondada, Francesco and Magnenat, St{\'e}phane},
  year = {2017},
  month = jun,
  pages = {341--346},
  publisher = {{ACM}},
  address = {{Bologna Italy}},
  doi = {10.1145/3059009.3059044},
  urldate = {2020-06-22},
  abstract = {The strong interest children show for mobile robots makes these devices potentially powerful to teach programming. Moreover, the tangibility of physical objects and the sociability of interacting with them are added benefits. A key skill that novices in programming have to acquire is the ability to mentally trace program execution. However, because of their embodied and real-time nature, robots make the mental tracing of program execution difficult.},
  isbn = {978-1-4503-4704-4},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/IB86VN3A/Siegfried et al - 2017 - Improved Mobile Robot Programming Performance through Real-time Program.pdf}
}

@article{sieglerDefiningLocusDevelopmental1975,
  title = {Defining the Locus of Developmental Differences in Children's Causal Reasoning},
  author = {Siegler, Robert S.},
  year = {1975},
  month = dec,
  journal = {Journal of Experimental Child Psychology},
  volume = {20},
  number = {3},
  pages = {512--525},
  issn = {0022-0965},
  doi = {10.1016/0022-0965(75)90123-X},
  urldate = {2018-12-02},
  abstract = {Five experiments were performed in the area of children's causal reasoning to validate a previously reported developmental difference, to examine the role of a possible mediating mechanism, and to test a number of competing theoretical interpretations. As previously, the regularity of a cause-effect pairing influenced the causal attributions of 8- and 9-year-olds but not of 5- and 6-year olds; the results were found not to be artifacts of either a response induced commitment to choosing a particular object or the brevity of the exposure period. The developmental difference also was not explained by discrepant encoding of the term ``cause,'' by memorial deficiencies, or by differences in criteria for drawing causal inferences. Instead, it appeared that greater perceptual distractibility prevented the younger children from searching for and finding the temporally invariant relationship hypothesized to be crucial to inferring causality in the experimental situation.},
  file = {/Users/igormoreno/Zotero/storage/ILYV92W6/Siegler - 1975 - Defining the locus of developmental differences in children's causal reasoning.pdf;/Users/igormoreno/Zotero/storage/NWSYYC36/002209657590123X.html}
}

@article{sieglerDevelopmentRulesStrategies2002,
  title = {Development of {{Rules}} and {{Strategies}}: {{Balancing}} the {{Old}} and the {{New}}},
  shorttitle = {Development of {{Rules}} and {{Strategies}}},
  author = {Siegler, Robert S and Chen, Zhe},
  year = {2002},
  month = apr,
  journal = {Journal of Experimental Child Psychology},
  volume = {81},
  number = {4},
  pages = {446--457},
  issn = {0022-0965},
  doi = {10.1006/jecp.2002.2666},
  urldate = {2018-10-02},
  abstract = {The experiments described in the lead articles replicate findings from previous studies of development of knowledge about balance scales, add several new findings, and raise four key questions: (a) How can rule use best be assessed? (b) How can we reconcile systematic use of rules with variable use of strategies? (c) When do children begin to use rules? and (d) How do children generate new rules? In this Reflection, we summarize current understanding of development of knowledge about balance scales and consider each of the four questions.},
  keywords = {balance scales,cognitive development,encoding.,rule assessment,rule use,scientific reasoning,strategies},
  file = {/Users/igormoreno/Zotero/storage/B33L6IUS/Siegler and Chen - 2002 - Development of Rules and Strategies.pdf;/Users/igormoreno/Zotero/storage/XL6QN6BX/S0022096502926664.html}
}

@article{sieglerDevelopmentTimeSpeed1979,
  title = {Development of Time, Speed, and Distance Concepts},
  author = {Siegler, Robert S. and Richards, D. Dean},
  year = {1979},
  journal = {Developmental Psychology},
  volume = {15},
  number = {3},
  pages = {288--298},
  issn = {1939-0599(Electronic),0012-1649(Print)},
  doi = {10.1037/0012-1649.15.3.288},
  abstract = {Used the rule-assessment approach to examine understanding of the concepts of time, speed, and distance in 36 5-, 8-, and 11-yr-olds and 12 undergraduates. Parallel tasks were developed for the 3 concepts that allowed specification of whether Ss were relying on time, speed, distance, end point, end time, beginning point, or beginning time cues in making their judgments. It was found that 5-yr-olds understood all 3 concepts in the same way: Whichever train ended farther ahead on the tracks was said to have traveled for the longer time, at the faster speed, and for the greater distance. Undergraduates, at the other extreme, understood all 3 concepts as distinct and separate ideas. The transitional period was marked by specific confusions among the 3 concepts: Time was regularly confused with distance, distance was confused with time, and speed was confused with distance and to some extent with end point. Both speed and distance concepts appeared to be mastered well before the concept of time. (15 ref) (PsycINFO Database Record (c) 2016 APA, all rights reserved)},
  keywords = {Age Differences,Cognitive Development,Comprehension,Concepts,Time,Velocity},
  file = {/Users/igormoreno/Zotero/storage/HUZWRSJX/Siegler and Richards - 1979 - Development of time, speed, and distance concepts.pdf;/Users/igormoreno/Zotero/storage/77EVKFTV/1979-28311-001.html}
}

@article{sieglerThreeAspectsCognitive1976,
  title = {Three Aspects of Cognitive Development},
  author = {Siegler, Robert S},
  year = {1976},
  month = oct,
  journal = {Cognitive Psychology},
  volume = {8},
  number = {4},
  pages = {481--520},
  issn = {00100285},
  doi = {10.1016/0010-0285(76)90016-5},
  urldate = {2018-10-02},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/4C5NSGNV/Siegler - 1976 - Three aspects of cognitive development.pdf;/Users/igormoreno/Zotero/storage/KP6NYZWF/Siegler - 1976 - Three aspects of cognitive development.pdf;/Users/igormoreno/Zotero/storage/QBDDHT52/0010028576900165.html}
}

@article{siekRefinedCriteriaGradual2015,
  title = {Refined {{Criteria}} for {{Gradual Typing}}},
  author = {Siek, Jeremy G. and Vitousek, Michael M. and Cimini, Matteo and Boyland, John Tang},
  year = {2015},
  pages = {20 pages},
  publisher = {{Schloss Dagstuhl - Leibniz-Zentrum fuer Informatik GmbH, Wadern/Saarbruecken, Germany}},
  doi = {10.4230/LIPICS.SNAPL.2015.274},
  urldate = {2022-11-21},
  abstract = {Siek and Taha [2006] coined the term gradual typing to describe a theory for integrating static and dynamic typing within a single language that 1) puts the programmer in control of which regions of code are statically or dynamically typed and 2) enables the gradual evolution of code between the two typing disciplines. Since 2006, the term gradual typing has become quite popular but its meaning has become diluted to encompass anything related to the integration of static and dynamic typing. This dilution is partly the fault of the original paper, which provided an incomplete formal characterization of what it means to be gradually typed. In this paper we draw a crisp line in the sand that includes a new formal property, named the gradual guarantee, that relates the behavior of programs that di er only with respect to their type annotations. We argue that the gradual guarantee provides important guidance for designers of gradually typed languages. We survey the gradual typing literature, critiquing designs in light of the gradual guarantee. We also report on a mechanized proof that the gradual guarantee holds for the Gradually Typed Lambda Calculus.},
  collaborator = {Herbstritt, Marc},
  langid = {english},
  keywords = {{000 Computer science, knowledge, general works},Computer Science},
  file = {/Users/igormoreno/Zotero/storage/PS68ARGQ/Siek et al. - 2015 - Refined Criteria for Gradual Typing.pdf}
}

@article{simmonsFalsePositivePsychologyUndisclosed2011,
  title = {False-{{Positive Psychology}}: {{Undisclosed Flexibility}} in {{Data Collection}} and {{Analysis Allows Presenting Anything}} as {{Significant}}},
  shorttitle = {False-{{Positive Psychology}}},
  author = {Simmons, Joseph P. and Nelson, Leif D. and Simonsohn, Uri},
  year = {2011},
  month = nov,
  journal = {Psychological Science},
  volume = {22},
  number = {11},
  pages = {1359--1366},
  publisher = {{SAGE Publications Inc}},
  issn = {0956-7976},
  doi = {10.1177/0956797611417632},
  urldate = {2021-06-08},
  abstract = {In this article, we accomplish two things. First, we show that despite empirical psychologists? nominal endorsement of a low rate of false-positive findings ({$\leq$} .05), flexibility in data collection, analysis, and reporting dramatically increases actual false-positive rates. In many cases, a researcher is more likely to falsely find evidence that an effect exists than to correctly find evidence that it does not. We present computer simulations and a pair of actual experiments that demonstrate how unacceptably easy it is to accumulate (and report) statistically significant evidence for a false hypothesis. Second, we suggest a simple, low-cost, and straightforwardly effective disclosure-based solution to this problem. The solution involves six concrete requirements for authors and four guidelines for reviewers, all of which impose a minimal burden on the publication process.},
  file = {/Users/igormoreno/Zotero/storage/B7YGJHM5/Simmons et al. - 2011 - False-Positive Psychology Undisclosed Flexibility.pdf}
}

@inproceedings{simonAbilityArticulateStrategy2006,
  title = {The {{Ability}} to {{Articulate Strategy As}} a {{Predictor}} of {{Programming Skill}}},
  booktitle = {Proceedings of the 8th {{Australasian Conference}} on {{Computing Education}} - {{Volume}} 52},
  author = {{Simon} and Cutts, Quintin and Fincher, Sally and Haden, Patricia and Robins, Anthony and Sutton, Ken and Baker, Bob and Box, Ilona and {de Raadt}, Michael and Hamer, John and Hamilton, Margaret and Lister, Raymond and Petre, Marian and Tolhurst, Denise and Tutty, Jodi},
  year = {2006},
  series = {{{ACE}} '06},
  pages = {181--188},
  publisher = {{Australian Computer Society, Inc.}},
  address = {{Darlinghurst, Australia, Australia}},
  urldate = {2018-10-02},
  abstract = {A multi-national, multi-institutional study investigating introductory programming courses drew on student participants from eleven institutions, mainly in Australasia, during the academic year of 2004. A number of diagnostic tasks were used to explore cognitive, behavioural, and attitudinal factors such as spatial visualisation and reasoning, the ability to articulate strategies for commonplace search and design tasks, and attitudes to studying. This paper reports in detail on the task that required participants to articulate a commonplace search strategy. The results indicate that increasing measures of richness of articulation of a search strategy are associated with higher marks in the course.},
  isbn = {978-1-920682-34-7},
  keywords = {articulation,programming aptitude},
  file = {/Users/igormoreno/Zotero/storage/FEKX4EWF/Simon et al - 2006 - The Ability to Articulate Strategy As a Predictor of Programming Skill.pdf}
}

@inproceedings{simonAssignmentSequenceWhy2011,
  title = {Assignment and Sequence: Why Some Students Can't Recognise a Simple Swap},
  shorttitle = {Assignment and Sequence},
  booktitle = {Proceedings of the 11th {{Koli Calling International Conference}} on {{Computing Education Research}}},
  author = {Simon},
  year = {2011},
  month = nov,
  series = {Koli {{Calling}} '11},
  pages = {10--15},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2094131.2094134},
  urldate = {2021-01-08},
  abstract = {In the current cycle of the continuing drive to discover why some students have such difficulty learning to program, the goalposts have been moving ever closer to the very fundamentals. On the basis of some very simple multiple-choice questions asked in tests in introductory and subsequent programming courses, it is proposed that many students have not grasped the concept of sequence in programming, the concept that a group of statements in a procedural programming language will be executed in the order in which they appear. This problem was discussed in the programming education literature as long as 25 years ago, but it seems that little has changed in that time. The consequences of the preliminary finding are discussed, and further work is proposed to confirm it or otherwise.},
  isbn = {978-1-4503-1052-9},
  keywords = {CS1,examination papers,introductory programming},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/WUKHX4MK/Simon - 2011 - Assignment and sequence why some students can't r.pdf}
}

@article{simonFunctionalEquivalenceProblem1975,
  title = {The Functional Equivalence of Problem Solving Skills},
  author = {Simon, Herbert A},
  year = {1975},
  month = apr,
  journal = {Cognitive Psychology},
  volume = {7},
  number = {2},
  pages = {268--288},
  issn = {0010-0285},
  doi = {10.1016/0010-0285(75)90012-2},
  urldate = {2018-12-02},
  abstract = {The tower of Hanoi problem is used to show that, even in simple problem environments, numerous distinct solution strategies are available, and different subjects may learn different strategies. Four major classes of solution strategies are described for the problem. Different strategies have different degrees of transferability, place different burdens on short-term memory and on perception, and require different learning processes for their acquisition. The analysis underscores the importance of subject-by-subject analysis of ``what is learned'' in understanding human behavior in problem-solving situations, and provides a technique for describing subjects' task performance programs in detail.},
  file = {/Users/igormoreno/Zotero/storage/J3C2B4FJ/Simon - 1975 - The functional equivalence of problem solving skills.pdf;/Users/igormoreno/Zotero/storage/CNLQ9VV5/0010028575900122.html}
}

@inproceedings{simonIntroductoryProgrammingExamining2012,
  title = {Introductory Programming: Examining the Exams},
  booktitle = {Proceedings of the {{Fourteenth Australasian Computing Education Conference}} ({{ACE2012}})},
  author = {{Simon} and {Judy Sheard} and {Angela Carbone} and {Donald Chinn} and {Mikko-Jussi Laakso} and {Tony Clear} and {Michael de Raadt} and {Daryl D'Souza} and {Raymond Lister} and {Anne Philpott} and {James Skene} and {Geoff Warburton}},
  year = {2012},
  address = {{Melbourne, Australia}},
  file = {/Users/igormoreno/Zotero/storage/LRT2NPUQ/Simon et al - 2012 - Introductory programming.pdf}
}

@article{simonModelingStrategyShifts1976,
  title = {Modeling Strategy Shifts in a Problem-Solving Task},
  author = {Simon, Herbert A and Reed, Stephen K},
  year = {1976},
  month = jan,
  journal = {Cognitive Psychology},
  volume = {8},
  number = {1},
  pages = {86--97},
  issn = {0010-0285},
  doi = {10.1016/0010-0285(76)90005-0},
  urldate = {2018-12-02},
  abstract = {A computer simulation model was fitted to human laboratory data for the Missionaries and Cannibals task to explain (1) the effects upon problem performance of giving a hint, and (2) the effects of solving the problem a second time after one successful solution had been achieved. Most of the variance in the relative frequencies of different moves can be explained by positing that the effect of the hint, or of previous experience in solving the problem, is to cause subjects to switch more promptly from a strategy of balancing the numbers of missionaries and cannibals on both sides of the river, to a means-ends strategy.},
  file = {/Users/igormoreno/Zotero/storage/A7E5LPXH/Simon and Reed - 1976 - Modeling strategy shifts in a problem-solving task.pdf;/Users/igormoreno/Zotero/storage/RX6NHCR4/0010028576900050.html}
}

@inproceedings{simonSolowayRainfallProblem2013,
  title = {Soloway's {{Rainfall Problem Has Become Harder}}},
  booktitle = {2013 {{Learning}} and {{Teaching}} in {{Computing}} and {{Engineering}}},
  author = {{Simon}},
  year = {2013},
  month = mar,
  pages = {130--135},
  doi = {10.1109/LaTiCE.2013.44},
  abstract = {Discussing the use of plans in programming and in programming education, Soloway describes a programming task that has come to be known as the rainfall problem. This problem was used in a number of empirical experiments in the 1980s and 1990s, and was generally recognised as being quite difficult for student programmers. This paper reports that when the rainfall problem was recently used as an examination question in an introductory programming course, the students performed extremely poorly on it. These students are presumably no better than the many students who have been set this problem in the past, but it also appears that the problem has become harder than it was 20 years ago. For example, the problem assumes that loop-controlled keyboard input is standard, whereas in many programming environments nowadays the standard has become event-driven GUI input. As a consequence of this change, students are less likely to be familiar with loop-controlled keyboard input and with the use of a sentinel to terminate input, another feature of the rainfall problem. While there is potential value in comparing the performance of today's students with that in the literature of past decades, it is important to consider changes in technology that might impose a different level of challenge on the same problem.},
  keywords = {Arrays,computer science education,Context,Education,event-driven GUI input,graphical user interface,graphical user interfaces,Indexes,introductory programming course,Keyboards,loop-controlled keyboard input,programming,programming education,Programming profession,rainfall,Soloway,Soloway rainfall problem,student programmer},
  file = {/Users/igormoreno/Zotero/storage/KI75TELB/Simon - 2013 - Soloway's Rainfall Problem Has Become Harder.pdf;/Users/igormoreno/Zotero/storage/FU259VBA/6542249.html}
}

@article{simonUnderstandingProcessProblem1976,
  title = {The Understanding Process: {{Problem}} Isomorphs},
  shorttitle = {The Understanding Process},
  author = {Simon, Herbert A and Hayes, John R},
  year = {1976},
  month = apr,
  journal = {Cognitive Psychology},
  volume = {8},
  number = {2},
  pages = {165--190},
  issn = {0010-0285},
  doi = {10.1016/0010-0285(76)90022-0},
  urldate = {2018-12-02},
  file = {/Users/igormoreno/Zotero/storage/SRAVBKRW/Simon and Hayes - 1976 - The understanding process.pdf;/Users/igormoreno/Zotero/storage/C85HX4LY/0010028576900220.html}
}

@article{simonWhatComputersMean1977,
  title = {What {{Computers Mean}} for {{Man}} and {{Society}}},
  author = {Simon, Herbert A.},
  year = {1977},
  month = mar,
  journal = {Science},
  volume = {195},
  number = {4283},
  pages = {1186--1191},
  publisher = {{American Association for the Advancement of Science}},
  doi = {10.1126/science.195.4283.1186},
  urldate = {2022-05-28},
  file = {/Users/igormoreno/Zotero/storage/24ZITWAT/Simon - 1977 - What Computers Mean for Man and Society.pdf}
}

@article{sinhaDifferentialBenefitsExplicit2020,
  title = {Differential Benefits of Explicit Failure-Driven and Success-Driven Scaffolding in Problem-Solving Prior to Instruction.},
  author = {Sinha, Tanmay and Kapur, Manu and West, Robert and Catasta, Michele and Hauswirth, Matthias and Trninic, Dragan},
  year = {2020},
  month = jun,
  journal = {Journal of Educational Psychology},
  issn = {1939-2176, 0022-0663},
  doi = {10.1037/edu0000483},
  urldate = {2020-06-23},
  abstract = {Previous research has implicated that deliberate, guided failure may be beneficial for learning. This study is the first to experimentally show how, and why, explicitly designing for experiences of failure (or success) during problem-solving prior to instruction can differentially impact students' learning. Results based on posttest outcomes and quality of reasoning indicate that nudging students toward suboptimal solutions may lead to stronger conceptual understanding than nudging students toward more optimal solutions. Replication of these findings would warrant emphasis on explicitly designing failure-driven experiences before formal instruction.},
  copyright = {All rights reserved},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/6XN8IQJ9/Sinha et al. - 2020 - Differential benefits of explicit failure-driven a.pdf;/Users/igormoreno/Zotero/storage/CUJSSMI5/Sinha et al. - 2020 - Differential benefits of explicit failure-driven a.pdf}
}

@article{sinhaImpactExplicitFailure2019,
  title = {Impact of {{Explicit Failure}} and {{Success-driven Preparatory Activities}} on {{Learning}}},
  author = {Sinha, Tanmay and Kapur, Manu and West, Robert and Catasta, Michele and Hauswirth, Matthias and Trninic, Dragan},
  year = {2019},
  month = jul,
  journal = {Proceedings of the Annual Meeting of the Cognitive Science Society},
  pages = {7},
  copyright = {All rights reserved},
  langid = {english},
  annotation = {00001},
  file = {/Users/igormoreno/Zotero/storage/4THWKG2V/Sinha et al - 2019 - Impact of Explicit Failure and Success-driven Preparatory Activities on Learning.pdf}
}

@article{sinkavichPerformanceMetamemoryStudents1995,
  title = {Performance and Metamemory: {{Do}} Students Know What They Don't Know?},
  shorttitle = {Performance and Metamemory},
  author = {Sinkavich, Frank J.},
  year = {1995},
  month = mar,
  journal = {Journal of Instructional Psychology},
  volume = {22},
  number = {1},
  pages = {77},
  publisher = {{Educational Innovations}},
  issn = {00941956},
  abstract = {Assesses the relationship between metamemory accuracy and student test performance.  Assessment of students' degree of confidence in multiple choice test answers; Relevance to actual test item performance; Metacognitive differences between good and poor students.},
  keywords = {Metacognition,Psychology of students},
  annotation = {00113},
  file = {/Users/igormoreno/Zotero/storage/G5RPJG6W/Sinkavich - 1995 - Performance and metamemory Do students know what .html}
}

@phdthesis{sirkiaCreatingTailoringDistributing2017,
  title = {Creating, {{Tailoring}}, and {{Distributing Program Animations}}},
  author = {Sirki{\"a}, Teemu},
  year = {2017},
  month = sep,
  address = {{Helsinki, Finland}},
  abstract = {Modern web technologies have enabled new ways of producing interactive learning content. This content can be embedded into course materials on the web. Still the process to produce and distribute online activities is challenging for instructors. In this thesis, we introduce three new systems to support the process of producing learning content, distributing it, and letting instructors customize the content to their particular teaching goals and contexts. More specifically, we explore the topic in the domain of computer science education. We use program animations as a central theme. In addition to describing the technical aspects, we report preliminary results from CS1 courses which have used these systems to provide interactive content for learners. The first part of the thesis presents the Jsvee library for creating program animations which gives a visual representation of a notional machine and shows how the program state changes when a program is executed step-by-step. Animations are aimed at novice programmers who are learning the execution model. The library supports expression-level visualization, and because of its extensibility, it can support programming language specific visualizations. In addition to the technical discussion, we present preliminary results how learners in two different CS1 courses used the animations made with Jsvee. We use automatically collected log files as a primary data source to analyze the usage. Although learners did not receive any points, over 80\% of novices voluntary viewed animations throughout the CS1 course which tightly integrated over 50 animations with other course materials.},
  langid = {english},
  school = {Aalto University},
  file = {/Users/igormoreno/Zotero/storage/VHLW856C/Sirkiä - Creating, Tailoring, and Distributing Program Anim.pdf}
}

@inproceedings{sirkiaExploringExpressionlevelProgram2014,
  title = {Exploring Expression-Level Program Visualization in {{CS1}}},
  booktitle = {Proceedings of the 14th {{Koli Calling International Conference}} on {{Computing Education Research}} - {{Koli Calling}} '14},
  author = {Sirki{\"a}, Teemu},
  year = {2014},
  pages = {153--157},
  publisher = {{ACM Press}},
  address = {{Koli, Finland}},
  doi = {10.1145/2674683.2674687},
  urldate = {2020-06-22},
  abstract = {Currently, most of the existing program visualization systems use line-based visualization. Another option is to have expression-level visualization which uses finer granularity to provide more details about the execution. This helps novice programmers to understand the integral role of the expression evaluation and the correct execution model. Expression-level visualization can be useful, for example, to demonstrate function calls and object-oriented programming among the other basic features. However, creating program visualizations at expression-level is difficult because there are few suitable means to generate all the required information they need. Static code analysis combined with the line-based tracing information may offer new ways to solve the technical problems in creating expression-level visualizations.},
  isbn = {978-1-4503-3065-7},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/QD4HRMCW/Sirkiä - 2014 - Exploring expression-level program visualization in CS1.pdf}
}

@inproceedings{sirkiaExploringProgrammingMisconceptions2012,
  ids = {sirkiaExploringProgrammingMisconceptions2012a},
  title = {Exploring Programming Misconceptions: An Analysis of Student Mistakes in Visual Program Simulation Exercises},
  shorttitle = {Exploring Programming Misconceptions},
  booktitle = {Proceedings of the 12th {{Koli Calling International Conference}} on {{Computing Education Research}} - {{Koli Calling}} '12},
  author = {Sirki{\"a}, Teemu and Sorva, Juha},
  year = {2012},
  pages = {19--28},
  publisher = {{ACM Press}},
  address = {{Koli, Finland}},
  doi = {10.1145/2401796.2401799},
  urldate = {2021-01-08},
  abstract = {Visual program simulation (VPS) is a form of interactive program visualization in which novice programmers practice tracing computer programs: using a graphical interface, they are expected to correctly indicate each consecutive stage in the execution of a given program. Naturally, students make mistakes during VPS; in this article, we report a study of such mistakes.},
  isbn = {978-1-4503-1795-5},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/CH2SQQI3/Sirkiä e Sorva - 2012 - Exploring programming misconceptions an analysis .pdf;/Users/igormoreno/Zotero/storage/HNPGP7ZZ/Sirkiä and Sorva - 2012 - Exploring programming misconceptions an analysis .pdf}
}

@inproceedings{sirkiaHowStudentsUse2015,
  title = {How {{Do Students Use Program Visualizations}} within an {{Interactive Ebook}}?},
  booktitle = {Proceedings of the Eleventh Annual {{International Conference}} on {{International Computing Education Research}} - {{ICER}} '15},
  author = {Sirki{\"a}, Teemu and Sorva, Juha},
  year = {2015},
  pages = {179--188},
  publisher = {{ACM Press}},
  address = {{Omaha, Nebraska, USA}},
  doi = {10.1145/2787622.2787719},
  urldate = {2020-06-22},
  abstract = {We investigated students' use of program visualizations (PVs) that were tightly integrated into the electronic book of an introductory course on programming. A quantitative analysis of logs showed that most students, and beginners especially, used the PVs, even where the PV did not directly affect their grade. Students commonly spent more time studying certain steps than others, suggesting they used the PVs attentively. Nevertheless, substantial numbers of students appeared to gloss over some key animation steps, something that future improvements to pedagogy may address. Overall, the results suggest that integrating PVs into an ebook can promote student engagement and has been fairly successful in the studied context. More research is needed to understand the differences between our results and earlier ones, and to assess the generalizability of our findings.},
  isbn = {978-1-4503-3630-7},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/Q3Y2WE9Q/Sirkiä and Sorva - 2015 - How Do Students Use Program Visualizations within an Interactive Ebook.pdf}
}

@inproceedings{sirkiaJavaScriptLibraryVisualizing2013,
  title = {A {{JavaScript}} Library for Visualizing Program Execution},
  booktitle = {Proceedings of the 13th {{Koli Calling International Conference}} on {{Computing Education Research}} - {{Koli Calling}} '13},
  author = {Sirki{\"a}, Teemu},
  year = {2013},
  pages = {189--190},
  publisher = {{ACM Press}},
  address = {{Koli, Finland}},
  doi = {10.1145/2526968.2526990},
  urldate = {2020-06-22},
  abstract = {In this poster, we present a JavaScript library which can be used to create educational program visualization applications for multiple programming languages. By using modern web technologies, visualizations can be embedded in web pages, allowing them to be used with all modern web browsers on different platforms.},
  isbn = {978-1-4503-2482-3},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/VIIE2LFP/Sirkiä - 2013 - A JavaScript library for visualizing program execution.pdf}
}

@article{sirkiaJsveeKelmuCreating2018,
  title = {Jsvee \& {{Kelmu}}: {{Creating}} and Tailoring Program Animations for Computing Education: {{Jsvee}} \& {{Kelmu}}: {{Creating}} and {{Tailoring Program Animations}}},
  shorttitle = {Jsvee \& {{Kelmu}}},
  author = {Sirki{\"a}, Teemu},
  year = {2018},
  month = feb,
  journal = {Journal of Software: Evolution and Process},
  volume = {30},
  number = {2},
  pages = {e1924},
  issn = {20477473},
  doi = {10.1002/smr.1924},
  urldate = {2020-06-22},
  abstract = {To learn to program, a novice programmer must understand the dynamic, runtime aspect of program code, a so-called notional machine. Understanding the machine can be easier when it is represented graphically, and tools have been developed to this end. However, these tools typically support only 1 programming language and do not work in a Web browser. In this article, we present the functionality and technical implementation of the 2 visualization tools. First, the language-agnostic and extensible Jsvee library helps instructors visualize notional machines and create expression-level program animations for online course materials. Second, instructors can use the Kelmu toolkit to augment automatically generated animations, for instance, by adding annotations such as textual explanations and arrows on top of the original animation. Both of these libraries have been used in introductory programming courses, and there is preliminary evidence that learners find the animations useful and annotated animations change student behavior.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/D9XTGBZQ/Sirkiä - 2018 - Jsvee & Kelmu Creating and tailoring program anim.pdf}
}

@inproceedings{sirkiaTailoringAnimationsExample2015,
  title = {Tailoring Animations of Example Programs},
  booktitle = {Proceedings of the 15th {{Koli Calling Conference}} on {{Computing Education Research}} - {{Koli Calling}} '15},
  author = {Sirki{\"a}, Teemu and Sorva, Juha},
  year = {2015},
  pages = {147--151},
  publisher = {{ACM Press}},
  address = {{Koli, Finland}},
  doi = {10.1145/2828959.2828965},
  urldate = {2020-06-22},
  abstract = {We are developing a toolkit for tailoring program visualizations (PVs) so that they integrate well into their pedagogical contexts. Educators can use the toolkit, Kelmu, to alter animations of example programs with text, visual cues, audio, and interactions. Rather than generating animations itself, Kelmu attaches to other PV tools and augments their output. In this work-in-progress report, we present the research-based rationale behind Kelmu, show examples of how the toolkit can be used, and outline future work.},
  isbn = {978-1-4503-4020-5},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/YPQAQATV/Sirkiä and Sorva - 2015 - Tailoring animations of example programs.pdf}
}

@misc{SketchnSketch,
  title = {Sketch-n-{{Sketch}}},
  urldate = {2023-01-21},
  howpublished = {https://ravichugh.github.io/sketch-n-sketch/},
  file = {/Users/igormoreno/Zotero/storage/43MTKQY2/sketch-n-sketch.html}
}

@misc{Skia2022,
  title = {Skia},
  year = {2022},
  journal = {Skia},
  urldate = {2022-07-21},
  abstract = {2D Graphics Library},
  howpublished = {https://skia.org/},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/JLS3TNHV/skia.org.html}
}

@article{skinnerDevelopmentApplicationMultimodal2018,
  title = {Development and Application of a Multi-Modal Task Analysis to Support Intelligent Tutoring of Complex Skills},
  author = {Skinner, Anna and Diller, David and Kumar, Rohit and {Cannon-Bowers}, Jan and Smith, Roger and Tanaka, Alyssa and Julian, Danielle and Perez, Ray},
  year = {2018},
  month = dec,
  journal = {International Journal of STEM Education},
  volume = {5},
  number = {1},
  issn = {2196-7822},
  doi = {10.1186/s40594-018-0108-5},
  urldate = {2018-12-28},
  abstract = {Background: Contemporary work in the design and development of intelligent training systems employs task analysis (TA) methods for gathering knowledge that is subsequently encoded into task models. These task models form the basis of intelligent interpretation of student performance within education and training systems. Also referred to as expert models, they represent the optimal way(s) of performing a training task. Within Intelligent Tutoring Systems (ITSs), real-time comparison of trainee task performance against the task model drives automated assessment and interactive support (such as immediate feedback) functionality. However, previous task analysis (TA) methods, including various forms of cognitive task analysis (CTA), may not be sufficient to support identification of the detailed design specifications required for the development of an ITS for a complex training task incorporating multiple underlying skill components, as well as multi-modal information presentation, assessment, and feedback modalities. Our current work seeks to develop an ITS for training Robotic Assisted Laparoscopic Surgery (RALS), a complex task domain that requires a coordinated utilization of integrated cognitive, psychomotor, and perceptual skills. Results: In this paper, we describe a methodological extension to CTA, referred to as multi-modal task analysis (MMTA) that elicits and captures the nuances of integrated and isolated cognitive, psychomotor, and perceptual skill modalities as they apply to training and performing complex operational tasks. In the current case, we illustrate the application of the MMTA method described here to RALS training tasks. The products of the analysis are quantitatively summarized, and observations from a preliminary qualitative validation are reported. Conclusions: We find that iterative use of the described MMTA method leads to sufficiently complete and robust task models to support encoding of cognitive, psychomotor, and perceptual skills requisite to training and performance of complex skills within ITS task models.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/MFYUYUPT/Skinner et al - 2018 - Development and application of a multi-modal task analysis to support.pdf}
}

@article{sleemanPascalHighSchool1986,
  ids = {sleemanPascalHighSchool1986b},
  title = {Pascal and {{High School Students}}: {{A Study}} of {{Errors}}},
  shorttitle = {Pascal and {{High School Students}}},
  author = {Sleeman, D. and Putnam, Ralph T. and Baxter, Juliet and Kuspa, Laiani},
  year = {1986},
  month = feb,
  journal = {Journal of Educational Computing Research},
  volume = {2},
  number = {1},
  pages = {5--23},
  publisher = {{SAGE Publications Inc}},
  issn = {0735-6331},
  doi = {10.2190/2XPP-LTYH-98NQ-BU77},
  urldate = {2021-01-08},
  abstract = {A screening test was given to three classes of high school students, who were just completing introductory semester-long courses in Pascal. These tests were graded, and subsequently thirty-five students were given detailed clinical interviews. These interviews showed that errors were made with essentially every Pascal construct. Over half the students were classified as having major difficulties\textemdash fewer than 10 percent had no difficulties. The errors noted are discussed in detail in this article. A major finding is that the students attribute to the computer the reasoning power of an average person. The article also speculates about how difficult it might be to remediate the errors found, and concludes with an outline of future work.},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/GGAEJEVU/Sleeman et al. - 1986 - Pascal and High School Students A Study of Errors.pdf;/Users/igormoreno/Zotero/storage/KTPF6Z9X/Sleeman et al - 1986 - Pascal and High School Students.pdf;/Users/igormoreno/Zotero/storage/GFLH8P3L/2XPP-LTYH-98NQ-BU77.html}
}

@article{slobinGrammaticalTransformationsSentence1966,
  title = {Grammatical Transformations and Sentence Comprehension in Childhood and Adulthood},
  author = {Slobin, Dan I.},
  year = {1966},
  month = jun,
  journal = {Journal of Verbal Learning and Verbal Behavior},
  volume = {5},
  number = {3},
  pages = {219--227},
  issn = {0022-5371},
  doi = {10.1016/S0022-5371(66)80023-3},
  urldate = {2018-12-02},
  abstract = {Children and adults verified sentences of four grammatical types\textemdash ``kernel,'' passive, negative, and passive negative\textemdash with respect to pictures. The pictures presented situations which were either reversible, in that the object of action could also serve as the subject, or nonreversible, in that the object could not normally serve as the subject. Chomsky's syntactic competence model correctly predicted that passives would take more time to evaluate than kernels, and passive negatives more time than negatives; but semantic and psychological factors are required to explain the finding that syntactically simple negatives took more time than relatively more complex passives. Making sentences nonreversible largely washed out the difference in syntactic complexity between active and passive sentences, making passives about as easy as kernels, and passive negatives about as easy as negatives. It is argued that nonreversibility facilitates comprehension of passive (both affirmative and negative) sentences in that, although the normal subject-object order is reversed, it is still clear which of the two nouns is subject and which object. The syntactic theory also does not account for an obtained interaction between truth value and affirmation-negation. All of the factors considered\textemdash syntactic, semantic, and pragmatic\textemdash are important in accounting for the performance of Ss as young as six.},
  file = {/Users/igormoreno/Zotero/storage/37685D85/Slobin - 1966 - Grammatical transformations and sentence comprehension in childhood and.pdf;/Users/igormoreno/Zotero/storage/IYAWKCMH/S0022537166800233.html}
}

@article{smagorinskyTwistingPathConcept2003,
  title = {The {{Twisting Path}} of {{Concept Development}} in {{Learning}} to {{Teach}}},
  author = {Smagorinsky, Peter and Cook, Leslie Susan and Johnson, Tara Star},
  year = {2003},
  month = oct,
  journal = {Teachers College Record},
  volume = {105},
  number = {8},
  pages = {1399--1436},
  issn = {0161-4681, 1467-9620},
  doi = {10.1111/1467-9620.00296},
  urldate = {2018-10-22},
  abstract = {Teacher education is often viewed as too theoretical and not sufficiently concerned with the realities of classroom practice. From this perspective theory and practice are cast as distinct realms whose only connection comes when theory influences practice. We argue that the theory/practice dichotomy lacks the richness of Vygotsky's notion of concepts, in which abstract principles are interwoven with worldly experience. More specifically, Vygotsky distinguishes two types of concepts, spontaneous concepts and scientific concepts. Spontaneous concepts are learned through cultural practice and, because they are tied to learning in specific contexts, allow for limited generalization to new situations; scientific concepts are learned through formal instruction and, because they are grounded in general principles, can more readily be applied to new situations. Vygotsky argues that while spontaneous concepts may be developed without formal instruction, scientific concepts require interplay with spontaneous concepts; hence the problematic nature of the theory/practice dichotomy. He further identifies two types of generalization that approximate concepts yet do not achieve their theoretical unity: complexes, in which some members of the set may be unified with others but all are not unified according to the same principle; and pseudoconcepts, in which members of the set appear unified but include internal inconsistencies. We argue that teacher educators should strive to teach concepts, though the overall structure of teacher education programs makes it more likely that their students will learn complexes or pseudoconcepts. We illustrate these problems with examples from case studies of teachers making the transition from their teacher education programs to their first jobs.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/L7FNXF8X/Smagorinsky et al - 2003 - The Twisting Path of Concept Development in Learning to Teach.pdf}
}

@book{smallQualitativeLiteracyGuide2022,
  title = {Qualitative {{Literacy}}: {{A Guide}} to {{Evaluating Ethnographic}} and {{Interview Research}}},
  shorttitle = {Qualitative {{Literacy}}},
  author = {Small, Mario Luis and Calarco, Jessica McCrory},
  year = {2022},
  month = aug,
  urldate = {2023-01-03},
  abstract = {Suppose you were given two qualitative studies: one is a piece of empirically sound social science and the other, though interesting and beautifully written, is not. How would you tell the difference?~Qualitative Literacy presents criteria to assess qualitative research methods such as in-depth interviewing and participant observation. Qualitative research is indispensable to the study of inequality, poverty, education, public health, immigration, the family, and criminal justice. Each of the hundreds of ethnographic and interview studies published yearly on these issues is scientifically either sound or unsound. This guide provides social scientists, researchers, students, evaluators, policy makers, and journalists with the tools needed to identify and evaluate quality in field research.},
  copyright = {Available worldwide},
  isbn = {978-0-520-39066-9},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/LPXV5HMU/Sample.pdf}
}

@inproceedings{smetsers-weedaProblemSolvingAlgorithmic2017,
  title = {Problem {{Solving}} and {{Algorithmic Development}} with {{Flowcharts}}},
  booktitle = {Proceedings of the 12th {{Workshop}} on {{Primary}} and {{Secondary Computing Education}}},
  author = {{Smetsers-Weeda}, Renske and Smetsers, Sjaak},
  year = {2017},
  month = nov,
  pages = {25--34},
  publisher = {{ACM}},
  address = {{Nijmegen Netherlands}},
  doi = {10.1145/3137065.3137080},
  urldate = {2020-06-22},
  abstract = {Programming, where problem solving and coding come together, is cognitively demanding. Whereas traditional instructional strategies tend to focus on language constructs, the problem solving skills required for programming remain underexposed.},
  isbn = {978-1-4503-5428-8},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/TGS52ZGG/Smetsers-Weeda and Smetsers - 2017 - Problem Solving and Algorithmic Development with Flowcharts.pdf}
}

@misc{smithAperiodicMonotile2023,
  title = {An Aperiodic Monotile},
  author = {Smith, David and Myers, Joseph Samuel and Kaplan, Craig S. and {Goodman-Strauss}, Chaim},
  year = {2023},
  month = may,
  number = {arXiv:2303.10798},
  eprint = {2303.10798},
  primaryclass = {cs, math},
  publisher = {{arXiv}},
  doi = {10.48550/arXiv.2303.10798},
  urldate = {2023-07-22},
  abstract = {A longstanding open problem asks for an aperiodic monotile, also known as an "einstein": a shape that admits tilings of the plane, but never periodic tilings. We answer this problem for topological disk tiles by exhibiting a continuum of combinatorially equivalent aperiodic polygons. We first show that a representative example, the "hat" polykite, can form clusters called "metatiles", for which substitution rules can be defined. Because the metatiles admit tilings of the plane, so too does the hat. We then prove that generic members of our continuum of polygons are aperiodic, through a new kind of geometric incommensurability argument. Separately, we give a combinatorial, computer-assisted proof that the hat must form hierarchical -- and hence aperiodic -- tilings.},
  archiveprefix = {arxiv},
  keywords = {{05B45, 52C20 (Primary) 05B50 (Secondary)},Computer Science - Discrete Mathematics,F.2.2,G.2.1,Mathematics - Combinatorics,Mathematics - Metric Geometry},
  file = {/Users/igormoreno/Zotero/storage/9M9PRXUI/Smith et al - 2023 - An aperiodic monotile.pdf;/Users/igormoreno/Zotero/storage/9MD3A4SX/2303.html}
}

@inproceedings{smithAutoGeneratingVisualExercises2019,
  title = {Auto-{{Generating Visual Exercises}} for {{Learning Program Semantics}}},
  booktitle = {Proceedings of the 2019 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Smith, Rebecca and Tang, Terry and Warren, Joe and Rixner, Scott},
  year = {2019},
  month = jul,
  pages = {360--366},
  publisher = {{ACM}},
  address = {{Aberdeen Scotland Uk}},
  doi = {10.1145/3304221.3319741},
  urldate = {2020-06-22},
  abstract = {Understanding program execution is a challenging task for novice programmers. The semantic rules which determine how execution affects the program state are numerous and complex, and students frequently hold fundamental misconceptions about these rules. If students do not build a correct mental model of program execution early on, they will face substantial hurdles as they try to develop and debug their code. This paper presents VizQuiz, a tool for autogenerating multiple choice quizzes designed to help students gain insight into the semantic rules which govern program execution. VizQuiz provides students with an initial state and a piece of code, and tasks them with mentally tracing the execution of that code and selecting the correct final state. Reference diagrams are used to depict the initial and final states, and as feedback to help students visualize the correct behavior if they select a wrong answer. Feedback is auto-generated, so students can immediately correct their misconceptions and re-attempt.},
  isbn = {978-1-4503-6895-7},
  langid = {english},
  keywords = {To Read},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/R5FFFFIX/Smith et al - 2019 - Auto-Generating Visual Exercises for Learning Program Semantics.pdf}
}

@misc{smithChiralAperiodicMonotile2023,
  title = {A Chiral Aperiodic Monotile},
  author = {Smith, David and Myers, Joseph Samuel and Kaplan, Craig S. and {Goodman-Strauss}, Chaim},
  year = {2023},
  month = may,
  number = {arXiv:2305.17743},
  eprint = {2305.17743},
  primaryclass = {cs, math},
  publisher = {{arXiv}},
  doi = {10.48550/arXiv.2305.17743},
  urldate = {2023-07-22},
  abstract = {The recently discovered "hat" aperiodic monotile mixes unreflected and reflected tiles in every tiling it admits, leaving open the question of whether a single shape can tile aperiodically using translations and rotations alone. We show that a close relative of the hat -- the equilateral member of the continuum to which it belongs -- is a weakly chiral aperiodic monotile: it admits only non-periodic tilings if we forbid reflections by fiat. Furthermore, by modifying this polygon's edges we obtain a family of shapes called Spectres that are strictly chiral aperiodic monotiles: they admit only chiral non-periodic tilings based on a hierarchical substitution system.},
  archiveprefix = {arxiv},
  keywords = {{05B45, 52C20 (Primary) 05B50 (Secondary)},Computer Science - Discrete Mathematics,F.2.2,G.2.1,Mathematics - Combinatorics,Mathematics - Metric Geometry},
  file = {/Users/igormoreno/Zotero/storage/QEGSU4HU/Smith et al - 2023 - A chiral aperiodic monotile.pdf;/Users/igormoreno/Zotero/storage/IHM9332W/2305.html}
}

@inproceedings{smithCompigorithmInteractiveTool2020,
  title = {Compigorithm: {{An Interactive Tool}} for {{Guided Practice}} of {{Complexity Analysis}}},
  shorttitle = {Compigorithm},
  booktitle = {Proceedings of the 2020 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Smith, Rebecca and Rixner, Scott},
  year = {2020},
  month = jun,
  pages = {363--369},
  publisher = {{ACM}},
  address = {{Trondheim Norway}},
  doi = {10.1145/3341525.3387390},
  urldate = {2021-06-14},
  abstract = {It is essential that students learn to write code that is not only correct, but also efficient. To that end, algorithmic complexity analysis techniques, such as Big-O analysis, are typically an important part of courses on algorithm design. However, students often hold fundamental misconceptions about how Big-O analysis works. This paper presents Compigorithm, an interactive tool for helping students practice Big-O analysis. Compigorithm scaffolds student learning by breaking down the analysis process into five concrete steps and walking students through each of these steps. When students make mistakes, they are provided with automated hints and allowed to re-attempt until they get the correct answer. Compigorithm was piloted in an introductory algorithms course and evaluated using a controlled experiment. The experimental group trained by analyzing algorithms using Compigorithm, while the control group analyzed the same algorithms by hand. On the subsequent posttest, the experimental group outperformed the control group by a significant margin (p {$<$} 0.00001; Cohen's d = 0.84).},
  isbn = {978-1-4503-6874-2},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/IJSVTRQT/Smith e Rixner - 2020 - Compigorithm An Interactive Tool for Guided Pract.pdf}
}

@article{smithCourseAnsweringQuestions1993,
  title = {On the {{Course}} of {{Answering Questions}}},
  author = {Smith, Vicki L. and Clark, Herbert H.},
  year = {1993},
  month = feb,
  journal = {Journal of Memory and Language},
  volume = {32},
  number = {1},
  pages = {25--38},
  issn = {0749596X},
  doi = {10.1006/jmla.1993.1002},
  urldate = {2020-10-30},
  langid = {english},
  annotation = {00385},
  file = {/Users/igormoreno/Zotero/storage/DTKHHLSL/Smith e Clark - 1993 - On the Course of Answering Questions.pdf}
}

@inproceedings{smithErrorLandscapeCharacterizing2019,
  title = {The {{Error Landscape}}: {{Characterizing}} the {{Mistakes}} of {{Novice Programmers}}},
  shorttitle = {The {{Error Landscape}}},
  booktitle = {Proceedings of the 50th {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Smith, Rebecca and Rixner, Scott},
  year = {2019},
  month = feb,
  pages = {538--544},
  publisher = {{ACM}},
  address = {{Minneapolis MN USA}},
  doi = {10.1145/3287324.3287394},
  urldate = {2022-02-01},
  abstract = {The software development process often follows a circuitous path, littered with mistakes and backtracks. This is particularly true for novice programmers, who typically navigate through a variety of errors en route to their final solution. This paper presents a quantitative analysis of a large dataset of Python programs written by novice students. The analysis paints a multifaceted picture of the errors that students encounter, providing insight into the distribution, duration, and evolution of these errors. Ultimately, this paper aims to incite further conversation on the mistakes made by novice programmers, and to inform the decisions instructors make as they help students overcome these mistakes.},
  isbn = {978-1-4503-5890-3},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/YA8FFTU5/Smith e Rixner - 2019 - The Error Landscape Characterizing the Mistakes o.pdf}
}

@article{smithiiiMisconceptionsReconceivedConstructivist1994,
  title = {Misconceptions {{Reconceived}}: {{A Constructivist Analysis}} of {{Knowledge}} in {{Transition}}},
  shorttitle = {Misconceptions {{Reconceived}}},
  author = {Smith III, John P. and {diSessa}, Andrea A. and Roschelle, Jeremy},
  year = {1994},
  month = apr,
  journal = {Journal of the Learning Sciences},
  volume = {3},
  number = {2},
  pages = {115--163},
  issn = {1050-8406, 1532-7809},
  doi = {10.1207/s15327809jls0302_1},
  urldate = {2018-10-22},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/B6567XBS/Smith III et al - 1994 - Misconceptions Reconceived.pdf}
}

@article{smithLongTermEffects2018,
  title = {Long {{Term Effects}} of {{Pair Programming}}},
  author = {Smith, Max O. and Giugliano, Andrew and DeOrio, Andrew},
  year = {2018},
  month = aug,
  journal = {IEEE Transactions on Education},
  volume = {61},
  number = {3},
  pages = {187--194},
  issn = {0018-9359, 1557-9638},
  doi = {10.1109/TE.2017.2773024},
  urldate = {2020-06-22},
  abstract = {Contribution: This paper provides evidence for the benefits of pair programming early in the curriculum on student performance later in the curriculum. It also confirms the short term benefits of partnerships at scale.},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/KULHSY3M/Smith et al - 2018 - Long Term Effects of Pair Programming.pdf}
}

@article{smithReinforcingGenericComputer,
  title = {Reinforcing a {{Generic Computer Model}} for {{Novice Programmers}}},
  author = {Smith, Philip A and Webb, Geoffrey I},
  pages = {9},
  abstract = {Novices often find learning their first programming language to be a frustrating and difficult process. They have difficulties in developing and debugging their programs. One of their problems is that their mental model of how the computer works is inadequate.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/S4AZGGQV/Smith and Webb - Reinforcing a Generic Computer Model for Novice Programmers.pdf}
}

@inproceedings{soderbergBuildingSemanticEditors2011,
  title = {Building Semantic Editors Using {{JastAdd}}: Tool Demonstration},
  shorttitle = {Building Semantic Editors Using {{JastAdd}}},
  booktitle = {Proceedings of the {{Eleventh Workshop}} on {{Language Descriptions}}, {{Tools}} and {{Applications}}},
  author = {S{\"o}derberg, Emma and Hedin, G{\"o}rel},
  year = {2011},
  month = mar,
  series = {{{LDTA}} '11},
  pages = {1--6},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1988783.1988794},
  urldate = {2021-06-07},
  abstract = {A semantic editor, providing services like completion and code browsing, can help users to quickly develop high-quality source code. However, a lot of languages still lack semantic editor support due to the difficulty and costs of development. Tool generation and reuse can greatly alleviate this development task. Specifically, tool generation from a formal specification, such as reference attribute grammars (RAGs), can increase development speed by reusing existing specifications. In this tool demonstration we demonstrate how semantic editors can be built with the aid of JastAdd, a meta-compilation tool based on RAGs. We demonstrate two editors built this way. One for a small object-oriented language, PicoJava, and one for the JastAdd specification language itself.},
  isbn = {978-1-4503-0665-2},
  keywords = {refererence attribute grammars,semantic editors,tool generation},
  file = {/Users/igormoreno/Zotero/storage/IDI2U75S/Söderberg and Hedin - 2011 - Building semantic editors using JastAdd tool demo.pdf}
}

@inproceedings{solomonApplyingGestureTaxonomy2018,
  title = {Applying a {{Gesture Taxonomy}} to {{Introductory Computing Concepts}}},
  booktitle = {Proceedings of the 2018 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Solomon, Amber and Guzdial, Mark and DiSalvo, Betsy and Shapiro, Ben Rydal},
  year = {2018},
  month = aug,
  pages = {250--257},
  publisher = {{ACM}},
  address = {{Espoo Finland}},
  doi = {10.1145/3230977.3231001},
  urldate = {2020-06-22},
  abstract = {Gestures, or spontaneous hand movements produced when talking, are an untapped resource for understanding student knowledge in computing education. This paper develops a conceptual framework to support future studies of learning and teaching that incorporate gesture studies in programming contexts. In particular, this paper introduces how gesture has been used to study teaching and learning in another discipline, mathematics; critically reviews and interprets what concepts and methods may be most relevant to programming contexts; and also discusses what unique challenges programming contexts present to studies of gesture (e.g. differences in abstract versus concrete). We ground our understandings of gesture by using an observational study where we observed novice students learning to program. This paper concludes by suggesting potential avenues for future research in computing education that incorporate analyses of gesture in studies of teaching and learning.},
  isbn = {978-1-4503-5628-2},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/8YESF5F2/Solomon et al - 2018 - Applying a Gesture Taxonomy to Introductory Computing Concepts.pdf}
}

@article{solomonEmbodiedRepresentationsComputing2020,
  title = {Embodied {{Representations}} in {{Computing Education}}: {{How Gesture}}, {{Embodied Language}}, and {{Tool Use Support Teaching Recursion}}},
  author = {Solomon, Amber and Bae, Miyeon and DiSalvo, Betsy and Guzdial, Mark},
  year = {2020},
  pages = {8},
  abstract = {Computing education research has yet to think about how instructors use embodied actions and ideas when teaching the skills involved in "doing and learning" computing. In this paper, we describe two case studies of computing instructors using embodied representations in the form of gestures, embodied language, and tool use - to teach recursion. We used grounded theory to analyze a set of naturalistic video recordings of undergraduate computing professors teaching recursion to their class. We contribute a conceptual framework of the kinds of embodied representations teachers use in computing classrooms as the first step towards understanding how embodiment support student learning.},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/LFN4DU7Q/Solomon et al. - 2020 - Embodied Representations in Computing Education H.pdf}
}

@inproceedings{solomonRoleSpatialRepresentations2019,
  title = {The {{Role}} of {{Spatial Representations}} in {{CS Teaching}} and {{CS Learning}}},
  booktitle = {2019 {{IEEE Symposium}} on {{Visual Languages}} and {{Human-Centric Computing}} ({{VL}}/{{HCC}})},
  author = {Solomon, Amber},
  year = {2019},
  month = oct,
  pages = {237--238},
  publisher = {{IEEE}},
  address = {{Memphis, TN, USA}},
  doi = {10.1109/VLHCC.2019.8818785},
  urldate = {2020-06-22},
  isbn = {978-1-72810-810-0},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/5ZDZCTIN/Solomon - 2019 - The Role of Spatial Representations in CS Teaching and CS Learning.pdf}
}

@article{solomonThinkAloudMethod1995,
  title = {The Think Aloud Method: {{A}} Practical Guide to Modelling Cognitive Processes},
  shorttitle = {The Think Aloud Method},
  author = {Solomon, Paul},
  year = {1995},
  month = nov,
  journal = {Information Processing \& Management},
  volume = {31},
  number = {6},
  pages = {906--907},
  issn = {03064573},
  doi = {10.1016/0306-4573(95)90031-4},
  urldate = {2020-02-14},
  langid = {english},
  keywords = {Strong,To Read},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/9NVK7EXX/Solomon - 1995 - The think aloud method A practical guide to model.pdf}
}

@article{solowayBuggyPathDevelopment1987,
  title = {The {{Buggy Path}} to {{The Development}} of {{Programming Expertise}}},
  author = {Soloway, Elliot and Spohrer, Jim C},
  year = {1987},
  journal = {Focus on Learning Problems in Mathematics},
  volume = {9},
  number = {1},
  pages = {26},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/MVZQF4FY/Soloway and Spohrer - 1987 - The Buggy Path to The Development of Programming Expertise.pdf}
}

@article{solowayCognitiveStrategiesLooping1983,
  title = {Cognitive Strategies and Looping Constructs: An Empirical Study},
  shorttitle = {Cognitive Strategies and Looping Constructs},
  author = {Soloway, Elliot and Bonar, Jeffrey and Ehrlich, Kate},
  year = {1983},
  month = nov,
  journal = {Communications of the ACM},
  volume = {26},
  number = {11},
  pages = {853--860},
  issn = {0001-0782},
  doi = {10.1145/182.358436},
  urldate = {2020-11-30},
  keywords = {cognitive factors in programming,cognitive strategies,looping constructs},
  annotation = {00372},
  file = {/Users/igormoreno/Zotero/storage/JHY36LUR/Soloway et al - 1983 - Cognitive strategies and looping constructs.pdf}
}

@article{solowayLearningProgramLearning1986,
  title = {Learning to Program = Learning to Construct Mechanisms and Explanations},
  author = {Soloway, E.},
  year = {1986},
  month = sep,
  journal = {Communications of the ACM},
  volume = {29},
  number = {9},
  pages = {850--858},
  issn = {0001-0782},
  doi = {10.1145/6592.6594},
  urldate = {2020-11-30},
  abstract = {Teaching effective problem-solving skills in the context of teaching programming necessitates a revised curriculum for introductory computer programming courses.},
  keywords = {proposedByIgor},
  annotation = {00577},
  file = {/Users/igormoreno/Zotero/storage/CZUFC9AU/Soloway - 1986 - Learning to Program = Learning to Construct Mechanisms and Explanations.pdf;/Users/igormoreno/Zotero/storage/MSY49CGW/Soloway - 1986 - Learning to program = learning to construct mechanisms and explanations.pdf;/Users/igormoreno/Zotero/storage/YVGUUUCM/Soloway - 1986 - Learning to program = learning to construct mechanisms and explanations.pdf}
}

@inproceedings{solowayTappingTacitProgramming1982,
  ids = {solowayTappingTacitProgramming1982a},
  title = {Tapping into {{Tacit Programming Knowledge}}},
  booktitle = {Proceedings of the 1982 {{Conference}} on {{Human Factors}} in {{Computing Systems}}},
  author = {Soloway, Elliot and Ehrlich, Kate and Bonar, Jeffrey},
  year = {1982},
  series = {{{CHI}} '82},
  pages = {52--57},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/800049.801754},
  urldate = {2018-10-08},
  abstract = {The Cognition and Programming Group at Yale University is engaged in two complementary efforts: 1. exploring the programming process empirically, paying special attention to the knowledge and strategies which expert and non-experts employ, and 2. building computer-based environments which aid novices learning to program. In this extended abstract we will focus on the empirical strand of our research program; in particular, we will describe an experimental technique we have just begun to use to more carefully study what it is that expert and novice programmers do\textemdash and don't\textemdash know. In [19, 20, 22, 18, 7] we describe additional empirical studies, while [21] describes MENO-II, our intelligent programming tutor for Pascal.},
  file = {/Users/igormoreno/Zotero/storage/ATRLVLXP/Soloway et al - 1982 - Tapping into Tacit Programming Knowledge.pdf;/Users/igormoreno/Zotero/storage/FY7Y4L9L/Soloway et al - 1982 - Tapping into tacit programming knowledge.pdf}
}

@article{solowayWhatNovicesKnow1984,
  title = {What Do Novices Know about Programming},
  author = {Soloway, Elliot},
  year = {1984},
  journal = {Directions in Human-Comupter Interaction},
  publisher = {{Ablex}},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/HQL3DW8A/10020200152.html}
}

@inproceedings{soltanpoorAdaptiveRemediationNovice2018,
  title = {Adaptive Remediation for Novice Programmers through Personalized Prescriptive Quizzes},
  booktitle = {Proceedings of the 23rd {{Annual ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Soltanpoor, Reza and Thevathayan, Charles and D'Souza, Daryl},
  year = {2018},
  month = jul,
  pages = {51--56},
  publisher = {{ACM}},
  address = {{Larnaca Cyprus}},
  doi = {10.1145/3197091.3197097},
  urldate = {2021-06-14},
  abstract = {Learning to program is a cognitively demanding activity. Students need to combine mental models of various concepts and constructs to solve problems. Many students new to IT and CS programs have little or no prior experience with abstract reasoning and problemsolving. Instructors attempt to present the core concepts early to allow adequate time for students to complete their programming assignments. However, misconceptions of basic concepts formed in the early stages often get propagated blocking any further progress. Such students often begin to form poor opinions about their capability leading to low self-esteem and performance.},
  isbn = {978-1-4503-5707-4},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/GCHL9KSI/Soltanpoor et al. - 2018 - Adaptive remediation for novice programmers throug.pdf}
}

@article{songIntelligentTutoringSystem1997,
  title = {An Intelligent Tutoring System for Introductory {{C}} Language Course},
  author = {Song, J.S. and Hahn, S.H. and Tak, K.Y. and Kim, J.H.},
  year = {1997},
  month = feb,
  journal = {Computers \& Education},
  volume = {28},
  number = {2},
  pages = {93--102},
  issn = {03601315},
  doi = {10.1016/S0360-1315(97)00003-1},
  urldate = {2018-11-06},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/ASIBZ323/Song et al - 1997 - An intelligent tutoring system for introductory C language course.pdf}
}

@inproceedings{songQuantitativeCaseStudy2015,
  title = {A Quantitative Case Study in Engineering of the Efficacy of Quality Cheat-Sheets},
  booktitle = {2015 {{IEEE Frontiers}} in {{Education Conference}} ({{FIE}})},
  author = {Song, Y. and Thuente, D.},
  year = {2015},
  month = oct,
  pages = {1--7},
  doi = {10.1109/FIE.2015.7344082},
  abstract = {Although authorized cheat-sheets have been widely accepted as a common examination format, their effectiveness is still being questioned. Some researchers believe authorized cheat-sheets are more like a "crutch" and have no effect on students' performance. In this study, we created a cheat-sheet rating scheme to evaluate the quality of authorized cheatsheets collected with each exam (N=155) and investigated the effect of cheat-sheet quality on students' grades. This study reveals that 1) the average cheat-sheet's quality varies significantly between those students who scored in the top half of the class versus those whose score was in the lower half of the class; 2) students' grades are highly related to their cheatsheet quality and 3) if students manage to improve the quality of their cheat-sheets from one examination to the next, their grades tend to improve for that subsequent examination.},
  keywords = {authorized cheat-sheet,cheat-sheet quality,cheat-sheet rating scheme,Cognition,Computer science,Data collection,Education,Encoding,engineering,engineering education,examination,Organizations,Psychology,quality cheat-sheet efficacy,quantitative case study,student grades,subsequent examination},
  file = {/Users/igormoreno/Zotero/storage/SPZGYB9E/Song and Thuente - 2015 - A quantitative case study in engineering of the efficacy of quality cheat-sheets.pdf;/Users/igormoreno/Zotero/storage/PQ2EMCBT/7344082.html}
}

@inproceedings{songQuantitativeCaseStudy2016,
  title = {A Quantitative Case Study on Students' Strategy for Using Authorized Cheat-Sheets},
  booktitle = {2016 {{IEEE Frontiers}} in {{Education Conference}} ({{FIE}})},
  author = {Song, Y. and Guo, Y. and Thuente, D.},
  year = {2016},
  month = oct,
  pages = {1--9},
  doi = {10.1109/FIE.2016.7757656},
  abstract = {Traditional formal tests are usually given in a time-limited, closed book/notes style because instructors believe this approach measures students' learning. Nonetheless, other researchers argue that there are better alternatives and allowing students to use authorized cheat-sheets is one of them. The most important reason for allowing cheat-sheets is to help students to focus more on greater understanding and deeper learning. However, some researchers have questioned the efficacy of authorized cheat-sheets in formal exams. While it might be true, in some cases, that authorized cheat-sheets function like ``crutches'' in exams, we should not ignore that they are also learning tools. To make the cheat-sheets, students need to read the class material, process information actively, and select, organized, prioritize the content for the cheat-sheets. Our earlier research showed that in an undergraduate engineering course, the quality of students' cheat-sheet is strongly positively correlated with the students' performance on the exams. Moreover, the quality of the cheat-sheets improved through the sequence of exams during the semester and the students' grades did likewise. In this research, we collected more than 300 cheat-sheets from two sections of a graduate course on the same subject as our previous research. The class design of the graduate level course is similar to the undergraduate one but it covers more conceptually difficult topics at a greater depth including theory and proofs. We use the same cheat-sheet rating scheme and compare the quality of graduate students' cheat-sheets with the undergraduate students' on multiple dimensions including density, organization, number of sample answers, number of formulas and number of graph representations. We discovered significant differences between the graduate and undergraduate students' use of and how to best create authorized cheat-sheets and formulate useful directives.},
  keywords = {authorized cheat-sheet,authorized cheat-sheets,cheat-sheet quality,cheat-sheet rating scheme,Correlation,educational administrative data processing,engineering education,examination,formal exams,formal tests,further education,graduate level course,graph representations,graph theory,learning strategy,learning tools,Organizations,process information,student learning,student strategy,undergraduate engineering course,undergraduate students},
  file = {/Users/igormoreno/Zotero/storage/ZT3MMRCW/Song et al - 2016 - A quantitative case study on students' strategy for using authorized.pdf;/Users/igormoreno/Zotero/storage/7IYVBE62/7757656.html}
}

@article{sonJudgmentsLearningEvidence2005,
  title = {Judgments of Learning: {{Evidence}} for a Two-Stage Process},
  shorttitle = {Judgments of Learning},
  author = {Son, Lisa K. and Metcalfe, Janet},
  year = {2005},
  month = sep,
  journal = {Memory \& Cognition},
  volume = {33},
  number = {6},
  pages = {1116--1129},
  issn = {0090-502X, 1532-5946},
  doi = {10.3758/BF03193217},
  urldate = {2020-03-29},
  langid = {english},
  annotation = {00110},
  file = {/Users/igormoreno/Zotero/storage/GB6SNWU8/Son and Metcalfe - 2005 - Judgments of learning Evidence for a two-stage pr.pdf}
}

@inproceedings{soosairajEffectNativeLanguage2019,
  title = {Effect of {{Native Language}} on {{Student Learning}} and {{Classroom Interaction}} in an {{Operating Systems Course}}},
  booktitle = {Proceedings of the 2019 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Soosai Raj, Adalbert Gerald and Zhang, Eda and Mukherjee, Saswati and Williams, Jim and Halverson, Richard and Patel, Jignesh M.},
  year = {2019},
  month = jul,
  pages = {499--505},
  publisher = {{ACM}},
  address = {{Aberdeen Scotland Uk}},
  doi = {10.1145/3304221.3319787},
  urldate = {2021-06-14},
  abstract = {Understanding an operating systems (OS) code base is a difficult task since it involves understanding a huge amount of low-level C and assembly code. The inherent level of difficulty associated with OS topics is high because of the high element interactivity (i.e., material consists of elements that heavily interact). The mental effort associated with learning a complex subject like OS may be higher for non-native English speakers, when the subject is taught in a natural language (i.e., English) that is not the students' native language. We were interested in finding the effect of an instructional design that combines the students' native language along with English on students' understanding of select topics in OS. We designed an experiment to teach CPU virtualization using xv6 to two groups of undergraduate students in Tamil Nadu, India. We taught the experimental group using English and Tamil (native language of students in Tamil Nadu) and the control group using only English. We conducted a pre-test and a post-test to test students' understanding of the OS topics taught, before and after our intervention respectively. We also collected data on the questions that students asked in lectures during our intervention. We found that teaching OS using native language and English is no different than teaching OS using only English with respect to student learning. We also found that the native language had an impact on the student engagement and classroom interaction by creating more dialogue within the Tamil+English (experimental) classroom when compared to the English-only (control) classroom.},
  isbn = {978-1-4503-6895-7},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/5IBLILNH/Soosai Raj et al. - 2019 - Effect of Native Language on Student Learning and .pdf}
}

@incollection{sorvaMisconceptionsBeginnerProgrammer2018,
  title = {Misconceptions and the {{Beginner Programmer}}},
  booktitle = {Computer {{Science Education}}: {{Perspectives}} on {{Teaching}} and {{Learning}} in {{School}}},
  author = {Sorva, Juha},
  year = {2018},
  publisher = {{BLOOMSBURY ACADEMIC}},
  urldate = {2023-05-12},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/WJKQRFNC/misconceptions-and-the-beginner-programmer.html}
}

@incollection{sorvaMisconceptionsBeginnerProgrammer2023,
  title = {Misconceptions and the {{Beginner Programmer}}},
  booktitle = {Computer {{Science Education}} : {{Perspectives}} on {{Teaching}} and {{Learning}} in {{School}}},
  author = {Sorva, Juha},
  editor = {Sentance, Sue and Barendsen, Erik and Howard, Nicol R. and Schulte, Carsten},
  year = {2023},
  edition = {1},
  pages = {259--274},
  publisher = {{Bloomsbury Academic}},
  address = {{London}},
  urldate = {2023-01-25},
  isbn = {978-1-350-29694-7},
  langid = {english}
}

@inbook{sorvaNaiveConceptionsNovice2020,
  title = {Naive {{Conceptions}} of {{Novice Programmers}}},
  booktitle = {Computer {{Science}} in {{K-12}}: {{An A-to-Z Handbook}} on {{Teaching Programming}}},
  author = {Sorva, Juha},
  year = {2020},
  month = jun,
  pages = {14},
  publisher = {{Shuchi Grover}},
  collaborator = {Grover, Shuchi},
  isbn = {978-1-73466-271-9},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/QCH3THQ7/Sorva - 2020 - Naive Conceptions of Novice Programmers.pdf}
}

@article{sorvaNotionalMachinesIntroductory2013,
  ids = {sorvaNotionalMachinesIntroductory2013a,sorvaNotionalMachinesIntroductory2013b},
  title = {Notional Machines and Introductory Programming Education},
  author = {Sorva, Juha},
  year = {2013},
  month = jun,
  journal = {ACM Transactions on Computing Education},
  volume = {13},
  number = {2},
  pages = {1--31},
  issn = {1946-6226, 1946-6226},
  doi = {10.1145/2483710.2483713},
  urldate = {2020-06-22},
  langid = {english},
  keywords = {constructivism,CS1,introductory programming education,literature review,mental models,misconceptions,Notional machine,phenomenography,threshold concepts},
  file = {/Users/igormoreno/Zotero/storage/CTTVW7QN/Sorva - 2013 - Notional machines and introductory programming education.pdf;/Users/igormoreno/Zotero/storage/JK75I6TT/Sorva - 2013 - Notional machines and introductory programming edu.pdf;/Users/igormoreno/Zotero/storage/SFEKZSSW/Sorva - 2013 - Notional Machines and Introductory Programming Education.pdf}
}

@inproceedings{sorvaReflectionsThresholdConcepts2010,
  title = {Reflections on Threshold Concepts in Computer Programming and Beyond},
  booktitle = {Proceedings of the 10th {{Koli Calling International Conference}} on {{Computing Education Research}} - {{Koli Calling}} '10},
  author = {Sorva, Juha},
  year = {2010},
  pages = {21--30},
  publisher = {{ACM Press}},
  address = {{Berlin, Germany}},
  doi = {10.1145/1930464.1930467},
  urldate = {2020-06-22},
  abstract = {I comment on and extend prior work that searches for threshold concepts in computer programming. I argue that explicitly linking threshold concepts to Brunerian fundamental ideas gives structure to the ongoing debate on threshold concepts. Program dynamics, information hiding and object interaction appear three strong candidates for threshold concepts in introductory programming, while abstraction and state seem to qualify as fundamental ideas. I further propose that the threshold concepts debate could benefit from the notion of transliminal concepts \textendash{} concepts that require an understanding of a threshold concept and can `lure' students to and across thresholds.},
  isbn = {978-1-4503-0520-4},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/VIPDJZET/Sorva - 2010 - Reflections on threshold concepts in computer programming and beyond.pdf}
}

@inproceedings{sorvaResearchbasedDesignFirst2014,
  title = {Research-Based Design of the First Weeks of {{CS1}}},
  booktitle = {Proceedings of the 14th {{Koli Calling International Conference}} on {{Computing Education Research}} - {{Koli Calling}} '14},
  author = {Sorva, Juha and Sepp{\"a}l{\"a}, Otto},
  year = {2014},
  pages = {71--80},
  publisher = {{ACM Press}},
  address = {{Koli, Finland}},
  doi = {10.1145/2674683.2674690},
  urldate = {2020-06-22},
  abstract = {On the basis of cognitive load theory, theoretical models of instructional design, and empirical findings from computing education research, we propose three independent but compatible and complementary frameworks that can be used in introductory programming education. Motivate\textendash isolate\textendash practice\textendash integrate is a framework that marries project-driven learning to careful management of cognitive load through the selection of learning activities and the isolation of partial tasks. Head Straight for Objects is an outline of an introduction to programming that emphasizes object-orientation early while mediating the cognitive load intrinsic to objectoriented concepts. Finally, the principle of explicit program dynamics states that the runtime dynamics of programs should be a continuous and explicit theme in introductory programming education. We illustrate the application of the three frameworks in the context of a university course.},
  isbn = {978-1-4503-3065-7},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/7MNBFCVQ/Sorva and Seppälä - 2014 - Research-based design of the first weeks of CS1.pdf}
}

@article{sorvaReviewGenericProgram2013,
  title = {A {{Review}} of {{Generic Program Visualization Systems}} for {{Introductory Programming Education}}},
  author = {Sorva, Juha and Karavirta, Ville and Malmi, Lauri},
  year = {2013},
  month = nov,
  journal = {ACM Transactions on Computing Education},
  volume = {13},
  number = {4},
  pages = {1--64},
  issn = {1946-6226, 1946-6226},
  doi = {10.1145/2490822},
  urldate = {2020-06-22},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/EVW9UMTI/Sorva et al - 2013 - A Review of Generic Program Visualization Systems for Introductory Programming.pdf}
}

@inproceedings{sorvaSameDifferentStudents2008,
  ids = {sorvaSameDifferentStudents2008a},
  title = {The Same but Different Students' Understandings of Primitive and Object Variables},
  booktitle = {Proceedings of the 8th {{International Conference}} on {{Computing Education Research}} - {{Koli}} '08},
  author = {Sorva, Juha},
  year = {2008},
  pages = {5},
  publisher = {{ACM Press}},
  address = {{Koli, Finland}},
  doi = {10.1145/1595356.1595360},
  urldate = {2020-06-22},
  abstract = {From qualitative analysis of student interviews emerged three sets of categories, or outcome spaces, describing introductory students' understandings of variables. One outcome space describes different ways of understanding primitive variables. Another describes different understandings of object variables. The third outcome space describes the relationship between the primitive and object variables, again from the point of view of the student cohort. The results show that learners create various kinds of mental models of programming concepts, and that the concept of variable, which is fundamental to most types of programming, is understood in various non-viable ways. With the help of the outcome spaces, teaching materials and tools can be developed to explicitly address potential pitfalls and highlight educationally critical aspects of variables to students. A software tool, which would engage students to interact with and manipulate a visualization of a notional machine, suggests itself as an intriguing avenue for future work.},
  isbn = {978-1-60558-385-3},
  langid = {english},
  keywords = {CS1,misconceptions,phenomenography,references,students' understandings,variables},
  file = {/Users/igormoreno/Zotero/storage/8VEFLXUA/Sorva - 2008 - The same but different students' understandings of primitive and object.pdf;/Users/igormoreno/Zotero/storage/VRXZFBE5/Sorva - 2008 - The same but different students' understandings of.pdf}
}

@inproceedings{sorvaStudentsUnderstandingsStoring2007,
  ids = {sorvaStudentsUnderstandingsStoring2007b},
  title = {Students' Understandings of Storing Objects},
  booktitle = {Proceedings of the {{Seventh Baltic Sea Conference}} on {{Computing Education Research}} - {{Volume}} 88},
  author = {Sorva, Juha},
  year = {2007},
  month = nov,
  series = {Koli {{Calling}} '07},
  pages = {127--135},
  publisher = {{Australian Computer Society, Inc.}},
  address = {{Koli, Finland}},
  urldate = {2021-01-09},
  abstract = {This paper reports a phenomenographic study of how introductory students view objects that have been created and stored by an object-oriented program. By analyzing student interviews, we identify five categories of description, each representing a different kind of understanding of the phenomenon. Of these categories, some represent viable understandings that we would like our students to have. Others are partially incorrect and indicate that some students mistakenly focus their awareness on aspects that are unhelpful or even harmful for constructing a viable mental model of storing objects. This paper brings together two previously disjointed branches of computer science education research: the study of misconceptions and the phenomenographic research approach. The phenomenographic approach used in this study extends traditional phenomenography by including partially incorrect understandings in a phenomenographic outcome space, and explicitly treating them as such. This approach offers a new way of studying misconceptions and linking them to correct understandings of a phenomenon.},
  isbn = {978-1-920682-69-9},
  keywords = {constructivism,CS1,misconceptions,objects,phenomenography,students' understandings},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/6LMLEKNN/Sorva - 2007 - Students' understandings of storing objects.pdf;/Users/igormoreno/Zotero/storage/DJR99UF4/Sorva - 2007 - Students' understandings of storing objects.pdf;/Users/igormoreno/Zotero/storage/IZ8BIC2E/Sorva - Students’ Understandings of Storing Objects.pdf}
}

@article{sorvaStudentsWaysExperiencing2013,
  title = {Students' Ways of Experiencing Visual Program Simulation},
  author = {Sorva, Juha and L{\"o}nnberg, Jan and Malmi, Lauri},
  year = {2013},
  month = sep,
  journal = {Computer Science Education},
  volume = {23},
  number = {3},
  pages = {207--238},
  issn = {0899-3408, 1744-5175},
  doi = {10.1080/08993408.2013.807962},
  urldate = {2020-06-22},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/S66TPITW/Sorva et al - 2013 - Students’ ways of experiencing visual program simulation.pdf}
}

@inproceedings{sorvaUUhistleSoftwareTool2010,
  title = {{{UUhistle}}: A Software Tool for Visual Program Simulation},
  shorttitle = {{{UUhistle}}},
  booktitle = {Proceedings of the 10th {{Koli Calling International Conference}} on {{Computing Education Research}} - {{Koli Calling}} '10},
  author = {Sorva, Juha and Sirki{\"a}, Teemu},
  year = {2010},
  pages = {49--54},
  publisher = {{ACM Press}},
  address = {{Berlin, Germany}},
  doi = {10.1145/1930464.1930471},
  urldate = {2020-06-22},
  abstract = {This paper describes UUhistle, a highly interactive program visualization system for introductory programming courses. UUhistle's main novelty is its support for visual program simulation exercises, in which the student takes the role of the computer as executor of a program in order to learn about program dynamics and to demonstrate their understanding. The student needs to predict the steps involved in the execution of a given program and to directly manipulate the elements of a program visualization to show what happens next. Visual program simulation exercises aim to aid learning by promoting a high level of student engagement with visualizations. They are automatically assessable.},
  isbn = {978-1-4503-0520-4},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/AT5EC7QL/Sorva and Sirkiä - 2010 - UUhistle a software tool for visual program simul.pdf}
}

@phdthesis{sorvaVisualProgramSimulation2012,
  title = {Visual {{Program Simulation}} in {{Introductory Programming Education}}},
  author = {Sorva, Juha},
  year = {2012},
  address = {{Espoo, Finland}},
  langid = {english},
  school = {Aalto University},
  keywords = {InterestingDissertation},
  annotation = {00114},
  file = {/Users/igormoreno/Zotero/storage/RGMNFR5K/Sorva - 2012 - Visual Program Simulation in Introductory Programming Education.pdf}
}

@article{souzaSystematicMappingStudy2018,
  title = {A Systematic Mapping Study on Game-Related Methods for Software Engineering Education},
  author = {Souza, Mauricio~R.~de~A. and Veado, Lucas and Moreira, Renata Teles and Figueiredo, Eduardo and Costa, Heitor},
  year = {2018},
  month = mar,
  journal = {Information and Software Technology},
  volume = {95},
  pages = {201--218},
  issn = {09505849},
  doi = {10.1016/j.infsof.2017.09.014},
  urldate = {2023-06-27},
  abstract = {Objective: The goal of this paper is twofold. First, we discuss how game-related methods have been used in the context of software engineering education by means of a systematic mapping study. Second, we investigate how these game-related methods support specific knowledge areas from software engineering. By achieving these goals, we aim not only to characterize the state of the art on the use of game-related methods on software engineering education, but also to identify gaps and opportunities for further research. Method: We carried out a systematic mapping study to identify primary studies which address the use, proposal or evaluation of games and their elements on software engineering education. We classified primary studies based on type of approaches, learning goals based on software engineering knowledge areas, and specific characteristics of each type of approach. Results: We identified 156 primary studies, published between 1974 and June 2016. Most primary studies describe the use of serious games (86) and game development (57) for software engineering education, while Gamification is the least explored method (10). Learning goals of these studies and their development of skills are mostly related to the knowledge areas of ``Software Process'', ``Software Design'', and ``Professional Practices''. Conclusions: The use of games in software engineering education is not new. However, there are some knowledge areas where the use of games can still be further explored. Gamification is a new trend and existing research in the field is quite preliminary. We also noted a lack of standardization both in the definition of learning goals and in the classification of game-related methods.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/5MZ9HFF7/Souza et al. - 2018 - A systematic mapping study on game-related methods.pdf}
}

@inproceedings{spangsbergNonTraditionalNovicesPerceptions2018,
  title = {Non-{{Traditional Novices}}' {{Perceptions}} of {{Learning}} to {{Program}}: {{A Framework}} of {{Developing Mental Models}}},
  shorttitle = {Non-{{Traditional Novices}}' {{Perceptions}} of {{Learning}} to {{Program}}},
  booktitle = {2018 {{IEEE Frontiers}} in {{Education Conference}} ({{FIE}})},
  author = {Spangsberg, Thomas Hvid and Fincher, Sally and Dziallas, Sebastian},
  year = {2018},
  month = oct,
  pages = {1--7},
  publisher = {{IEEE}},
  address = {{San Jose, CA, USA}},
  doi = {10.1109/FIE.2018.8659301},
  urldate = {2020-06-22},
  abstract = {In this research full paper, we present a study of a cohort of non-traditional students learning to program as part of an intercalated computer science year named Year in Computing at University of Kent, Canterbury in the UK. The study uses focus group interviews with students to explore their articulations and perceptions of learning to program. During the interviews, we used Bebras puzzles as a tool for students to reflect on their own experiences in learning to program. By observing the students working with the puzzle, some of the tacit information of problem-solving strategies became apparent. We see Bebras puzzles as a way to gain valuable insights that are not as easily available when relying on conventional self-reflection in a qualitative study. Another contribution grounded in this study is the proposal of a framework describing the students' developing mental models in the beginning of their studies. The results presented here are a first iteration in an ongoing endeavour of exploring students' development of mental models. We hope that these contributions will provide teachers and researchers with a new perspective for developing introductory programming curricula and to engage in further development of our framework.},
  isbn = {978-1-5386-1174-6},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/DN76EW5C/Spangsberg et al - 2018 - Non-Traditional Novices’ Perceptions of Learning to Program.pdf}
}

@article{spanjersExpertiseReversalEffect2011,
  title = {An Expertise Reversal Effect of Segmentation in Learning from Animated Worked-out Examples},
  author = {Spanjers, Ingrid A. E. and Wouters, Pieter and {van Gog}, Tamara and {van Merri{\"e}nboer}, Jeroen J. G.},
  year = {2011},
  month = jan,
  journal = {Computers in Human Behavior},
  series = {Current {{Research Topics}} in {{Cognitive Load Theory}}},
  volume = {27},
  number = {1},
  pages = {46--52},
  issn = {0747-5632},
  doi = {10.1016/j.chb.2010.05.011},
  urldate = {2018-11-06},
  abstract = {Many animations impose a high cognitive load due to the transience of information, which often hampers learning. Segmentation, that is presenting animations in pieces (i.e., segments), has been proposed as a means to reduce this high cognitive load. The expertise reversal effect shows, however, that design measures that have a positive effect on cognitive load and learning for students with lower levels of prior knowledge, might not be effective, or might even have a negative effect on cognitive load and learning for students with higher levels of prior knowledge. This experiment with animated worked-out examples showed an expertise reversal effect of segmentation: segmented animations were more efficient than continuous animations (i.e., equal test performance with lower investment of mental effort during learning) for students with lower levels of prior knowledge, but not for students with higher levels of prior knowledge.},
  keywords = {Cognitive load,Expertise reversal effect,Instructional animations,Multimedia learning,Segmentation},
  file = {/Users/igormoreno/Zotero/storage/6NEG2G66/Spanjers et al - 2011 - An expertise reversal effect of segmentation in learning from animated.pdf;/Users/igormoreno/Zotero/storage/YFKE96HW/S0747563210001482.html}
}

@misc{spectorRemarksLogicMental2008,
  title = {Remarks on {{Logic}} and {{Mental Models}}},
  author = {Spector, J Michael},
  year = {19. 2. 2008},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/WARFQZHK/Spector - 2008 - Remarks on Logic and Mental Models.pdf}
}

@inproceedings{spinelliAttentionPatternsCode2018,
  title = {Attention Patterns for Code Animations: Using Eye Trackers to Evaluate Dynamic Code Presentation Techniques},
  shorttitle = {Attention Patterns for Code Animations},
  booktitle = {Conference {{Companion}} of the 2nd {{International Conference}} on {{Art}}, {{Science}}, and {{Engineering}} of {{Programming}} - {{Programming}}'18 {{Companion}}},
  author = {Spinelli, Louis and Pandey, Maulishree and Oney, Steve},
  year = {2018},
  pages = {99--104},
  publisher = {{ACM Press}},
  address = {{Nice, France}},
  doi = {10.1145/3191697.3214338},
  urldate = {2020-06-22},
  abstract = {Programming instructors seek new ways to present code to novice programmers. It is important to understand how these new presentation methods affect students. We prototyped three different ways to animate the presentation of code. We used eye-tracking technology to observe participants as they were presented with animations and completed three activities: code summarization, syntax error correction, and logic error correction. The prototypes, our method for observation, and our analysis methods were each informed by previous research. We observed variation in how participants consumed animations. Our initial results indicate that viewing animations of a single textual representation of source code may affect the attentional processes of novice programmers during subsequent tasks.},
  isbn = {978-1-4503-5513-1},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/SGVVLJZK/Spinelli et al - 2018 - Attention patterns for code animations.pdf}
}

@article{spiveyWhenMaybeNot2012,
  title = {When {{Maybe}} Is Not Good Enough},
  author = {Spivey, Michael},
  year = {2012},
  month = nov,
  journal = {Journal of Functional Programming},
  volume = {22},
  number = {6},
  pages = {747--756},
  issn = {0956-7968, 1469-7653},
  doi = {10.1017/S0956796812000329},
  urldate = {2021-12-30},
  abstract = {Many variations upon the theme of parser combinators have been proposed, too many to list here, but the main idea is simple: A parser for phrases of type {$\alpha$} is a function that takes an input string and produces results (               x, rest               ), where               x               is a value of type {$\alpha$}, and               rest               is the remainder of the input after the phrase with value               x               has been consumed. The results are often arranged into a list, because this allows a parser to signal failure with the empty list of results, an unambiguous success with one result, or multiple possibilities with a longer `list of successes'.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/NYXNPG2R/Spivey - 2012 - When Maybe is not good enough.pdf}
}

@article{spohrerNoviceMistakesAre1986,
  title = {Novice {{Mistakes}}: {{Are}} the {{Folk Wisdoms Correct}}?},
  shorttitle = {Novice {{Mistakes}}},
  author = {Spohrer, James C. and Soloway, Elliot},
  year = {1986},
  month = jul,
  journal = {Commun. ACM},
  volume = {29},
  number = {7},
  pages = {624--632},
  issn = {0001-0782},
  doi = {10.1145/6138.6145},
  urldate = {2018-12-02},
  abstract = {An evaluation of two folk wisdoms serves to elucidate the underlying or "deep-structure" reasons for novice errors.},
  file = {/Users/igormoreno/Zotero/storage/TXACBVHW/Spohrer and Soloway - 1986 - Novice Mistakes Are the Folk Wisdoms Correct.pdf}
}

@misc{SpotlightQualitativeMethods,
  title = {Spotlight on {{Qualitative Methods}}: {{Do I Need Multiple Coders}}? \textendash{} {{IAPHS}} \textendash{} {{Interdisciplinary Association}} for {{Population Health Science}}},
  shorttitle = {Spotlight on {{Qualitative Methods}}},
  urldate = {2023-03-28},
  langid = {american},
  file = {/Users/igormoreno/Zotero/storage/4RV4FSHK/demystifying-the-second-coder.html}
}

@article{stafylidouDevelopmentStudentsUnderstanding2004,
  title = {The Development of Students' Understanding of the Numerical Value of Fractions},
  author = {Stafylidou, Stamatia and Vosniadou, Stella},
  year = {2004},
  month = oct,
  journal = {Learning and Instruction},
  series = {The {{Conceptual Change Approach}} to {{Mathematics Learning}} and {{Teaching}}},
  volume = {14},
  number = {5},
  pages = {503--518},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2004.06.015},
  urldate = {2018-11-06},
  abstract = {An experiment is reported that investigated the development of students' understanding of the numerical value of fractions. A total of 200 students ranging in age from 10 to 16 years were tested using a questionnaire that required them to decide on the smallest/biggest fraction, to order a set of given fractions and to justify their responses. Students' responses were grouped in categories that revealed three main explanatory frameworks within which fractions seem to be interpreted. The first explanatory framework, emerging directly from the initial theory of natural numbers, is that fraction consists of two independent numbers. The second considers fractions as parts of a whole. Only in the third explanatory framework, students were able to understand the relation between numerator and denominator and to consider that fractions can be smaller, equal or even bigger than the unit.},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/6JVER5TH/Stafylidou and Vosniadou - 2004 - The development of students’ understanding of the numerical value of fractions.pdf;/Users/igormoreno/Zotero/storage/8Z7IAUN7/S0959475204000465.html}
}

@misc{StandardsEducationalPsychological,
  title = {The {{Standards}} for {{Educational}} and {{Psychological Testing}}},
  journal = {https://www.apa.org},
  urldate = {2021-03-29},
  abstract = {Learn about validity and reliability, test administration and scoring, and testing for workplace and educational assessment.},
  howpublished = {https://www.apa.org/science/programs/testing/standards},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/NWCV366U/American Educational Research Association - 2011 - Report and recommendations for the reauthorization.pdf;/Users/igormoreno/Zotero/storage/VHIJIDBU/standards.html}
}

@article{stapletonWhatMakesEffective2017,
  title = {What {{Makes}} an {{Effective Representation}} of {{Information}}: {{A Formal Account}} of {{Observational Advantages}}},
  shorttitle = {What {{Makes}} an {{Effective Representation}} of {{Information}}},
  author = {Stapleton, Gem and Jamnik, Mateja and Shimojima, Atsushi},
  year = {2017},
  month = jun,
  journal = {Journal of Logic, Language and Information},
  volume = {26},
  number = {2},
  pages = {143--177},
  issn = {0925-8531, 1572-9583},
  doi = {10.1007/s10849-017-9250-6},
  urldate = {2022-07-07},
  abstract = {In order to effectively communicate information, the choice of representation is important. Ideally, a chosen representation will aid readers in making desired inferences. In this paper, we develop the theory of observation: what it means for one statement to be observable from another. Using observability, we give a formal characterization of the observational advantages of one representation of information over another. By considering observational advantages, people will be able to make better informed choices of representations of information. To demonstrate the benefit of observation and observational advantages, we apply these concepts to set theory and Euler diagrams. In particular, we can show that Euler diagrams have significant observational advantages over set theory. This formally justifies Larkin and Simon's claim that ``a diagram is (sometimes) worth ten thousand words''.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/NHA9SR63/Stapleton et al. - 2017 - What Makes an Effective Representation of Informat.pdf}
}

@article{staubAbstractReasoningMathematical1997,
  title = {Abstract Reasoning with Mathematical Constructs},
  author = {Staub, Fritz C. and Stern, Elsbeth},
  year = {1997},
  month = jan,
  journal = {International Journal of Educational Research},
  volume = {27},
  number = {1},
  pages = {63--75},
  issn = {08830355},
  doi = {10.1016/S0883-0355(97)88444-3},
  urldate = {2018-10-02},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/WL6G8G6L/Staub and Stern - 1997 - Abstract reasoning with mathematical constructs.pdf}
}

@article{stefikEmpiricalInvestigationProgramming2013,
  title = {An {{Empirical Investigation}} into {{Programming Language Syntax}}},
  author = {Stefik, Andreas and Siebert, Susanna},
  year = {2013},
  month = nov,
  journal = {ACM Transactions on Computing Education},
  volume = {13},
  number = {4},
  pages = {19:1--19:40},
  doi = {10.1145/2534973},
  urldate = {2020-10-26},
  abstract = {Recent studies in the literature have shown that syntax remains a significant barrier to novice computer science students in the field. While this syntax barrier is known to exist, whether and how it varies across programming languages has not been carefully investigated. For this article, we conducted four empirical studies on programming language syntax as part of a larger analysis into the, so called, programming language wars. We first present two surveys conducted with students on the intuitiveness of syntax, which we used to garner formative clues on what words and symbols might be easy for novices to understand. We followed up with two studies on the accuracy rates of novices using a total of six programming languages: Ruby, Java, Perl, Python, Randomo, and Quorum. Randomo was designed by randomly choosing some keywords from the ASCII table (a metaphorical placebo). To our surprise, we found that languages using a more traditional C-style syntax (both Perl and Java) did not afford accuracy rates significantly higher than a language with randomly generated keywords, but that languages which deviate (Quorum, Python, and Ruby) did. These results, including the specifics of syntax that are particularly problematic for novices, may help teachers of introductory programming courses in choosing appropriate first languages and in helping students to overcome the challenges they face with syntax.},
  keywords = {Novice Programmers,Programming Languages,Syntax},
  annotation = {00191},
  file = {/Users/igormoreno/Zotero/storage/ZQUERQXK/Stefik and Siebert - 2013 - An Empirical Investigation into Programming Language Syntax.pdf}
}

@inproceedings{stegemanSetExercisesTests2019,
  title = {A Set of Exercises and Tests for Teaching Tracing Skills Using a Mastery Approach},
  booktitle = {Proceedings of the 19th {{Koli Calling International Conference}} on {{Computing Education Research}}},
  author = {Stegeman, Martijn},
  year = {2019},
  month = nov,
  pages = {1--2},
  publisher = {{ACM}},
  address = {{Koli Finland}},
  doi = {10.1145/3364510.3366154},
  urldate = {2020-06-22},
  abstract = {We present a first implementation of exercises on code evaluation and tracing for use alongside introductory programming courses. The goal of these exercises and accompanying tests is to provide a structure that enables students to fully master a number of common tracing skills. In developing the exercises, we focused on keeping cognitive load as low as possible by gradually introducing new programming language elements, while allowing for repeated practice of previously introduced concepts. The exercises range from evaluating expressions involving integer division to tracing loops with multiple variables. We also generated small tests that students take to show their mastery of the concepts, allowing only a very limited number of mistakes per test and requiring students to take another version if needed. Using this model in several introductory programming courses over the past year shows that it appears to be possible to achieve mastery on these tracing skills for almost all students while maintaining positive attitudes toward the exhaustive training process.},
  isbn = {978-1-4503-7715-7},
  langid = {english},
  keywords = {ForAndrea},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/K8JL4KU4/Stegeman - 2019 - A set of exercises and tests for teaching tracing skills using a mastery.pdf}
}

@book{steierECDLComputingComputatinal2018,
  title = {{ECDL Computing: Computatinal Thinking und Programmieren mit Python Syllabus 1.0}},
  shorttitle = {{ECDL Computing}},
  year = {2018},
  edition = {1. Auflage},
  publisher = {{Herdt}},
  address = {{Bodenheim}},
  collaborator = {Steier, Ralph},
  isbn = {978-3-86249-801-7},
  langid = {ngerman},
  annotation = {OCLC: 1111912031},
  file = {/Users/igormoreno/Zotero/storage/XFSZZX69/Steier - 2018 - ECDL Computing Computatinal Thinking und Programm.pdf}
}

@inproceedings{steimannSemanticsPlurals2022,
  title = {The {{Semantics}} of {{Plurals}}},
  booktitle = {Proceedings of the 15th {{ACM SIGPLAN International Conference}} on {{Software Language Engineering}}},
  author = {Steimann, Friedrich and Freitag, Marius},
  year = {2022},
  month = dec,
  series = {{{SLE}} 2022},
  pages = {36--54},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3567512.3567516},
  urldate = {2023-06-01},
  abstract = {Inside many software languages lives an expression language that caters for the computation of single values from single values. These languages' fixation on single-valuedness is often at odds with their application domains, in which many values, or plurals, regularly occur in the places of single. While the classical mathematical means of dealing with plurals is the set, in computing, other representations have evolved, notably strings and the much lesser known bunches. We review bunch theory in the context of expression languages including non-recursive functions, and show how giving bunches set semantics suggests that evaluating bunch functions amounts to computing with relations. We maintain that the ensuing seamless integration of relations in expression languages that otherwise know only functions makes a worthwhile contribution in a field in which the difference between modeling, with its preference for relations, and programming, with its preference for functions, is increasingly considered accidental.},
  isbn = {978-1-4503-9919-7},
  keywords = {bunches,collections,denotational semantics,modeling,relational languages},
  file = {/Users/igormoreno/Zotero/storage/HBZE6MUX/Steimann and Freitag - 2022 - The Semantics of Plurals.pdf}
}

@inproceedings{steinhorstRevisitingSelfEfficacyIntroductory2020,
  title = {Revisiting {{Self-Efficacy}} in {{Introductory Programming}}},
  booktitle = {Proceedings of the 2020 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Steinhorst, Phil and Petersen, Andrew and Vahrenhold, Jan},
  year = {2020},
  month = aug,
  series = {{{ICER}} '20},
  pages = {158--169},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3372782.3406281},
  urldate = {2021-03-23},
  abstract = {For many years, the C++-based Computer Programming Self-Efficacy Scale by Ramalingam and Wiedenbeck has been the de facto standard for assessing self-efficacy in introductory programming. Since the development of this instrument, however, both the landscape as well as the intended audience of introductory programming courses has changed beyond the use of a particular programming language. We revisit this instrument and its factorization in light of curricular developments and research results regarding concepts and competences taught in introductory courses. We report on the development and validation of a new instrument that covers most paradigms and languages used in CS1 and present exploratory and confirmatory factor analyses across different populations. Our validation and factor analyses suggest that the new instrument indeed measures self-efficacy with an acceptable fit of the model. In contrast, the factorization of the Computer Programming Self-Efficacy Scale was found to be less robust. Nonetheless, and in line with self-efficacy theory, our analyses suggest that researchers should take into account the educational context of the study population when reporting or comparing results at the level of factors.},
  isbn = {978-1-4503-7092-9},
  keywords = {factor analysis,introductory programming,self-efficacy},
  file = {/Users/igormoreno/Zotero/storage/WBMUEI35/Steinhorst et al - 2020 - Revisiting Self-Efficacy in Introductory Programming.pdf}
}

@article{stenningCognitiveTheoryGraphical1995,
  title = {A Cognitive Theory of Graphical and Linguistic Reasoning: {{Logic}} and Implementation},
  shorttitle = {A Cognitive Theory of Graphical and Linguistic Reasoning},
  author = {Stenning, Keith and Oberlander, Jon},
  year = {1995},
  month = jan,
  journal = {Cognitive Science},
  volume = {19},
  number = {1},
  pages = {97--140},
  issn = {0364-0213},
  doi = {10.1016/0364-0213(95)90005-5},
  urldate = {2018-12-02},
  abstract = {We discuss external and internal graphical and linguistic representational systems. We argue that a cognitive theory of peoples' reasoning performance must account for (a) the logical equivalence of inferences expressed in graphical and linguistic form, and (b) the implementational differences that affect facility of inference. Our theory proposes that graphical representation limit abstraction and thereby aid ``processibility.'' We discuss the ideas of specificity and abstraction, and their cognitive relevance. Empirical support both comes from tasks which involve the manipulation of external graphics and tasks that do not. For the former, we take Euler's (1772) circles, provide a novel computational reconstruction, show how it captures abstractions, and contrast it with earlier construals and with Johnson-Laird's (1983) mental models representations. We demonstrate equivalence of the graphical Euler system, and the nongraphical mental models system. For tasks not involving manipulation of external graphics, we discuss text comprehension, and the mental performance of syllogisms. By positing an internal system with the same specificity as Euler's circles, we cover the mental models data, and generate new empirical predictions. Finally, we consider how the architecture of working memory explains why such specific representations are relatively easy to store.},
  file = {/Users/igormoreno/Zotero/storage/SJNV865H/Stenning and Oberlander - 1995 - A cognitive theory of graphical and linguistic reasoning.pdf;/Users/igormoreno/Zotero/storage/ALPPZGJ2/0364021395900055.html}
}

@book{stephenblochPicturingPrograms2013,
  title = {Picturing {{Programs}}},
  author = {{Stephen Bloch}},
  year = {2013},
  month = jun,
  urldate = {2023-02-05},
  file = {/Users/igormoreno/Zotero/storage/3SZF23Z8/book.pdf}
}

@inproceedings{stephens-martinezGivingHintsComplicated2018,
  title = {Giving Hints Is Complicated: Understanding the Challenges of an Automated Hint System Based on Frequent Wrong Answers},
  shorttitle = {Giving Hints Is Complicated},
  booktitle = {Proceedings of the 23rd {{Annual ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {{Stephens-Martinez}, Kristin and Fox, Armando},
  year = {2018},
  month = jul,
  pages = {45--50},
  publisher = {{ACM}},
  address = {{Larnaca Cyprus}},
  doi = {10.1145/3197091.3197102},
  urldate = {2021-06-14},
  abstract = {Formative feedback is important for learning. Code-tracing is a vital skill in computer science learning. We set out to deliver formative feedback to students on code-tracing, constructed-response assessments by building a student error model using insights gained from inspecting the assessment's frequent wrong answers. Moreover, we compared two different kinds of hints: reteaching and knowledge integration. We found wrong answer co-occurrence provides useful information for our model. However, we were unable to find evidence in our intervention experiment that our hints improved student outcomes on post-test questions. Therefore, we also report here our results on a retrospective, exploratory analysis to understand potential reasons why our results are null.},
  isbn = {978-1-4503-5707-4},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/84J6DV36/Stephens-Martinez e Fox - 2018 - Giving hints is complicated understanding the cha.pdf}
}

@inproceedings{stephensonUsingPythonQuickDraw2009,
  title = {Using Python and {{QuickDraw}} to Foster Student Engagement in {{CS1}}},
  booktitle = {Proceedings of the 24th {{ACM SIGPLAN}} Conference Companion on {{Object}} Oriented Programming Systems Languages and Applications},
  author = {Stephenson, Ben},
  year = {2009},
  month = oct,
  pages = {675--682},
  publisher = {{ACM}},
  address = {{Orlando Florida USA}},
  doi = {10.1145/1639950.1639964},
  urldate = {2023-09-10},
  isbn = {978-1-60558-768-4},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/4GFGN59S/Stephenson - 2009 - Using python and QuickDraw to foster student engag.pdf}
}

@article{sternImprovingCrosscontentTransfer2003,
  title = {Improving Cross-Content Transfer in Text Processing by Means of Active Graphical Representation},
  author = {Stern, Elsbeth and Aprea, Carmela and Ebner, Hermann G.},
  year = {2003},
  month = apr,
  journal = {Learning and Instruction},
  series = {External and {{Internal Representations}} in {{Multimedia Learning}}},
  volume = {13},
  number = {2},
  pages = {191--203},
  issn = {0959-4752},
  doi = {10.1016/S0959-4752(02)00020-8},
  urldate = {2018-11-06},
  abstract = {The two studies presented investigate the conditions under which adults with different academic backgrounds (in terms of formal mathematical competencies and domain-specific knowledge in economics) use linear graphs as reasoning tools that can be transferred from one economic content area to another. In each of the studies, two groups of participants were presented with a text on stockkeeping. One group passively encountered a linear graph, while the other group was asked to actively construct this graph following the instructions provided. To control for transfer effects of content knowledge, a third group received a text on direct costing, a topic also dealt with in the transfer text. The groups were compared with respect to their transfer potential in processing a text dealing with the revenue functions and break-even points of two companies. Questions posed in this text could be easily answered by constructing a linear graph similar to that encountered in the stockkeeping text. Two studies with a total of 281 university and vocational school students confirmed that active graphical representation can be a powerful transfer tool.},
  keywords = {Graphs,Transfer,Vocational education},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/T58XTR8X/Stern et al - 2003 - Improving cross-content transfer in text processing by means of active.pdf;/Users/igormoreno/Zotero/storage/HBR28CQW/S0959475202000208.html}
}

@article{sternIndividualDifferencesLearning2017,
  title = {Individual Differences in the Learning Potential of Human Beings},
  author = {Stern, Elsbeth},
  year = {2017},
  month = dec,
  journal = {npj Science of Learning},
  volume = {2},
  number = {1},
  issn = {2056-7936},
  doi = {10.1038/s41539-016-0003-0},
  urldate = {2018-10-02},
  abstract = {To the best of our knowledge, the genetic foundations that guide human brain development have not changed fundamentally during the past 50,000 years. However, because of their cognitive potential, humans have changed the world tremendously in the past centuries. They have invented technical devices, institutions that regulate cooperation and competition, and symbol systems, such as script and mathematics, that serve as reasoning tools. The exceptional learning ability of humans allows newborns to adapt to the world they are born into; however, there are tremendous individual differences in learning ability among humans that become obvious in school at the latest. Cognitive psychology has developed models of memory and information processing that attempt to explain how humans learn (general perspective), while the variation among individuals (differential perspective) has been the focus of psychometric intelligence research. Although both lines of research have been proceeding independently, they increasingly converge, as both investigate the concepts of working memory and knowledge construction. This review begins with presenting state-of-the-art research on human information processing and its potential in academic learning. Then, a brief overview of the history of psychometric intelligence research is combined with presenting recent work on the role of intelligence in modern societies and on the nature-nurture debate. Finally, promising approaches to integrating the general and differential perspective will be discussed in the conclusion of this review.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/2NCFH2U5/Stern - 2017 - Individual differences in the learning potential of human beings.pdf}
}

@article{sternIntelligenzKeinMythos2016,
  title = {{Intelligenz: kein Mythos, sondern Realit\"at}},
  shorttitle = {{Intelligenz}},
  author = {Stern, Elsbeth and Neubauer, Aljoscha},
  year = {2016},
  month = jan,
  journal = {Psychologische Rundschau},
  volume = {67},
  number = {1},
  pages = {15--27},
  issn = {0033-3042, 2190-6238},
  doi = {10.1026/0033-3042/a000290},
  urldate = {2018-10-02},
  abstract = {The concept of psychometric intelligence is heavily debated in the scientific community of psychologists as well as in the general public. In this article we address the question of why intelligence meets with such disapproval, and to what extent the arguments of the opponents of intelligence are justified from a scientific point of view. We deal with three widespread prejudices. (1) The problem of definition: There are many different kinds of intelligence and psychologists are unable to agree on a unified definition. (2) The assumption of irrelevance: Intelligence tests scores are not at all related to competencies necessary for mastering real life problems. (3) The confusion of causes: If differences in intelligence are caused by differences in genes, the environment has no impact. By considering the state of the art in intelligence research, we object to the three arguments as follows: (1) Psychologists have agreed on a widely accepted precise definition of intelligence, therefore the problem has been resolved. (2) A considerable number of meta-analyses have convincingly demonstrated the high validity of intelligence tests: Intelligence is one of the best predictors of educational and occupational success. (3) According to modern behavioral genetics, intelligence is rooted in genes, which, however, can only unfold their potential in a cognitively stimulating environment. The goal of our paper is to equip psychologists with arguments that should convince a skeptical public of the importance of psychometric intelligence.},
  langid = {ngerman},
  keywords = {Erbe-Umwelt,Intelligenz,Validit\"at},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/FDPZEWSS/Stern and Neubauer - 2016 - Intelligenz kein Mythos, sondern Realität.pdf}
}

@article{sternKnowledgeRestructuringPowerful2005,
  title = {Knowledge Restructuring as a Powerful Mechanism of Cognitive Development: How to Lay an Early Foundation for Conceptual Understanding in Formal Domains},
  shorttitle = {Knowledge Restructuring as a Powerful Mechanism of Cognitive Development},
  author = {Stern, Elsbeth},
  year = {2005},
  journal = {Pedagogy - Learning for Teaching, Pedagogy - Learning for Teaching},
  pages = {155--170},
  urldate = {2018-10-02},
  abstract = {Author: Stern, Elsbeth; Genre: Book Chapter; Published in Print: 2005; Title: Knowledge restructuring as a powerful mechanism of cognitive development: how to lay an early foundation for conceptual understanding in formal domains},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/TCJ9W4U8/Stern - 2005 - Knowledge restructuring as a powerful mechanism of cognitive development.pdf;/Users/igormoreno/Zotero/storage/45R9FJNS/ViewItemOverviewPage.html}
}

@article{sternRethinkingPriorKnowledge1996,
  title = {Rethinking Prior Knowledge: {{Facets}} Instead of Misconceptions},
  author = {Stern, Elsbeth},
  year = {1996},
  journal = {Issues in Education},
  volume = {2},
  number = {2},
  pages = {195--199},
  issn = {1080-9724},
  abstract = {Although it was mainly progress in physics, chemistry and engineering that has contributed to prosperity in western industrialized countries, these subjects are particularly difficult to learn and hard to teach in school. ...},
  annotation = {00007},
  file = {/Users/igormoreno/Zotero/storage/TQ4BUUF2/Stern - 1996 - Rethinking prior knowledge.pdf}
}

@inbook{sternWerGehoertAuf2014,
  title = {{Wer geh\"ort auf das Gymnasium? Intelligenzforschung und Schullaufbahnentscheidungen}},
  booktitle = {{Von der Krippe zum Gymnasium: Bildung und Erziehung im 21. Jahrhundert}},
  author = {Stern, Elsbeth and Hofer, Sarah},
  year = {2014},
  pages = {41},
  publisher = {{Beltz Verlag}},
  address = {{Weinheim Basel}},
  collaborator = {Wyss, Eva},
  isbn = {978-3-7799-2934-5},
  langid = {ngerman},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/IX5ZUIGJ/Stern and Hofer - 2014 - Wer gehört auf das Gymnasium.pdf}
}

@book{steveawodeyHomotopyTypeTheory2013,
  title = {Homotopy {{Type Theory}}: {{Univalent Foundations}} of {{Mathematics}}},
  editor = {{Steve Awodey} and {Thierry Coquand} and {Vladimir Voevodsky}},
  year = {2013},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/5CPHHPUU/Steve Awodey et al - 2013 - Homotopy Type Theory.pdf}
}

@book{stevenk.shevellScienceColor2003,
  title = {The {{Science}} of {{Color}}},
  editor = {{Steven K. Shevell}},
  year = {2003},
  edition = {2},
  publisher = {{Elsevier}},
  file = {/Users/igormoreno/Zotero/storage/6YUV2QCZ/5---Color-Appearance-and-Color-Difference-Specificat_2003_The-Science-of-Col.pdf;/Users/igormoreno/Zotero/storage/9CPCU9XA/Preface_2003_The-Science-of-Color.pdf;/Users/igormoreno/Zotero/storage/DLD53ET2/7---The-Physics-and-Chemistry-of-Color--the-15-Mecha_2003_The-Science-of-Col.pdf;/Users/igormoreno/Zotero/storage/G85FNITR/6---The-Physiology-of-Color-Vision_2003_The-Science-of-Color.pdf;/Users/igormoreno/Zotero/storage/I8E3AWB8/Author-Index_2003_The-Science-of-Color.pdf;/Users/igormoreno/Zotero/storage/KRVT7UFK/Subject-Index_2003_The-Science-of-Color.pdf;/Users/igormoreno/Zotero/storage/L2Q8S5K9/3---Color-Matching-and-Color-Discrimination_2003_The-Science-of-Color.pdf;/Users/igormoreno/Zotero/storage/PUM9SYTL/DEDICATED-TO-OUR-MENTORS-_2003_The-Science-of-Color.pdf;/Users/igormoreno/Zotero/storage/RED74Z46/1---The-Origins-of-Modern-Color-Science_2003_The-Science-of-Color.pdf;/Users/igormoreno/Zotero/storage/RIWYXTSQ/Front-Matter_2003_The-Science-of-Color.pdf;/Users/igormoreno/Zotero/storage/SX5KI8SU/8---Digital-Color-Reproduction_2003_The-Science-of-Color.pdf;/Users/igormoreno/Zotero/storage/T7ZF6WFF/Copyright_2003_The-Science-of-Color.pdf;/Users/igormoreno/Zotero/storage/TDWIMTPR/4---Color-Appearance_2003_The-Science-of-Color.pdf;/Users/igormoreno/Zotero/storage/UN8W8P24/Contributors_2003_The-Science-of-Color.pdf;/Users/igormoreno/Zotero/storage/ZP5BC682/2---Light--the-Retinal-Image--and-Photoreceptors_2003_The-Science-of-Color.pdf}
}

@article{stevensStructuredDesign1974,
  title = {Structured Design},
  author = {Stevens, Wayne P. and Myers, Glenford J. and Constantine, Larry L.},
  year = {1974},
  journal = {IBM Systems Journal},
  volume = {13},
  number = {2},
  pages = {115--139},
  publisher = {{IBM}},
  file = {/Users/igormoreno/Zotero/storage/X9NG7FX9/sj.382.023120160825-11635-124ak4.pdf;/Users/igormoreno/Zotero/storage/2MEQLTLG/5388187.html}
}

@book{stinyShapeTalkingSeeing2006,
  title = {Shape: Talking about Seeing and Doing},
  shorttitle = {Shape},
  author = {Stiny, George},
  year = {2006},
  publisher = {{MIT Press}},
  address = {{Cambridge, Mass}},
  isbn = {978-0-262-19531-7},
  langid = {english},
  lccn = {QA445 .S764 2006},
  keywords = {{Creation (Literary, artistic, etc.)},Design Art,Geometrical models,Mathematics,Shapes},
  annotation = {OCLC: ocm58985723},
  file = {/Users/igormoreno/Zotero/storage/KYRX8VEB/Stiny - 2006 - Shape talking about seeing and doing.pdf}
}

@inproceedings{stolarekInjectiveTypeFamilies2015,
  title = {Injective {{Type Families}} for {{Haskell}}},
  booktitle = {Proceedings of the 2015 {{ACM SIGPLAN Symposium}} on {{Haskell}}},
  author = {Stolarek, Jan and Peyton Jones, Simon and Eisenberg, Richard A.},
  year = {2015},
  series = {Haskell '15},
  pages = {118--128},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2804302.2804314},
  urldate = {2019-06-28},
  abstract = {Haskell, as implemented by the Glasgow Haskell Compiler (GHC), allows expressive type-level programming. The most popular type-level programming extension is TypeFamilies, which allows users to write functions on types. Yet, using type functions can cripple type inference in certain situations. In particular, lack of injectivity in type functions means that GHC can never infer an instantiation of a type variable appearing only under type functions. In this paper, we describe a small modification to GHC that allows type functions to be annotated as injective. GHC naturally must check validity of the injectivity annotations. The algorithm to do so is surprisingly subtle. We prove soundness for a simplification of our algorithm, and state and prove a completeness property, though the algorithm is not fully complete. As much of our reasoning surrounds functions defined by a simple pattern-matching structure, we believe our results extend beyond just Haskell. We have implemented our solution on a branch of GHC and plan to make it available to regular users with the next stable release of the compiler.},
  isbn = {978-1-4503-3808-0},
  keywords = {functional dependencies,Haskell,injectivity,type families,type-level programming},
  annotation = {00015},
  file = {/Users/igormoreno/Zotero/storage/BLXYWGFQ/Stolarek et al. - 2015 - Injective Type Families for Haskell.pdf}
}

@phdthesis{stouffsAlgebraShapes1994,
  title = {The {{Algebra}} of {{Shapes}}},
  author = {Stouffs, Rudi},
  year = {1994},
  month = apr,
  journal = {PhD Dissertation, Department of Architecture, Carnegie Mellon University},
  file = {/Users/igormoreno/Zotero/storage/WPD3UU8X/partI.pdf}
}

@article{stracheyFundamentalConceptsProgramming2000,
  title = {Fundamental {{Concepts}} in {{Programming Languages}}},
  author = {Strachey, Christopher},
  year = {2000},
  journal = {Higher-Order and Symbolic Computation},
  volume = {13},
  pages = {11--49},
  abstract = {Abstract. This paper forms the substance of a course of lectures given at the International Summer School in Computer Programming at Copenhagen in August, 1967. The lectures were originally given from notes and the paper was written after the course was finished. In spite of this, and only partly because of the shortage of time, the paper still retains many of the shortcomings of a lecture course. The chief of these are an uncertainty of aim\textemdash it is never quite clear what sort of audience there will be for such lectures\textemdash and an associated switching from formal to informal modes of presentation which may well be less acceptable in print than it is natural in the lecture room. For these (and other) faults, I apologise to the reader. There are numerous references throughout the course to CPL [1\textendash 3]. This is a programming language which has been under development since 1962 at Cambridge and London and Oxford. It has served as a vehicle for research into both programming languages and the design of compilers. Partial implementations exist at Cambridge and London. The language is still evolving so that there is no definitive manual available yet. We hope to reach another resting point in its evolution quite soon and to produce a compiler and reference manuals for this version. The compiler will probably be written in such a way that it is relatively easy to transfer it to another machine, and in the first instance we hope to establish it on three or four machines more or less at the same time. The lack of a precise formulation for CPL should not cause much difficulty in this course, as we are primarily concerned with the ideas and concepts involved rather than with their precise representation in a programming language.},
  file = {/Users/igormoreno/Zotero/storage/PMUF8NQJ/Strachey - 2000 - Fundamental Concepts in Programming Languages.pdf;/Users/igormoreno/Zotero/storage/LMIGX38U/summary.html}
}

@misc{StructuralDiffsWilfred,
  title = {Structural {{Diffs}} {$\cdot$} {{Wilfred}}/Difftastic {{Wiki}}},
  journal = {GitHub},
  urldate = {2022-03-11},
  abstract = {a syntax-aware diff 🟥🟩. Contribute to Wilfred/difftastic development by creating an account on GitHub.},
  howpublished = {https://github.com/Wilfred/difftastic},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/6XGYYHVP/Structural-Diffs.html}
}

@article{stullLearningDoingLearning2007,
  title = {Learning by Doing versus Learning by Viewing: {{Three}} Experimental Comparisons of Learner-Generated versus Author-Provided Graphic Organizers},
  shorttitle = {Learning by Doing versus Learning by Viewing},
  author = {Stull, Andrew T. and Mayer, Richard E.},
  year = {2007},
  journal = {Journal of Educational Psychology},
  volume = {99},
  number = {4},
  pages = {808--820},
  issn = {1939-2176(Electronic),0022-0663(Print)},
  doi = {10.1037/0022-0663.99.4.808},
  abstract = {Do students learn more deeply from a passage when they attempt to construct their own graphic organizers (i.e., learning by doing) than when graphic organizers are provided (i.e., learning by viewing)? In 3 experiments, learners were tested on retention and transfer after reading a passage with author-provided graphic organizers or when asked to construct graphic organizers. In Experiment 1 (highest complexity), there were 27 author-provided graphic organizers or margin space for constructing graphic organizers. In Experiment 2 (intermediate complexity), there were 18 author-provided graphic organizers or 18 corresponding graphic organizer templates. In Experiment 3 (lowest complexity), there were 10 author-provided graphic organizers or 10 corresponding graphic organizer templates. On transfer, the effect size favored the author-provided group (Experiment 1: d = 0.24, ns; Experiment 2: d = 0.43, p {$<$} .05; Experiment 3: d = 0.84, p {$<$} .01). On retention, there were no significant differences. These results are consistent with cognitive load theory, which posits that excessive activity can create extraneous cognitive load, disrupting generative processing. These results are not consistent with activity theory, which posits that students learn by doing. (PsycINFO Database Record (c) 2016 APA, all rights reserved)},
  keywords = {Advance Organizers,Cognitive Processes,Graphical Displays,Human Channel Capacity,Learning,Reading Comprehension,To Read},
  file = {/Users/igormoreno/Zotero/storage/CW64YU33/Stull and Mayer - 2007 - Learning by doing versus learning by viewing Thre.pdf;/Users/igormoreno/Zotero/storage/ZMKCE62K/2007-17712-009.html}
}

@inproceedings{subramaniamTeachingArithmeticAlgebraic2004,
  title = {Teaching {{Arithmetic}} and {{Algebraic Expressions}}},
  booktitle = {Proceedings of the 28th {{Conference}} of the {{International Group}} for the {{Psychology}} of {{Mathematics Education}}},
  author = {Subramaniam, K and Banerjee, Rakhi},
  year = {2004},
  volume = {3},
  pages = {121--128},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/QK6X52BX/Subramaniam and Banerjee - 2004 - Teaching Arithmetic and Algebraic Expressions.pdf}
}

@inproceedings{suhCodeToonStoryIdeation2022,
  title = {{{CodeToon}}: {{Story Ideation}}, {{Auto Comic Generation}}, and {{Structure Mapping}} for {{Code-Driven Storytelling}}},
  shorttitle = {{{CodeToon}}},
  booktitle = {Proceedings of the 35th {{Annual ACM Symposium}} on {{User Interface Software}} and {{Technology}}},
  author = {Suh, Sangho and Zhao, Jian and Law, Edith},
  year = {2022},
  month = oct,
  series = {{{UIST}} '22},
  pages = {1--16},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3526113.3545617},
  urldate = {2023-01-22},
  abstract = {Recent work demonstrated how we can design and use coding strips, a form of comic strips with corresponding code, to enhance teaching and learning in programming. However, creating coding strips is a creative, time-consuming process. Creators have to generate stories from code (code{$\mapsto$}story) and design comics from stories (story{$\mapsto$}comic). We contribute CodeToon, a comic authoring tool that facilitates this code-driven storytelling process with two mechanisms: (1) story ideation from code using metaphor and (2) automatic comic generation from the story. We conducted a two-part user study that evaluates the tool and the comics generated by participants to test whether CodeToon facilitates the authoring process and helps generate quality comics. Our results show that CodeToon helps users create accurate, informative, and useful coding strips in a significantly shorter time. Overall, this work contributes methods and design guidelines for code-driven storytelling and opens up opportunities for using art to support computer science education.},
  isbn = {978-1-4503-9320-1},
  keywords = {authoring tool,code-driven storytelling,coding strip,comics},
  file = {/Users/igormoreno/Zotero/storage/EA9I6LS5/Suh et al - 2022 - CodeToon.pdf}
}

@inproceedings{suhCodingStripPedagogical2020,
  title = {Coding {{Strip}}: {{A Pedagogical Tool}} for {{Teaching}} and {{Learning Programming Concepts}} through {{Comics}}},
  shorttitle = {Coding {{Strip}}},
  booktitle = {2020 {{IEEE Symposium}} on {{Visual Languages}} and {{Human-Centric Computing}} ({{VL}}/{{HCC}})},
  author = {Suh, Sangho and Lee, Martinet and Xia, Gracie and {law}, Edith},
  year = {2020},
  month = aug,
  pages = {1--10},
  issn = {1943-6106},
  doi = {10.1109/VL/HCC50065.2020.9127262},
  abstract = {The abstract nature of programming makes learning to code a daunting undertaking for many novice learners. In this work, we advocate the use of comics\textemdash a medium capable of presenting abstract ideas in a concrete, familiar way\textemdash for introducing programming concepts. Particularly, we propose a design process and related tools to help students and teachers create coding strips, a form of comic strips that are associated with a piece of code. We conducted two design workshops with students and high school computer science teachers to evaluate our design process and tools. We find that our design process and tools are effective at supporting the design of coding strips and that both students and teachers are excited about using coding strip as a tool for learning and teaching programming concepts.},
  keywords = {Codes,coding strip,comics,computational thinking,computing education,concreteness fading,Conferences,Education,Encoding,Programming profession,Strips,visual language,Visualization},
  file = {/Users/igormoreno/Zotero/storage/Q2CVH9NI/Suh et al - 2020 - Coding Strip.pdf;/Users/igormoreno/Zotero/storage/PRMQ32RG/stamp.html}
}

@inproceedings{suhHowWeDesign2020,
  title = {How Do We Design for Concreteness Fading? Survey, General Framework, and Design Dimensions},
  shorttitle = {How Do We Design for Concreteness Fading?},
  booktitle = {Proceedings of the {{Interaction Design}} and {{Children Conference}}},
  author = {Suh, Sangho and Lee, Martinet and Law, Edith},
  year = {2020},
  month = jun,
  series = {{{IDC}} '20},
  pages = {581--588},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3392063.3394413},
  urldate = {2023-01-09},
  abstract = {Over the years, concreteness fading has been used to design learning materials and educational tools for children. Unfortunately, it remains an underspecified technique without a clear guideline on how to design it, resulting in varying forms of concreteness fading and conflicting results due to the design inconsistencies. To our knowledge, no research has analyzed the existing designs of concreteness fading implemented across different settings, formulated a generic framework, or explained the design dimensions of the technique. This poses several problems for future research, such as lack of a shared vocabulary for reference and comparison, as well as barriers to researchers interested in learning and using this technique. Thus, to inform and support future research, we conducted a systematic literature review and contribute: (1) an overview of the technique, (2) a discussion of various design dimensions and challenges, and (3) a synthesis of key findings about each dimension. We open source our dataset to invite other researchers to contribute to the corpus, supporting future research and discussion on concreteness fading.},
  isbn = {978-1-4503-7981-6},
  keywords = {concreteness fading,literature review},
  file = {/Users/igormoreno/Zotero/storage/J7N8ZBL2/Suh et al - 2020 - How do we design for concreteness fading.pdf}
}

@inproceedings{suhUsingComicsIntroduce2021,
  title = {Using {{Comics}} to {{Introduce}} and {{Reinforce Programming Concepts}} in {{CS1}}},
  booktitle = {Proceedings of the 52nd {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Suh, Sangho and Latulipe, Celine and Lee, Ken Jen and Cheng, Bernadette and Law, Edith},
  year = {2021},
  month = mar,
  series = {{{SIGCSE}} '21},
  pages = {369--375},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3408877.3432465},
  urldate = {2023-01-22},
  abstract = {Recent work investigated the potential of comics to support the teaching and learning of programming concepts and suggested several ways coding strips, a form of comic strip with its corresponding code, can be used. Building on this work, we tested the recommended use cases of coding strip in an undergraduate introductory computer science course at a large comprehensive university. At the end of the course, we surveyed students to assess their experience and found they benefited in various ways. Our work contributes a demonstration of the various ways comics can be used in introductory CS courses and an initial understanding of benefits and challenges with using comics in computing education gleaned from an analysis of students' survey responses and code submissions.},
  isbn = {978-1-4503-8062-1},
  keywords = {coding strip,comics,dual coding theory},
  file = {/Users/igormoreno/Zotero/storage/YETX7IRZ/Suh et al - 2021 - Using Comics to Introduce and Reinforce Programming Concepts in CS1.pdf}
}

@inproceedings{suhUsingConcretenessFading2019,
  title = {Using {{Concreteness Fading}} to {{Model}} \& {{Design Learning Process}}},
  booktitle = {Proceedings of the 2019 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Suh, Sangho},
  year = {2019},
  series = {{{ICER}} '19},
  pages = {353--354},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3291279.3339445},
  urldate = {2019-10-07},
  abstract = {Concreteness fading is a technique for teaching abstract concepts, where a given concept is re-introduced in three stages with decreasing levels of concreteness. Over the years, its effectiveness has been empirically and theoretically supported in mathematics and science education, encouraging the recent adoption of the technique in computing education research. My research aims to advance our understanding of this technique and use it to support learning in computing education. The motivation that drives this research is my belief that the concreteness fading approach can have a significant impact on how we model and design learning process in computing education, and broad implications for how we design learning interfaces and systems.},
  isbn = {978-1-4503-6185-9},
  keywords = {computing education,concreteness fading,levels of abstraction},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/VVWEG7J3/Suh - 2019 - Using Concreteness Fading to Model & Design Learning Process.pdf}
}

@article{suiWebBasedEnvironmentTeach,
  title = {A {{Web-Based Environment}} to {{Teach Introductory Programming}} Based on a {{Bi-Directional Layered Notional Machine}}},
  author = {Sui, Li and Dietrich, Jens and Heinrich, Eva},
  pages = {6},
  abstract = {We present a novel browser-based environment to teach introductory programming. This platform combines gamification with peer-to-peer interaction. Students write programs (bots) that play simple board games on their behalf, and can exercise these bots by playing against the bots developed by their peers. The tool is web-based in order to facilitate lowcost delivery and collaboration.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/77P8Z7NE/Sui et al - A Web-Based Environment to Teach Introductory Programming based on a.pdf}
}

@article{sullivanUsingEffectSize2012,
  title = {Using {{Effect Size}}\textemdash or {{Why}} the {{P Value Is Not Enough}}},
  author = {Sullivan, Gail M. and Feinn, Richard},
  year = {2012},
  month = sep,
  journal = {Journal of Graduate Medical Education},
  volume = {4},
  number = {3},
  pages = {279--282},
  issn = {1949-8349},
  doi = {10.4300/JGME-D-12-00156.1},
  urldate = {2023-06-28},
  pmcid = {PMC3444174},
  pmid = {23997866},
  file = {/Users/igormoreno/Zotero/storage/7EW6IYPP/Sullivan and Feinn - 2012 - Using Effect Size—or Why the P Value Is Not Enough.pdf}
}

@article{suthDevelopingStudentsRepresentational2007,
  title = {Developing {{Students}}' {{Representational Fluency Using Virtual}} and {{Physical Algebra Balances}}},
  author = {Suth, Jennifer and {Moyer-Packenham}, Patricia S},
  year = {2007},
  journal = {Journal of Computers in Mathematics and Science Teaching},
  volume = {26},
  number = {2},
  pages = {155--173},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/HI7HM8G3/Suth and Moyer-Packenham - 2007 - Developing Students' Representational Fluency Using Virtual and Physical.pdf}
}

@article{sutherlandSketchpadManMachineGraphical1964,
  title = {Sketchpad a {{Man-Machine Graphical Communication System}}},
  author = {Sutherland, Ivan E.},
  year = {1964},
  month = may,
  journal = {SIMULATION},
  volume = {2},
  number = {5},
  pages = {R-3},
  publisher = {{SAGE Publications Ltd STM}},
  issn = {0037-5497},
  doi = {10.1177/003754976400200514},
  urldate = {2022-03-09},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/YNM6Q8R5/Sutherland - 1964 - Sketchpad a Man-Machine Graphical Communication System.pdf}
}

@incollection{swellerCHAPTERTWOCognitive2011,
  title = {{{CHAPTER TWO}} - {{Cognitive Load Theory}}},
  booktitle = {Psychology of {{Learning}} and {{Motivation}}},
  author = {Sweller, John},
  editor = {Mestre, Jose P. and Ross, Brian H.},
  year = {2011},
  month = jan,
  volume = {55},
  pages = {37--76},
  publisher = {{Academic Press}},
  doi = {10.1016/B978-0-12-387691-1.00002-8},
  urldate = {2018-11-06},
  abstract = {Cognitive load theory uses evolutionary theory to consider human cognitive architecture and uses that architecture to devise novel, instructional procedures. The theory assumes that knowledge can be divided into biologically primary knowledge that we have evolved to acquire and biologically secondary knowledge that is important for cultural reasons. Secondary knowledge, unlike primary knowledge, is the subject of instruction. It is processed in a manner that is analogous to the manner in which biological evolution processes information. When dealing with secondary knowledge, human cognition requires a very large information store, the contents of which are acquired largely by obtaining information from other information stores. Novel information is generated by a random generate and test procedure with only very limited amounts of novel information able to be processed at any given time. In contrast, very large amounts of organized information stored in the information store can be processed in order to generate complex action. This architecture has been used to generate instructional procedures, summarized in this chapter.},
  keywords = {Evolutionary Psychology,Human Cognitive Architecture,Instructional Processes,Long-term Memory,Working Memory},
  file = {/Users/igormoreno/Zotero/storage/PPPSBN6M/B9780123876911000028.html}
}

@article{swellerCognitiveLoadProblem1988,
  title = {Cognitive Load during Problem Solving: {{Effects}} on Learning},
  shorttitle = {Cognitive Load during Problem Solving},
  author = {Sweller, John},
  year = {1988},
  month = apr,
  journal = {Cognitive Science},
  volume = {12},
  number = {2},
  pages = {257--285},
  issn = {0364-0213},
  doi = {10.1016/0364-0213(88)90023-7},
  urldate = {2018-11-06},
  abstract = {Considerable evidence indicates that domain specific knowledge in the form of schemas is the primary factor distinguishing experts from novices in problem-solving skill. Evidence that conventional problem-solving activity is not effective in schema acquisition is also accumulating. It is suggested that a major reason for the ineffectiveness of problem solving as a learning device, is that the cognitive processes required by the two activities overlap insufficiently, and that conventional problem solving in the form of means-ends analysis requires a relatively large amount of cognitive processing capacity which is consequently unavailable for schema acquisition. A computational model and experimental evidence provide support for this contention. Theoretical and practical implications are discussed.},
  keywords = {Strong},
  file = {/Users/igormoreno/Zotero/storage/IMMCPQ66/Sweller - 1988 - Cognitive load during problem solving Effects on .pdf;/Users/igormoreno/Zotero/storage/IWFV8GZS/0364021388900237.html}
}

@article{swellerCognitiveLoadTheory1994,
  title = {Cognitive Load Theory, Learning Difficulty, and Instructional Design},
  author = {Sweller, John},
  year = {1994},
  month = jan,
  journal = {Learning and Instruction},
  volume = {4},
  number = {4},
  pages = {295--312},
  issn = {0959-4752},
  doi = {10.1016/0959-4752(94)90003-5},
  urldate = {2018-11-06},
  abstract = {This paper is concerned with some of the factors that determine the difficulty of material that needs to be learned. It is suggested that when considering intellectual activities, schema acquisition and automation are the primary mechanisms of learning. The consequences of cognitive load theory for the structuring of information in order to reduce difficulty by focusing cognitive activity on schema acquisition is briefly summarized. It is pointed out that cognitive load theory deals with learning and problem solving difficulty that is artificial in that it can be manipulated by instructional design. Intrinsic cognitive load in contrast, is constant for a given area because it is a basic component of the material. Intrinsic cognitive load is characterized in terms of element interactivity. The elements of most schemas must be learned simultaneously because they interact and it is the interaction that is critical. If, as in some areas, interactions between many elements must be learned, then intrinsic cognitive load will be high. In contrast, in different areas, if elements can be learned successively rather than simultaneously because they do not interact, intrinsic cognitive load will be low. It is suggested that extraneous cognitive load that interferes with learning only is a problem under conditions of high cognitive load caused by high element interactivity. Under conditions of low element interactivity, re-designing instruction to reduce extraneous cognitive load may have no appreciable consequences. In addition, the concept of element interactivity can be used to explain not only why some material is difficult to learn but also, why it can be difficult to understand. Understanding becomes relevant when high element interactivity material with a naturally high cognitive load must be learned.},
  file = {/Users/igormoreno/Zotero/storage/GTKHYKBC/Sweller - 1994 - Cognitive load theory, learning difficulty, and instructional design.pdf;/Users/igormoreno/Zotero/storage/XVIK2RZQ/0959475294900035.html}
}

@article{swellerShouldSelfregulatedLearning2017,
  title = {Should Self-Regulated Learning Be Integrated with Cognitive Load Theory? {{A}} Commentary},
  shorttitle = {Should Self-Regulated Learning Be Integrated with Cognitive Load Theory?},
  author = {Sweller, John and Paas, Fred},
  year = {2017},
  month = oct,
  journal = {Learning and Instruction},
  series = {Bridging {{Cognitive Load}} and {{Self-Regulated Learning Research}}},
  volume = {51},
  pages = {85--89},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2017.05.005},
  urldate = {2018-11-06},
  abstract = {Research on either cognitive load theory or self-regulated learning usually proceeds without reference to the other theory. In this commentary, we have commented on the editorial introduction and the six papers included in this Special Issue intended to indicate possible links between the two theories. To assist in this process, we have analysed some of the characteristics of both theories that either facilitate or impede the establishment of links. We conclude that while links are possible, the many differences between the theories present considerable barriers that will need to be overcome.},
  keywords = {Cognitive load theory,Linking disparate areas,Self-regulated learning},
  file = {/Users/igormoreno/Zotero/storage/BVZXB24M/Sweller and Paas - 2017 - Should self-regulated learning be integrated with cognitive load theory.pdf;/Users/igormoreno/Zotero/storage/EQMA5ZNK/S0959475217303043.html}
}

@article{swellerWorkedExampleEffect2006,
  title = {The Worked Example Effect and Human Cognition},
  author = {Sweller, John},
  year = {2006},
  month = apr,
  journal = {Learning and Instruction},
  series = {Recent {{Worked Examples Research}}: {{Managing Cognitive Load}} to {{Foster Learning}} and {{Transfer}}},
  volume = {16},
  number = {2},
  pages = {165--169},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2006.02.005},
  urldate = {2018-11-06},
  file = {/Users/igormoreno/Zotero/storage/UBWMP8RV/Sweller - 2006 - The worked example effect and human cognition.pdf;/Users/igormoreno/Zotero/storage/RAR53IAS/S0959475206000193.html}
}

@article{swellerWorkingMemoryLongterm2016,
  title = {Working {{Memory}}, {{Long-term Memory}}, and {{Instructional Design}}},
  author = {Sweller, John},
  year = {2016},
  month = dec,
  journal = {Journal of Applied Research in Memory and Cognition},
  series = {Working {{Memory}} in the {{Wild}}: {{Applied Research}} in {{Working Memory}}},
  volume = {5},
  number = {4},
  pages = {360--367},
  issn = {2211-3681},
  doi = {10.1016/j.jarmac.2015.12.002},
  urldate = {2018-11-06},
  abstract = {Cognitive load theory is used to design instruction. Several aspects of human cognition are critical to instructional design. First, the theory assumes we have not specifically evolved to learn the topics taught in educational and training institutions. Second, these topics require learners to acquire domain-specific rather than generic\textendash cognitive knowledge. Third, while generic\textendash cognitive knowledge does not require explicit instruction because we have evolved to acquire it, domain-specific concepts and skills do require explicit instruction. These factors interact with the capacity and duration constraints of working memory to delineate a cognitive architecture relevant to instructional design. The working memory limits do not apply to biologically primary, generic\textendash cognitive knowledge acquired without explicit instruction but do apply to biologically secondary, domain-specific knowledge that requires explicit instruction. Accordingly, cognitive load theory has been developed to provide techniques that reduce unnecessary working memory load when dealing with explicitly taught, biologically secondary, domain-specific knowledge.},
  keywords = {Cognitive load theory,Instructional design,Relations between working and long-term memory},
  file = {/Users/igormoreno/Zotero/storage/6K7Q4E6Y/Sweller - 2016 - Working Memory, Long-term Memory, and Instructional Design.pdf;/Users/igormoreno/Zotero/storage/2TK6AQ5M/S2211368115000935.html}
}

@inproceedings{swidanProgrammingMisconceptionsSchool2018,
  ids = {swidanProgrammingMisconceptionsSchool2018a},
  title = {Programming {{Misconceptions}} for {{School Students}}},
  booktitle = {Proceedings of the 2018 {{ACM Conference}} on {{International Computing Education Research}}  - {{ICER}} '18},
  author = {Swidan, Alaaeddin and Hermans, Felienne and Smit, Marileen},
  year = {2018},
  pages = {151--159},
  publisher = {{ACM Press}},
  address = {{Espoo, Finland}},
  doi = {10.1145/3230977.3230995},
  urldate = {2018-10-22},
  abstract = {Programming misconceptions have been a topic of interest in introductory programming education, with a focus on university level students. Nowadays, programming is increasingly taught to younger children in schools, sometimes as part of the curriculum. In this study we aim at exploring what misconceptions are held by younger, school-age children. To this end we design a multiplechoice questionnaire with Scratch programming exercises. The questions represent a selected set of 11 known misconceptions and relate to basic programming concepts. 145 participants aged 7 to 17 years, with an experience in programming, took part in the study. Our results show the top three common misconceptions are the difficulty of understanding the sequentiality of statements, that a variable holds one value at a time, and the interactivity of a program when user input is required. Holding a misconception is influenced by the mathematical effect of numbers, semantic meaning of identifiers and high expectations of what a computer can do. Other insights from the results show that older children answer more questions correctly, especially for the variable and control concepts. Children who program in Scratch only seem to have difficulties in answering the questions correctly compared to children who program in Scratch and another language. Our findings suggest that work should focus on identifying Scratch-induced misconceptions, and develop intervention methods to counter those misconceptions as early as possible. Finally, for children who start learning programming with Scratch, materials should be more concept-rich and include diverse exercises for each concept.},
  isbn = {978-1-4503-5628-2},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/DNVEN298/Swidan et al - 2018 - Programming Misconceptions for School Students.pdf}
}

@inproceedings{sychevToolTeachExpressions2022,
  title = {A {{Tool}} to {{Teach Expressions}} with {{Feedback About Broken Laws}}},
  booktitle = {Proceedings of the 53rd {{ACM Technical Symposium}} on {{Computer Science Education V}}. 2},
  author = {Sychev, Oleg and Penskoy, Nikita and Terekhov, Grigory},
  year = {2022},
  month = mar,
  series = {{{SIGCSE}} 2022},
  pages = {1158},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3478432.3499082},
  urldate = {2022-11-27},
  abstract = {We developed a web-based tool for learning the order of evaluating expressions in C++ and Python languages. The variety of operator precedence and associativity among programming languages and the lack of direct visualization make understanding expression evaluation difficult for some students. The key feature of the new system is a detailed explanation of errors, containing fault reasons---the subject domain laws that the student violated. We evaluated the tool with 14 first-year Computer Science students and received positive feedback. This tool can be used for learning new concepts during homework without requiring more class time because it provides enough feedback for students to learn on their own.},
  isbn = {978-1-4503-9071-2},
  keywords = {constraint-based intelligent tutor,expressions,introductory programming course,order of evaluation,software reasoning}
}

@inproceedings{szaboNeopiagetianTheoryGuide2014,
  title = {Neo-Piagetian Theory as a Guide to Curriculum Analysis},
  booktitle = {Proceedings of the 45th {{ACM}} Technical Symposium on {{Computer}} Science Education},
  author = {Szabo, Claudia and Falkner, Katrina},
  year = {2014},
  month = mar,
  series = {{{SIGCSE}} '14},
  pages = {115--120},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2538862.2538910},
  urldate = {2020-09-22},
  abstract = {The development of a coherent curriculum, encapsulating appropriate topics, learning materials and assessment, is crucial for a successful educational experience. However, designing such a curriculum is a complicated task, with challenges in tracing the development of concepts across multiple courses and ensuring that assessment is at an appropriate level at specific points in the curricula. In this paper, we introduce a curriculum mapping framework based on Neo-Piagetian theory that assists lecturers in tracing concept development and assessment throughout their courses. This framework supports the identification of prerequisite concepts, where students are already assumed to be aware of specific topics, and assessment leaps, where students are assessed at a different conceptual level than they have been taught. We illustrate the application of our framework through a case study analysing the syllabus of a sequence of three first year programming courses.},
  isbn = {978-1-4503-2605-6},
  keywords = {computer science education,curriculum mapping},
  annotation = {00006},
  file = {/Users/igormoreno/Zotero/storage/7X34VYDM/Szabo and Falkner - 2014 - Neo-piagetian theory as a guide to curriculum analysis.pdf}
}

@article{tabachneck-schijfCaMeRaComputationalModel1997,
  title = {{{CaMeRa}}: {{A}} Computational Model of Multiple Representations},
  shorttitle = {{{CaMeRa}}},
  author = {{Tabachneck-Schijf}, Hermina J. M. and Leonardo, Anthony M. and Simon, Herbert A.},
  year = {1997},
  month = jul,
  journal = {Cognitive Science},
  series = {Advances in Analogy Research: {{Integration}} of Theory and Data from the Cognitive, Computational, and Neural Sciences},
  volume = {21},
  number = {3},
  pages = {305--350},
  issn = {0364-0213},
  doi = {10.1016/S0364-0213(99)80026-3},
  urldate = {2018-12-02},
  abstract = {This research aims to clarify, by constructing and testing a computer simulation, the use of multiple representations in problem solving, focusing on their role in visual reasoning. The model is motivated by extensive experimental evidence in the literature for the features it incorporates, but this article focuses on the system's structure. We illustrate the model's behavior by simulating the cognitive and perceptual processes of an economics expert as he teaches some well-learned economics principles while drawing a graph on a blackboard. Data in the experimental literature and concurrent verbal protocols were used to guide construction of a linked production system and parallel network, CaMeRa (Computation with Multiple Representations), that employs a ``Mind's Eye'' representation for pictorial information, consisting of a bitmap and associated node-link structures. Propositional list structures are used to represent verbal information and reasoning. Small individual pieces from the different representations are linked on a sequential and temporary basis to form a reasoning and inferencing chain, using visually encoded information recalled to the Mind's Eye from long-term memory and from cues recognized on an external display. CaMeRa, like the expert, uses the diagrammatic and verbal representations to complement one another, thus exploiting the unique advantages of each.},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/BINNAE8U/Tabachneck-Schijf et al - 1997 - CaMeRa.pdf;/Users/igormoreno/Zotero/storage/UUMBX6E7/S0364021399800263.html}
}

@article{takadaVisualUnderstandingComputing2020,
  title = {Toward the Visual Understanding of Computing Curricula},
  author = {Takada, Shingo and {Cuadros-Vargas}, Ernesto and Impagliazzo, John and Gordon, Steven and Marshall, Linda and Topi, Heikki and {van der Veer}, Gerrit and Waguespack, Leslie},
  year = {2020},
  month = sep,
  journal = {Education and Information Technologies},
  volume = {25},
  number = {5},
  pages = {4231--4270},
  issn = {1360-2357, 1573-7608},
  doi = {10.1007/s10639-020-10127-1},
  urldate = {2020-09-22},
  abstract = {Various computing subdisciplines, such as computer science and software engineering, each have their own curricular guidelines. They can be very difficult to understand and compare for people such as prospective students, industry personnel, and even faculty members. This is compounded by a lack of information surrounding undergraduate computing curricular topics via visual methods. This paper describes two experimental activities where the objective is to explore the possibility of obtaining quantitative data sets necessary for visualization, one based on competencies and the other based on knowledge areas. Both activities were based on surveys. The results from the first activity showed that a consensus interpretation could be obtained for the knowledge, skills, and dispositions implied by the competency descriptions, although not as strongly for dispositions. The second activity resulted in a table of knowledge areas with minimum and maximum weights for six computing subdisciplines. Finally, this paper also shows two examples of how users can explore the various curricular guidelines through visualization.},
  langid = {english},
  keywords = {CC2020-Authors},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/IBEXVPCE/Takada et al - 2020 - Toward the visual understanding of computing curricula.pdf;/Users/igormoreno/Zotero/storage/REYVAKRY/Takada et al - 2020 - Toward the visual understanding of computing curricula.pdf}
}

@book{takashiibaLearningPatternsPattern2011,
  title = {Learning {{Patterns}}: {{A Pattern Language}} for {{Creative Learning}}},
  author = {{Takashi Iba}},
  year = {2011},
  file = {/Users/igormoreno/Zotero/storage/JWVPXNUY/Takashi Iba - 2011 - Learning Patterns.pdf}
}

@article{tamirIssuesRelatedUse1989,
  title = {Some Issues Related to the Use of Justifications to Multiple-Choice Answers},
  author = {Tamir, Pinchas},
  year = {1989},
  month = dec,
  journal = {Journal of Biological Education},
  volume = {23},
  number = {4},
  pages = {285--292},
  publisher = {{Routledge}},
  issn = {0021-9266},
  doi = {10.1080/00219266.1989.9655083},
  urldate = {2021-07-06},
  abstract = {In recent years there has been a growing interest in misconceptions which are prevalent among students and in ways and means which can be used to identify these misconceptions. The present study focuses on the use of justifications to multiple-choice items. This approach has been employed for several years in the biology matriculation tests in Israel and found to be a very effective diagnostic tool. Two specific questions were studied: 1. To what extent will the justifications differ if the correct answer is made known to the students so that they can concentrate on the justifications without being bothered by the need to search for the best answer. 2. Since in the case described in 1 above the correct answer is made known perhaps the distractors are altogether unnecessary? Two samples were studied. The first comprised 114 10th and 11th grade (15/16-year old) students who studied biology in the year 1987 in seven high schools in California. The second consisted of 350 Israeli 12th grade (17-year old) students who studied biology toward the matriculation examination in the same year. The same 20 items were presented to the students in three formats, namely: regular multiple choice, multiple choice in which the correct answer is marked, and a statement of the correct answer without the distractors. Students' justifications for the three item formats were compared and significant differences were found. The study confirmed the usefulness of justifications as a diagnostic tool and offered recommendations regarding future uses of justifications, including their contribution to the construction of two-tier items.},
  file = {/Users/igormoreno/Zotero/storage/4TWCGKDM/Tamir - 1989 - Some issues related to the use of justifications t.pdf;/Users/igormoreno/Zotero/storage/3UWWAISI/00219266.1989.html}
}

@article{tangAssessingComputationalThinking2020,
  title = {Assessing Computational Thinking: {{A}} Systematic Review of Empirical Studies},
  shorttitle = {Assessing Computational Thinking},
  author = {Tang, Xiaodan and Yin, Yue and Lin, Qiao and Hadad, Roxana and Zhai, Xiaoming},
  year = {2020},
  month = apr,
  journal = {Computers \& Education},
  volume = {148},
  pages = {103798},
  issn = {03601315},
  doi = {10.1016/j.compedu.2019.103798},
  urldate = {2023-03-16},
  abstract = {With the increasing attention to Computational Thinking (CT) in education, there has been a concomitant rise of needs and interest in investigating how to assess CT skills. This study sys\- tematically reviewed how CT has been assessed in the literature. We reviewed 96 journal articles to analyze specific CT assessments from four perspectives: educational context, assessment construct, assessment type, and reliability and validity evidence. Our review results indicate that (a) more CT assessments are needed for high school, college students, and teacher professional development programs, (b) most CT assessments focus on students' programming or computing skills, (c) traditional tests and performance assessments are often used to assess CT skills, and surveys are used to measure students' CT dispositions, and (d) more reliability and validity ev\- idence needs to be collected and reported in future studies. This review identifies current research gaps and future directions to conceptualize and assess CT skills, and the findings are expected to be beneficial for researchers, curriculum designers, and instructors.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/7XW7AINT/Tang et al. - 2020 - Assessing computational thinking A systematic rev.pdf}
}

@article{tangAssessingComputationalThinking2020a,
  title = {Assessing Computational Thinking: {{A}} Systematic Review of Empirical Studies},
  shorttitle = {Assessing Computational Thinking},
  author = {Tang, Xiaodan and Yin, Yue and Lin, Qiao and Hadad, Roxana and Zhai, Xiaoming},
  year = {2020},
  month = apr,
  journal = {Computers \& Education},
  volume = {148},
  pages = {103798},
  issn = {03601315},
  doi = {10.1016/j.compedu.2019.103798},
  urldate = {2023-03-16},
  abstract = {With the increasing attention to Computational Thinking (CT) in education, there has been a concomitant rise of needs and interest in investigating how to assess CT skills. This study sys\- tematically reviewed how CT has been assessed in the literature. We reviewed 96 journal articles to analyze specific CT assessments from four perspectives: educational context, assessment construct, assessment type, and reliability and validity evidence. Our review results indicate that (a) more CT assessments are needed for high school, college students, and teacher professional development programs, (b) most CT assessments focus on students' programming or computing skills, (c) traditional tests and performance assessments are often used to assess CT skills, and surveys are used to measure students' CT dispositions, and (d) more reliability and validity ev\- idence needs to be collected and reported in future studies. This review identifies current research gaps and future directions to conceptualize and assess CT skills, and the findings are expected to be beneficial for researchers, curriculum designers, and instructors.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/R9ZBW4M4/Tang et al. - 2020 - Assessing computational thinking A systematic rev.pdf}
}

@article{tanLearnerDashboardsDoubleEdged2017,
  title = {Learner {{Dashboards}} a {{Double-Edged Sword}}? {{Students}}' {{Sense-Making}} of a {{Collaborative Critical Reading}} and {{Learning Analytics Environment}} for {{Fostering}} 21st {{Century Literacies}}},
  shorttitle = {Learner {{Dashboards}} a {{Double-Edged Sword}}?},
  author = {Tan, Jennifer Pei-Ling and Koh, Elizabeth and Jonathan, Christin Rekha and Yang, Simon},
  year = {2017},
  month = mar,
  journal = {Journal of Learning Analytics},
  volume = {4},
  number = {1},
  pages = {117--140-117--140},
  issn = {1929-7750},
  doi = {10.18608/jla.2017.41.7},
  urldate = {2019-09-25},
  copyright = {Copyright (c) 2017 Journal of Learning Analytics},
  langid = {english},
  keywords = {21st century competences,computer-supported collaborative learning,critical literacy,Learning analytics,To Read},
  file = {/Users/igormoreno/Zotero/storage/8HAYG5XL/Tan et al - 2017 - Learner Dashboards a Double-Edged Sword.pdf;/Users/igormoreno/Zotero/storage/4Q5R6L9P/5156.html}
}

@book{tarriconeTaxonomyMetacognition2011,
  title = {The {{Taxonomy}} of {{Metacognition}}},
  author = {Tarricone, Pina},
  year = {2011},
  month = feb,
  publisher = {{Psychology Press}},
  doi = {10.4324/9780203830529},
  urldate = {2020-11-06},
  abstract = {Metacognition is a complex construct which is fundamental to learning. Its complex, fuzzy and multifaceted nature has often led to its colloquial application in},
  isbn = {978-0-203-83052-9},
  langid = {english},
  annotation = {00331},
  file = {/Users/igormoreno/Zotero/storage/S6UKJILR/Tarricone - 2011 - The Taxonomy of Metacognition.pdf;/Users/igormoreno/Zotero/storage/UEEKKPKN/9780203830529.html}
}

@article{taylorComputerScienceConcept2014,
  title = {Computer Science Concept Inventories: Past and Future},
  shorttitle = {Computer Science Concept Inventories},
  author = {Taylor, Cynthia and Zingaro, D and Porter, Leo and Webb, Kevin and Lee, C.B. and Clancy, Mike},
  year = {2014},
  month = oct,
  journal = {Computer Science Education},
  volume = {24},
  doi = {10.1080/08993408.2014.970779},
  abstract = {Concept Inventories (CIs) are assessments designed to measure student learning of core concepts. CIs have become well known for their major impact on pedagogical techniques in other sciences, especially physics. Presently, there are no widely used, validated CIs for computer science. However, considerable groundwork has been performed in the form of identifying core concepts, analyzing student misconceptions, and developing CI assessment questions. Although much of the work has been focused on CS1 and a CI has been developed for digital logic, some preliminary work on CIs is underway for other courses. This literature review examines CI work in other STEM disciplines, discusses the preliminary development of CIs in computer science, and outlines related research in computer science education that contributes to CI development.},
  file = {/Users/igormoreno/Zotero/storage/LKBFHYNB/Taylor et al. - 2014 - Computer science concept inventories past and fut.pdf;/Users/igormoreno/Zotero/storage/QWSY8RA2/Taylor et al - 2014 - Computer science concept inventories.pdf}
}

@inproceedings{taylorPracticalDetailsBuilding2020,
  title = {The {{Practical Details}} of {{Building}} a {{CS Concept Inventory}}},
  booktitle = {Proceedings of the 51st {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Taylor, Cynthia and Clancy, Michael and Webb, Kevin C. and Zingaro, Daniel and Lee, Cynthia and Porter, Leo},
  year = {2020},
  month = feb,
  series = {{{SIGCSE}} '20},
  pages = {372--378},
  publisher = {{Association for Computing Machinery}},
  address = {{Portland, OR, USA}},
  doi = {10.1145/3328778.3366903},
  urldate = {2020-05-18},
  abstract = {Concept inventories (CIs) allow researchers and practitioners to measure student conceptual learning within a course or topic area. While they have enabled meaningful pedagogical change in other disciplines, there are relatively few CIs in computer science. In this paper, we report on our experiences as recent developers of a CI for basic data structures. We discuss each step along the route to a CI and offer tips based on what we have learned. We encourage others to create CIs, and we hope that this paper will serve as a practical guide through the process.},
  isbn = {978-1-4503-6793-6},
  keywords = {assessment,concept inventory,data structures},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/U2D5E37F/Taylor et al - 2020 - The Practical Details of Building a CS Concept Inventory.pdf}
}

@inproceedings{teagueCombiningUnsupervisedInvigilated2016,
  title = {Combining Unsupervised and Invigilated Assessment of Introductory Programming},
  booktitle = {Proceedings of the {{Australasian Computer Science Week Multiconference}} on - {{ACSW}} '16},
  author = {Teague, Donna and Fidge, Colin and Xu, Yue},
  year = {2016},
  pages = {1--10},
  publisher = {{ACM Press}},
  address = {{Canberra, Australia}},
  doi = {10.1145/2843043.2843064},
  urldate = {2020-06-22},
  abstract = {We compared student performance on large-scale take-home assignments and small-scale invigilated tests that require competency with exactly the same programming concepts. The purpose of the tests, which were carried out soon after the take home assignments were submitted, was to validate the students' assignments as individual work.},
  isbn = {978-1-4503-4042-7},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/TD8ETG5S/Teague et al - 2016 - Combining unsupervised and invigilated assessment of introductory programming.pdf}
}

@article{teasleyStudentFacingDashboards2017,
  title = {Student {{Facing Dashboards}}: {{One Size Fits All}}?},
  shorttitle = {Student {{Facing Dashboards}}},
  author = {Teasley, Stephanie D.},
  year = {2017},
  month = oct,
  journal = {Technology, Knowledge and Learning},
  volume = {22},
  number = {3},
  pages = {377--384},
  issn = {2211-1670},
  doi = {10.1007/s10758-017-9314-3},
  urldate = {2019-09-25},
  abstract = {This emerging technology report reviews a new development in educational technology, student-facing dashboards, which provide comparative performance feedback to students calculated by Learning Analytics-based algorithms on data generated from university students' use of educational technology. Instructor- and advisor-facing dashboards emerged as one of the first direct applications of Learning Analytics, but the results from early implementations of these displays for students provide mixed results about the effects of their use. In particular, the ``one-size-fits-all'' design of many existing systems is questioned based on findings in related research on performance feedback and student motivation which has shown that various internal and external student-level factors affect the impact of feedback interventions, especially those using social comparisons. Integrating data from student information systems into underlying algorithms to produce personalized dashboards may mediate the possible negative effects of feedback, especially comparative feedback, and support more consistent benefits from the use of such systems.},
  langid = {english},
  keywords = {Dashboards,Higher education,Learning Analytics,Motivation,Performance feedback,Social comparison,To Read},
  file = {/Users/igormoreno/Zotero/storage/ES6YQP4V/Teasley - 2017 - Student Facing Dashboards One Size Fits All.pdf}
}

@inproceedings{tedreIdentificationClassificationCore2014,
  title = {Towards Identification and Classification of Core and Threshold Concepts in Methodology Education in Computing},
  booktitle = {Proceedings of the 2014 Conference on {{Innovation}} \& Technology in Computer Science Education - {{ITiCSE}} '14},
  author = {Tedre, Matti and Brash, Danny and {M{\"a}nnikk{\"o}-Barbutiu}, Sirkku and Cronj{\'e}, Johannes},
  year = {2014},
  pages = {237--242},
  publisher = {{ACM Press}},
  address = {{Uppsala, Sweden}},
  doi = {10.1145/2591708.2591758},
  urldate = {2020-01-01},
  abstract = {Research methodology is a quintessential component of science, but methods differ greatly between sciences. In computing, methods are borrowed from many fields, which causes difficulties to methodology education in computing. In our methodology courses in computing, we have observed a number of core and threshold concepts that affect students' success. This essay describes a work in progress towards understanding those core and threshold concepts in methodology education in computing, classified along two dimensions. We classify methodological concepts in terms of standard elements of research design in students' projects in computing, and in terms of their centrality and difficulty. We present examples of three types of troublesome knowledge concerning methodology: the strangeness and complexity of methodological concepts, misimpressions from everyday experience, and reasonable but mistaken expectations.},
  isbn = {978-1-4503-2833-3},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/A324IC2M/Tedre et al - 2014 - Towards identification and classification of core and threshold concepts in.pdf}
}

@inproceedings{teifPartonomyTaxonomyObjectoriented2006,
  title = {Partonomy and Taxonomy in Object-Oriented Thinking: Junior High School Students' Perceptions of Object-Oriented Basic Concepts},
  shorttitle = {Partonomy and Taxonomy in Object-Oriented Thinking},
  booktitle = {Working Group Reports on {{ITiCSE}} on {{Innovation}} and Technology in Computer Science Education},
  author = {Teif, Mariana and Hazzan, Orit},
  year = {2006},
  month = jun,
  series = {{{ITiCSE-WGR}} '06},
  pages = {55--60},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1189215.1189170},
  urldate = {2021-01-08},
  abstract = {The study presented in this paper explores junior high school students' comprehension of basic OO concepts. It summarizes major (mis)conceptions demonstrated by the students in two main categories: confusion of (1) taxonomic and (2) partonomic hierarchies with classes, objects and their interrelations.},
  isbn = {978-1-59593-603-5},
  keywords = {junior high school students' perceptions,object-oriented programming,partonomy,taxonomy},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/HHX7946G/Teif e Hazzan - 2006 - Partonomy and taxonomy in object-oriented thinking.pdf}
}

@inproceedings{tenenbergOpeningDoorComputer2007,
  title = {Opening the {{Door}} of the {{Computer Science Classroom}}: {{The Disciplinary Commons}}},
  booktitle = {{{SIGCSE}}},
  author = {Tenenberg, Josh and Fincher, Sally},
  year = {2007},
  pages = {5},
  abstract = {The Disciplinary Commons project had two primary objectives: to document and share knowledge about teaching and student learning in Computer Science (CS) classrooms, and to establish practices for the scholarship of teaching by making it public, peer-reviewed, and amenable for future use and development by other educators. The mechanism for achieving these goals was through a series of monthly meetings involving Computer Science faculty, one cohort of ten CS faculty in the US and one cohort of twenty in the UK. Meetings were focused on the teaching and learning within participants' classrooms, with each person documenting their teaching in a course portfolio. Surveyed on completing the project, participants discussed the value of the Disciplinary Commons in providing the time and structure to systematically reflect upon their practice, to exchange concrete ideas for teaching their courses with other CS educators in the discipline, to learn skills that apply directly to course and program evaluation, and to meet colleagues teaching CS at other institutions.},
  langid = {english},
  annotation = {00041},
  file = {/Users/igormoreno/Zotero/storage/JNTQD3I6/Tenenberg and Fincher - 2007 - Opening the Door of the Computer Science Classroom.pdf}
}

@inproceedings{tewFCS1LanguageIndependent2011,
  title = {The {{FCS1}}: A Language Independent Assessment of {{CS1}} Knowledge},
  shorttitle = {The {{FCS1}}},
  booktitle = {Proceedings of the 42nd {{ACM}} Technical Symposium on {{Computer}} Science Education - {{SIGCSE}} '11},
  author = {Tew, Allison Elliott and Guzdial, Mark},
  year = {2011},
  pages = {111},
  publisher = {{ACM Press}},
  address = {{Dallas, TX, USA}},
  doi = {10.1145/1953163.1953200},
  urldate = {2018-10-22},
  abstract = {A primary goal of many CS education projects is to determine the extent to which a given intervention has had an impact on student learning. However, computing lacks valid assessments for pedagogical or research purposes. Without such valid assessments, it is difficult to accurately measure student learning or establish a relationship between the instructional setting and learning outcomes.},
  isbn = {978-1-4503-0500-6},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/CNNVVSG8/Tew and Guzdial - 2011 - The FCS1 a language independent assessment of CS1.pdf}
}

@misc{theeclipsefoundationJDTCoreComponent2022,
  title = {{{JDT Core Component}}},
  author = {The Eclipse Foundation, JDT/Core},
  year = {2022},
  urldate = {2022-08-26},
  abstract = {JDT Core is the Java infrastructure of the Java IDE. It includes: \textbullet ~An incremental Java compiler. Implemented as an Eclipse builder, it is based on technology evolved from VisualAge for Java compiler. In particular, it allows to run and debug code which still contains unresolved errors. \textbullet ~A Java Model that provides API for navigating the Java element tree. The Java element tree defines a Java centric view of a project. It surfaces elements like package fragments, compilation units, binary classes, types, methods, fields.  \textbullet ~A Java Document Model providing API for manipulating a structured Java source document. \textbullet ~Code assist and code select support. \textbullet ~An indexed based search infrastructure that is used for searching, code assist, type hierarchy computation, and refactoring. The Java search engine can accurately find precise matches either in sources or binaries. \textbullet{} Evaluation support either in a scrapbook page or a debugger context. \textbullet ~Source code formatter},
  howpublished = {https://www.eclipse.org/jdt/core/index.php},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/3FC5HEQD/index.html}
}

@book{theoa.f.kuipersGeneralPhilosophyScience2007,
  title = {General {{Philosophy}} of {{Science}}},
  author = {{Theo A.F. Kuipers}},
  year = {2007},
  publisher = {{Elsevier}},
  file = {/Users/igormoreno/Zotero/storage/4W8ZEWTH/General-Preface_2007_General-Philosophy-of-Science.pdf;/Users/igormoreno/Zotero/storage/73JC38X6/Introduction--Explication-in-Philosophy-of-Sc_2007_General-Philosophy-of-Sci.pdf;/Users/igormoreno/Zotero/storage/88GIWYF8/04---The-Role-of-Experiments-in-the-Natural-Sciences--E_2007_General-Philosoph.pdf;/Users/igormoreno/Zotero/storage/EWAZTYDK/07---Reduction--Integration--and-the-Unity-of-Science--Nat_2007_General-Philos.pdf;/Users/igormoreno/Zotero/storage/FW3IYKLN/03---Evaluation-of-Theories_2007_General-Philosophy-of-Science.pdf;/Users/igormoreno/Zotero/storage/GJI7Q68C/02---Past-and-Contemporary-Perspectives-on-Expl_2007_General-Philosophy-of-Sci.pdf;/Users/igormoreno/Zotero/storage/IHIFRAQP/10---History-of-the-Philosophy-of-Science--From-Wissenschaft_2007_General-Phil.pdf;/Users/igormoreno/Zotero/storage/R8YWDEYJ/Contributors_2007_General-Philosophy-of-Science.pdf;/Users/igormoreno/Zotero/storage/SHU4H7EY/05---The-Role-of-Experiments-in-the-Social-Sciences-_2007_General-Philosophy-o.pdf;/Users/igormoreno/Zotero/storage/TBVTPNVM/06---Ontological--Epistemological--and-Methodologi_2007_General-Philosophy-of-.pdf;/Users/igormoreno/Zotero/storage/UBTTHMID/Index_2007_General-Philosophy-of-Science.pdf;/Users/igormoreno/Zotero/storage/W4RP33YY/01---Laws--Theories--and-Research-Programs_2007_General-Philosophy-of-Science.pdf;/Users/igormoreno/Zotero/storage/Y4DXQIPR/09---Demarcating-Science-from-Non-Science_2007_General-Philosophy-of-Science.pdf;/Users/igormoreno/Zotero/storage/ZCFPQ2QF/08---Logical--Historical-and-Computational-Appr_2007_General-Philosophy-of-Sci.pdf}
}

@article{theodoropoulosHowDifferentCognitive2017,
  title = {How {{Do Different Cognitive Styles Affect Learning Programming}}? {{Insights}} from a {{Game-Based Approach}} in {{Greek Schools}}},
  shorttitle = {How {{Do Different Cognitive Styles Affect Learning Programming}}?},
  author = {Theodoropoulos, Anastasios and Antoniou, Angeliki and Lepouras, George},
  year = {2017},
  month = jan,
  journal = {ACM Transactions on Computing Education},
  volume = {17},
  number = {1},
  pages = {1--25},
  issn = {1946-6226, 1946-6226},
  doi = {10.1145/2940330},
  urldate = {2020-09-29},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/QETMLYL8/Theodoropoulos et al. - 2017 - How Do Different Cognitive Styles Affect Learning .pdf}
}

@inproceedings{thevathayanCombiningAgilePractices2017,
  title = {Combining {{Agile Practices}} with {{Incremental Visual Tasks}}},
  booktitle = {Proceedings of the {{Nineteenth Australasian Computing Education Conference}} on - {{ACE}} '17},
  author = {Thevathayan, Charles and Spichkova, Maria and Hamilton, Margaret},
  year = {2017},
  pages = {103--112},
  publisher = {{ACM Press}},
  address = {{Geelong, VIC, Australia}},
  doi = {10.1145/3013499.3013510},
  urldate = {2020-06-22},
  abstract = {Many employers are demanding graduates acquire project experience especially in an agile environment. Final year projects alone cannot equip students adequately unless they have already gained a solid foundation in the underlying principles, technologies and processes. Students should ideally be exposed to Software Engineering (SE) principles from their first programming course. However, the core principles such as agility, extensibility, reusability and maintainability are often too abstract for novice programmers.},
  isbn = {978-1-4503-4823-2},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/EILN5INF/Thevathayan et al - 2017 - Combining Agile Practices with Incremental Visual Tasks.pdf}
}

@inproceedings{thevathayanSupportingDiverseNovice2015,
  title = {Supporting {{Diverse Novice Programming Cohorts}} through {{Flexible}} and {{Incremental Visual Constructivist Pathways}}},
  booktitle = {Proceedings of the 2015 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}} - {{ITiCSE}} '15},
  author = {Thevathayan, Charles and Hamilton, Margaret},
  year = {2015},
  pages = {296--301},
  publisher = {{ACM Press}},
  address = {{Vilnius, Lithuania}},
  doi = {10.1145/2729094.2742609},
  urldate = {2020-06-22},
  abstract = {Novice programmers rely mainly on formative assignments to develop their problem solving skills. Such assignments can be made more engaging by structuring them into visual tasks with instant feedback. Constructivist theory however, suggests such tasks can facilitate learning only if they are designed considering student mental models. Designing such tasks is difficult given the diversity of students in introductory programming courses. This paper presents a flexible and incremental visual constructivist model that enables different pathways for individual students. Formative and summative evaluations based on assignment tasks suggest such an approach can help improve learning outcomes and student satisfaction significantly even when students have varying cognitive abilities.},
  isbn = {978-1-4503-3440-2},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/F3YEWNRM/Thevathayan and Hamilton - 2015 - Supporting Diverse Novice Programming Cohorts through Flexible and Incremental.pdf}
}

@article{thibodeauMetaphorsWeThink2011,
  title = {Metaphors {{We Think With}}: {{The Role}} of {{Metaphor}} in {{Reasoning}}},
  shorttitle = {Metaphors {{We Think With}}},
  author = {Thibodeau, Paul H. and Boroditsky, Lera},
  year = {2011},
  month = feb,
  journal = {PLOS ONE},
  volume = {6},
  number = {2},
  pages = {e16782},
  publisher = {{Public Library of Science}},
  issn = {1932-6203},
  doi = {10.1371/journal.pone.0016782},
  urldate = {2020-06-23},
  abstract = {The way we talk about complex and abstract ideas is suffused with metaphor. In five experiments, we explore how these metaphors influence the way that we reason about complex issues and forage for further information about them. We find that even the subtlest instantiation of a metaphor (via a single word) can have a powerful influence over how people attempt to solve social problems like crime and how they gather information to make ``well-informed'' decisions. Interestingly, we find that the influence of the metaphorical framing effect is covert: people do not recognize metaphors as influential in their decisions; instead they point to more ``substantive'' (often numerical) information as the motivation for their problem-solving decision. Metaphors in language appear to instantiate frame-consistent knowledge structures and invite structurally consistent inferences. Far from being mere rhetorical flourishes, metaphors have profound influences on how we conceptualize and act with respect to important societal issues. We find that exposure to even a single metaphor can induce substantial differences in opinion about how to solve social problems: differences that are larger, for example, than pre-existing differences in opinion between Democrats and Republicans.},
  langid = {english},
  keywords = {Crime,Experimental design,Experimental economics,Language,Police,Reasoning,Semantics,Syntax},
  file = {/Users/igormoreno/Zotero/storage/6QPZBITY/Thibodeau and Boroditsky - 2011 - Metaphors We Think With.pdf;/Users/igormoreno/Zotero/storage/MUEQZ358/article.html}
}

@inproceedings{thomasGraduatingStudentsDesigns2014,
  title = {Graduating Students' Designs: Through a Phenomenographic Lens},
  shorttitle = {Graduating Students' Designs},
  booktitle = {Proceedings of the Tenth Annual Conference on {{International}} Computing Education Research},
  author = {Thomas, Lynda and Eckerdal, Anna and McCartney, Robert and Mostr{\"o}m, Jan Erik and Sanders, Kate and Zander, Carol},
  year = {2014},
  month = jul,
  series = {{{ICER}} '14},
  pages = {91--98},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2632320.2632353},
  urldate = {2020-10-13},
  abstract = {We expand upon previous research that looked at the question: "Can graduating students design software systems?" Specifically we want to examine students' understanding of the phenomenon "produce a design." What does this instruction mean to them? In order to investigate student understandings, we examined their designs using a phenomenographic approach. Our outcome space includes six understandings: (0) the design a layman might produce; (1) a design with some formal notation; (2) a design that uses formal notations to express the static relationships among the parts; (3) a design that uses formal notation to express sequential (dynamic) information, but does not relate that to the static system parts; (4) a design that includes and relates multiple artifacts, both static and dynamic; and (5) a design that relaxes the notations and includes only essential artifacts. The last understanding was found only in our expert's design, and we do not expect it from undergraduates.},
  isbn = {978-1-4503-2755-8},
  keywords = {assessment,design,replication,software engineering},
  annotation = {00011},
  file = {/Users/igormoreno/Zotero/storage/BCXFL2WI/Thomas et al - 2014 - Graduating students' designs.pdf}
}

@phdthesis{thomasInformatischeModellbildungModellieren2002,
  title = {{Informatische Modellbildung: Modellieren von Modellen als ein zentrales Element der Informatik f\"ur den allgemeinbildenden Schulunterricht}},
  author = {Thomas, Marco},
  year = {2002},
  address = {{Potsdam, Germany}},
  abstract = {Die Betrachtung zahlreicher fachdidaktischer Arbeiten und fachcurricularer Schriften f\"uhrt zu der Feststellung, dass zwar die Bedeutung informatischer Modelle und informatischer Modellierung h\"aufig betont wird, dass aber andererseits kein Konsens besteht, was unter diesen Begriffen zu verstehen ist. Diese Diskrepanz wird als eine Ursache f\"ur die unterschiedlichen Positionen zu den Inhalten eines Informatikunterrichts gedeutet. Es wird als ein Problem erkannt, dass eine ausreichende Legitimierung der in der Fachdidaktik postulierten Leitlinie ,,Informatische Modellierung`` im Rahmen einer Allgemeinbildung fehlt. Die Suche nach Antworten zu drei resultierenden fachdidaktischen Fragestellungen f\"uhrt zu Ergebnissen, die eine Leitlinie ,,Informatische Modellbildung`` f\"ur den Informatikunterricht absichern und einen Beitrag zur Optimierung des Informatikunterrichts liefern. Zur Pr\"azisierung eines informatischen Modellbegriffs wird das Begriffsverst\"andnis in der Wissenschaft Informatik analysiert. Unter Verwendung der Allgemeinen Modelltheorie von Stachowiak und anderen Klassifikationsans\"atzen wird gezeigt, dass das Modellieren von Modellen ein zentrales Element der Informatik ist. Nahezu alle Modelltypen des Modellierens im Allgemeinen lassen sich in der Informatik nachweisen. Diesen Modelltypen werden in Systematiken informatische Modellen zugeordnet. Es wird festgestellt, dass die unterschiedlichen Modelltypen in der Informatik h\"aufig gezielt miteinander zu Modellketten verkn\"upft werden. Der fachsprachliche Gebrauch des Modellbegriffs erfolgt in der Kerninformatik vorwiegend f\"ur semantische und graphische Modelltypen. Diese lassen sich unter f\"unf Hauptmodelltypen zusammenfassen: Architektur-, Vorgehens-, Entwurfs-, Untersuchungsmodelle und mentale Modelle. Die Analyse der Fachsprache zeigt auch, dass der Begriff ,,Modell`` im konkreten Unterricht nur zwingend verwendet werden sollte, wenn dies der Bewusstmachung des Modellbildungsprozesses dienlich ist. Das Modellieren von Modellen erweist sich als eine kulturell-tradierte und allgemeinbildungs- relevante T\"atigkeit des Menschen. Informatische Modelle k\"onnen stellvertretend f\"ur Modelle und Modellieren im Allgemeinen stehen und werden damit zu einem Bildungsgut. Die produktorientierte Auseinandersetzung in der Informatik mit der Automatisierung von informationsverarbeitenden Prozessen bietet einen hervorragenden Kontext zur Enkulturation des Modellierens von Modellen. Hierbei k\"onnen mentale Modelle, die grundlegend f\"ur das Verst\"andnis von Informatiksystemen sind, durch Exploration aufgebaut werden. Der besondere Beitrag der Informatik f\"ur die Schulausbildung liegt hinsichtlich der Modellbildung in der umfassenden Vielfalt informatischer Modelle, die in einem Informatikunterricht - im Kontext der Informationsverarbeitung - zu einer Enkulturation eines allgemeinen Modellbegriffs f\"uhren kann. Die Systematiken, denen informatische Modelle zugeordnet wurden, k\"onnen eingesetzt werden, um f\"ur den Informatikunterricht abzusichern, dass den Sch\"ulern ein vollst\"andiges Bild zu den Fragestellungen und Methoden der Informatik vermittelt wird. Die Leitlinie ,,Informatische Modellbildung`` erweist sich zur Enkulturation des Modellierens von Modellen f\"ur einen Informatikunterricht als geeignet und legitimiert den Informatikunterricht f\"ur den allgemeinbildenden Schulkanon. Die Ergebnisse dieser Arbeit bilden eine Basis, aus der sich zahlreiche Forschungsaufgaben f\"ur die Fachdidaktik der Informatik ergeben.},
  langid = {ngerman},
  school = {Universit\"at Potsdam},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/WDH7RBGJ/Thomas - 2002 - Informatische Modellbildung Modellieren von Model.pdf}
}

@article{thomassonIdentifyingNoviceDifficulties,
  title = {Identifying {{Novice Difficulties}} in {{Object Oriented Design}}},
  author = {Thomasson, Benjy and Ratcliffe, Mark and Thomas, Lynda},
  pages = {5},
  abstract = {We report on a study of novice programmers' object oriented class designs. These designs were analysed to discover what faults they displayed. The two most common faults related to non-referenced classes (inability to integrate them into the solution), and problems with attributes and class cohesion. The paper ends with some implication for teaching that may be indicated by the empirical results.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/9EK6AGEI/Thomasson et al - Identifying Novice Difficulties in Object Oriented Design.pdf}
}

@article{thompsonProgrammingTechniquesRegular1968,
  title = {Programming {{Techniques}}: {{Regular}} Expression Search Algorithm},
  shorttitle = {Programming {{Techniques}}},
  author = {Thompson, Ken},
  year = {1968},
  month = jun,
  journal = {Communications of the ACM},
  volume = {11},
  number = {6},
  pages = {419--422},
  issn = {0001-0782, 1557-7317},
  doi = {10.1145/363347.363387},
  urldate = {2023-03-05},
  abstract = {A method for locating specific character strings embedded in character text is described and an implementation of this method in the form of a compiler is discussed. The compiler accepts a regular expression as source language and produces an IBM 7 0 9 4 program as object language. The object program then accepts the text to be searched as input and produces a signal every time an embedded string in the text matches the given regular expression. Examples, problems, and solutions are also presented.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/7APBE4KL/Thompson - 1968 - Programming Techniques Regular expression search .pdf}
}

@article{thompsonProgrammingTechniquesRegular1968a,
  title = {Programming {{Techniques}}: {{Regular}} Expression Search Algorithm},
  shorttitle = {Programming {{Techniques}}},
  author = {Thompson, Ken},
  year = {1968},
  month = jun,
  journal = {Communications of the ACM},
  volume = {11},
  number = {6},
  pages = {419--422},
  issn = {0001-0782},
  doi = {10.1145/363347.363387},
  urldate = {2023-04-12},
  abstract = {A method for locating specific character strings embedded in character text is described and an implementation of this method in the form of a compiler is discussed. The compiler accepts a regular expression as source language and produces an IBM 7094 program as object language. The object program then accepts the text to be searched as input and produces a signal every time an embedded string in the text matches the given regular expression. Examples, problems, and solutions are also presented.},
  keywords = {match,regular expression,search},
  file = {/Users/igormoreno/Zotero/storage/X55QZ7EF/Thompson - 1968 - Programming Techniques Regular expression search .pdf}
}

@article{thuneAnalysisStudentsLearning2019,
  title = {Analysis of {{Students}}' Learning of Computer Programming in a Computer Laboratory Context},
  author = {Thun{\'e}, Michael and Eckerdal, Anna},
  year = {2019},
  month = sep,
  journal = {European Journal of Engineering Education},
  volume = {44},
  number = {5},
  pages = {769--786},
  issn = {0304-3797, 1469-5898},
  doi = {10.1080/03043797.2018.1544609},
  urldate = {2020-06-22},
  abstract = {Previous research shows that many students find it difficult to learn computer programming. To learn computer programming includes both gaining theoretical understanding and learning to develop programmes in practice. To this end, teachers commonly design programming exercises for the students in the computer laboratory. To be able to improve the process of designing such exercises, there is a need of a more detailed understanding of the interaction between learning of theory and learning of practice in laboratory sessions. In this paper, an approach for investigating this interaction is proposed. Theoretically, the approach is based on phenomenography and variation theory. To illustrate the approach, it is demonstrated in detail how it was applied to a small but rich case of empirical data from a computer laboratory session. The main result presented here is the new approach for analysing data. In addition, the results of the case study shed preliminary light on the interaction between learning of practice and learning of theory when students work with programming assignments in the laboratory.},
  langid = {english},
  keywords = {To Read},
  file = {/Users/igormoreno/Zotero/storage/KF5F7W8H/Thuné and Eckerdal - 2019 - Analysis of Students’ learning of computer programming in a computer laboratory.pdf}
}

@inproceedings{tianLearningAbstractStructure2020,
  title = {Learning Abstract Structure for Drawing by Efficient Motor Program Induction},
  booktitle = {Proceedings of the 34th {{International Conference}} on {{Neural Information Processing Systems}}},
  author = {Tian, Lucas Y. and Ellis, Kevin and Kryven, Marta and Tenenbaum, Joshua B.},
  year = {2020},
  month = dec,
  series = {{{NIPS}}'20},
  pages = {2686--2697},
  publisher = {{Curran Associates Inc.}},
  address = {{Red Hook, NY, USA}},
  urldate = {2023-01-21},
  abstract = {Humans flexibly solve new problems that differ from those previously practiced. This ability to flexibly generalize is supported by learned concepts that represent useful structure common across different problems. Here we develop a naturalistic drawing task to study how humans rapidly acquire structured prior knowledge. The task requires drawing visual figures that share underlying structure, based on a set of composable geometric rules and simple objects. We show that people spontaneously learn abstract drawing procedures that support generalization, and propose a model of how learners can discover these reusable drawing procedures. Trained in the same setting as humans, and constrained to produce efficient motor actions, this model discovers new drawing program subroutines that generalize to test figures and resemble learned features of human behavior. These results suggest that two principles guiding motor program induction in the model - abstraction (programs can reflect high-level structure that ignores figure-specific details) and compositionality (new programs are discovered by recombining previously learned programs) - are key for explaining how humans learn structured internal representations that guide flexible reasoning and learning.},
  isbn = {978-1-71382-954-6},
  file = {/Users/igormoreno/Zotero/storage/SCVES9TK/Tian et al - 2020 - Learning abstract structure for drawing by efficient motor program induction.pdf}
}

@article{tikvaMappingComputationalThinking2021,
  title = {Mapping Computational Thinking through Programming in {{K-12}} Education: {{A}} Conceptual Model Based on a Systematic Literature {{Review}}},
  shorttitle = {Mapping Computational Thinking through Programming in {{K-12}} Education},
  author = {Tikva, Christina and Tambouris, Efthimios},
  year = {2021},
  month = mar,
  journal = {Computers \& Education},
  volume = {162},
  pages = {104083},
  issn = {03601315},
  doi = {10.1016/j.compedu.2020.104083},
  urldate = {2023-03-16},
  abstract = {Computational Thinking (CT) through programming attracts increased attention as it is consid\- ered an ideal medium for the development of 21st century skills. This intense attention leads to K12 initiatives around the world and a rapid increase in relevant research studies. However, studies show challenges in CT research and educational practice. In addition, the domain has not been mapped to facilitate comprehensive understanding of the domain challenges and development of CT curricula. The purpose of this study is to develop a conceptual model based on a systematic literature review that maps the CT through programming in K-12 education domain. The pro\- posed Computational Thinking through Programming in K-12 education (CTPK-12) conceptual model emerges from the synthesis of 101 studies and the identification of CT Areas. The proposed model consists of six CT Areas (namely Knowledge Base, Learning Strategies, Assessment, Tools, Factors and Capacity Building) and their relationships. The model could aid domain under\- standing and serve as a basis for future research studies. In addition, it could support the inte\- gration of CT into K-12 educational practices, providing evidence to educational stakeholders and researchers as well as bringing closer research, practice and policy.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/SXW6BRIR/Tikva and Tambouris - 2021 - Mapping computational thinking through programming.pdf}
}

@article{tikvaMappingComputationalThinking2021a,
  title = {Mapping Computational Thinking through Programming in {{K-12}} Education: {{A}} Conceptual Model Based on a Systematic Literature {{Review}}},
  shorttitle = {Mapping Computational Thinking through Programming in {{K-12}} Education},
  author = {Tikva, Christina and Tambouris, Efthimios},
  year = {2021},
  month = mar,
  journal = {Computers \& Education},
  volume = {162},
  pages = {104083},
  issn = {03601315},
  doi = {10.1016/j.compedu.2020.104083},
  urldate = {2023-03-16},
  abstract = {Computational Thinking (CT) through programming attracts increased attention as it is consid\- ered an ideal medium for the development of 21st century skills. This intense attention leads to K12 initiatives around the world and a rapid increase in relevant research studies. However, studies show challenges in CT research and educational practice. In addition, the domain has not been mapped to facilitate comprehensive understanding of the domain challenges and development of CT curricula. The purpose of this study is to develop a conceptual model based on a systematic literature review that maps the CT through programming in K-12 education domain. The pro\- posed Computational Thinking through Programming in K-12 education (CTPK-12) conceptual model emerges from the synthesis of 101 studies and the identification of CT Areas. The proposed model consists of six CT Areas (namely Knowledge Base, Learning Strategies, Assessment, Tools, Factors and Capacity Building) and their relationships. The model could aid domain under\- standing and serve as a basis for future research studies. In addition, it could support the inte\- gration of CT into K-12 educational practices, providing evidence to educational stakeholders and researchers as well as bringing closer research, practice and policy.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/PWXJMNIP/Tikva and Tambouris - 2021 - Mapping computational thinking through programming.pdf}
}

@article{tippettRefutationTextScience2010,
  title = {Refutation {{Text}} in {{Science Education}}: {{A Review}} of {{Two Decades}} of {{Research}}},
  author = {Tippett, Christine D},
  year = {2010},
  month = dec,
  journal = {International Journal of Science and Mathematics Education},
  volume = {8},
  number = {6},
  pages = {951--970},
  doi = {10.1007/s10763-010-9203-x},
  abstract = {As people attempt to make sense of the world, they develop personal knowledge structures. These structures often contain misconceptions\textemdash inaccurate or incomplete information\textemdash that are highly resistant to change because existing knowledge networks must be restructured to accommodate counterintuitive information in a process known as conceptual change. Since textbooks are the dominant resource for science instruction in most classrooms, text-based methods of facilitating conceptual change need to be examined. Since the mid-1980 s, researchers have investigated the conceptual change potential of refutation text, a text structure that includes elements of argumentation and that has been described as one of the most effective text-based means for modifying readers' misconceptions. In this paper, twenty years of refutation text research in science and reading education is reviewed and then a secondary analysis of those results is conducted to explore developmental aspects of the efficacy of refutation text. Although a developmental relationship was not revealed, two decades of research indicate that reading refutation text rather than traditional expository text is more likely to result in conceptual change.},
  langid = {english},
  annotation = {00272},
  file = {/Users/igormoreno/Zotero/storage/9GKI2FAF/Tippett - 2010 - Refutation Text in Science Education.pdf}
}

@misc{TipsWorklifeBalance,
  title = {Tips for Work-Life Balance},
  urldate = {2020-06-06},
  howpublished = {http://matt.might.net/articles/work-life-balance/},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/G3AEA478/work-life-balance.html}
}

@article{tiroshWhatCanMathematics2004,
  title = {What Can Mathematics Education Gain from the Conceptual Change Approach? {{And}} What Can the Conceptual Change Approach Gain from Its Application to Mathematics Education?},
  shorttitle = {What Can Mathematics Education Gain from the Conceptual Change Approach?},
  author = {Tirosh, Dina and Tsamir, Pessia},
  year = {2004},
  month = oct,
  journal = {Learning and Instruction},
  series = {The {{Conceptual Change Approach}} to {{Mathematics Learning}} and {{Teaching}}},
  volume = {14},
  number = {5},
  pages = {535--540},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2004.06.017},
  urldate = {2018-11-06},
  file = {/Users/igormoreno/Zotero/storage/2BKS5GIW/Tirosh and Tsamir - 2004 - What can mathematics education gain from the conceptual change approach.pdf;/Users/igormoreno/Zotero/storage/GMDFRSVF/S0959475204000489.html}
}

@inproceedings{tirronenStudyDifficultiesMisconceptions2014,
  title = {Study on Difficulties and Misconceptions with Modern Type Systems},
  booktitle = {Proceedings of the 2014 Conference on {{Innovation}} \& Technology in Computer Science Education - {{ITiCSE}} '14},
  author = {Tirronen, Ville},
  year = {2014},
  pages = {303--308},
  publisher = {{ACM Press}},
  address = {{Uppsala, Sweden}},
  doi = {10.1145/2591708.2591726},
  urldate = {2020-06-22},
  abstract = {Functional programming is often presented as an advantageous programming paradigm by its advocates, but many students and teachers consider it to be hard to learn. One particular hurdle in learning functional programming is mastering the modern type systems employed in these languages. In this article, we identify student difficulties with means of multiple choice questions embedded into the on-line materials of an introductory functional programming course. The most prevalent misconceptions were confusing with parametric polymorphism with subtyping, the assigning too much meaning to variables names, and confounding general language patterns with special cases.},
  isbn = {978-1-4503-2833-3},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/FBQ3AR7K/Tirronen - 2014 - Study on difficulties and misconceptions with modern type systems.pdf}
}

@article{tissenbaumStateFieldComputational2018,
  title = {The {{State}} of the {{Field}} in {{Computational Thinking Assessment}}},
  author = {Tissenbaum, Mike and Sheldon, Josh and Sherman, Mark and Weintrop, David and Jona, Kemi and Horn, Michael and Wilensky, Uri and Basu, Satabdi and Rutstein, Daisy and Snow, Eric and Shear, Linda and Grover, Shuchi and Lee, Irene and Klopfer, Eric and Lui, Debora and Jayathirta, Gayithri and Shaw, Mia and Kafai, Yasmin B and Fields, Deborah A and Pinkard, Nichole and Martin, Caitlin K and Erete, Sheena and Mustafaraj, Eni and Sorensen, Clara and Shapiro, R Benjamin and Hall, Rogers},
  year = {2018},
  abstract = {While interest in computational thinking (CT) education has grown globally in the past decade, there lacks a single unified definition of CT. This can pose significant challenges for researchers, teachers, and policy makers trying to decide which assessment methods are appropriate for their specific CT interventions. Rather than trying to create a single unified definition of CT, this symposium brings together a broad spectrum of leading CT researchers to share what CT means for them, how it influenced their learning designs, and the methods for assessing CT learning. This interactive session will showcase these different views of CT in a single place and serve as a rich opportunity for comparison and discussion.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/2DCB5BKE/Tissenbaum et al. - 2018 - The State of the Field in Computational Thinking A.pdf}
}

@article{tissenbaumStateFieldComputational2018a,
  title = {The {{State}} of the {{Field}} in {{Computational Thinking Assessment}}},
  author = {Tissenbaum, Mike and Sheldon, Josh and Sherman, Mark and Weintrop, David and Jona, Kemi and Horn, Michael and Wilensky, Uri and Basu, Satabdi and Rutstein, Daisy and Snow, Eric and Shear, Linda and Grover, Shuchi and Lee, Irene and Klopfer, Eric and Lui, Debora and Jayathirta, Gayithri and Shaw, Mia and Kafai, Yasmin B and Fields, Deborah A and Pinkard, Nichole and Martin, Caitlin K and Erete, Sheena and Mustafaraj, Eni and Sorensen, Clara and Shapiro, R Benjamin and Hall, Rogers},
  year = {2018},
  abstract = {While interest in computational thinking (CT) education has grown globally in the past decade, there lacks a single unified definition of CT. This can pose significant challenges for researchers, teachers, and policy makers trying to decide which assessment methods are appropriate for their specific CT interventions. Rather than trying to create a single unified definition of CT, this symposium brings together a broad spectrum of leading CT researchers to share what CT means for them, how it influenced their learning designs, and the methods for assessing CT learning. This interactive session will showcase these different views of CT in a single place and serve as a rich opportunity for comparison and discussion.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/AEK8JEEJ/Tissenbaum et al. - 2018 - The State of the Field in Computational Thinking A.pdf}
}

@book{tobeyUncoveringStudentThinking2008,
  title = {Uncovering {{Student Thinking}} in {{Mathematics}}, {{Grades}} 6-12: 30 {{Formative Assessment Probes}} for the {{Secondary Classroom}}},
  shorttitle = {Uncovering {{Student Thinking}} in {{Mathematics}}, {{Grades}} 6-12},
  editor = {Tobey, Cheryl Rose and Arline, Carolyn B.},
  year = {2008},
  month = jun,
  edition = {1 edition},
  publisher = {{Corwin}},
  address = {{Thousand Oaks, Calif}},
  abstract = {Discussing standards, research, and more, these 30 probes help secondary teachers assess students{${'}$} grasp of core mathematics concepts and modify their instruction to improve student achievement.},
  isbn = {978-1-4129-6377-0},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/2KLKXT6Y/Tobey and Arline - 2008 - Uncovering Student Thinking in Mathematics, Grades 6-12.pdf}
}

@article{tobin-hochstadtPrinciplesPracticeClass2013,
  title = {From {{Principles}} to {{Practice}} with {{Class}} in the {{First Year}}},
  author = {{Tobin-Hochstadt}, Sam and Van Horn, David},
  year = {2013},
  month = dec,
  journal = {Electronic Proceedings in Theoretical Computer Science},
  volume = {136},
  eprint = {1306.4713},
  pages = {1--15},
  issn = {2075-2180},
  doi = {10.4204/EPTCS.136.1},
  urldate = {2019-07-08},
  abstract = {We propose a bridge between functional and object-oriented programming in the first-year curriculum. Traditionally, curricula that begin with functional programming transition to a professional, usually object-oriented, language in the second course. This transition poses obstacles for students, and often results in confusing the details of development environments, syntax, and libraries with the fundamentals of OO programming that the course should focus on. Instead, we propose to begin the second course with a sequence of custom teaching languages which minimize the transition from the first course, and allow students to focus on core ideas. After working through the sequence of pedagogical languages, we then transition to Java, at which point students have a strong command of the basic principles. We have 3 years of experience with this course, with notable success.},
  archiveprefix = {arxiv},
  keywords = {Computer Science - Programming Languages},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/9KPA3NXV/Tobin-Hochstadt and Van Horn - 2013 - From Principles to Practice with Class in the Firs.pdf;/Users/igormoreno/Zotero/storage/I56H8DZZ/Tobin-Hochstadt and Van Horn - 2013 - From Principles to Practice with Class in the Firs.pdf;/Users/igormoreno/Zotero/storage/GVRE67DT/1306.html;/Users/igormoreno/Zotero/storage/Z444IAYZ/1306.html}
}

@misc{tobin-hochstadtProgrammableProgrammingLanguage,
  title = {A {{Programmable Programming Language}}},
  author = {{Tobin-Hochstadt}, Robert Bruce Findler, Matthew Flatt, Shriram Krishnamurthi, Eli Barzilay, Jay McCarthy, Sam, Matthias Felleisen},
  urldate = {2019-07-08},
  abstract = {As the software industry enters the era of language-oriented programming, it needs programmable programming languages.},
  howpublished = {https://cacm.acm.org/magazines/2018/3/225475-a-programmable-programming-language/abstract},
  langid = {english},
  annotation = {00009},
  file = {/Users/igormoreno/Zotero/storage/H3YEGI8F/abstract.html}
}

@article{tomekPMSProgramMake1985,
  title = {{{PMS}}\textemdash{{A}} Program to Make Learning {{Pascal}} Easier},
  author = {Tomek, Ivan and Muldner, Tomasz and Khan, Saleem},
  year = {1985},
  month = jan,
  journal = {Computers \& Education},
  volume = {9},
  number = {4},
  pages = {205--211},
  issn = {0360-1315},
  doi = {10.1016/0360-1315(85)90009-0},
  urldate = {2022-02-08},
  abstract = {One of the essential tasks in the teaching of a programming language is the introduction of the main constructs of the language\textemdash the syntax and semantics of statements, control, procedures, file handling, and so on. Most teachers present this topic by simulating the operation of the computer on the chalkboard by manual tracing of the execution of sample demonstration programs. Upon closer inspection it becomes clear that this task could be performed by the computer itself. A program implementing this idea would help the teacher in the class and the student (who could use the computer to repeat the instructor's performance at any time and on any problem of his choice) both in the class and in study. This article describes a collection of programs called PMS that performs exactly this function for the teaching of Pascal. PMS is organized as a collection of ``mimlanguages'' each of which demonstrates, and allows the user to experiment with, a certain category of Pascal features using a particular screen representation. Each of the subsystems contains a syntax-driven, screen-oriented translator associated with an interpreter that controls execution and the appropriate screen representation. This modular structure of PMS reflects the fact that programming is always taught by presenting certain essentially disjoint language features individually. In addition to their logical independence, these disjoint concepts also require different graphical approaches for their visual representation and this reinforces the need for modularization of the package. PMS is written in Pascal and runs on several computers including the IBM PC.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/RDUNR6R6/Tomek et al. - 1985 - PMS—A program to make learning Pascal easier.pdf;/Users/igormoreno/Zotero/storage/UM72Q9PW/0360131585900090.html}
}

@article{tonbulogluEffectUnpluggedCoding2019,
  title = {The {{Effect}} of {{Unplugged Coding Activities}} on {{Computational Thinking Skills}} of {{Middle School Students}}},
  author = {Tonbulo{\u g}lu, Bet{\H u}l and Tonbulo{\u g}lu, {\.I}smail},
  year = {2019},
  month = oct,
  journal = {Informatics in Education},
  volume = {18},
  number = {2},
  pages = {403--426},
  issn = {1648-5831, 2335-8971},
  doi = {10.15388/infedu.2019.19},
  urldate = {2020-06-22},
  abstract = {The purpose of the study is to examine the effect of unplugged coding activities carried out with middle school students on their computational thinking skills. This study employed nested-mixed design, which is a mixed research method; the data were supported by including the qualitative phase into an experimental study. In this frame, a group of 114 middle school students consisting of 5th graders were given coding training titled ``Ke\c{s}fet Project \textendash{} I Discover Coding'' by using unplugged coding content. The Computational Thinking Scale was applied to the students at the beginning and end of the training; the results obtained from the scale were analyzed by means of a paired t test. Finally, it was found out that unplugged coding activities had a positive effect on the improvement of computational thinking skills of the students. An examination of the subfactors revealed that there is statistically no significant change in the problem solving skill despite the positive impact observed on creativity, algorithmic thinking, collaboration and critical thinking skills. Following the analysis of observation and daily data, the findings obtained revealed that the students usually displayed high levels of motivation and class participation in unplugged coding activities, they had difficulty in concretizing certain concepts as well as subjects requiring mathematical knowledge; various teaching methods and techniques were used in classes; the students liked the activities especially due to their appealing nature and their relation to daily life; however, there were occasional problems with scheduling of activities and teamwork due to overcrowded class size; the students experienced problems in achieving outcomes such as perceiving the relationship between computer science and mathematics and analyzing the given problem, and could have difficulty in associating between computer science and mathematics or between the subjects learned and the computer lesson, and in analyzing a given problem.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/KJJ7BXG4/Tonbuloğlu and Tonbuloğlu - 2019 - The Effect of Unplugged Coding Activities on Computational Thinking Skills of.pdf}
}

@article{TOOLPAPERVisualizing2022,
  title = {{{TOOL PAPER}}\textemdash{{Visualizing}} the {{Environment Model}} of {{SICP JS}}},
  year = {2022},
  pages = {12},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/C9P5V2P9/2022 - TOOL PAPER—Visualizing the Environment Model of SI.pdf}
}

@article{topiRoleInformationSystems2017,
  title = {Role of Information Systems in the {{CC2020}} Initiative},
  author = {Topi, Heikki},
  year = {2017},
  month = oct,
  journal = {ACM Inroads},
  volume = {8},
  number = {4},
  pages = {43--44},
  issn = {2153-2184},
  doi = {10.1145/3148549},
  urldate = {2020-09-22},
  keywords = {CC2020,CC2020-Authors},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/TM8NYH8J/Topi - 2017 - Role of information systems in the CC2020 initiative.pdf}
}

@inproceedings{toprakLightweightStructuredVisualization2014,
  title = {Lightweight {{Structured Visualization}} of {{Assembler Control Flow Based}} on {{Regular Expressions}}},
  booktitle = {2014 {{Second IEEE Working Conference}} on {{Software Visualization}}},
  author = {Toprak, Sibel and Wichmann, Arne and Schupp, Sibylle},
  year = {2014},
  month = sep,
  pages = {97--106},
  publisher = {{IEEE}},
  address = {{Victoria, BC, Canada}},
  doi = {10.1109/VISSOFT.2014.25},
  urldate = {2021-04-07},
  isbn = {978-1-4799-6150-4},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/WULTVD7I/Toprak et al. - 2014 - Lightweight Structured Visualization of Assembler .pdf}
}

@inproceedings{torgersenExpressionProblemRevisited2004,
  title = {The {{Expression Problem Revisited}}},
  booktitle = {{{ECOOP}} 2004 \textendash{} {{Object-Oriented Programming}}},
  author = {Torgersen, Mads},
  editor = {Odersky, Martin},
  year = {2004},
  series = {{{ECOOP}} '04},
  pages = {123--146},
  publisher = {{Springer Berlin Heidelberg}},
  abstract = {The expression problem (aka the extensibility problem) refers to a fundamental dilemma of programming: To which degree can your application be structured in such a way that both the data model and the set of virtual operations over it can be extended without the need to modify existing code, without the need for code repetition and without runtime type errors.Over the years, many approaches to this problem have been proposed, each having different characteristics of type safety and reusability. While many of these rely on exotic or problem specific language extensions, this paper investigates the solution space within the framework of the soon-to-be mainstream generic extensions of C\# and the Java programming language.Four new solutions are presented which, though quite different, all rely on techniques that can be used in everyday programming.},
  isbn = {978-3-540-24851-4},
  langid = {english},
  keywords = {Client Code,Data Class,Expression Problem,Java Programming Language,Type Safety},
  annotation = {00191},
  file = {/Users/igormoreno/Zotero/storage/ZA4MXJHK/Torgersen - 2004 - The expression problem revisited.pdf;/Users/igormoreno/Zotero/storage/UAHAACFD/978-3-540-24851-4_6.html}
}

@inproceedings{touretzkyComputationalThinkingMental2017,
  title = {Computational Thinking and Mental Models: {{From}} Kodu to Calypso},
  shorttitle = {Computational Thinking and Mental Models},
  booktitle = {2017 {{IEEE Blocks}} and {{Beyond Workshop}} ({{B}}\&{{B}})},
  author = {Touretzky, David S.},
  year = {2017},
  month = oct,
  pages = {71--78},
  publisher = {{IEEE}},
  address = {{Raleigh, NC}},
  doi = {10.1109/BLOCKS.2017.8120416},
  urldate = {2020-06-22},
  abstract = {Reasoning about programs is an important component of computational thinking. Laws of computation give meaning to the formalisms in which programs are expressed, and can be used to predict or explain program behavior, or to uncover bugs. This paper presents Calypso, a language inspired by Microsoft's Kodu Game Lab but designed for programming actual mobile robots rather than characters in a virtual world. The initial implementation of Calypso uses the Cozmo robot by Anki.},
  isbn = {978-1-5386-2480-7},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/22UF7M9I/Touretzky - 2017 - Computational thinking and mental models From kod.pdf}
}

@inproceedings{touretzkySemanticReasoningYoung2017,
  title = {Semantic {{Reasoning}} in {{Young Programmers}}},
  booktitle = {Proceedings of the 2017 {{ACM SIGCSE Technical Symposium}} on {{Computer Science Education}}},
  author = {Touretzky, David S. and {Gardner-McCune}, Christina and Aggarwal, Ashish},
  year = {2017},
  month = mar,
  pages = {585--590},
  publisher = {{ACM}},
  address = {{Seattle Washington USA}},
  doi = {10.1145/3017680.3017787},
  urldate = {2020-06-22},
  abstract = {Reading, tracing, and explaining the behavior of code are strongly correlated with the ability to write code effectively. To investigate program understanding in young children, we introduced two groups of third graders to Microsoft's Kodu Game Lab; the second group was also given four semantic ``Laws of Kodu'' to better scaffold their reasoning and discourage some common misconceptions. Explicitly teaching semantics proved helpful with one type of misconception but not with others. During each session, students were asked to predict the behavior of short Kodu programs. We found different styles of student reasoning (analytical and analogical) that may correspond to distinct neo-Piagetian stages of development as described by Teague and Lister (2014). Kodu reasoning problems appear to be a promising tool for assessing computational thinking in young programmers.},
  isbn = {978-1-4503-4698-6},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/F4J5LQHY/Touretzky et al - 2017 - Semantic Reasoning in Young Programmers.pdf}
}

@article{trabassoStorageVerificationStages1971,
  title = {Storage and Verification Stages in Processing Concepts},
  author = {Trabasso, Tom and Rollins, Howard and Shaughnessy, Edward},
  year = {1971},
  month = jul,
  journal = {Cognitive Psychology},
  volume = {2},
  number = {3},
  pages = {239--289},
  issn = {0010-0285},
  doi = {10.1016/0010-0285(71)90014-4},
  urldate = {2018-12-02},
  abstract = {A decision-tree analysis of hypothesis testing was studied in 10 experiments. College students verified concepts with different logical structures against instances. A Chronometric analysis indicated that storage and verification stages were separable. In storage, subjects represent content in an affirmative form. Negation is either transformed or used as an indicator to change a response. In verification, subjects are set to make identity matches between the coded representations of the concept and the exemplar. The coding and matching operations are serial and they are either self-terminating or exhaustive depending upon the logical structure of the concept. A general coding and matching operator model for processing successive inputs was developed. The model was generalized to the processing of positive and negative information in problem-solving and language-comprehension tasks.},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/9YBX7LMD/Trabasso et al - 1971 - Storage and verification stages in processing concepts.pdf;/Users/igormoreno/Zotero/storage/L8QIJIGB/0010028571900144.html}
}

@incollection{trattChapterDynamicallyTyped2009,
  title = {Chapter 5 {{Dynamically Typed Languages}}},
  booktitle = {Advances in {{Computers}}},
  author = {Tratt, Laurence},
  year = {2009},
  month = jan,
  volume = {77},
  pages = {149--184},
  publisher = {{Elsevier}},
  doi = {10.1016/S0065-2458(09)01205-4},
  urldate = {2022-12-07},
  abstract = {Dynamically typed languages such as Python and Ruby have experienced a rapid grown in popularity in recent times. However, there is much confusion as to what makes these languages interesting relative to statically typed languages, and little knowledge of their rich history. In this chapter, I explore the general topic of dynamically typed languages, how they differ from statically typed languages, their history, and their defining features.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/IZZA4WGQ/S0065245809012054.html}
}

@article{treagustEvaluatingStudentsMisconceptions1986,
  title = {Evaluating Students' Misconceptions by Means of Diagnostic Multiple Choice Items},
  author = {Treagust, David},
  year = {1986},
  month = dec,
  journal = {Research in Science Education},
  volume = {16},
  number = {1},
  pages = {199--207},
  issn = {0157-244X, 1573-1898},
  doi = {10.1007/BF02356835},
  urldate = {2020-01-07},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/YFGPYHLF/Treagust - 1986 - Evaluating students' misconceptions by means of diagnostic multiple choice items.pdf}
}

@misc{Treediff,
  title = {Tree-Diff},
  journal = {Hackage},
  urldate = {2022-03-11},
  abstract = {Diffing of (expression) trees.},
  howpublished = {//hackage.haskell.org/package/tree-diff},
  file = {/Users/igormoreno/Zotero/storage/9MW8YI84/tree-diff.html}
}

@article{treiblmaierGamificationModeratorImpact2020,
  title = {Gamification as a Moderator for the Impact of Intrinsic Motivation: {{Findings}} from a Multigroup Field Experiment},
  shorttitle = {Gamification as a Moderator for the Impact of Intrinsic Motivation},
  author = {Treiblmaier, Horst and Putz, Lisa-Maria},
  year = {2020},
  month = aug,
  journal = {Learning and Motivation},
  volume = {71},
  pages = {101655},
  issn = {00239690},
  doi = {10.1016/j.lmot.2020.101655},
  urldate = {2023-06-27},
  abstract = {Gamification, the application of game elements (i.e., motivational affordances) in non-game contexts, has shown a promising potential to increase individuals' intrinsic motivation and to positively impact their attitudes and behaviors. However, few studies exist that empirically test the effectiveness of gamification applications in a controlled experimental setting. To fill this gap, we compared the results from gamified and non-gamified workshops conducted with Austrian students. A total of 384 individuals participated in this field experiment, 261 of whom were subjected to a multitude of gamified elements, while 123 served as a non-gamified control group. In the gamified context, the findings show a stronger influence of intrinsic motivation, as measured by enjoyment and curiosity, on attitude and behavioral intention, and a greater explanatory power of the model. Gamification therefore positively moderates the impact of exogenous motivational variables and amplifies the effect of intrinsic motivation.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/ENL4E7Q6/Treiblmaier and Putz - 2020 - Gamification as a moderator for the impact of intr.pdf}
}

@techreport{tremblayAssessmentHigherEducation2012,
  title = {Assessment of {{Higher Education Learning Outcomes}}: {{AHELO}}: {{Feasibility Study Report}}: {{Volume}} 1},
  author = {Tremblay, Karine and Lalancette, Diane and Roseveare, Deborah},
  year = {2012},
  institution = {{OECD}},
  file = {/Users/igormoreno/Zotero/storage/XYSINJWV/Tremblay et al - 2012 - Assessment of Higher Education Learning Outcomes.pdf}
}

@unpublished{trompFunctionalBitsLambda2018,
  title = {Functional {{Bits}}: {{Lambda Calculus}} Based {{Algorithmic Information Theory}}},
  author = {Tromp, John},
  year = {2018},
  month = may,
  abstract = {In the first part we introduce binary representations of both lambda calculus and combinatory logic, together with very concise interpreters that witness their simplicity. Along the way we present a simple graphical notation for lambda calculus, a new empty list representation, improved bracket abstraction, and a new fixpoint combinator. In the second part we review Algorithmic Information Theory, for which these interpreters provide a convenient vehicle. We demonstrate this with several concrete upper bounds on program-size complexity.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/WJ98FZC4/Tromp - 2018 - Functional Bits.pdf}
}

@misc{trompLambdaDiagrams,
  title = {Lambda {{Diagrams}}},
  author = {Tromp, John},
  urldate = {2021-04-16},
  howpublished = {https://tromp.github.io/cl/diagrams.html},
  file = {/Users/igormoreno/Zotero/storage/RA49EDGN/diagrams.html}
}

@book{trowlerStudentEngagementLiterature2010,
  title = {Student {{Engagement Literature Review}}},
  author = {Trowler, Vicki},
  year = {2010},
  publisher = {{The Higher Education Academy}},
  address = {{York}},
  keywords = {Student engagement},
  file = {/Users/igormoreno/Zotero/storage/4VQV9XB9/Trowler - 2010 - Student engagement literature review.pdf}
}

@inproceedings{truongStaticAnalysisStudents2004,
  title = {Static Analysis of Students' Java Programs},
  booktitle = {In {{Proceedings}} of the Sixth Conference on {{Australian}} Computing Education},
  author = {Truong, Nghi and Roe, Paul and Bancroft, Peter},
  year = {2004},
  pages = {317--325},
  publisher = {{Australian Computer Society, Inc}},
  abstract = {A recent industry survey (Townhidnejad and Hilburn, 2002) has reported that more than fifty percent of a software project's budget is spent on activities related to improving software quality. Industry leaders claim that this is caused by the inadequate attention paid to software quality in the development phase. This paper introduces a static analysis framework which can be used to give beginning students practice in writing better quality Java programs and to assist teaching staff in the marking process. The framework uses both software engineering metrics and relative comparison to judge the quality of students ' programs and provide feedback about how solutions might be improved..},
  file = {/Users/igormoreno/Zotero/storage/LSI6SGC3/Truong et al. - 2004 - Static analysis of students’ java programs.pdf;/Users/igormoreno/Zotero/storage/8HJIZX9U/summary.html}
}

@inproceedings{tsaravaFosteringKnowledgeComputer2020,
  title = {Fostering {{Knowledge}} of {{Computer Viruses}} among {{Children}}: {{The Effects}} of a {{Lesson}} with a {{Cartoon Series}}},
  shorttitle = {Fostering {{Knowledge}} of {{Computer Viruses}} among {{Children}}},
  booktitle = {Koli {{Calling}} '20: {{Proceedings}} of the 20th {{Koli Calling International Conference}} on {{Computing Education Research}}},
  author = {Tsarava, Katerina and Ninaus, Manuel and Hannemann, Tereza and Voln{\'a}, Kristina and Moeller, Korbinian and Brom, Cyril},
  year = {2020},
  month = nov,
  pages = {1--9},
  publisher = {{ACM}},
  address = {{Koli Finland}},
  doi = {10.1145/3428029.3428033},
  urldate = {2021-06-14},
  abstract = {Children increasingly use computing devices. However, it is unclear whether they have basic knowledge of security-related issues such as computer viruses and, in case they do not, what they can learn about them. It was found previously that Czech 8-year-olds have only limited knowledge of computer viruses, but neither na\"ive understanding of older children nor what they can learn has been researched. Here, we first examined preconceptions of computer viruses among Czech 5-6-graders (N = 14) and German 3-4-graders (N = 28) by means of a written test. Second, the German sample (experimental group), but not the Czech one (control group), received an intervention to learn about computer viruses, antiviruses, and software updates by means of a 45-min lesson combining a cartoon series on viruses, frontal instruction, and discussion. Both groups again completed the written test. A joint analysis of both samples indicated that Czech and German children already knew key points concerning computer viruses. These included, for instance, that viruses harm our computers (88\% of the total sample). However, overall, their knowledge was patchy, and children also had misconceptions such as that viruses can only infect devices connected to the Internet (57\%), and antiviruses can delete viruses from the Internet (40\%). Due to the intervention, the experimental group improved from pre to posttest (d = 1.06), while this was not the case for the control group. A more in-depth analysis indicated that knowledge gains were mostly related to information repeatedly mentioned during the lesson, but it was less clear whether the lesson helped correct previously held misconceptions. Taken together, the results indicated that knowledge of computer viruses should and can be taught to primary school children, but attention must be paid to existing preconceptions.},
  isbn = {978-1-4503-8921-1},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/UJ566RTM/Tsarava et al. - 2020 - Fostering Knowledge of Computer Viruses among Chil.pdf}
}

@inproceedings{tshukuduModelConceptualTransfer2019,
  title = {Towards a {{Model}} of {{Conceptual Transfer}} for {{Students Learning New Programming Languages}}},
  booktitle = {Proceedings of the 2019 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Tshukudu, Ethel},
  year = {2019},
  series = {{{ICER}} '19},
  pages = {355--356},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3291279.3339437},
  urldate = {2019-10-07},
  abstract = {As students learn computer science (CS), they will need to transfer skills and understanding from one programming language (PL) to another. Prior research has explored the transition between languages for (mainly experienced) programmers, identifying a number of challenges. I could not find research attempting to devise a model that describes how students' learning of programming concepts is affected during the shift between languages. I propose the first draft of a model to describe PL transfer for relative novices based on the literature and my observations of these students transitioning from procedural Python to Java. In the model, concepts in the new language may be Carryover, Changed or Novel; during the transition, learners automatically effect a transfer of semantics between languages based on matches made between the syntax of the two languages.},
  isbn = {978-1-4503-6185-9},
  keywords = {code comprehension,ForAndrea,programming language concepts,semantics,syntax,transfer},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/8568BHQ8/Tshukudu - 2019 - Towards a Model of Conceptual Transfer for Students Learning New Programming.pdf}
}

@inproceedings{tshukuduUnderstandingConceptualTransfer2020,
  title = {Understanding {{Conceptual Transfer}} for {{Students Learning New Programming Languages}}},
  booktitle = {Proceedings of the 2020 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Tshukudu, Ethel and Cutts, Quintin},
  year = {2020},
  month = aug,
  series = {{{ICER}} '20},
  pages = {227--237},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3372782.3406270},
  urldate = {2021-01-15},
  abstract = {Prior research has shown that students face transition challenges between programming languages (PL) over the course of their education. We could not find research attempting to devise a model that describes the transition process and how students' learning of programming concepts is affected during the shift. In this paper, we propose a model to describe PL transfer for relative novices. In the model, during initial stages of learning a new language, students will engage in learning three categories of concepts, True Carryover Concepts, False Carryover Concepts, or Abstract True Carryover Concepts; during the transition, learners automatically effect a transfer of semantics between languages based on syntax matching. In order to find support for the model, we conducted two empirical studies. Study 1 investigated near-novice undergraduate students transitioning from procedural Python to object-oriented Java while Study 2 investigated near-novice postgraduate students doing a transfer from object-oriented Java to procedural Python. Results for both studies indicate that students had little or no difficulty with transitioning on TCC due to positive semantic transfer based on syntax similarities while they had the most difficulty transitioning on FCC due to negative semantic transfer. Students had little or no semantic transfer on ATCC due to differences in syntax between the languages. We suggest ways in which the model can inform pedagogy on how to ease the transition process.},
  isbn = {978-1-4503-7092-9},
  keywords = {code comprehension,concepts,java,programming language,python,semantics,syntax,transfer},
  annotation = {00002},
  file = {/Users/igormoreno/Zotero/storage/3X7ZZUB4/Tshukudu and Cutts - 2020 - Understanding Conceptual Transfer for Students Learning New Programming.pdf;/Users/igormoreno/Zotero/storage/HIJ2HPPC/Study-2-Python-Java-Media_734571_smxx.pdf;/Users/igormoreno/Zotero/storage/SGG255XX/Study-1-Python-Media_734572_smxx.pdf;/Users/igormoreno/Zotero/storage/VA25UIGQ/Study-1-Java-Media_734573_smxx.pdf}
}

@article{tuckerRecentEvolutionIntroductory1991,
  title = {Recent Evolution of the Introductory Curriculum in Computing},
  author = {Tucker, Allen B. and Garnick, David K.},
  year = {1991},
  month = jan,
  journal = {Education and Computing},
  volume = {7},
  number = {1-2},
  pages = {43--60},
  issn = {01679287},
  doi = {10.1016/S0167-9287(05)80081-0},
  urldate = {2018-11-06},
  abstract = {This paper traces the evolution of the first courses in undergraduate programs over the last twelveyears. We ideatify fundamental weaknesses in the present sequence, and propose strengthening the introductory curriculum, using a breadth-first approach that integrates theoretical material.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/MKCWB7U5/Tucker and Garnick - 1991 - Recent evolution of the introductory curriculum in computing.pdf}
}

@inproceedings{tungareSyllabusRepositoryComputer2007,
  title = {Towards a Syllabus Repository for Computer Science Courses},
  booktitle = {Proceedings of the 38th {{SIGCSE}} Technical Symposium on {{Computer}} Science Education},
  author = {Tungare, Manas and Yu, Xiaoyan and Cameron, William and Teng, GuoFang and {P{\'e}rez-Qui{\~n}ones}, Manuel A. and Cassel, Lillian and Fan, Weiguo and Fox, Edward A.},
  year = {2007},
  month = mar,
  series = {{{SIGCSE}} '07},
  pages = {55--59},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1227310.1227331},
  urldate = {2020-09-22},
  abstract = {A syllabus defines the contents of a course, as well as other information such as resources and assignments. In this paper, we report on our work towards creating a syllabus repository of Computer Science courses across universities in the USA. We present some statistics from our initial collection of 8000+ syllabi. We show a syllabus creator that is integrated with Moodle [5] moodle\_2006\_moodle, an open-source course management system, which allows for the creation of a syllabus for a particular course. Among other information, it includes knowledge units from the Computing Curricula 2001 body of knowledge. The goal of the syllabus repository is to provide added value to the Computer Science Education community, and we present some such offerings. We conclude by presenting our future plans for the syllabus repository. These include using automated techniques to collect and classify syllabi, providing recommendations to instructors when creating a syllabus, and allowing the community to share their syllabi automatically. The syllabus collection will be part of the Computing and Information Technology Interactive Digital Educational Library (CITIDEL), a collection of the National Science Digital Library (NSDL).},
  isbn = {978-1-59593-361-4},
  keywords = {computing curricula 2001,curriculum,syllabus},
  annotation = {00040},
  file = {/Users/igormoreno/Zotero/storage/IUE3KL2A/Tungare et al - 2007 - Towards a syllabus repository for computer science courses.pdf}
}

@inproceedings{tunnellwilsonEvaluatingTracingRecursion2018,
  ids = {tunnellwilsonEvaluatingTracingRecursion2018a},
  title = {Evaluating the {{Tracing}} of {{Recursion}} in the {{Substitution Notional Machine}}},
  booktitle = {Proceedings of the 49th {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Tunnell Wilson, Preston and Fisler, Kathi and Krishnamurthi, Shriram},
  year = {2018},
  series = {{{SIGCSE}} '18},
  pages = {1023--1028},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3159450.3159479},
  urldate = {2018-10-29},
  abstract = {We evaluate a notional machine for recursion based on algebraic substitution. To do this, we decompose recursion into a progression of function call patterns, parameter name reuse, and data structure complexity. At each stage, we test students' ability to trace programs using substitution. We evaluate the correctness of their traces along multiple dimensions, finding that students generally do well, and also observe shortcuts and identify misconceptions. For comparison, we also have students trace two problems using a traditional, imperative notional machine. Even though the substitution model is unwieldy to use with compound data, students still perform better with it than with the traditional notional machine.},
  isbn = {978-1-4503-5103-4},
  keywords = {pedagogy,recursion,substitution,To Read,tracing},
  file = {/Users/igormoreno/Zotero/storage/3GEYM2DM/Tunnell Wilson et al - 2018 - Evaluating the Tracing of Recursion in the Substitution Notional Machine.pdf}
}

@article{turbakEVENTSFIRSTPROGRAMMINGAPP,
  title = {{{EVENTS-FIRST PROGRAMMING IN APP INVENTOR}}},
  author = {Turbak, Franklyn and Sherman, Mark and Martin, Fred},
  pages = {7},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/GLPZT76J/Turbak et al - EVENTS-FIRST PROGRAMMING IN APP INVENTOR.pdf}
}

@article{turbakTeachingRecursionLoops1999,
  title = {Teaching {{Recursion Before Loops}} in {{CS1}}},
  author = {Turbak, Franklyn and Royden, Constance and Stephan, Jennifer and Herbst, Jean and Ma, Wellesley},
  year = {1999},
  month = may,
  journal = {Journal of Computing in Small Colleges},
  volume = {14},
  number = {4},
  pages = {86--101},
  abstract = {Traditionally, loops are a central topic in a CS1 course but recursion is viewed as an advanced topic that is either taught near the end of the course or not taught at all. Taking a cue from the function-oriented programming community, we argue that there are strong pedagogical reasons for teaching recursion before loops in a CS1 course, regardless of what programming paradigm is taught. In our approach, recursion is presented as an instance of the classic "divide, conquer, and glue" problem solving strategy. Iteration is then presented as a particular pattern of recursion. Finally, loop constructs are presented as concise idioms for iterative patterns. We describe our positive experience in adopting this approach in a CS1 course and highlight the aspects of the course that we think contribute to its success.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/6GXN99YI/Turbak et al - 1999 - Teaching Recursion Before Loops in CS1.pdf}
}

@article{turingComputableNumbersApplication1937,
  title = {On Computable Numbers, with an Application to the {{Entscheidungsproblem}}},
  author = {Turing, Alan M.},
  year = {1937},
  journal = {Proceedings of the London mathematical society},
  volume = {2},
  number = {1},
  pages = {230--265},
  annotation = {10371},
  file = {/Users/igormoreno/Zotero/storage/BTM2B4CQ/Turing - 1937 - On computable numbers, with an application to the .pdf;/Users/igormoreno/Zotero/storage/IGZU3HH2/Turing - 1937 - On computable numbers, with an application to the .pdf}
}

@article{tverskyAvailabilityHeuristicJudging1973,
  title = {Availability: {{A}} Heuristic for Judging Frequency and Probability},
  shorttitle = {Availability},
  author = {Tversky, Amos and Kahneman, Daniel},
  year = {1973},
  month = sep,
  journal = {Cognitive Psychology},
  volume = {5},
  number = {2},
  pages = {207--232},
  issn = {0010-0285},
  doi = {10.1016/0010-0285(73)90033-9},
  urldate = {2018-12-02},
  abstract = {This paper explores a judgmental heuristic in which a person evaluates the frequency of classes or the probability of events by availability, i.e., by the ease with which relevant instances come to mind. In general, availability is correlated with ecological frequency, but it is also affected by other factors. Consequently, the reliance on the availability heuristic leads to systematic biases. Such biases are demonstrated in the judged frequency of classes of words, of combinatorial outcomes, and of repeated events. The phenomenon of illusory correlation is explained as an availability bias. The effects of the availability of incidents and scenarios on subjective probability are discussed.},
  file = {/Users/igormoreno/Zotero/storage/BBS4RJ4Z/Tversky and Kahneman - 1973 - Availability A heuristic for judging frequency an.pdf;/Users/igormoreno/Zotero/storage/X746BEE2/0010028573900339.html}
}

@misc{TypesafeDiffFamilies,
  title = {Type-Safe Diff for Families of Datatypes - Gdiff},
  journal = {Hackage},
  urldate = {2022-03-11},
  abstract = {Generic diff and patch},
  howpublished = {//hackage.haskell.org/package/gdiff},
  file = {/Users/igormoreno/Zotero/storage/MJAJBHTD/gdiff-1.html}
}

@misc{Typeshed2023,
  title = {Typeshed},
  year = {2023},
  month = jun,
  urldate = {2023-06-08},
  abstract = {Collection of library stubs for Python, with static types},
  howpublished = {Python},
  keywords = {python,stub,types,typing}
}

@article{ullahEffectAutomaticAssessment2018,
  title = {The Effect of Automatic Assessment on Novice Programming: {{Strengths}} and Limitations of Existing Systems},
  shorttitle = {The Effect of Automatic Assessment on Novice Programming},
  author = {Ullah, Zahid and Lajis, Adidah and Jamjoom, Mona and Altalhi, Abdulrahman and Al-Ghamdi, Abdullah and Saleem, Farrukh},
  year = {2018},
  journal = {Computer Applications in Engineering Education},
  volume = {26},
  number = {6},
  pages = {2328--2341},
  issn = {1099-0542},
  doi = {10.1002/cae.21974},
  urldate = {2020-07-22},
  abstract = {Computer programming is always of high concern for students in introductory programming courses. High rates of failure occur every semester due to lack of adequate skills in programming. No student can become a programmer overnight because such learning requires proper guidance as well as consistent practice with the programming exercises. The role of instructors in the development of students' learning skills is crucial in order to provide feedback on their errors and improve their knowledge accordingly. On the other hand, due to the large number of students, instructors are also overloading themselves to focus on each individual student's errors. To address these issues, researchers have developed numerous Automatic Assessment (AA) systems that not only evaluate the students' programs but also provide instant feedback on their errors as well as abridge the workload of the instructors. Due to the large pool of existing systems, it is difficult to cover each and every system in one study. Therefore, this paper provides a comprehensive overview of some of the existing systems based on the three-analysis approaches: dynamic, static, and hybrid. Moreover, this paper aims to discuss the strengths and limitations of these systems and suggests some potential recommendations regarding the AA specifications for novice programming, which may help in standardizing these systems.},
  copyright = {\textcopyright{} 2018 Wiley Periodicals, Inc.},
  langid = {english},
  keywords = {automatic assessment,dynamic,novice programming,static,system},
  file = {/Users/igormoreno/Zotero/storage/CU2L2B6D/cae.html}
}

@inproceedings{uttingFreshLookNovice2013,
  title = {A {{Fresh Look}} at {{Novice Programmers}}' {{Performance}} and {{Their Teachers}}' {{Expectations}}},
  booktitle = {Proceedings of the {{ITiCSE Working Group Reports Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education-working Group Reports}}},
  author = {Utting, Ian and Tew, Allison Elliott and McCracken, Mike and Thomas, Lynda and Bouvier, Dennis and Frye, Roger and Paterson, James and Caspersen, Michael and Kolikant, Yifat Ben-David and Sorva, Juha and Wilusz, Tadeusz},
  year = {2013},
  series = {{{ITiCSE}} -{{WGR}} '13},
  pages = {15--32},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2543882.2543884},
  urldate = {2018-10-08},
  abstract = {This paper describes the results of an ITiCSE working group convened in 2013 to review and revisit the influential ITiCSE 2001 McCracken working group that reported [18] on novice programmers' ability to solve a specified programming problem. Like that study, the one described here asked students to implement a simple program. Unlike the original study, students' in this study were given significant scaffolding for their efforts, including a test harness. Their knowledge of programming concepts was also assessed via a standard language-neutral survey. One of the significant findings of the original working group was that students were less successful at the programming task than their teachers expected, so in this study teachers' expectations were explicitly gathered and matched with students' performance. This study found a significant correlation between students' performance in the practical task and the survey, and a significant effect on performance in the practical task attributable to the use of the test harness. The study also found a much better correlation between teachers' expectations of their students' performance than in the 2001 working group.},
  isbn = {978-1-4503-2665-0},
  keywords = {assessment,CS1,programming,replication},
  file = {/Users/igormoreno/Zotero/storage/9JWUDYPA/Utting et al - 2013 - A Fresh Look at Novice Programmers' Performance and Their Teachers' Expectations.pdf}
}

@article{uttlMetaanalysisFacultyTeaching2017,
  title = {Meta-Analysis of Faculty's Teaching Effectiveness: {{Student}} Evaluation of Teaching Ratings and Student Learning Are Not Related},
  shorttitle = {Meta-Analysis of Faculty's Teaching Effectiveness},
  author = {Uttl, Bob and White, Carmela A. and Gonzalez, Daniela Wong},
  year = {2017},
  month = sep,
  journal = {Studies in Educational Evaluation},
  volume = {54},
  pages = {22--42},
  issn = {0191491X},
  doi = {10.1016/j.stueduc.2016.08.007},
  urldate = {2018-10-06},
  abstract = {Student evaluation of teaching (SET) ratings are used to evaluate faculty's teaching effectiveness based on a widespread belief that students learn more from highly rated professors. The key evidence cited in support of this belief are meta-analyses of multisection studies showing small-to-moderate correlations between SET ratings and student achievement (e.g., Cohen, 1980, 1981; Feldman, 1989). We re-analyzed previously published meta-analyses of the multisection studies and found that their findings were an artifact of small sample sized studies and publication bias. Whereas the small sample sized studies showed large and moderate correlation, the large sample sized studies showed no or only minimal correlation between SET ratings and learning. Our up-to-date meta-analysis of all multisection studies revealed no significant correlations between the SET ratings and learning. These findings suggest that institutions focused on student learning and career success may want to abandon SET ratings as a measure of faculty's teaching effectiveness.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/L8KIA9LE/Uttl et al - 2017 - Meta-analysis of faculty's teaching effectiveness.pdf}
}

@inproceedings{vahldickReviewGamesDesigned2014,
  title = {A Review of Games Designed to Improve Introductory Computer Programming Competencies},
  booktitle = {2014 {{IEEE Frontiers}} in {{Education Conference}} ({{FIE}}) {{Proceedings}}},
  author = {Vahldick, Adilson and Mendes, Antonio Jose and Marcelino, Maria Jose},
  year = {2014},
  month = oct,
  pages = {1--7},
  publisher = {{IEEE}},
  address = {{Madrid, Spain}},
  doi = {10.1109/FIE.2014.7044114},
  urldate = {2020-06-22},
  abstract = {Learning computer programming is not simple for many students. They have to develop several complex skills to be able to understand programs and, more important, to create programs that solve problems. This means it is important that students have a high motivation level, so that they engage in that work and do not get frustrated with the natural errors they will make in this process. Digital games are often used in educational contexts to attract and retain students. In literature and on the web, we can find many games related strategies that aim to support learning in introductory computer programming courses. One of these strategies is the using games approach: asking students to play games that include problems that must be solved in order to progress. This paper presents a list of 40 games classified by type and highlights the skills and topics supported by them. We hope this work helps teachers to choose games as part of their teaching strategies, as alternative or complementary exercises to their students.},
  isbn = {978-1-4799-3922-0},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/UDNFJRNU/Vahldick et al - 2014 - A review of games designed to improve introductory computer programming.pdf}
}

@article{vahrenholdDevelopingValidatingTest2014,
  title = {Developing and Validating Test Items for First-Year Computer Science Courses},
  author = {Vahrenhold, Jan and Paul, Wolfgang},
  year = {2014},
  month = oct,
  journal = {Computer Science Education},
  volume = {24},
  number = {4},
  pages = {304--333},
  issn = {0899-3408},
  doi = {10.1080/08993408.2014.970782},
  urldate = {2019-03-09},
  abstract = {We report on the development, validation, and implementation of a collection of test items designed to detect misconceptions related to first-year computer science courses. To this end, we reworked the development scheme proposed by Almstrum et al. (SIGCSE Bulletin 38(4):132\textendash 145, 2006) to include students' artifacts and to simultaneously incorporate think-aloud interviews and flash tests. We also investigated to what extent the practical efficiency of detecting certain misconceptions could be increased without significantly affecting the sensitivity of the instrument, and present positive and negative results regarding this goal. The results of a first transfer and implementation study suggest that it is indeed possible to use the test items in a large-scale practical setting \textendash{} both as diagnostic instruments and as interventions.},
  keywords = {concept inventories,CS1/2,ForAndrea,misconceptions},
  file = {/Users/igormoreno/Zotero/storage/6UB3QP3S/Vahrenhold and Paul - 2014 - Developing and validating test items for first-year computer science courses.pdf;/Users/igormoreno/Zotero/storage/7Y3GEPT5/VP_CIFull[64].pdf;/Users/igormoreno/Zotero/storage/3R5L5JHB/08993408.2014.html}
}

@inproceedings{vainioFactorsNoviceProgrammers2007,
  title = {Factors in {{Novice Programmers}}' {{Poor Tracing Skills}}},
  booktitle = {{{ITiCSE}}},
  author = {Vainio, Vesa and Sajaniemi, Jorma},
  year = {2007},
  pages = {5},
  address = {{Dundee, Scotland, United Kingdom}},
  abstract = {Novice programmers' program tracing skills have been found to be poor but the difficulties leading to inefficient tracing are not well known. To study this issue, we conducted exploratory interviews that included program comprehension tasks with novice students and analyzed comprehension protocols to identify specific difficulties affecting novices' ability to trace programs. Based on the qualitative analysis, we describe four specific difficulties students had with program tracing\textemdash single value tracing, confusing function and structure, inability to use external representations, and inability to raise abstraction level\textemdash and discuss ways to help students to overcome these difficulties.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/XPPN9JTU/Vainio and Sajaniemi - 2007 - Factors in Novice Programmers’ Poor Tracing Skills.pdf}
}

@article{valentineCSEducationalResearch2004,
  title = {{{CS}} Educational Research: A Meta-Analysis of {{SIGCSE}} Technical Symposium Proceedings},
  shorttitle = {{{CS}} Educational Research},
  author = {Valentine, David W.},
  year = {2004},
  journal = {ACM SIGCSE Bulletin},
  volume = {36},
  number = {1},
  pages = {255--259},
  publisher = {{ACM New York, NY, USA}},
  file = {/Users/igormoreno/Zotero/storage/CERTL3BY/Valentine - 2004 - CS educational research a meta-analysis of SIGCSE.pdf;/Users/igormoreno/Zotero/storage/HQAWXSJ5/1028174.html}
}

@article{vamvakoussiUnderstandingStructureSet2004,
  title = {Understanding the Structure of the Set of Rational Numbers: A Conceptual Change Approach},
  shorttitle = {Understanding the Structure of the Set of Rational Numbers},
  author = {Vamvakoussi, Xenia and Vosniadou, Stella},
  year = {2004},
  month = oct,
  journal = {Learning and Instruction},
  series = {The {{Conceptual Change Approach}} to {{Mathematics Learning}} and {{Teaching}}},
  volume = {14},
  number = {5},
  pages = {453--467},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2004.06.013},
  urldate = {2018-11-06},
  abstract = {In the present article, we argue that the conceptual change approach to learning can apply in the case of mathematics, taking into consideration the particular nature of mathematical knowledge and the neurobiological bases of mathematical cognition. In the empirical study that is reported in this article, we investigated ninth graders' understanding of algebraic and structural properties of rational numbers, from a conceptual change perspective. We make the point that understanding rational numbers is not indiscriminately difficult. We show that prior knowledge about natural numbers supports students dealing with algebraic properties of rational numbers, while the idea of discreteness is a fundamental presupposition, which constrains students' understanding of density.},
  keywords = {Conceptual change,Density,Rational numbers},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/MRLSDPGV/Vamvakoussi and Vosniadou - 2004 - Understanding the structure of the set of rational numbers.pdf;/Users/igormoreno/Zotero/storage/UI6I57EY/S095947520400043X.html}
}

@article{vanderkleijEffectsFeedbackComputerBased2015,
  title = {Effects of {{Feedback}} in a {{Computer-Based Learning Environment}} on {{Students}}' {{Learning Outcomes}}: {{A Meta-Analysis}}},
  shorttitle = {Effects of {{Feedback}} in a {{Computer-Based Learning Environment}} on {{Students}}' {{Learning Outcomes}}},
  author = {{Van der Kleij}, Fabienne M. and Feskens, Remco C. W. and Eggen, Theo J. H. M.},
  year = {2015},
  month = dec,
  journal = {Review of Educational Research},
  volume = {85},
  number = {4},
  pages = {475--511},
  publisher = {{American Educational Research Association}},
  issn = {0034-6543},
  doi = {10.3102/0034654314564881},
  urldate = {2023-03-17},
  abstract = {In this meta-analysis, we investigated the effects of methods for providing item-based feedback in a computer-based environment on students? learning outcomes. From 40 studies, 70 effect sizes were computed, which ranged from ?0.78 to 2.29. A mixed model was used for the data analysis. The results show that elaborated feedback (EF; e.g., providing an explanation) produced larger effect sizes (0.49) than feedback regarding the correctness of the answer (KR; 0.05) or providing the correct answer (KCR; 0.32). EF was particularly more effective than KR and KCR for higher order learning outcomes. Effect sizes were positively affected by EF feedback, and larger effect sizes were found for mathematics compared with social sciences, science, and languages. Effect sizes were negatively affected by delayed feedback timing and by primary and high school. Although the results suggested that immediate feedback was more effective for lower order learning than delayed feedback and vice versa, no significant interaction was found.},
  file = {/Users/igormoreno/Zotero/storage/65RK925E/Van der Kleij et al. - 2015 - Effects of Feedback in a Computer-Based Learning E.pdf}
}

@article{vandoorenRemedyingSecondarySchool2004,
  title = {Remedying Secondary School Students' Illusion of Linearity: A Teaching Experiment Aiming at Conceptual Change},
  shorttitle = {Remedying Secondary School Students' Illusion of Linearity},
  author = {Van Dooren, Wim and De Bock, Dirk and Hessels, An and Janssens, Dirk and Verschaffel, Lieven},
  year = {2004},
  month = oct,
  journal = {Learning and Instruction},
  series = {The {{Conceptual Change Approach}} to {{Mathematics Learning}} and {{Teaching}}},
  volume = {14},
  number = {5},
  pages = {485--501},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2004.06.019},
  urldate = {2018-11-06},
  abstract = {Already at a very young age, children experience the wide applicability and intrinsic simplicity of linear/proportional relations. In primary and secondary school mathematics education, moreover, extensive attention is paid to this type of relations. In the long run, students develop the misbelief that each relation can be quantified as proportional, called the ``illusion of linearity''. The best-known misconception originating from such a ``synthetic model of linearity'' is that if a geometrical figure enlarges k times, its area and/or volume become k times larger too. This article reports and discusses a teaching experiment aimed at remedying this misconception in 8th graders. Ten experimental lessons were developed in order to obtain a conceptual change in these students. The learning results were tested by means of a pretest\textendash post-test\textendash retention test design with an experimental and control group. The problem-solving behaviour of control group students did not change. In the experimental group, the intervention was successful: students' automatic use of proportional strategies for solving non-proportional geometry problems drastically decreased. Never theless, some students continued to reason proportionally for all types of problems, while others suddenly started to apply non-proportional strategies to proportional problems too. The linearity illusion was broken in most students, but this did not always result in a deep conceptual understanding of proportional and non-proportional situations and relations.},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/IF2ET8G8/Van Dooren et al - 2004 - Remedying secondary school students’ illusion of linearity.pdf;/Users/igormoreno/Zotero/storage/SNJCF56B/S0959475204000453.html}
}

@article{vanduyneNecessityContingencyReasoning1976,
  title = {Necessity and Contingency in Reasoning},
  author = {{van Duyne}, P. C.},
  year = {1976},
  month = apr,
  journal = {Acta Psychologica},
  volume = {40},
  number = {2},
  pages = {85--101},
  issn = {0001-6918},
  doi = {10.1016/0001-6918(76)90001-9},
  urldate = {2018-12-02},
  abstract = {An experiment was designed to investigate whether subjects perform the conditional falsification problem better on sentences they consider as contingently true than on sentences they consider as necessarily true. Subjects had to generate their own sentences out of which the experimenter selected a necessity and a contingency sentence for the falsification task. Instead of the usual four-card presentation the task was performed by means of an interview which was recorded on tape. Results show that subjects performed significantly better on contingency sentences than on necessity sentences. However, the overall rate of insight was low: eight out of 22 subjects gained complete insight. It is hypothesised that subjects' tendency to look for confirming evidence may be explained as a consequence of cognitive self-reinforcement.},
  file = {/Users/igormoreno/Zotero/storage/53P94RHM/van Duyne - 1976 - Necessity and contingency in reasoning.pdf;/Users/igormoreno/Zotero/storage/PMNHZZPS/0001691876900019.html}
}

@article{vanemdenSemanticsPredicateLogic1976,
  ids = {van_emden_semantics_1976},
  title = {The Semantics of Predicate Logic as a Programming Language},
  author = {Van Emden, Maarten H. and Kowalski, Robert A.},
  year = {1976},
  journal = {Journal of the ACM (JACM)},
  volume = {23},
  number = {4},
  pages = {733--742},
  publisher = {{ACM New York, NY, USA}},
  keywords = {Logic Programming},
  annotation = {01947},
  file = {/Users/igormoreno/Zotero/storage/755H83FZ/Van Emden and Kowalski - 1976 - The semantics of predicate logic as a programming .pdf;/Users/igormoreno/Zotero/storage/UJB5SLH6/Van Emden and Kowalski - 1976 - The Semantics of Predicate Logic as a Programming .pdf;/Users/igormoreno/Zotero/storage/8M45WY5M/321978.html;/Users/igormoreno/Zotero/storage/XBHLJAKA/321978.html}
}

@article{vangogEffectsProcessorientedWorked2006,
  title = {Effects of Process-Oriented Worked Examples on Troubleshooting Transfer Performance},
  author = {{van Gog}, Tamara and Paas, Fred and {van Merri{\"e}nboer}, Jeroen J. G.},
  year = {2006},
  month = apr,
  journal = {Learning and Instruction},
  series = {Recent {{Worked Examples Research}}: {{Managing Cognitive Load}} to {{Foster Learning}} and {{Transfer}}},
  volume = {16},
  number = {2},
  pages = {154--164},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2006.02.003},
  urldate = {2018-11-06},
  abstract = {In the domain of electrical circuits troubleshooting, a full factorial experiment investigated the hypotheses that (a) studying worked examples would lead to better transfer performance than solving conventional problems, with less investment of time and mental effort during training and test, and (b) adding process information to worked examples would increase investment of effort during training and enhance transfer performance; whereas adding it to conventional problems would increase investment of effort, but would not positively affect transfer performance. The first hypothesis was largely confirmed by the data; the second was not: adding process information indeed resulted in increased investment of effort during training, but not in higher transfer performance in combination with worked examples.},
  keywords = {Cognitive load,Problem solving,Troubleshooting,Worked examples},
  file = {/Users/igormoreno/Zotero/storage/NPMBSF5R/van Gog et al - 2006 - Effects of process-oriented worked examples on troubleshooting transfer.pdf;/Users/igormoreno/Zotero/storage/SWISJHCT/S095947520600017X.html}
}

@inproceedings{vanhornAbstractingAbstractMachines2010,
  title = {Abstracting Abstract Machines},
  booktitle = {Proceedings of the 15th {{ACM SIGPLAN}} International Conference on {{Functional}} Programming},
  author = {Van Horn, David and Might, Matthew},
  year = {2010},
  month = sep,
  series = {{{ICFP}} '10},
  pages = {51--62},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1863543.1863553},
  urldate = {2020-10-07},
  abstract = {We describe a derivational approach to abstract interpretation that yields novel and transparently sound static analyses when applied to well-established abstract machines. To demonstrate the technique and support our claim, we transform the CEK machine of Felleisen and Friedman, a lazy variant of Krivine's machine, and the stack-inspecting CM machine of Clements and Felleisen into abstract interpretations of themselves. The resulting analyses bound temporal ordering of program events; predict return-flow and stack-inspection behavior; and approximate the flow and evaluation of by-need parameters. For all of these machines, we find that a series of well-known concrete machine refactorings, plus a technique we call store-allocated continuations, leads to machines that abstract into static analyses simply by bounding their stores. We demonstrate that the technique scales up uniformly to allow static analysis of realistic language features, including tail calls, conditionals, side effects, exceptions, first-class continuations, and even garbage collection.},
  isbn = {978-1-60558-794-3},
  keywords = {abstract interpretation,abstract machines},
  file = {/Users/igormoreno/Zotero/storage/EZ7QJNSH/Van Horn and Might - 2010 - Abstracting abstract machines.pdf}
}

@article{vanlehnCanNonCognitiveLearning2017,
  title = {Can a {{Non-Cognitive Learning Companion Increase}} the {{Effectiveness}} of a {{Meta-Cognitive Learning Strategy}}?},
  author = {VanLehn, K. and Zhang, L. and Burleson, W. and Girard, S. and {Hidago-Pontet}, Y.},
  year = {July-Sept. 2017},
  journal = {IEEE Transactions on Learning Technologies},
  volume = {10},
  number = {3},
  pages = {277--289},
  issn = {1939-1382},
  doi = {10.1109/TLT.2016.2594775},
  urldate = {2018-10-06},
  abstract = {This project aimed to improve students' learning and task performance using a non-cognitive learning companion in the context of both a tutor and a meta-tutor. The tutor taught students how to construct models of dynamic systems and the meta-tutor taught students a learning strategy. The non-cognitive learning companion was designed to increase students' effort and persistence in using the learning strategy. It decided when to intervene and what to say using both log data and affective state monitoring via a facial expression camera and a posture sensor. Experiments with high school students showed that the non-cognitive learning companion increased students' learning and performance. However, it had no effect on performance during a transfer phase in which the learning companion, meta-tutor, and tutor were all absent. The transfer phase null effect must be interpreted with caution due to low power, a possible floor effect, and other issues.},
  keywords = {Computational modeling,Electronic mail,Informatics,Integrated circuit modeling,Mathematical model,Training},
  annotation = {00008},
  file = {/Users/igormoreno/Zotero/storage/ECALVD9M/VanLehn et al - 2017 - Can a Non-Cognitive Learning Companion Increase the Effectiveness of a.pdf;/Users/igormoreno/Zotero/storage/CUKAWFRG/07523430-abs.html}
}

@incollection{vanloggemAssessingUseComplexity2012,
  title = {Assessing {{Use Complexity}} of {{Software}}: {{A Tool}} for {{Documentation Designers}}},
  shorttitle = {Assessing {{Use Complexity}} of {{Software}}},
  booktitle = {Human-{{Centered Software Engineering}}},
  author = {{van Loggem}, Brigit},
  editor = {Hutchison, David and Kanade, Takeo and Kittler, Josef and Kleinberg, Jon M. and Mattern, Friedemann and Mitchell, John C. and Naor, Moni and Nierstrasz, Oscar and Pandu Rangan, C. and Steffen, Bernhard and Sudan, Madhu and Terzopoulos, Demetri and Tygar, Doug and Vardi, Moshe Y. and Weikum, Gerhard and Winckler, Marco and Forbrig, Peter and Bernhaupt, Regina},
  year = {2012},
  volume = {7623},
  pages = {267--274},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-34347-6_17},
  urldate = {2020-06-22},
  abstract = {One way to support end users of software is to provide documentation materials such as user manuals and online Help. As not all software is equally difficult to master, documentation designers need to determine the quality and quantity of the information to be included in the user documentation. A first step towards this end would be to assess the complexity of the software from the user's point of view. This paper suggests one approach to such an assessment, based on the idea of use complexity as a multi-dimensional construct. A consideration of width, depth and height of use complexity can help designers determine documentation requirements.},
  isbn = {978-3-642-34346-9 978-3-642-34347-6},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/DLY7HYPX/van Loggem - 2012 - Assessing Use Complexity of Software A Tool for D.pdf}
}

@article{vanloonDevelopmentalProgressionPerformance2017,
  title = {Developmental Progression in Performance Evaluations: {{Effects}} of Children's Cue-Utilization and Self-Protection},
  shorttitle = {Developmental Progression in Performance Evaluations},
  author = {{van Loon}, Mari{\"e}tte and Destan, Nesrin and Spiess, Manuela A. and {de Bruin}, Anique and Roebers, Claudia M.},
  year = {2017},
  month = oct,
  journal = {Learning and Instruction},
  series = {Bridging {{Cognitive Load}} and {{Self-Regulated Learning Research}}},
  volume = {51},
  pages = {47--60},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2016.11.011},
  urldate = {2018-11-06},
  abstract = {To effectively self-regulate learning, children need to self-evaluate whether they meet learning goals. Unfortunately, self-evaluations are often inaccurate, typically, children are overconfident. We investigated two explanations for developmental progression in self-evaluations related to children's (48 5/6-year-olds and 53 7/8-year-olds) interpretations of performance: Improved reliance on item difficulty, and reduced sensitivity to self-protection biases. Self-evaluations were more accurate for 7/8-year-olds than for 5/6-year-olds. There was no developmental increase in reliance on item difficulty; even 5/6-year-olds made adaptive use of this cue. Both age groups were overconfident for incorrect responses, but were able to use performance feedback to improve confidence judgments. However, when self-rewarding, 5/6-year-olds were less likely to take negative performance feedback into account than 7/8-year-olds. The 5/6-year-olds were able to base confidence judgments on performance feedback, but did not use feedback to the same extent when self-rewarding. This may indicate that self-protective biases are an important cause of overconfidence in children.},
  keywords = {Children,Confidence judgments,Development,Overconfidence,Self-reward},
  annotation = {00010},
  file = {/Users/igormoreno/Zotero/storage/47FMVWHD/van Loon et al - 2017 - Developmental progression in performance evaluations.pdf;/Users/igormoreno/Zotero/storage/CLWLKHI5/S0959475216302602.html}
}

@article{vanroyNeedsupportingGamificationEducation2018,
  title = {Need-Supporting Gamification in Education: {{An}} Assessment of Motivational Effects over Time},
  shorttitle = {Need-Supporting Gamification in Education},
  author = {Van Roy, Rob and Zaman, Bieke},
  year = {2018},
  month = dec,
  journal = {Computers \& Education},
  volume = {127},
  pages = {283--297},
  issn = {03601315},
  doi = {10.1016/j.compedu.2018.08.018},
  urldate = {2023-06-27},
  abstract = {Although many studies have focused on the potential of implementing gamification in education, the existing literature remains inconclusive about its effectiveness. In order to make sense of the contradictory findings regarding the effectiveness of implementing game design elements in an online learning environment, this paper complements the available body of research by addressing three holes. We have (1) analysed gamification's underlying motivational processes from a Self-Determination Theory-perspective, thereby accounting for the motivational effects of various game design implementations; (2) empirically assessed subtle motivational changes over time, and (3) accounted for the potential individual differences in motivational effects of gamification. Over a period of 15 weeks, we administered four surveys to measure the possible evolution in students' (N = 40) motivational levels in response to interacting with need-supporting game elements that were implemented in Google + Communities used in a university course. Participants' autonomous and controlled motivation was curve linear, showing an initial downward trend that surprisingly shifted to an upward tendency towards the end of the semester. Their controlled motivation stayed stable throughout. The results illustrated the significance of the individual nature of motivational processes, the importance of sensitive longitudinal motivation measurements, and the relevance of the implemented game elements' design characteristics. We end this article by opening the debate on using theoretical lenses when designing gamification, and by providing avenues for future research.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/ZNWFLINE/Van Roy and Zaman - 2018 - Need-supporting gamification in education An asse.pdf}
}

@article{vanroyUnravellingAmbivalentMotivational2019,
  title = {Unravelling the Ambivalent Motivational Power of Gamification: {{A}} Basic Psychological Needs Perspective},
  shorttitle = {Unravelling the Ambivalent Motivational Power of Gamification},
  author = {Van Roy, Rob and Zaman, Bieke},
  year = {2019},
  month = jul,
  journal = {International Journal of Human-Computer Studies},
  volume = {127},
  pages = {38--50},
  issn = {10715819},
  doi = {10.1016/j.ijhcs.2018.04.009},
  urldate = {2023-06-27},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/QY63JFKJ/Van Roy and Zaman - 2019 - Unravelling the ambivalent motivational power of g.pdf}
}

@article{vansomerenWhatWrongUnderstanding1990,
  title = {What's Wrong? {{Understanding}} Beginners' Problems with {{Prolog}}},
  shorttitle = {What's Wrong?},
  author = {Van Someren, Maarten W.},
  year = {1990},
  month = jul,
  journal = {Instructional Science},
  volume = {19},
  number = {4-5},
  pages = {257--282},
  issn = {0020-4277, 1573-1952},
  doi = {10.1007/BF00116441},
  urldate = {2020-06-22},
  abstract = {This paper reviews psychological research on programming and applies it to the problems of learning and teaching Prolog. We present a psychological model that explains how a certain dass of errors in programs comes about. The model fits quite well with the results of a small sample of students and problems. The problems that underlie these and other errors seem to be (a) the complexity of the Prolog primitives (unification and backtracking) and (b) the misfit between students' naive solutions to a problem and the constructs that are available in Prolog (e.g. iterafive solutions do not map easily to recursive programs). This suggests that learning Prolog could be helped by (1) coherent and detailed instruction about how Prolog works, (2) emphasis on finding reeursive solutions that do not rely on primitives such as assignment and (3) instruction in programming techniques that allow students to implement procedural solutions.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/2EXSQ8PX/Van Someren - 1990 - What's wrong Understanding beginners' problems wi.pdf}
}

@article{vanwykHighLevelLanguageSpecifying1982,
  title = {A {{High-Level Language}} for {{Specifying Pictures}}},
  author = {{van Wyk}, Christopher J.},
  year = {1982},
  month = apr,
  journal = {ACM Transactions on Graphics},
  volume = {1},
  number = {2},
  pages = {163--182},
  issn = {0730-0301},
  doi = {10.1145/357299.357303},
  urldate = {2022-03-09},
  keywords = {hierarchical description of pictures},
  file = {/Users/igormoreno/Zotero/storage/NRFKAWNG/van Wyk - 1982 - A High-Level Language for Specifying Pictures.pdf}
}

@article{varneyMoreRemarksMultiple1998,
  title = {More Remarks on Multiple Choice Questions},
  author = {Varney, Robert N.},
  year = {1998},
  month = jun,
  journal = {American Journal of Physics},
  volume = {52},
  number = {12},
  pages = {1069},
  publisher = {{American Association of Physics TeachersAAPT}},
  issn = {0002-9505},
  doi = {10.1119/1.13762},
  urldate = {2021-05-04},
  copyright = {\textcopyright{} 1984 American Association of Physics Teachers.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/BHMM4VNN/Varney - 1998 - More remarks on multiple choice questions.pdf;/Users/igormoreno/Zotero/storage/R6UX8CK3/1.html}
}

@inproceedings{vassenaGenericDiff3Algebraic2016,
  title = {Generic {{Diff3}} for Algebraic Datatypes},
  booktitle = {Proceedings of the 1st {{International Workshop}} on {{Type-Driven Development}}},
  author = {Vassena, Marco},
  year = {2016},
  month = sep,
  series = {{{TyDe}} 2016},
  pages = {62--71},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2976022.2976026},
  urldate = {2022-03-11},
  abstract = {Many version control systems, including Git and Mercurial, rely on diff3 to merge different revisions of the same file. More precisely diff3 automatically merges two text files, given a common base version, comparing them line by line and raising conflicts when the changes made are irreconcilable. The program ignores the actual structure of the data stored in the files, hence it might generate spurious conflicts, which must be manually resolved by the user. In this paper, we present a state-based, three-way, persistent, data-type generic diff3 algorithm whose increased precision in detecting changes reduces the number of false conflicts raised and improves its merging capabilities. We have implemented the algorithm in Agda, a proof assistant with dependent types, and developed a model to reason about ``diffing'' and merging. We have formalized sanity properties and specifications of diff3 and proved that our algorithm meets them. Furthermore, we have identified the minimal conditions under which the merging algorithm raises a conflict and established a structural invariant preserved.},
  isbn = {978-1-4503-4435-7},
  keywords = {Datatype-generic programming,Dependent types,Diff3},
  file = {/Users/igormoreno/Zotero/storage/IFUEJ8Y2/Vassena - 2016 - Generic Diff3 for algebraic datatypes.pdf}
}

@misc{vassenaGenericDiff3Algebraic2016a,
  title = {Generic {{Diff3}} for Algebraic Datatypes - Svc},
  author = {Vassena, Marco},
  year = {2016},
  month = dec,
  urldate = {2022-03-11},
  abstract = {A data type generic diff3 algorithm}
}

@inproceedings{vazouAbstractRefinementTypes2013,
  title = {Abstract {{Refinement Types}}},
  booktitle = {Programming {{Languages}} and {{Systems}}},
  author = {Vazou, Niki and Rondon, Patrick M. and Jhala, Ranjit},
  editor = {Felleisen, Matthias and Gardner, Philippa},
  year = {2013},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {209--228},
  publisher = {{Springer}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-37036-6_13},
  abstract = {We present abstract refinement types which enable quantification over the refinements of data- and function-types. Our key insight is that we can avail of quantification while preserving SMT-based decidability, simply by encoding refinement parameters as uninterpreted propositions within the refinement logic. We illustrate how this mechanism yields a variety of sophisticated means for reasoning about programs, including: parametric refinements for reasoning with type classes, index-dependent refinements for reasoning about key-value maps, recursive refinements for reasoning about recursive data types, and inductive refinements for reasoning about higher-order traversal routines. We have implemented our approach in a refinement type checker for Haskell and present experiments using our tool to verify correctness invariants of various programs.},
  isbn = {978-3-642-37036-6},
  langid = {english},
  keywords = {Input List,Parametric Invariant,Predicate Abstraction,Type Check,Typing Judgment},
  file = {/Users/igormoreno/Zotero/storage/PWRF6JJB/Vazou et al. - 2013 - Abstract Refinement Types.pdf}
}

@article{vazouRefinementReflectionComplete2017,
  title = {Refinement Reflection: Complete Verification with {{SMT}}},
  shorttitle = {Refinement Reflection},
  author = {Vazou, Niki and Tondwalkar, Anish and Choudhury, Vikraman and Scott, Ryan G. and Newton, Ryan R. and Wadler, Philip and Jhala, Ranjit},
  year = {2017},
  month = dec,
  journal = {Proceedings of the ACM on Programming Languages},
  volume = {2},
  number = {POPL},
  pages = {53:1--53:31},
  doi = {10.1145/3158141},
  urldate = {2023-07-06},
  abstract = {We introduce Refinement Reflection, a new framework for building SMT-based deductive verifiers. The key idea is to reflect the code implementing a user-defined function into the function's (output) refinement type. As a consequence, at uses of the function, the function definition is instantiated in the SMT logic in a precise fashion that permits decidable verification. Reflection allows the user to write equational proofs of programs just by writing other programs using pattern-matching and recursion to perform case-splitting and induction. Thus, via the propositions-as-types principle, we show that reflection permits the specification of arbitrary functional correctness properties. Finally, we introduce a proof-search algorithm called Proof by Logical Evaluation that uses techniques from model checking and abstract interpretation, to completely automate equational reasoning. We have implemented reflection in Liquid Haskell and used it to verify that the widely used instances of the Monoid, Applicative, Functor, and Monad typeclasses actually satisfy key algebraic laws required to make the clients safe, and have used reflection to build the first library that actually verifies assumptions about associativity and ordering that are crucial for safe deterministic parallelism.},
  keywords = {Haskell,refinement types,theorem proving,verification},
  file = {/Users/igormoreno/Zotero/storage/298HXHVL/Vazou et al. - 2017 - Refinement reflection complete verification with .pdf}
}

@inproceedings{vazouTheoremProvingAll2018,
  title = {Theorem Proving for All: Equational Reasoning in Liquid {{Haskell}} (Functional Pearl)},
  shorttitle = {Theorem Proving for All},
  booktitle = {Proceedings of the 11th {{ACM SIGPLAN International Symposium}} on {{Haskell}}},
  author = {Vazou, Niki and Breitner, Joachim and Kunkel, Rose and Van Horn, David and Hutton, Graham},
  year = {2018},
  month = sep,
  series = {Haskell 2018},
  pages = {132--144},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3242744.3242756},
  urldate = {2023-07-06},
  abstract = {Equational reasoning is one of the key features of pure functional languages such as Haskell. To date, however, such reasoning always took place externally to Haskell, either manually on paper, or mechanised in a theorem prover. This article shows how equational reasoning can be performed directly and seamlessly within Haskell itself, and be checked using Liquid Haskell. In particular, language learners --- to whom external theorem provers are out of reach --- can benefit from having their proofs mechanically checked. Concretely, we show how the equational proofs and derivations from Graham's textbook can be recast as proofs in Haskell (spoiler: they look essentially the same).},
  isbn = {978-1-4503-5835-4},
  keywords = {equational reasoning,Haskell,Liquid Haskell,program optimization,theorem proving},
  file = {/Users/igormoreno/Zotero/storage/75GV2TCC/Vazou et al. - 2018 - Theorem proving for all equational reasoning in l.pdf}
}

@incollection{veerTeachingSpreadsheetApplication1990,
  title = {Teaching a Spreadsheet Application \textemdash{} Visual-Spatial Metaphors in Relation to Spatial Ability, and the Effect on Mental Models},
  booktitle = {Visualization in {{Human-Computer Interaction}}},
  author = {Veer, Gerrit C. and Wijk, Robert},
  editor = {Goos, G. and Hartmanis, J. and Barstow, D. and Brauer, W. and Brinch Hansen, P. and Gries, D. and Luckham, D. and Moler, C. and Pnueli, A. and Seegm{\"u}ller, G. and Stoer, J. and Wirth, N. and Gorny, Peter and Tauber, Michael J.},
  year = {1990},
  volume = {439},
  pages = {194--208},
  publisher = {{Springer Berlin Heidelberg}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/3-540-52698-6_12},
  urldate = {2020-06-22},
  isbn = {978-3-540-52698-8 978-3-540-47102-8},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/6YR7WGDU/Veer and Wijk - 1990 - Teaching a spreadsheet application — visual-spatial metaphors in relation to.pdf}
}

@phdthesis{veneCategoricalProgrammingInductive2000,
  title = {Categorical {{Programming}} with {{Inductive}} and {{Coinductive Types}}},
  author = {Vene, Varmo},
  year = {2000},
  address = {{Tartu, Estonia}},
  langid = {english},
  school = {University of Tartu},
  file = {/Users/igormoreno/Zotero/storage/TYI6XZZK/Vene - 2000 - Categorical Programming with Inductive and Coinductive Types.pdf}
}

@inproceedings{veranomerinoBlockbasedSyntaxContextfree2020,
  title = {Block-Based Syntax from Context-Free Grammars},
  booktitle = {Proceedings of the 13th {{ACM SIGPLAN International Conference}} on {{Software Language Engineering}}},
  author = {Verano Merino, Mauricio and {van der Storm}, Tijs},
  year = {2020},
  month = nov,
  series = {{{SLE}} 2020},
  pages = {283--295},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3426425.3426948},
  urldate = {2021-10-17},
  abstract = {Block-based programming systems employ a jigsaw metaphor to write programs. They are popular in the domain of programming education (e.g., Scratch), but also used as a programming interface for end-users in other disciplines, such as arts, robotics, and configuration management. In particular, block-based environments promise a convenient interface for Domain-Specific Languages (DSLs) for domain experts who might lack a traditional programming education. However, building a block-based environment for a DSL from scratch requires significant effort. This paper presents an approach to engineer block-based language interfaces by reusing existing language artifacts. We present Kogi, a tool for deriving block-based environments from context-free grammars. We identify and define the abstract structure for describing block-based environments. Kogi transforms a context-free grammar into this structure, which then generates a block-based environment based on Google Blockly. The approach is illustrated with four case studies, a DSL for state machines, Sonification Blocks (a DSL for sound synthesis), Pico (a simple programming language), and QL (a DSL for questionnaires). The results show that usable block-based environments can be derived from context-free grammars, and with an order of magnitude reduction in effort.},
  isbn = {978-1-4503-8176-5},
  keywords = {block-based environments,Blockly,DSLs,grammars,language workbenches,Rascal,syntax,visual languages},
  file = {/Users/igormoreno/Zotero/storage/Z37S4TJQ/Verano Merino and van der Storm - 2020 - Block-based syntax from context-free grammars.pdf}
}

@inproceedings{verhoeffAbstractionInformatics2011,
  title = {On {{Abstraction}} and {{Informatics}}},
  booktitle = {International {{Conference}} on {{Informatics}} in {{Schools}}: {{Situation}}, {{Evolution}} and {{Perspectives}}},
  author = {Verhoeff, Tom},
  year = {2011},
  month = oct,
  address = {{Bratislava, Slovakia}},
  abstract = {One often hears, and less often reads, the claim that informatics and its application is so diffcult because it involves demanding abstractions. Abstractions in informatics supposedly are even harder than those in mathematics and the physical sciences. If abstraction is so important in informatics, then you would expect that we have good ways of dealing with it and communicating about it. To some extent, this is indeed the case, but unfortunately these ways are not widespread. It is our duty to get to grips with abstraction, and especially to address it in the teaching of informatics. In this article, I will not solve the problems posed by abstraction, and certainly not the problem of teaching abstraction. But I would like to put it more prominently on the agenda. In order to deal with abstraction, you will have to investigate it, dissect it, analyze it, establish terminology, etc. I will give a, somewhat personal, overview of abstraction, showing that it is not a single, atomic concept, but a diverse complex of interrelated concepts. It is my hope that this will help in embedding abstraction more explicitly in the informatics curriculum.},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/9JZGVGRJ/Verhoeff - 2011 - On Abstraction and Informatics.pdf}
}

@article{verhoevenCognitiveLoadInteractive2009,
  title = {Cognitive Load in Interactive Knowledge Construction},
  author = {Verhoeven, Ludo and Schnotz, Wolfgang and Paas, Fred},
  year = {2009},
  month = oct,
  journal = {Learning and Instruction},
  series = {Cognitive Load in Interactive Knowledge Construction},
  volume = {19},
  number = {5},
  pages = {369--375},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2009.02.002},
  urldate = {2018-11-06},
  abstract = {The focus of this special issue is on the cognitive load underlying processes of interactive knowledge construction in a wide range of instructional multimedia platforms. Multimedia comprehension involves the parallel processing of auditory\textendash verbal and visual\textendash pictorial channels within working memory. By means of integrating multimodal information, students are able to acquire new knowledge. However, the processes of knowledge construction may be dependent on the load a task imposes on the learner's cognitive system. Such cognitive load is determined by prior knowledge, motivation, and processing strategies on the part of the learner as well as on task demands. Other critical factors that should be explored are goal adoption and perspective taking, effects of interactive animation, environmental support, and possibilities of collaboration.},
  keywords = {Cognitive load,Knowledge construction,Multimedia comprehension},
  file = {/Users/igormoreno/Zotero/storage/4HBD78NG/Verhoeven et al - 2009 - Cognitive load in interactive knowledge construction.pdf;/Users/igormoreno/Zotero/storage/GGUN26T3/S0959475209000140.html}
}

@inproceedings{vesinWebbasedEducationalEcosystem2018,
  title = {Web-Based Educational Ecosystem for Automatization of Teaching Process and Assessment of Students},
  booktitle = {Proceedings of the 8th {{International Conference}} on {{Web Intelligence}}, {{Mining}} and {{Semantics}} - {{WIMS}} '18},
  author = {Vesin, Boban and {Kla{\v s}nja-Mili{\'c}evi{\'c}}, Aleksandra and Mangaroska, Katerina and Ivanovi{\'c}, Mirjana and Jolak, Rodi and Stikkolorum, Dave and Chaudron, Michel},
  year = {2018},
  pages = {1--9},
  publisher = {{ACM Press}},
  address = {{Novi Sad, Serbia}},
  doi = {10.1145/3227609.3227662},
  urldate = {2020-09-17},
  abstract = {The complexity of the teaching process at universities creates many challenges. It becomes much harder for teachers to observe, control and adjust the learning process. Teaching process can be enhanced with use of different educational systems that not only help students construct their knowledge, but also make this process the most effective and efficient. One of the processes that could be automated and supported is the assessment of students' assignments. Three e-learning systems are currently used at different universities for teaching software design basics. The goal of this paper is to propose new integrated tool that can be used in university courses to support different stages of learning and evaluation of students' assignments. Such integrated system will be used to simplify the correction process of software design assignments.},
  isbn = {978-1-4503-5489-9},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/Q89T4D6G/Vesin et al. - 2018 - Web-based educational ecosystem for automatization.pdf}
}

@misc{victorAlligatorEggs2007,
  title = {Alligator {{Eggs}}!},
  author = {Victor, Bret},
  year = {2007},
  month = may,
  urldate = {2021-04-11},
  howpublished = {http://worrydream.com/AlligatorEggs/},
  file = {/Users/igormoreno/Zotero/storage/8HF4Y7GF/AlligatorEggs.html}
}

@misc{victorDrawingDynamicVisualizations2013,
  title = {Drawing {{Dynamic Visualizations}}},
  author = {Victor, Bret},
  year = {2013},
  month = may,
  urldate = {2023-01-21},
  abstract = {For more information, see: http://worrydream.com/DrawingDynamicVisualizationsTalkAddendum  Throughout the history of science, diagrams and graphs have been essential\&hellip;},
  file = {/Users/igormoreno/Zotero/storage/M266SZDB/66085662.html}
}

@inproceedings{vihavainenAnalysisSourceCode2014,
  title = {Analysis of Source Code Snapshot Granularity Levels},
  booktitle = {Proceedings of the 15th {{Annual Conference}} on {{Information}} Technology Education},
  author = {Vihavainen, Arto and Luukkainen, Matti and Ihantola, Petri},
  year = {2014},
  month = oct,
  series = {{{SIGITE}} '14},
  pages = {21--26},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2656450.2656473},
  urldate = {2020-12-15},
  abstract = {Systems that record students' programming process have become increasingly popular during the last decade. The granularity of stored data varies across these systems and ranges from storing the final state, e.g. a solution, to storing fine-grained event streams, e.g. every key-press made while working on a task. Researchers that study such data make assumptions based on the granularity. If no fine-grained data exists, the baseline assumption is that a student proceeds in a linear fashion from one recorded state to the next. In this work, we analyze three different granularities of data; (1) submissions, (2) snapshots (i.e. save, compile, run, test events), and (3) keystroke-events. Our study provides insight on the quantity of lost data when storing data at a specific granularity and shows how the lost data varies depending on previous programming experience and the programming assignment type.},
  isbn = {978-1-4503-2686-5},
  keywords = {data collection,fine-grained data analysis,programming education,programming process,programming snapshots,source code,source code snapshots,source code submissions},
  annotation = {00023},
  file = {/Users/igormoreno/Zotero/storage/J4HHF33R/Vihavainen et al - 2014 - Analysis of source code snapshot granularity levels.pdf}
}

@inproceedings{villarPhysicalProgrammingBlind2019,
  title = {Physical {{Programming}} for {{Blind}} and {{Low Vision Children}} at {{Scale}}},
  booktitle = {Extended {{Abstracts}} of the 2019 {{CHI Conference}} on {{Human Factors}} in {{Computing Systems}}},
  author = {Villar, Nicolas and Morrison, Cecily and Cletheroe, Daniel and Regan, Tim and Thieme, Anja and Saul, Greg},
  year = {2019},
  month = may,
  pages = {1--4},
  publisher = {{ACM}},
  address = {{Glasgow Scotland Uk}},
  doi = {10.1145/3290607.3313241},
  urldate = {2020-06-22},
  isbn = {978-1-4503-5971-9},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/WWQ2UFBC/Villar et al - 2019 - Physical Programming for Blind and Low Vision Children at Scale.pdf}
}

@inproceedings{vitousekDesignEvaluationGradual2014,
  title = {Design and Evaluation of Gradual Typing for Python},
  booktitle = {Proceedings of the 10th {{ACM Symposium}} on {{Dynamic}} Languages},
  author = {Vitousek, Michael M. and Kent, Andrew M. and Siek, Jeremy G. and Baker, Jim},
  year = {2014},
  month = oct,
  series = {{{DLS}} '14},
  pages = {45--56},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2661088.2661101},
  urldate = {2022-12-07},
  abstract = {Combining static and dynamic typing within the same language offers clear benefits to programmers. It provides dynamic typing in situations that require rapid prototyping, heterogeneous data structures, and reflection, while supporting static typing when safety, modularity, and efficiency are primary concerns. Siek and Taha (2006) introduced an approach to combining static and dynamic typing in a fine-grained manner through the notion of type consistency in the static semantics and run-time casts in the dynamic semantics. However, many open questions remain regarding the semantics of gradually typed languages. In this paper we present Reticulated Python, a system for experimenting with gradual-typed dialects of Python. The dialects are syntactically identical to Python 3 but give static and dynamic semantics to the type annotations already present in Python 3. Reticulated Python consists of a typechecker and a source-to-source translator from Reticulated Python to Python 3. Using Reticulated Python, we evaluate a gradual type system and three approaches to the dynamic semantics of mutable objects: the traditional semantics based on Siek and Taha (2007) and Herman et al. (2007) and two new designs. We evaluate these designs in the context of several third-party Python programs.},
  isbn = {978-1-4503-3211-8},
  keywords = {case study,gradual typing,proxy,python},
  file = {/Users/igormoreno/Zotero/storage/FUP3W2LM/Vitousek et al. - 2014 - Design and evaluation of gradual typing for python.pdf}
}

@inproceedings{vizcainoAdaptiveCollaborativeEnvironment2000,
  title = {An {{Adaptive}}, {{Collaborative Environment}} to {{Develop Good Habits}} in {{Programming}}},
  booktitle = {Proceedings of the 5th {{International Conference}} on {{Intelligent Tutoring Systems}}},
  author = {Vizca{\'i}no, Aurora and Contreras, Juan and Favela, Jes{\'u}s and Prieto, Manuel},
  year = {2000},
  month = jun,
  series = {{{ITS}} '00},
  pages = {262--271},
  publisher = {{Springer-Verlag}},
  address = {{Berlin, Heidelberg}},
  urldate = {2022-01-12},
  abstract = {In this paper we discuss how computer supported collaborative learning (CSCL) can be deployed to develop new skills and habits in students at university level. These considerations led to the development of an adaptive environment to develop good programming habits. We start by describing the difficulties in teaching and learning programming and more concretely, in making students good programmers. Afterwards, we explain why group work is an adequate approach to learn programming. Next HabiPro, an environment that trains students in Programming is described. The principal features of this system are: It is adaptive: depending on the group features the environment proposes different pedagogic methodologies and different exercises. The tool promotes collaboration and interaction among the students. The pedagogic methodologies are based on reflection, observation, and relation. Finally, we present our conclusions and discuss future work.},
  isbn = {978-3-540-67655-3},
  file = {/Users/igormoreno/Zotero/storage/J6L3VRUV/Vizcaíno et al. - 2000 - An Adaptive, Collaborative Environment to Develop .pdf}
}

@article{vlassisMakingSenseMinus2004,
  title = {Making Sense of the Minus Sign or Becoming Flexible in `Negativity'},
  author = {Vlassis, Jo{\"e}lle},
  year = {2004},
  month = oct,
  journal = {Learning and Instruction},
  series = {The {{Conceptual Change Approach}} to {{Mathematics Learning}} and {{Teaching}}},
  volume = {14},
  number = {5},
  pages = {469--484},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2004.06.012},
  urldate = {2018-11-06},
  abstract = {This article focuses on the kinds of conceptual changes that occur when students have to deal with negative numbers in elementary algebraic operations. Interviews were carried out with twelve 8th-grade level students who were selected on the basis of their results in a test where they were required to reduce polynomials. The questions applied to their strategies and to the meaning they gave to the minus sign. The analysis of the students' oral and written discourse attests to the presence of two major kinds of conceptual change: the first one results from students' attempts to reconcile their arithmetical presuppositions about natural numbers and the algebraic rules required to operate with negatives. The nature of the second kind of conceptual change relates to the minus sign and develops through an enlarged understanding and a flexible use of what we called `negativity'. We argue that these two kinds of conceptual change cannot fully occur without the students developing a meta-conceptual awareness of their symbolizing activities.},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/J66QPTAW/Vlassis - 2004 - Making sense of the minus sign or becoming flexible in ‘negativity’.pdf;/Users/igormoreno/Zotero/storage/88FZBPNS/S0959475204000441.html}
}

@inproceedings{voigtlanderBidirectionalizationFreePearl2009,
  title = {Bidirectionalization for {{Free}}! ({{Pearl}})},
  booktitle = {Proceedings of the 36th {{Annual ACM SIGPLAN-SIGACT Symposium}} on {{Principles}} of {{Programming Languages}}},
  author = {Voigtl{\"a}nder, Janis},
  year = {2009},
  series = {{{POPL}} '09},
  pages = {165--176},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1480881.1480904},
  urldate = {2018-09-10},
  abstract = {A bidirectional transformation consists of a function get that takes a source (document or value) to a view and a function put that takes an updated view and the original source back to an updated source, governed by certain consistency conditions relating the two functions. Both the database and programming language communities have studied techniques that essentially allow a user to specify only one of get and put and have the other inferred automatically. All approaches so far to this bidirectionalization task have been syntactic in nature, either proposing a domain-specific language with limited expressiveness but built-in (and composable) backward components, or restricting get to a simple syntactic form from which some algorithm can synthesize an appropriate definition for put. Here we present a semantic approach instead. The idea is to take a general-purpose language, Haskell, and write a higher-order function that takes (polymorphic) get-functions as arguments and returns appropriate put-functions. All this on the level of semantic values, without being willing, or even able, to inspect the definition of get, and thus liberated from syntactic restraints. Our solution is inspired by relational parametricity and uses free theorems for proving the consistency conditions. It works beautifully.},
  isbn = {978-1-60558-379-2},
  keywords = {Bidirectional Programming,bidirectionalization,free theorems,generic programming,haskell,program transformation,prospectus,relational parametricity,view-update problem},
  annotation = {00100},
  file = {/Users/igormoreno/Zotero/storage/7A9DMZS3/Voigtländer - 2009 - Bidirectionalization for Free! (Pearl).pdf}
}

@inproceedings{vojkuvkovaVanHieleModel2012,
  title = {The van {{Hiele Model}} of {{Geometric Thinking}}},
  booktitle = {{{WDS}}'12 {{Proceedings}} of {{Contributed Papers}}},
  author = {Vojkuvkova, I},
  year = {2012},
  pages = {4},
  abstract = {The van Hiele theory describes how young people learn geometry. It postulates five levels of geometric thinking which are labeled visualization, analysis, abstraction, formal deduction and rigor. Each level uses its own language and symbols. Students or pupils pass through the levels ``step by step''. This hierarchical order helps them to achieve better understanding and results. This article presents an overview of the model. It is focused on possibilities how to apply this theory on Czech mathematical education.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/GRSGTM82/Vojkuvkova - The van Hiele Model of Geometric Thinking.pdf}
}

@article{vosniadouExtendingConceptualChange2004,
  title = {Extending the Conceptual Change Approach to Mathematics Learning and Teaching},
  author = {Vosniadou, Stella and Verschaffel, Lieven},
  year = {2004},
  month = oct,
  journal = {Learning and Instruction},
  series = {The {{Conceptual Change Approach}} to {{Mathematics Learning}} and {{Teaching}}},
  volume = {14},
  number = {5},
  pages = {445--451},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2004.06.014},
  urldate = {2018-11-06},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/GNMPRSIQ/Vosniadou and Verschaffel - 2004 - Extending the conceptual change approach to mathematics learning and teaching.pdf;/Users/igormoreno/Zotero/storage/2LMWTUEX/S0959475204000428.html}
}

@misc{vossCircuitlikeNotationLambda2015,
  title = {A Circuit-like Notation for Lambda Calculus \textendash{} Csvoss.Com},
  author = {Voss, Chelsea Sierra},
  year = {2015},
  month = nov,
  urldate = {2021-04-17},
  howpublished = {https://csvoss.com/circuit-notation-lambda-calculus},
  file = {/Users/igormoreno/Zotero/storage/FJ5IHBY2/circuit-notation-lambda-calculus.html}
}

@article{vrablecovaSupportingSemanticAnnotation2016,
  title = {Supporting {{Semantic Annotation}} of {{Educational Content}} by {{Automatic Extraction}} of {{Hierarchical Domain Relationships}}},
  author = {Vrablecova, P. and Simko, M.},
  year = {July-Sept. 2016},
  journal = {IEEE Transactions on Learning Technologies},
  volume = {9},
  number = {3},
  pages = {285--298},
  issn = {1939-1382},
  doi = {10.1109/TLT.2016.2546255},
  urldate = {2018-10-06},
  abstract = {The domain model is an essential part of an adaptive learning system. For each educational course, it involves educational content and semantics, which is also viewed as a form of conceptual metadata about educational content. Due to the size of a domain model, manual domain model creation is a challenging and demanding task for teachers or content (and metadata) authors. We propose a method for the automated acquisition of hierarchical relationships between relevant domain terms from educational content, which constitutes a fundamental step in the semantic composition of an educational course. The method is based on existing text mining methods and applied to educational content. We evaluate our approach by performing several experiments. The evaluation shows that the method's performance is very promising. A study in a real-user scenario reveals that despite the fact that utilization of our method does not necessarily improve the speed of the domain model creation nor does it reduce the overall difficulty of the task, a significant improvement in the quality of resulting domain models has been observed. Our work is a promising contribution to the growing field of automated domain model acquisition.},
  keywords = {Adaptation models,Adaptive systems,Data mining,Metadata,Navigation,Ontologies,Semantics},
  file = {/Users/igormoreno/Zotero/storage/WJPVL7LN/Vrablecova and Simko - 2016 - Supporting Semantic Annotation of Educational Content by Automatic Extraction.pdf}
}

@inproceedings{wadlerComprehendingMonads1990,
  title = {Comprehending {{Monads}}},
  booktitle = {Proceedings of the 1990 {{ACM Conference}} on {{LISP}} and {{Functional Programming}}},
  author = {Wadler, Philip},
  year = {1990},
  series = {{{LFP}} '90},
  pages = {61--78},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/91556.91592},
  isbn = {0-89791-368-X},
  keywords = {Functional Programming,Monads},
  annotation = {01228},
  file = {/Users/igormoreno/Zotero/storage/5FPGHRA4/Wadler - 1990 - Comprehending monads.pdf;/Users/igormoreno/Zotero/storage/NG2C38BE/citation.html}
}

@article{wadlerCritiqueAbelsonSussman1987,
  title = {A Critique of {{Abelson}} and {{Sussman}} or Why Calculating Is Better than Scheming},
  author = {Wadler, P},
  year = {1987},
  month = mar,
  journal = {ACM SIGPLAN Notices},
  volume = {22},
  number = {3},
  pages = {83--94},
  issn = {0362-1340},
  doi = {10.1145/24697.24706},
  urldate = {2020-07-23},
  keywords = {proposedByIgor},
  file = {/Users/igormoreno/Zotero/storage/S53Z7KBG/Wadler - 1987 - A critique of Abelson and Sussman or why calculating is better than scheming.pdf;/Users/igormoreno/Zotero/storage/THYFWCF6/Wadler - 1987 - A critique of Abelson and Sussman or why calculati.pdf}
}

@inproceedings{wadlerEssenceFunctionalProgramming1992,
  title = {The {{Essence}} of {{Functional Programming}}},
  booktitle = {Proceedings of the 19th {{ACM SIGPLAN-SIGACT Symposium}} on {{Principles}} of {{Programming Languages}}},
  author = {Wadler, Philip},
  year = {1992},
  series = {{{POPL}} '92},
  pages = {1--14},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/143165.143169},
  urldate = {2018-09-11},
  abstract = {This paper explores the use monads to structure functional programs. No prior knowledge of monads or category theory is required. Monads increase the ease with which programs may be modified. They can mimic the effect of impure features such as exceptions, state, and continuations; and also provide effects not easily achieved with such features. The types of a program reflect which effects occur. The first section is an extended example of the use of monads. A simple interpreter is modified to support various extra features: error messages, state, output, and non-deterministic choice. The second section describes the relation between monads and the continuation-passing style. The third section sketches how monads are used in a compiler for Haskell that is written in Haskell.},
  isbn = {978-0-89791-453-6},
  annotation = {01034},
  file = {/Users/igormoreno/Zotero/storage/57S73HSM/Wadler - 1992 - The Essence of Functional Programming.pdf;/Users/igormoreno/Zotero/storage/DKM7I3E8/Wadler - 1992 - The essence of functional programming.pdf;/Users/igormoreno/Zotero/storage/PMQKZ4TZ/citation.html}
}

@inproceedings{wadlerHowMakeAdhoc1989,
  ids = {wadler_how_1989},
  title = {How to Make Ad-Hoc Polymorphism Less Ad Hoc},
  booktitle = {Proceedings of the 16th {{ACM SIGPLAN-SIGACT}} Symposium on {{Principles}} of Programming Languages},
  author = {Wadler, Philip and Blott, S.},
  year = {1989},
  month = jan,
  series = {{{POPL}} '89},
  pages = {60--76},
  publisher = {{Association for Computing Machinery}},
  address = {{Austin, Texas, USA}},
  doi = {10.1145/75277.75283},
  urldate = {2020-02-19},
  abstract = {This paper presents type classes, a new approach to ad-hoc polymorphism. Type classes permit overloading of arithmetic operators such as multiplication, and generalise the ``eqtype variables'' of Standard ML. Type classes extend the Hindley/Milner polymorphic type system, and provide a new approach to issues that arise in object-oriented programming, bounded type quantification, and abstract data types. This paper provides an informal introduction to type classes, and defines them formally by means of type inference rules.},
  isbn = {978-0-89791-294-5},
  annotation = {01018},
  file = {/Users/igormoreno/Zotero/storage/I5C89C99/Wadler and Blott - 1989 - How to Make Ad-hoc Polymorphism Less Ad Hoc.pdf;/Users/igormoreno/Zotero/storage/VZRSD76Z/Wadler and Blott - 1989 - How to make ad-hoc polymorphism less ad hoc.pdf}
}

@inproceedings{wadlerMonadsFunctionalProgramming1995,
  title = {Monads for Functional Programming},
  booktitle = {International {{School}} on {{Advanced Functional Programming}}},
  author = {Wadler, Philip},
  year = {1995},
  pages = {24--52},
  publisher = {{Springer}},
  annotation = {00749},
  file = {/Users/igormoreno/Zotero/storage/KQF3KI8H/Wadler - 1995 - Monads for functional programming.pdf;/Users/igormoreno/Zotero/storage/WEN8YY4L/3-540-59451-5_2.html}
}

@book{wadlerProgrammingLanguageFoundations2020,
  title = {Programming {{Language Foundations}} in {{Agda}}},
  author = {Wadler, Philip and Kokke, Wen and Siek, Jeremy G.},
  year = {2020},
  month = jul,
  abstract = {This book is an introduction to programming language theory using the proof assistant Agda.}
}

@article{wadlerPropositionsTypes2015,
  title = {Propositions as Types},
  author = {Wadler, Philip},
  year = {2015},
  month = nov,
  journal = {Communications of the ACM},
  volume = {58},
  number = {12},
  pages = {75--84},
  issn = {0001-0782},
  doi = {10.1145/2699407},
  urldate = {2020-10-09},
  abstract = {Connecting mathematical logic and computation, it ensures that some aspects of programming are absolute.},
  annotation = {00146},
  file = {/Users/igormoreno/Zotero/storage/7UXGH87L/propositions-as-types.pdf;/Users/igormoreno/Zotero/storage/JB8MTNY4/Wadler - 2015 - Propositions as types.pdf}
}

@article{wadlerPropositionsTypes2015a,
  ids = {wadlerPropositionsTypes2015},
  title = {Propositions as Types},
  author = {Wadler, Philip},
  year = {2015},
  month = nov,
  journal = {Communications of the ACM},
  volume = {58},
  number = {12},
  pages = {75--84},
  issn = {0001-0782},
  doi = {10.1145/2699407},
  urldate = {2021-10-28},
  abstract = {Connecting mathematical logic and computation, it ensures that some aspects of programming are absolute.},
  file = {/Users/igormoreno/Zotero/storage/EWR5DUIE/Wadler - 2015 - Propositions as types.pdf}
}

@inproceedings{wadlerTheoremsFree1989,
  title = {Theorems for Free!},
  booktitle = {Proceedings of the Fourth International Conference on {{Functional}} Programming Languages and Computer Architecture},
  author = {Wadler, Philip},
  year = {1989},
  month = nov,
  series = {{{FPCA}} '89},
  pages = {347--359},
  publisher = {{Association for Computing Machinery}},
  address = {{Imperial College, London, United Kingdom}},
  doi = {10.1145/99370.99404},
  urldate = {2020-05-12},
  isbn = {978-0-89791-328-7},
  annotation = {00969},
  file = {/Users/igormoreno/Zotero/storage/BM3N56PR/Wadler - 1989 - Theorems for free!.pdf}
}

@article{waguespackVisualMetaphorsTeaching1998,
  title = {Visual {{Metaphors}} for {{Teaching Programming Concepts}}},
  author = {Waguespack, Leslie J},
  year = {1998},
  journal = {SIGCSE Bull.},
  volume = {21},
  number = {1},
  pages = {5},
  abstract = {This paper presents a system of visual metaphors used in a introductory programming comse using Pascal. The visual metaphors represent programming concepts (data types, variables, arrays, records, files, modules, module interfaces and parameter passing, and dynamic storage) that are often difficult for beginning students to learn. The metaphors are used to accelerate the students' learning process and improve the overall comprehension of programs as structured objects. The system of metaphors is used in the first course for majors, Foundations of Programming, in the Computer Information Systems curriculum at Bentley College.},
  langid = {english},
  keywords = {To Read},
  file = {/Users/igormoreno/Zotero/storage/5L4XA6QM/Waguespack - 1998 - Visual Metaphors for Teaching Programming Concepts.pdf}
}

@inproceedings{waiteConversationalClassroom2003,
  title = {The Conversational Classroom},
  booktitle = {Proceedings of the 34th {{SIGCSE}} Technical Symposium on {{Computer}} Science Education},
  author = {Waite, William M. and Jackson, Michele H. and Diwan, Amer},
  year = {2003},
  month = jan,
  series = {{{SIGCSE}} '03},
  pages = {127--131},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/611892.611950},
  urldate = {2023-11-15},
  abstract = {Concepts taught in large, lower-division computer science courses are carefully explained in standard textbooks. Thus we hypothesized that the classroom experience should not consist primarily of a restatement of those explanations by the professor. Instead, it should provide an opportunity for the students to learn through a process of conversation among themselves and with the professor. We were able to establish such a process in a sophomore-level course with an enrollment of 116 students. This change led to a doubling of the percentage of A and A- grades compared to historical values.},
  isbn = {978-1-58113-648-7},
  keywords = {classroom management,communication skills,course pedagogy,CS educational research,curriculum issues},
  file = {/Users/igormoreno/Zotero/storage/8NRJ88YW/Waite et al - 2003 - The conversational classroom.pdf}
}

@inproceedings{waiteDesignImplementationModern2006,
  title = {Design and Implementation of a Modern Compiler Course},
  booktitle = {Proceedings of the 11th Annual {{SIGCSE}} Conference on {{Innovation}} and Technology in Computer Science Education},
  author = {Waite, William M. and Jarrahian, Assad and Jackson, Michele H. and Diwan, Amer},
  year = {2006},
  month = jun,
  series = {{{ITICSE}} '06},
  pages = {18--22},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1140124.1140132},
  urldate = {2023-11-15},
  abstract = {Current literature states that the undergraduate curriculum can no longer afford the luxury of a traditional compiler construction course. Nevertheless, there is an increasing need for an understanding of how to design and implement domain-specific languages. This paper presents a modern course in compiler construction, designed to provide a student with the capability of quickly constructin robust processors for a variety of language-related applications.},
  isbn = {978-1-59593-055-2},
  keywords = {abstraction,course pedagogy,curriculum issues,programming languages/paradigms,student culture,tools},
  file = {/Users/igormoreno/Zotero/storage/U3LHFPZP/Waite et al - 2006 - Design and implementation of a modern compiler course.pdf}
}

@article{waiteDigitalTechnologyUsing2022,
  title = {Digital {{Technology}} \textendash{} {{Using}}, {{Understanding}} and {{Creating}}},
  author = {Waite, Jane and Quille, Keith},
  year = {2022},
  pages = {57},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/6BSPZZ3G/Waite and Quille - Digital Technology – Using, Understanding and Crea.pdf}
}

@inproceedings{waiteStudentCultureVs2004,
  title = {Student Culture vs Group Work in Computer Science},
  booktitle = {Proceedings of the 35th {{SIGCSE}} Technical Symposium on {{Computer}} Science Education},
  author = {Waite, William M. and Jackson, Michele H. and Diwan, Amer and Leonardi, Paul M.},
  year = {2004},
  month = mar,
  series = {{{SIGCSE}} '04},
  pages = {12--16},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/971300.971308},
  urldate = {2023-11-15},
  abstract = {Our industrial advisory boards tell us that our students are well prepared technically, but they lack important group work skills. Simply adding project courses and requiring that assignments be done in groups has not improved the situation. A careful study of student culture in Computer Science has uncovered barriers to collaboration, which can be overcome only by pervasive changes in the way we approach our curriculum.},
  isbn = {978-1-58113-798-9},
  keywords = {classroom management,communication skills,course pedagogy,CS educational research,curriculum issues},
  file = {/Users/igormoreno/Zotero/storage/ELX4M6EU/Waite et al - 2004 - Student culture vs group work in computer science.pdf}
}

@inproceedings{waiteUnpluggedComputingSemantic2019,
  title = {Unplugged {{Computing}} and {{Semantic Waves}}: {{Analysing Crazy Characters}}},
  shorttitle = {Unplugged {{Computing}} and {{Semantic Waves}}},
  booktitle = {Proceedings of the 1st {{UK}} \& {{Ireland Computing Education Research Conference}}},
  author = {Waite, Jane and Maton, Karl and Curzon, Paul and Tuttiett, Lucinda},
  year = {2019},
  month = sep,
  series = {{{UKICER}}},
  pages = {1--7},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3351287.3351291},
  urldate = {2021-04-04},
  abstract = {We explore how Legitimation Code Theory, and, in particular, semantic waves, provides a useful way to understand what makes unplugged computing activities effective (or not) in the classroom. We overview the theory, discuss how it applies to unplugged activities, and describe a case study where we apply it to a specific, widely used, unplugged activity. In particular, we show that the published lesson plan follows a semantic wave. We suggest that semantic waves are useful both in developing and reviewing lesson plans around unplugged (and other) computing activities. They also have great potential in teacher training and continuous professional development of computing teachers.},
  isbn = {978-1-4503-7257-2},
  keywords = {Legitimation Code Theory,semantic profile,semantic waves,Unplugged computing},
  file = {/Users/igormoreno/Zotero/storage/VF8XBSZL/Waite et al - 2019 - Unplugged Computing and Semantic Waves.pdf}
}

@inproceedings{walkerTeachingIntegerSecurity2019,
  title = {Teaching {{Integer Security Using Simple Visualizations}}},
  booktitle = {Proceedings of the 2019 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Walker, James and Wang, Man and Carr, Steven and Mayo, Jean and Shene, Ching-Kuang},
  year = {2019},
  month = jul,
  pages = {513--519},
  publisher = {{ACM}},
  address = {{Aberdeen Scotland Uk}},
  doi = {10.1145/3304221.3319760},
  urldate = {2021-06-15},
  abstract = {Integer errors can introduce significant vulnerabilities into C programs. We have developed a program analysis and visualization tool to help students understand integer representation and type conversions with the goal to help students avoid introducing these errors into the code they develop. The visualization is through the Integer Representation (IR) window within a larger system for analysis and visualization of security issues in C programs. The system is called the Visualization and Analysis for C Code Security (VACCS) system. In this paper, we describe our experience with teaching fundamental aspects of integer security in a junior-level systems programming course, the IR window, and an evaluation of the tool. Our results indicate that students found the tool to be useful and that it enhanced the course in which it was used.},
  isbn = {978-1-4503-6895-7},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/S3J3TRQ8/Walker et al. - 2019 - Teaching Integer Security Using Simple Visualizati.pdf}
}

@article{wandOntologicalModelInformation1990,
  title = {An Ontological Model of an Information System},
  author = {Wand, Y. and Weber, R.},
  year = {1990},
  month = nov,
  journal = {IEEE Transactions on Software Engineering},
  volume = {16},
  number = {11},
  pages = {1282--1292},
  issn = {1939-3520},
  doi = {10.1109/32.60316},
  abstract = {An ontological model of an information system that provides precise definitions of fundamental concepts like system, subsystem, and coupling is proposed. This model is used to analyze some static and dynamic properties of an information system and to examine the question of what constitutes a good decomposition of an information system. Some of the major types of information system formalisms that bear on the authors' goals and their respective strengths and weaknesses relative to the model are briefly reviewed. Also articulated are some of the fundamental notions that underlie the model. Those basic notions are then used to examine the nature and some dynamics of system decomposition. The model's predictive power is discussed.{$<>$}},
  keywords = {Business,Computer science,Context modeling,coupling,decomposition,dynamic properties,Information analysis,information system,Information systems,ontological model,Ontologies,Predictive models,predictive power,software engineering,Specification languages,static properties,subsystem,system,US Department of Commerce},
  annotation = {00832},
  file = {/Users/igormoreno/Zotero/storage/YMLXGTN6/Wand and Weber - 1990 - An ontological model of an information system.pdf;/Users/igormoreno/Zotero/storage/UFV4PQHX/60316.html}
}

@article{wangConceptualChangeText1991,
  title = {Conceptual Change Text versus Traditional Text and Application Questions versus No Questions in Learning about Electricity},
  author = {Wang, Tianyu and Andre, Thomas},
  year = {1991},
  month = apr,
  journal = {Contemporary Educational Psychology},
  volume = {16},
  number = {2},
  pages = {103--116},
  issn = {0361-476X},
  doi = {10.1016/0361-476X(91)90031-F},
  urldate = {2021-03-21},
  abstract = {The present study investigated the effect of conceptual change text and application questions on learning electricity concepts. In the conditions most similar to typical classroom situations, conceptual change text, as compared to traditional text, improved acquisition of qualitative concepts about simple electrical circuits. Similarly, subjects who received application questions did better than subjects who received no questions. Subjects who received conceptual change text also were more likely to display a more developmentally advanced model of electrical circuits on the post-test. However, both the conceptual change text variable and the application question variable interacted with the presence or absence of a pretest and sex of the subject. The implications of these results for the instructional theory of conceptual change and for instructional practice were discussed.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/S3HFVH3S/Wang e Andre - 1991 - Conceptual change text versus traditional text and.pdf;/Users/igormoreno/Zotero/storage/YK98I7PI/0361476X9190031F.html}
}

@inproceedings{wangEvaluatingUsefulnessIRbased2015,
  title = {Evaluating the Usefulness of {{IR-based}} Fault Localization Techniques},
  booktitle = {Proceedings of the 2015 {{International Symposium}} on {{Software Testing}} and {{Analysis}}},
  author = {Wang, Qianqian and Parnin, Chris and Orso, Alessandro},
  year = {2015},
  month = jul,
  series = {{{ISSTA}} 2015},
  pages = {1--11},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2771783.2771797},
  urldate = {2021-04-08},
  abstract = {Software debugging is tedious and time consuming. To reduce the manual effort needed for debugging, researchers have proposed a considerable number of techniques to automate the process of fault localization; in particular, techniques based on information retrieval (IR) have drawn increased attention in recent years. Although reportedly effective, these techniques have some potential limitations that may affect their performance. First, their effectiveness is likely to depend heavily on the quality of the bug reports; unfortunately, high-quality bug reports that contain rich information are not always available. Second, these techniques have not been evaluated through studies that involve actual developers, which is less than ideal, as purely analytical evaluations can hardly show the actual usefulness of debugging techniques. The goal of this work is to evaluate the usefulness of IR-based techniques in real-world scenarios. Our investigation shows that bug reports do not always contain rich information, and that low-quality bug reports can considerably affect the effectiveness of these techniques. Our research also shows, through a user study, that high-quality bug reports benefit developers just as much as they benefit IR-based techniques. In fact, the information provided by IR-based techniques when operating on high-quality reports is only helpful to developers in a limited number of cases. And even in these cases, such information only helps developers get to the faulty file quickly, but does not help them in their most time consuming task: understanding and fixing the bug within that file.},
  isbn = {978-1-4503-3620-8},
  keywords = {Fault localization,information retrieval,user studies},
  file = {/Users/igormoreno/Zotero/storage/JRUEXQYR/Wang et al. - 2015 - Evaluating the usefulness of IR-based fault locali.pdf}
}

@inproceedings{wangExpressionProblemTrivially2016,
  title = {The {{Expression Problem}}, {{Trivially}}!},
  booktitle = {Proceedings of the 15th {{International Conference}} on {{Modularity}}},
  author = {Wang, Yanlin and Oliveira, Bruno C. d. S.},
  year = {2016},
  series = {{{MODULARITY}} 2016},
  pages = {37--41},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2889443.2889448},
  urldate = {2018-11-25},
  abstract = {This paper presents a novel and simple solution to Wadler's Expression Problem that works in conventional object-oriented languages. Unlike all existing solutions in Java-like languages, this new solution does not use any kind of generics: it relies only on subtyping. The key to the solution is the use of covariant type refinement of return types (or fields): a simple feature available in many object-oriented languages, but not as widely known or used as it should be. We believe that our results present valuable insights for researchers and programming language designers interested in extensibility. Furthermore our results have immediate applicability as practical design patterns for programmers interested in improving extensibility of their programs.},
  isbn = {978-1-4503-3995-7},
  keywords = {Design patterns,Expression problem,Extensibility,Modularity,Object-oriented programming},
  annotation = {00012},
  file = {/Users/igormoreno/Zotero/storage/T2QW94UZ/Wang and Oliveira - 2016 - The Expression Problem, Trivially!.pdf}
}

@article{wangMathematicalFormulaRepresentation,
  title = {Mathematical {{Formula Representation}} via {{Tree Embeddings}}},
  author = {Wang, Zichao and Lan, Andrew and Baraniuk, Richard},
  abstract = {We propose a new framework for learning formula representations using tree embeddings to facilitate search and similar content retrieval in textbooks containing mathematical (and possibly other types of) formula. By representing each symbolic formula (such as math equation) as an operator tree, we can explicitly capture its inherent structural and semantic properties. Our framework consists of a tree encoder that encodes the formula's operator tree into a vector and a tree decoder that generates a formula from a vector in operator tree format. To improve the quality of formula tree generation, we develop a novel tree beam search algorithm that is of independent scientific interest. We validate our framework on a formula reconstruction task and a similar formula retrieval task on a new real-world dataset of over 770k formulae collected online. Our experimental results show that our framework significantly outperforms various baselines.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/8Q5GIBKP/Wang et al. - Mathematical Formula Representation via Tree Embed.pdf}
}

@article{wangRefactoringPatternMatching2013,
  title = {Refactoring Pattern Matching},
  author = {Wang, Meng and Gibbons, Jeremy and Matsuda, Kazutaka and Hu, Zhenjiang},
  year = {2013},
  month = nov,
  journal = {Science of Computer Programming},
  series = {Special Section on {{Mathematics}} of {{Program Construction}} ({{MPC}} 2010) and {{Special}} Section on Methodological Development of Interactive Systems from {{Interaccion}} 2011},
  volume = {78},
  number = {11},
  pages = {2216--2242},
  issn = {0167-6423},
  doi = {10.1016/j.scico.2012.07.014},
  urldate = {2019-03-12},
  abstract = {Defining functions by pattern matching over the arguments is advantageous for understanding and reasoning, but it tends to expose the implementation of a datatype. Significant effort has been invested in tackling this loss of modularity; however, decoupling patterns from concrete representations while maintaining soundness of reasoning has been a challenge. Inspired by the development of invertible programming, we propose an approach to program refactoring based on a right-invertible language rinv\textemdash every function has a right (or pre-) inverse. We show how this new design is able to permit a smooth incremental transition from programs with algebraic datatypes and pattern matching, to ones with proper encapsulation, while maintaining simple and sound reasoning.},
  keywords = {Abstract datatypes,Bidirectional Programming,Functional Logic Programming,Functional programming,Fusion,Invertible programming,Pattern matching,Pattern Matching,Refactoring,Reversible computing},
  annotation = {00017},
  file = {/Users/igormoreno/Zotero/storage/RUP4AKWX/Wang et al. - 2013 - Refactoring pattern matching.pdf;/Users/igormoreno/Zotero/storage/RPJ5YKGS/S0167642312001426.html}
}

@article{wangRoleSyntacticComplexity1970,
  title = {The Role of Syntactic Complexity as a Determiner of Comprehensibility},
  author = {Wang, Marilyn D.},
  year = {1970},
  month = aug,
  journal = {Journal of Verbal Learning and Verbal Behavior},
  volume = {9},
  number = {4},
  pages = {398--404},
  issn = {0022-5371},
  doi = {10.1016/S0022-5371(70)80079-2},
  urldate = {2018-12-02},
  abstract = {The hypothesis that comprehensibility is a function of syntactic complexity was investigated. Seventy-five sentences, ranging in length from 5 to 29 words, each with a different syntactic structure, were tape-recorded and were then judged for comprehensibility by 40 Ss. The predictive validities of eight measures of surface structure complexity were evaluated by means of a stepwise multiple regression analysis of the comprehensibility ratings. Only three measures contributed significantly to the prediction of comprehensibility: mean linguistic depth, the number of self-embedded structures in the sentence, and the number of conjoining transformations in the derivational history of the sentence.},
  file = {/Users/igormoreno/Zotero/storage/FK9VD22N/Wang - 1970 - The role of syntactic complexity as a determiner of comprehensibility.pdf;/Users/igormoreno/Zotero/storage/YI3T86V5/S0022537170800792.html}
}

@inproceedings{wangUNIXvisualVisualizationTool2017,
  ids = {wangUNIXvisualVisualizationTool2017a},
  title = {{{UNIXvisual}}: {{A Visualization Tool}} for {{Teaching UNIX Permissions}}},
  shorttitle = {{{UNIXvisual}}},
  booktitle = {Proceedings of the 2017 {{ACM Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Wang, Man and Mayo, Jean and Shene, Ching-Kuang and Carr, Steve and Wang, Chaoli},
  year = {2017},
  month = jun,
  pages = {194--199},
  publisher = {{ACM}},
  address = {{Bologna Italy}},
  doi = {10.1145/3059009.3059031},
  urldate = {2021-06-14},
  abstract = {UNIXvisual is a user-level visualization tool designed to facilitate the study and teaching of access control in UNIX. UNIXvisual is aimed at both novice users, who need only to control access to their own files, and students of computer security, who need a deeper and more comprehensive understanding. The system allows students to analyze permission settings in the underlying real file system, as well as in a combination of real and pseudo file systems defined through a specification file. It also allows a student to trace the value and effect of credentials within an executing process. UNIXvisual gives instructors flexibility in the allocation of lecture time by supporting self-study, lowers the overhead required for teaching access control by running under an ordinary user account, and enhances learning through the use of visualization.},
  isbn = {978-1-4503-4704-4},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/B37HAZZD/Wang et al. - 2017 - UNIXvisual A Visualization Tool for Teaching UNIX.pdf;/Users/igormoreno/Zotero/storage/E2SMD3RY/Wang et al. - 2017 - UNIXvisual A Visualization Tool for Teaching UNIX.pdf}
}

@article{wasonDualProcessesReasoning1974,
  title = {Dual Processes in Reasoning?},
  author = {Wason, P. C. and Evans, J. {\relax ST}. B. T.},
  year = {1974},
  month = jan,
  journal = {Cognition},
  volume = {3},
  number = {2},
  pages = {141--154},
  issn = {0010-0277},
  doi = {10.1016/0010-0277(74)90017-1},
  urldate = {2018-12-02},
  abstract = {Previous results have shown that the introduction of negatives into the sentences used in a deductive problem affected behavior in a systematic way which was independent of the logical structure of the problem. In the present investigation, the subjects were asked to justify their responses when reasoning about such sentences. In accordance with previous results, the responses were dominated by the terms in the sentences regardless of whether they were negated. However, the justifications did vary when negatives were introduced in accordance with the logical consequences of the responses. The interpretation of these justifications as causes of behavior seemed implausible. It was suggested that they were rationalizations, or that there was at least some form of dual processing between behavior and conscious thought. R\'esum\'e Des r\'esultats pr\'ealables ont montr\'e que l'introduction de negatives dans les r\`egles utilis\'ees dans un probl\`eme de d\'eduction affectait le comportement de fa\c{c}on systematique ind\'ependante de la structure logique du probl\`eme. Dans l'enqu\^ete pr\'esente on demandait aux sujets de justifier leurs r\'eponses en raisonnant sur ces r\`egles. Conform\'ement aux r\'esultats pr\'ealables, les r\'eponses \'etaient domin\'ees par les termes dans les r\`egles sans se soucier de la n\'egation. Les justifications variaient n\'eanmoins quand on introduisait des n\'egatives conformes aux cons\'equences logiques des r\'eponses. L'interpretation de ces justifications comme cause du comportement paraissait peu plausible. Il est sugg\'er\'e qu'elles \'etaient des rationalisations o\`u qu'il y avait au moins quelque forme de traitement double entre comportement et pens\'ee consciente.},
  file = {/Users/igormoreno/Zotero/storage/UVJHE72C/Wason and Evans - 1974 - Dual processes in reasoning.pdf;/Users/igormoreno/Zotero/storage/WP4GNEXY/0010027774900171.html}
}

@inproceedings{watsonFailureRatesIntroductory2014,
  title = {Failure Rates in Introductory Programming Revisited},
  booktitle = {Proceedings of the 2014 Conference on {{Innovation}} \& Technology in Computer Science Education},
  author = {Watson, Christopher and Li, Frederick W.B.},
  year = {2014},
  month = jun,
  series = {{{ITiCSE}} '14},
  pages = {39--44},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2591708.2591749},
  urldate = {2022-11-07},
  abstract = {Whilst working on an upcoming meta-analysis that synthesized fifty years of research on predictors of programming performance, we made an interesting discovery. Despite several studies citing a motivation for research as the high failure rates of introductory programming courses, to date, the majority of available evidence on this phenomenon is at best anecdotal in nature, and only a single study by Bennedsen and Caspersen has attempted to determine a worldwide pass rate of introductory programming courses. In this paper, we answer the call for further substantial evidence on the CS1 failure rate phenomenon, by performing a systematic review of introductory programming literature, and a statistical analysis on pass rate data extracted from relevant articles. Pass rates describing the outcomes of 161 CS1 courses that ran in 15 different countries, across 51 institutions were extracted and analysed. An almost identical mean worldwide pass rate of 67.7\% was found. Moderator analysis revealed significant, but perhaps not substantial differences in pass rates based upon: grade level, country, and class size. However, pass rates were found not to have significantly differed over time, or based upon the programming language taught in the course. This paper serves as a motivation for researchers of introductory programming education, and provides much needed quantitative evidence on the potential difficulties and failure rates of this course.},
  isbn = {978-1-4503-2833-3},
  keywords = {cs1,fail rates,failure rates,introductory programming,pass rates,programming,statistics},
  file = {/Users/igormoreno/Zotero/storage/BJMB4X9I/Watson and Li - 2014 - Failure rates in introductory programming revisite.pdf}
}

@article{watsonTeachingConceptualChange1990,
  title = {Teaching for {{Conceptual Change}}: {{Confronting Children}}'s {{Experience}}},
  author = {Watson, Bruce and Konicek, Richard},
  year = {1990},
  journal = {The Phi Delta Kappan},
  volume = {71},
  number = {9},
  eprint = {20404253},
  eprinttype = {jstor},
  pages = {680--685},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/5MWSGS3U/Watson and Konicek - 1990 - Teaching for Conceptual Change Confronting Childr.pdf}
}

@article{wattenhoferUniversitiesHaveFuture,
  title = {Do {{Universities Have}} a {{Future}}?},
  author = {Wattenhofer, Roger},
  number = {135},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/37TNA9ZU/Wattenhofer - Do Universities Have a Future.pdf}
}

@article{waughEffectIntralistRepetition1962,
  title = {The Effect of Intralist Repetition on Free Recall},
  author = {Waugh, Nancy C.},
  year = {1962},
  month = sep,
  journal = {Journal of Verbal Learning and Verbal Behavior},
  volume = {1},
  number = {2},
  pages = {95--99},
  issn = {0022-5371},
  doi = {10.1016/S0022-5371(62)80004-8},
  urldate = {2018-12-02},
  abstract = {Summary The Ss were presented with lists of unrelated English words which they were to recall in any order. Within each list, four different words were repeated two, three, four, and five times, respectively. The proportion of repeated words that were recalled consistently exceeded the proportion predicted by the all-or-none hypothesis, which states that items are memorized either completely or not at all.},
  file = {/Users/igormoreno/Zotero/storage/CP3PGZPI/Waugh - 1962 - The effect of intralist repetition on free recall.pdf;/Users/igormoreno/Zotero/storage/55BXR4Z4/S0022537162800048.html}
}

@inproceedings{weberSoftwareEngineeringApproach1978,
  title = {A Software Engineering Approach to Data Base Systems},
  booktitle = {The {{IEEE Computer Society}}'s {{Second International Computer Software}} and {{Applications Conference}}, 1978. {{COMPSAC}} '78.},
  author = {Weber, H.},
  year = {1978},
  pages = {387--395},
  publisher = {{IEEE}},
  address = {{Chicago, IL}},
  doi = {10.1109/CMPSAC.1978.810419},
  urldate = {2020-06-22},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/ASDWFE4A/Weber - 1978 - A software engineering approach to data base systems.pdf}
}

@inproceedings{weill-tessierUsageJavaLanguage2021,
  title = {Usage of the {{Java Language}} by {{Novices}} over {{Time}}: {{Implications}} for {{Tool}} and {{Language Design}}},
  shorttitle = {Usage of the {{Java Language}} by {{Novices}} over {{Time}}},
  booktitle = {Proceedings of the 52nd {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {{Weill-Tessier}, Pierre and Costache, Alexandra Lucia and Brown, Neil C. C.},
  year = {2021},
  month = mar,
  pages = {328--334},
  publisher = {{ACM}},
  address = {{Virtual Event USA}},
  doi = {10.1145/3408877.3432408},
  urldate = {2021-07-12},
  abstract = {Java is a popular programming language for teaching at university level. BlueJ is a popular tool for teaching Java to beginners. We provide several analyses of Java use in BlueJ to answer three questions: what use is made of different parts of Java by beginners when learning to program; how has this pattern of use changed between 2013 and 2019 in a longstanding language such as Java; and to what extent do beginners follow the specific style that BlueJ is designed to guide them into? These analyses allow us to see what features are important in object-oriented introductory programming languages, which could inform language and tool designers \textendash{} and see to what extent the design of these programming tools can have an effect on the way the language is used. We find that many beginners disobey the guidelines that BlueJ promotes, and that patterns of Java use are generally stable over time \textendash{} but we do see decreased exception use and a change in target application domains away from GUI programming towards text processing. We conclude that programming languages for novices could have fewer built-in types but should retain rich libraries.},
  isbn = {978-1-4503-8062-1},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/9G68EWZN/Weill-Tessier et al. - 2021 - Usage of the Java Language by Novices over Time I.pdf}
}

@article{weintropAssessingComputationalThinking2021,
  title = {Assessing Computational Thinking: An Overview of the Field},
  shorttitle = {Assessing Computational Thinking},
  author = {Weintrop, David and Wise Rutstein, Daisy and Bienkowski, Marie and McGee, Steven},
  year = {2021},
  month = apr,
  journal = {Computer Science Education},
  volume = {31},
  number = {2},
  pages = {113--116},
  issn = {0899-3408, 1744-5175},
  doi = {10.1080/08993408.2021.1918380},
  urldate = {2023-03-16},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/TVPWIB8H/Weintrop et al. - 2021 - Assessing computational thinking an overview of t.pdf}
}

@article{weintropAssessingComputationalThinking2021a,
  title = {Assessing Computational Thinking: An Overview of the Field},
  shorttitle = {Assessing Computational Thinking},
  author = {Weintrop, David and Wise Rutstein, Daisy and Bienkowski, Marie and McGee, Steven},
  year = {2021},
  month = apr,
  journal = {Computer Science Education},
  volume = {31},
  number = {2},
  pages = {113--116},
  issn = {0899-3408, 1744-5175},
  doi = {10.1080/08993408.2021.1918380},
  urldate = {2023-03-16},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/CY3VB8WG/Weintrop et al. - 2021 - Assessing computational thinking an overview of t.pdf}
}

@inproceedings{weintropStartingScratchOutcomes2018,
  title = {Starting from {{Scratch}}: {{Outcomes}} of {{Early Computer Science Learning Experiences}} and {{Implications}} for {{What Comes Next}}},
  shorttitle = {Starting from {{Scratch}}},
  booktitle = {Proceedings of the 2018 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Weintrop, David and Hansen, Alexandria K. and Harlow, Danielle B. and Franklin, Diana},
  year = {2018},
  month = aug,
  pages = {142--150},
  publisher = {{ACM}},
  address = {{Espoo Finland}},
  doi = {10.1145/3230977.3230988},
  urldate = {2023-05-10},
  isbn = {978-1-4503-5628-2},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/SX2HAGAI/Weintrop et al. - 2018 - Starting from Scratch Outcomes of Early Computer .pdf}
}

@inproceedings{weintropUsingCommutativeAssessments2015,
  title = {Using {{Commutative Assessments}} to {{Compare Conceptual Understanding}} in {{Blocks-based}} and {{Text-based Programs}}},
  booktitle = {Proceedings of the Eleventh Annual {{International Conference}} on {{International Computing Education Research}}},
  author = {Weintrop, David and Wilensky, Uri},
  year = {2015},
  month = aug,
  series = {{{ICER}} '15},
  pages = {101--110},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2787622.2787721},
  urldate = {2020-10-13},
  abstract = {Blocks-based programming environments are becoming increasingly common in introductory programming courses, but to date, little comparative work has been done to understand if and how this approach affects students' emerging understanding of fundamental programming concepts. In an effort to understand how tools like Scratch and Blockly differ from more conventional text-based introductory programming languages with respect to conceptual understanding, we developed a set of "commutative" assessments. Each multiple-choice question on the assessment includes a short program that can be displayed in either a blocks- based or text-based form. The set of potential answers for each question includes the correct answer along with choices informed by prior research on novice programming misconceptions. In this paper we introduce the Commutative Assessment, discuss the theoretical and practical motivations for the assessment, and present findings from a study that used the assessment. The study had 90 high school students take the assessment at three points over the course of the first ten weeks of an introduction to programming course, alternating the modality (blocks vs. text) for each question over the course of the three administrations of the assessment. Our analysis reveals differences on performance between blocks-based and text-based questions as well as differences in the frequency of misconceptions based on the modality. Future work, potential implications, and limitations of these findings are also discussed.},
  isbn = {978-1-4503-3630-7},
  keywords = {assessment,blocks-based programming,high school computer science education,introductory programming environments},
  file = {/Users/igormoreno/Zotero/storage/3SHS4KMJ/Weintrop and Wilensky - 2015 - Using Commutative Assessments to Compare Conceptual Understanding in.pdf}
}

@inproceedings{weirichSystemFCExplicit2013,
  title = {System {{FC}} with {{Explicit Kind Equality}}},
  booktitle = {Proceedings of the 18th {{ACM SIGPLAN International Conference}} on {{Functional Programming}}},
  author = {Weirich, Stephanie and Hsu, Justin and Eisenberg, Richard A.},
  year = {2013},
  series = {{{ICFP}} '13},
  pages = {275--286},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2500365.2500599},
  urldate = {2019-06-28},
  abstract = {System FC, the core language of the Glasgow Haskell Compiler, is an explicitly-typed variant of System F with first-class type equality proofs called coercions. This extensible proof system forms the foundation for type system extensions such as type families (type-level functions) and Generalized Algebraic Datatypes (GADTs). Such features, in conjunction with kind polymorphism and datatype promotion, support expressive compile-time reasoning. However, the core language lacks explicit kind equality proofs. As a result, type-level computation does not have access to kind-level functions or promoted GADTs, the type-level analogues to expression-level features that have been so useful. In this paper, we eliminate such discrepancies by introducing kind equalities to System FC. Our approach is based on dependent type systems with heterogeneous equality and the "Type-in-Type" axiom, yet it preserves the metatheoretic properties of FC. In particular, type checking is simple, decidable and syntax directed. We prove the preservation and progress theorems for the extended language.},
  isbn = {978-1-4503-2326-0},
  keywords = {dependent types,equality,haskell},
  annotation = {00040},
  file = {/Users/igormoreno/Zotero/storage/5Z6C5FFE/Weirich et al. - 2013 - System FC with Explicit Kind Equality.pdf}
}

@article{weiserProgramSlicing1984,
  title = {Program {{Slicing}}},
  author = {Weiser, Mark},
  year = {1984},
  month = jul,
  journal = {IEEE Transactions on Software Engineering},
  volume = {SE-10},
  number = {4},
  pages = {352--357},
  issn = {1939-3520},
  doi = {10.1109/TSE.1984.5010248},
  abstract = {Program slicing is a method for automatically decomposing programs by analyzing their data flow and control flow. Starting from a subset of a program's behavior, slicing reduces that program to a minimal form which still produces that behavior. The reduced program, called a ``slice,'' is an independent program guaranteed to represent faithfully the original program within the domain of the specified subset of behavior. Some properties of slices are presented. In particular, finding statement-minimal slices is in general unsolvable, but using data flow analysis is sufficient to find approximate slices. Potential applications include automatic slicing tools for debuggng and parallel processing of slices.},
  keywords = {Algorithms,Data flow analysis,Data mining,debugging,Debugging,human factors,Merging,parallel processing,Probability density function,program maintenance,program metrics,Program processors,slicing,software tools,Trajectory},
  file = {/Users/igormoreno/Zotero/storage/D8VSDQVZ/Weiser - 1984 - Program Slicing.pdf;/Users/igormoreno/Zotero/storage/UZEV5VSB/Weiser - 1984 - Program Slicing.pdf;/Users/igormoreno/Zotero/storage/YH3FHSBZ/stamp.html}
}

@article{weiTrackingStudentsPerformance2016,
  title = {Tracking Students' Performance to Assess Correlations among Computer Science Programming Series Courses},
  author = {Wei, Duo (Helen) and Burrows, Arron Nappen},
  year = {2016},
  month = oct,
  journal = {Journal of Computing Sciences in Colleges},
  volume = {32},
  number = {1},
  pages = {9--16},
  issn = {1937-4771},
  abstract = {The objective of this paper is to investigate the relationships among a series of computer programming courses and the impact of a basic programming class upon the subsequent advanced programming courses. It describes a direct measure that kept track of the performance of 195 students over eight semesters within a series of computer science programming courses. Analysis of these correlations shows that, in a series programming courses, student performance in the basic programming class can predict their performance in a data structures course. However, the performance of the students in the advanced level programming course is not substantially predicted by basic programming.},
  annotation = {00003},
  file = {/Users/igormoreno/Zotero/storage/I4EEDHLR/Wei and Burrows - 2016 - Tracking students' performance to assess correlations among computer science.pdf}
}

@misc{WelcomePLTRedex,
  title = {Welcome to {{PLT Redex}}},
  urldate = {2020-11-12},
  howpublished = {https://redex.racket-lang.org/index.html},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/A2MZK8UU/index.html}
}

@article{wermelingerUsingGitHubCopilot2023,
  title = {Using {{GitHub Copilot}} to {{Solve Simple Programming Problems}}},
  author = {Wermelinger, Michel},
  year = {2023},
  abstract = {The teaching and assessment of introductory programming involves writing code that solves a problem described by text. Previous research found that OpenAI's Codex, a natural language machine learning model trained on billions of lines of code, performs well on many programming problems, often generating correct and readable Python code. GitHub's version of Codex, Copilot, is freely available to students. This raises pedagogic and academic integrity concerns. Educators need to know what Copilot is capable of, in order to adapt their teaching to AI-powered programming assistants. Previous research evaluated the most performant Codex model quantitatively, e.g. how many problems have at least one correct suggestion that passes all tests. Here I evaluate Copilot instead, to see if and how it differs from Codex, and look qualitatively at the generated suggestions, to understand the limitations of Copilot. I also report on the experience of using Copilot for other activities asked of students in programming courses: explaining code, generating tests and fixing bugs. The paper concludes with a discussion of the implications of the observed capabilities for the teaching of programming.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/WMIURCQ7/Wermelinger - 2023 - Using GitHub Copilot to Solve Simple Programming P.pdf}
}

@book{werthnerPerspectivesDigitalHumanism2022,
  title = {Perspectives on {{Digital Humanism}}},
  editor = {Werthner, Hannes and Prem, Erich and Lee, Edward A. and Ghezzi, Carlo},
  year = {2022},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-030-86144-5},
  urldate = {2022-02-06},
  isbn = {978-3-030-86143-8 978-3-030-86144-5},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/FW8G2ZBY/Werthner et al. - 2022 - Perspectives on Digital Humanism.pdf}
}

@inproceedings{wettelVisualizingSoftwareSystems2007,
  title = {Visualizing {{Software Systems}} as {{Cities}}},
  booktitle = {2007 4th {{IEEE International Workshop}} on {{Visualizing Software}} for {{Understanding}} and {{Analysis}}},
  author = {Wettel, R. and Lanza, M.},
  year = {2007},
  month = jun,
  pages = {92--99},
  doi = {10.1109/VISSOF.2007.4290706},
  abstract = {This paper presents a 3D visualization approach which gravitates around the city metaphor, i.e., an object-oriented software system is represented as a city that can be traversed and interacted with: the goal is to give the viewer a sense of locality to ease program comprehension. The key point in conceiving a realistic software city is to map the information about the source code in meaningful ways in order to take the approach beyond beautiful pictures. We investigated several concepts that contribute to the urban feeling, such as appropriate layouts, topology, and facilities to ease navigation and interaction. We experimented our approach on a number of systems, and present our findings.},
  keywords = {3D visualization approach,Cities and towns,data visualisation,Displays,Java,Navigation,object-oriented programming,object-oriented software system,Packaging,program comprehension,program visualisation,realistic software city,Software systems,Software tools,source code,To Read,Topology,Visualization},
  file = {/Users/igormoreno/Zotero/storage/4V78JZ9U/Wettel and Lanza - 2007 - Visualizing Software Systems as Cities.pdf;/Users/igormoreno/Zotero/storage/CZ6EEW53/4290706.html}
}

@article{wetzelsAdaptingPriorKnowledge2011,
  title = {Adapting Prior Knowledge Activation: {{Mobilisation}}, Perspective Taking, and Learners' Prior Knowledge},
  shorttitle = {Adapting Prior Knowledge Activation},
  author = {Wetzels, Sandra A. J. and Kester, Liesbeth and {van Merri{\"e}nboer}, Jeroen J. G.},
  year = {2011},
  month = jan,
  journal = {Computers in Human Behavior},
  series = {Current {{Research Topics}} in {{Cognitive Load Theory}}},
  volume = {27},
  number = {1},
  pages = {16--21},
  issn = {0747-5632},
  doi = {10.1016/j.chb.2010.05.004},
  urldate = {2018-11-06},
  abstract = {This study investigates the effects of two prior knowledge activation strategies, namely, mobilisation and perspective taking, on learning. It is hypothesised that the effectiveness of these strategies is influenced by learners' prior domain knowledge. More specifically, mobilisation is expected to be the most effective activation strategy at lower levels of prior knowledge. Mobilisation is a bottom-up oriented strategy that serves a broad stage-setting function. It provides learners with a relevant context in which new information can be integrated, which might be especially beneficial for learners with lower levels of prior knowledge to help them extend their limited knowledge base. As prior knowledge increases, perspective taking is expected to become the most effective strategy for activating learners' prior knowledge. Perspective taking is a top-down oriented strategy that results in the activation of a corresponding schema. This schema guides the selection and processing of information relevant to the schema, which might especially support learners with higher levels of prior knowledge to refine their already elaborated knowledge base. The effectiveness of the activation strategies (in terms of learning task performance) was indeed influenced by learners' prior knowledge in the hypothesised direction.},
  keywords = {Mobilisation,Perspective taking,Prior knowledge,Prior knowledge activation},
  file = {/Users/igormoreno/Zotero/storage/SWWZR3QX/Wetzels et al - 2011 - Adapting prior knowledge activation.pdf;/Users/igormoreno/Zotero/storage/SG9JXQWP/S074756321000124X.html}
}

@inproceedings{weychenDesigningWebbasedVan2005,
  title = {Designing a {{Web-based}} van {{Hiele}} Model for Teaching and Learning Computer Programming to Promote Collaborative Learning},
  booktitle = {Fifth {{IEEE International Conference}} on {{Advanced Learning Technologies}} ({{ICALT}}'05)},
  author = {Wey Chen, J.},
  year = {2005},
  pages = {313--317},
  publisher = {{IEEE}},
  address = {{Kaohsiung, Taiwan}},
  doi = {10.1109/ICALT.2005.107},
  urldate = {2020-06-22},
  abstract = {Computer programming teaching is often based upon the traditional lecture format. However, this methodology may not be the best way to help many students actively understand underlying concepts. This paper formulates an alternative pedagogical approach that emphasizes the constructive and problem-solving process in computer programming teaching. The proposed modified van Hiele Model has focused on the conceptual knowledge of thinking levels in programming and on the role of instruction in raising levels of critical thinking for a web-based implementation. Collectively, collaborative learning tools include: discussion boards, e-mails, internet assignment units, tutorial units, quick-run units, and expert templates, which are all integrated into the environment to increase student satisfaction and achievement by stimulating student motivation and encouraging the perception of problem solving and programming as a learning project.},
  isbn = {978-0-7695-2338-5},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/DD6EC5IG/Wey Chen - 2005 - Designing a Web-based van Hiele model for teaching and learning computer.pdf}
}

@inproceedings{whalleyQualitativeThinkaloudStudy2014,
  title = {A Qualitative Think-Aloud Study of Novice Programmers' Code Writing Strategies},
  booktitle = {Proceedings of the 2014 Conference on {{Innovation}} \& Technology in Computer Science Education},
  author = {Whalley, Jacqueline and Kasto, Nadia},
  year = {2014},
  month = jun,
  series = {{{ITiCSE}} '14},
  pages = {279--284},
  publisher = {{Association for Computing Machinery}},
  address = {{Uppsala, Sweden}},
  doi = {10.1145/2591708.2591762},
  urldate = {2020-02-14},
  abstract = {This paper presents part of a larger long term study into the cognitive aspects of the early stages of learning to write computer programs Tasks designed to trigger learning events were used to provide the opportunity to observe student learning, in terms of the development and modification of cognitive structures or schemata, during think aloud sessions. A narrative analysis of six students' attempts to solve these tasks is presented. The students' progression in learning and attitudinal approaches to learning is examined and provides some insight into the cognitive processes involved in learning computer programming.},
  isbn = {978-1-4503-2833-3},
  keywords = {novice programmers,schemas,think aloud,vygotsky},
  file = {/Users/igormoreno/Zotero/storage/7K73LG72/Whalley and Kasto - 2014 - A qualitative think-aloud study of novice programmers' code writing strategies.pdf}
}

@misc{WhatEveryComputer,
  title = {What Every Computer Science Major Should Know},
  urldate = {2020-06-06},
  howpublished = {http://matt.might.net/articles/what-cs-majors-should-know/},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/R6K9ZFK8/what-cs-majors-should-know.html}
}

@misc{WhatLinguisticComplexity2015,
  title = {What {{Is Linguistic Complexity}} and {{How}} to {{Measure It}}?},
  year = {2015},
  month = nov,
  journal = {Languages Of The World},
  urldate = {2021-10-10},
  abstract = {[Note to Readers: the following is my translation from Russian of Alexander Piperski's lecture posted on PostNauka.ru, posted here with his permission.] ~ We all have some ideas about what languages \hspace{0pt}\hspace{0pt}are simpler and, conversely, what languages \hspace{0pt}\hspace{0pt}are more complex. If you ask a man on the street, what languages \hspace{0pt}\hspace{0pt}are the most complex, you [\ldots ]},
  langid = {american},
  file = {/Users/igormoreno/Zotero/storage/EYFPFD34/what-is-linguistic-complexity-and-how-to-measure-it.html}
}

@article{whatworksclearinghouseTeachingStrategiesImproving2015,
  title = {Teaching {{Strategies}} for {{Improving Algebra Knowledge}} in {{Middle}} and {{High School Students}}},
  author = {{What Works Clearinghouse}},
  year = {2015},
  month = apr,
  pages = {71},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/6XK6IU8L/What Works Clearinghouse - 2015 - Teaching Strategies for Improving Algebra Knowledge in Middle and High School.pdf}
}

@article{wiemanTeachingPracticesInventory2014,
  title = {The {{Teaching Practices Inventory}}: {{A New Tool}} for {{Characterizing College}} and {{University Teaching}} in {{Mathematics}} and {{Science}}},
  shorttitle = {The {{Teaching Practices Inventory}}},
  author = {Wieman, Carl and Gilbert, Sarah},
  editor = {Dolan, Erin},
  year = {2014},
  month = sep,
  journal = {CBE\textemdash Life Sciences Education},
  volume = {13},
  number = {3},
  pages = {552--569},
  issn = {1931-7913},
  doi = {10.1187/cbe.14-02-0023},
  urldate = {2018-10-06},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/9XNM9HTR/Wieman and Gilbert - 2014 - The Teaching Practices Inventory.pdf}
}

@book{wigginsUnderstandingDesignExpanded2005,
  title = {Understanding by {{Design}}, {{Expanded}} 2nd {{Edition}}({{Package May Vary}})},
  author = {Wiggins, Grant and McTighe, Jay},
  year = {2005},
  month = jul,
  edition = {2nd edition},
  publisher = {{Pearson}},
  address = {{Upper Saddle River, N.J}},
  abstract = {The highly anticipated second edition of Understanding by Design poses the core, essential questions of understanding and design, and provides readers with practical solutions for the teacher-designer.~ The book opens by analyzing the logic of backward design as an alternative to coverage and activity-oriented plans.~ Though backward from habit, this approach brings more focus and coherence to instruction.~ The book proposes a multifaceted approach, with the six ``facets'' of understanding.~ The facets combine with backward design to provide a powerful, expanded array of practical tools and strategies for designing curriculum, instruction, and assessments that lead students at all grade levels to genuine understanding.~ The second edition, a refined work, has been thoroughly and extensively revised, updated, and expanded, including improvement of the UbD Template, the key terms of UbD, dozens of worksheets, and some of the larger concepts. The authors have successfully put together a text that demonstrates what best practice in the design of learning looks like, enhancing for its audience their capability for creating more engaging and effective learning, whether the student is a third grader, a college freshman, or a faculty member.},
  isbn = {978-0-13-195084-9},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/3IM637DF/Figure-1.2-1-Page-Template-with-Design-Questions-for-Teachers.png;/Users/igormoreno/Zotero/storage/JJD42PCB/Figure-1.4-UbD-Design-Standards.png}
}

@book{wigginsUnderstandingDesignGuide2011,
  title = {The Understanding by Design Guide to Creating High-Quality Units},
  author = {Wiggins, Grant P. and McTighe, Jay},
  year = {2011},
  publisher = {{ASCD}},
  address = {{Alexandria, Va}},
  isbn = {978-1-4166-1149-3},
  langid = {english},
  lccn = {LB2806.15 .W545 2011},
  keywords = {Comprehension,Curriculum planning,Curriculum-based assessment,Learning,United States},
  file = {/Users/igormoreno/Zotero/storage/KI8HAZRP/Wiggins and McTighe - 2011 - The understanding by design guide to creating high.pdf}
}

@misc{williamf.deckerModernApproachTeaching,
  title = {A Modern Approach to Teaching Computer Organization and Assembly Programming},
  author = {{William F . Decker}},
  publisher = {{University of Iowa}},
  file = {/Users/igormoreno/Zotero/storage/MECQWXDM/William F . Decker - A modern approach to teaching computer organization and assembly programming.pdf}
}

@book{williamsStyleClarityGrace1990,
  title = {Style: Toward Clarity and Grace},
  shorttitle = {Style},
  author = {Williams, Joseph M.},
  year = {1990},
  series = {Chicago Guides to Writing, Editing, and Publishing},
  publisher = {{University of Chicago Press}},
  address = {{Chicago}},
  isbn = {978-0-226-89914-5},
  langid = {english},
  lccn = {PE1421 .W546 1990},
  keywords = {English language,Style},
  file = {/Users/igormoreno/Zotero/storage/72IR9JVB/WilliamCook-Slides.pdf;/Users/igormoreno/Zotero/storage/DSN6I38Q/Williams - 1990 - Style toward clarity and grace.pdf}
}

@inproceedings{wilsonEvaluationComputerGames2012,
  title = {Evaluation of {{Computer Games Developed}} by {{Primary School Children}} to {{Gauge Understanding}} of {{Programming Concepts}}},
  booktitle = {European {{Conference}} on {{Games Based Learning}}},
  author = {Wilson, Amanda and Hainey, Thomas and Connolly, Thomas},
  year = {2012},
  pages = {10},
  publisher = {{Academic Conferences International Limited}},
  abstract = {Under the Curriculum for Excellence (CfE) in Scotland, newer approaches such as games-based learning and games-based construction are being adopted to motivate and engage students. Construction of computer games is seen by some to be a highly motivational and practical approach at engaging children at Primary Education (PE) level in computer programming concepts. Gamesbased learning (GBL) and games-based construction both suffer from a dearth of empirical evidence supporting their validity as teaching and learning approaches. To address this issue, this paper will present the findings of observational research at PE level using Scratch as a tool to develop computer games using rudimentary programming concepts. A list of criteria will be compiled for reviewing the implementation of each participant to gauge the level of programming proficiency demonstrated. The study will review 29 games from Primary 4 to Primary 7 level and will present the overall results and results for each individual year. This study will contribute to the empirical evidence in games-based construction by providing the results of observational research across different levels of PE and will provide pedagogical guidelines for assessing programming ability using a games-based construction approach.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/LQLW9GHC/Wilson et al - 2012 - Evaluation of Computer Games Developed by Primary School Children to Gauge.pdf}
}

@misc{wilsonHowDesignEffective2019,
  title = {How to {{Design}} an {{Effective Lesson}}},
  author = {Wilson, Greg},
  year = {2019},
  month = jan,
  urldate = {2022-06-26},
  howpublished = {https://third-bit.com/talks/lesson-design/\#/},
  file = {/Users/igormoreno/Zotero/storage/ZAL7KGLR/lesson-design.html}
}

@book{wilsonTeachingTechTogether2019a,
  ids = {wilsonTeachingTechTogether2019},
  title = {Teaching {{Tech Together}}},
  author = {Wilson, Greg},
  year = {2019},
  publisher = {{Taylor \& Francis}},
  abstract = {How to create and deliver lessons that work and build a teaching community around them},
  isbn = {978-0-367-35328-5},
  annotation = {00012}
}

@article{wingComputationalThinking2006,
  title = {Computational Thinking},
  author = {Wing, Jeannette M.},
  year = {2006},
  month = mar,
  journal = {Communications of the ACM},
  volume = {49},
  number = {3},
  pages = {33--35},
  issn = {0001-0782, 1557-7317},
  doi = {10.1145/1118178.1118215},
  urldate = {2022-01-10},
  abstract = {It represents a universally applicable attitude and skill set everyone, not just computer scientists, would be eager to learn and use.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/8RAFRDCC/Wing - 2006 - Computational thinking.pdf}
}

@article{wingComputationalThinking2006a,
  title = {Computational Thinking},
  author = {Wing, Jeannette M.},
  year = {2006},
  month = mar,
  journal = {Communications of the ACM},
  volume = {49},
  number = {3},
  pages = {33--35},
  issn = {0001-0782},
  doi = {10.1145/1118178.1118215},
  urldate = {2022-01-12},
  abstract = {It represents a universally applicable attitude and skill set everyone, not just computer scientists, would be eager to learn and use.},
  file = {/Users/igormoreno/Zotero/storage/3SPL3ZKZ/Wing - 2006 - Computational thinking.pdf}
}

@article{wirthPerspectivesComputerScience1991,
  title = {Perspectives on Computer Science Education},
  author = {Wirth, Niklaus},
  year = {1991},
  month = jan,
  journal = {Education and Computing},
  volume = {7},
  number = {1-2},
  pages = {105--109},
  issn = {01679287},
  doi = {10.1016/S0167-9287(05)80086-X},
  urldate = {2018-11-06},
  abstract = {It is claimed that there should be a difference between education at the university level and that in a trade school. The student at the academic level should receive training in analyzing and abstraction in addition to building. Yet theoretical knowledge must be applied and should lead to clearer and neater designs. Another important goal is to learn to distinguish the essentials from the "bells and whistles,'" genuine needs from toys. The conclusion is that it may be hard to design a reliable and effective system, but it is even harder to design one that others will want to use.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/R2IU2EUZ/Wirth - 1991 - Perspectives on computer science education.pdf}
}

@inproceedings{wiseVisualizingNonvisualSpatial1995,
  title = {Visualizing the Non-Visual: Spatial Analysis and Interaction with Information from Text Documents},
  shorttitle = {Visualizing the Non-Visual},
  booktitle = {Proceedings of {{Visualization}} 1995 {{Conference}}},
  author = {Wise, J. A. and Thomas, J. J. and Pennock, K. and Lantrip, D. and Pottier, M. and Schur, A. and Crow, V.},
  year = {1995},
  month = oct,
  pages = {51--58},
  doi = {10.1109/INFVIS.1995.528686},
  abstract = {The paper describes an approach to IV that involves spatializing text content for enhanced visual browsing and analysis. The application arena is large text document corpora such as digital libraries, regulations and procedures, archived reports, etc. The basic idea is that text content from these sources may be transformed to a spatial representation that preserves informational characteristics from the documents. The spatial representation may then be visually browsed and analyzed in ways that avoid language processing and that reduce the analysts mental workload. The result is an interaction with text that more nearly resembles perception and action with the natural world than with the abstractions of written language.},
  keywords = {action,archived reports,data visualisation,digital libraries,Information analysis,information interaction,information retrieval,informational characteristics,large text document corpora,libraries,library automation,natural world,nonvisual visualization,perception,procedures,regulations,Software libraries,spatial analysis,spatial representation,text content,text content spatialization,text documents,visual analysis,visual browsing,visual databases,Visualization,word processing},
  file = {/Users/igormoreno/Zotero/storage/RQABHSAG/Wise et al - 1995 - Visualizing the non-visual.pdf;/Users/igormoreno/Zotero/storage/HIYPVZME/528686.html}
}

@article{wittmannBookReviewHart1982,
  title = {Book {{Review}}: {{K}}. {{M}}. {{Hart}} (Ed.), {{Children}}'s {{Understanding}} of {{Mathematics}}},
  author = {Wittmann, Erich},
  year = {1982},
  journal = {Educational Studies in Mathematics 13},
  pages = {113--116},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/M8A26NQR/Wittmann - 1982 - Book Review.pdf}
}

@book{wohlinExperimentationSoftwareEngineering2012,
  title = {Experimentation in {{Software Engineering}}},
  author = {Wohlin, Claes and Runeson, Per and H{\"o}st, Martin and Ohlsson, Magnus C. and Regnell, Bj{\"o}rn and Wessl{\'e}n, Anders},
  year = {2012},
  publisher = {{Springer-Verlag}},
  address = {{Berlin Heidelberg}},
  urldate = {2018-10-02},
  abstract = {Like other sciences and engineering disciplines, software engineering requires a cycle of model building, experimentation, and learning. Experiments are valuable tools for all software engineers who are involved in evaluating and choosing between different methods, techniques, languages and tools. The purpose of Experimentation in Software Engineering is to introduce students, teachers, researchers, and practitioners to empirical studies in software engineering, using controlled experiments. The introduction to experimentation is provided through a process perspective, and the focus is on the steps that we have to go through to perform an experiment. The book is divided into three parts. The first part provides a background of theories and methods used in experimentation. Part II then devotes one chapter to each of the five experiment steps: scoping, planning, execution, analysis, and result presentation. Part III completes the presentation with two examples. Assignments and statistical material are provided in appendixes. Overall the book provides indispensable information regarding empirical studies in particular for experiments, but also for case studies, systematic literature reviews, and surveys. It is a revision of the authors' book, which was published in 2000. In addition, substantial new material, e.g. concerning systematic literature reviews and case study research, is introduced. The book is self-contained and it is suitable as a course book in undergraduate or graduate studies where the need for empirical studies in software engineering is stressed. Exercises and assignments are included to combine the more theoretical material with practical aspects. Researchers will also benefit from the book, learning more about how to conduct empirical studies, and likewise practitioners may use it as a ``cookbook'' when evaluating new methods or techniques before implementing them in their organization.},
  isbn = {978-3-642-29043-5},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/GPWZKC9S/9783642290435.html}
}

@article{wongCognitiveLoadTheory2012,
  title = {Cognitive Load Theory, the Transient Information Effect and e-Learning},
  author = {Wong, Anna and Leahy, Wayne and Marcus, Nadine and Sweller, John},
  year = {2012},
  month = dec,
  journal = {Learning and Instruction},
  volume = {22},
  number = {6},
  pages = {449--457},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2012.05.004},
  urldate = {2018-11-06},
  abstract = {When using modern educational technology, some forms of instruction are inherently transient in that previous information usually disappears to be replaced by current information. Instructional animations and spoken text provide examples. The effects of transience due to the use of animation-based instructions (Experiment 1) and spoken information under audio-visual conditions (Experiment 2) were explored in a cognitive load theory framework. It was hypothesized that for transient information presented in short sections, animations would be superior to static graphics, due to our innate ability to learn by observing. For transient information in long sections, animations should lose their superiority over static graphics, due to working memory overload associated with large amounts of transient information. Similarly, the modality effect under which audio-visual information is superior to visual only information should be obtainable using short segments but disappear or reverse using longer segments due to the working memory consequences of long, transient, auditory information. Results supported the hypotheses. The use of educational technology that results in the transformation of permanent into transitory information needs to be carefully assessed.},
  keywords = {Animation effects,Cognitive load theory,e-learning,Modality effect,Transient information effect},
  file = {/Users/igormoreno/Zotero/storage/P5LA2Q2A/Wong et al - 2012 - Cognitive load theory, the transient information effect and e-learning.pdf;/Users/igormoreno/Zotero/storage/9MYU8MJ2/S0959475212000369.html}
}

@misc{wongLambdafairySylvia2012a,
  title = {Lambda-Fairy/Sylvia},
  author = {Wong, Chris},
  year = {2012},
  month = nov,
  journal = {GitHub},
  urldate = {2021-04-16},
  abstract = {:evergreen\_tree: Logic puzzle game based on the lambda calculus - lambda-fairy/sylvia},
  howpublished = {https://github.com/lambda-fairy/sylvia},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/2FAXG4IR/wiki.html}
}

@inproceedings{woodfordMultipleChoiceQuestions2005,
  title = {Multiple Choice Questions Not Considered Harmful},
  booktitle = {Proceedings of the 7th {{Australasian}} Conference on {{Computing}} Education - {{Volume}} 42},
  author = {Woodford, Karyn and Bancroft, Peter},
  year = {2005},
  month = jan,
  series = {{{ACE}} '05},
  pages = {109--116},
  publisher = {{Australian Computer Society, Inc.}},
  address = {{AUS}},
  urldate = {2021-06-23},
  abstract = {Increasingly, academics are confronted with issues associated with assessment in large classes, arising from a combination of factors including higher student enrolments and the introduction of a trimester of study in many universities. The resulting increased time pressures on marking are causing many academics to search for alternative forms of assessment. University teachers are making more frequent use of multiple choice questions as a matter of expediency and in some cases, the quality of the assessment is being neglected. This describes the current situation in Information Technology. The aim of this paper is to provide practical guidelines in the form of a checklist for lecturers who wish to write tests containing multiple choice questions. Some of the points raised may be considered common knowledge for those teachers with a background in Education, however not all Information Technology lecturers would fall into this category. While the intended users of the checklist are Information Technology lecturers who, in general, are unlikely to be familiar with many of the matters discussed, teachers in other disciplines may find it a useful reference. In addition to the checklist, this paper also discusses the major criticism of multiple choice questions (that they do not test anything more than just straight recall of facts) and examines ways of overcoming this misconception.},
  isbn = {978-1-920682-24-8},
  keywords = {assessment,bloom,large class assessment,multiple choice questions},
  file = {/Users/igormoreno/Zotero/storage/WPYUU4NW/Woodford e Bancroft - 2005 - Multiple choice questions not considered harmful.pdf}
}

@article{workmanMeasureStructuralComplexity,
  title = {A {{Measure}} of {{Structural Complexity}} for {{Context-free Grammars}}},
  author = {Workman, D A},
  pages = {12},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/VVFD3D2R/Workman - A Measure of Structural Complexity for Context-fre.pdf}
}

@inproceedings{wrennExecutableExamplesProgramming2019,
  title = {Executable {{Examples}} for {{Programming Problem Comprehension}}},
  booktitle = {Proceedings of the 2019 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Wrenn, John and Krishnamurthi, Shriram},
  year = {2019},
  month = jul,
  series = {{{ICER}} '19},
  pages = {131--139},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3291279.3339416},
  urldate = {2022-04-19},
  abstract = {Flawed problem comprehension leads students to produce flawed implementations. However, testing alone is inadequate for checking comprehension: if a student develops both their tests and implementation with the same misunderstanding, running their tests against their implementation will not reveal the issue. As a solution, some pedagogies encourage the creation of input-output examples independent of testing-but seldom provide students with any mechanism to check that their examples are correct and thorough. We propose a mechanism that provides students with instant feedback on their examples, independent of their implementation progress. We assess the impact of such an interface on an introductory programming course and find several positive impacts, some more neutral outcomes, and no identified negative effects.},
  isbn = {978-1-4503-6185-9},
  keywords = {automated assessment,examplar,examples,testing},
  file = {/Users/igormoreno/Zotero/storage/NAH59PXB/Wrenn and Krishnamurthi - 2019 - Executable Examples for Programming Problem Compre.pdf}
}

@inproceedings{wrennWhoTestsTesters2018,
  title = {Who {{Tests}} the {{Testers}}?},
  booktitle = {Proceedings of the 2018 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Wrenn, John and Krishnamurthi, Shriram and Fisler, Kathi},
  year = {2018},
  month = aug,
  series = {{{ICER}} '18},
  pages = {51--59},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3230977.3230999},
  urldate = {2021-06-13},
  abstract = {Instructors routinely use automated assessment methods to evaluate the semantic qualities of student implementations and, sometimes, test suites. In this work, we distill a variety of automated assessment methods in the literature down to a pair of assessment models. We identify pathological assessment outcomes in each model that point to underlying methodological flaws. These theoretical flaws broadly threaten the validity of the techniques, and we actually observe them in multiple assignments of an introductory programming course. We propose adjustments that remedy these flaws and then demonstrate, on these same assignments, that our interventions improve the accuracy of assessment. We believe that with these adjustments, instructors can greatly improve the accuracy of automated assessment.},
  isbn = {978-1-4503-5628-2},
  keywords = {advice to instructors,assessing implementations,assessing test suites,automated assessment,program correctness},
  file = {/Users/igormoreno/Zotero/storage/3RIBCSI8/Wrenn et al. - 2018 - Who Tests the Testers.pdf}
}

@article{wrightSyntacticApproachType1994,
  ids = {wrightSyntacticApproachType1994a},
  title = {A {{Syntactic Approach}} to {{Type Soundness}}},
  author = {Wright, A. K. and Felleisen, M.},
  year = {1994},
  month = nov,
  journal = {Information and Computation},
  volume = {115},
  number = {1},
  pages = {38--94},
  issn = {0890-5401},
  doi = {10.1006/inco.1994.1093},
  urldate = {2018-12-02},
  abstract = {We present a new approach to proving type soundness for Hindley/Milner-style polymorphic type systems. The keys to our approach are (1) an adaptation of subject reduction theorems from combinatory logic to programming languages, and (2) the use of rewriting techniques for the specification of the language semantics. The approach easily extends from polymorphic functional languages to imperative languages that provide references, exceptions, continuations, and similar features. We illustrate the technique with a type soundness theorem for the core of Standard ML, which includes the first type soundness proof for polymorphic exceptions and continuations.},
  file = {/Users/igormoreno/Zotero/storage/6PCJL4AJ/Wright and Felleisen - 1994 - A Syntactic Approach to Type Soundness.pdf;/Users/igormoreno/Zotero/storage/Q4FEFIWI/Wright and Felleisen - 1994 - A Syntactic Approach to Type Soundness.pdf;/Users/igormoreno/Zotero/storage/GIA367Y2/S0890540184710935.html}
}

@article{wrigstadMasteryLearningLikeTeaching2019,
  title = {Mastery {{Learning-Like Teaching}} with {{Achievements}}},
  author = {Wrigstad, Tobias and Castegren, Elias},
  year = {2019},
  journal = {CoRR},
  volume = {abs/1906.03510},
  eprint = {1906.03510},
  archiveprefix = {arxiv},
  bibsource = {dblp computer science bibliography, https://dblp.org},
  biburl = {https://dblp.org/rec/journals/corr/abs-1906-03510.bib},
  annotation = {00007},
  timestamp = {Fri, 14 Jun 2019 09:38:24 +0200},
  file = {/Users/igormoreno/Zotero/storage/YH7BKLLH/Wrigstad and Castegren - Mastery Learning-Like Teaching with Achievements.pdf}
}

@book{wuComprehensiveIntroductionObjectoriented2008,
  title = {A Comprehensive Introduction to Object-Oriented Programming with {{Java}}},
  author = {Wu, C. Thomas},
  year = {2008},
  edition = {1st ed},
  publisher = {{McGraw Hill}},
  address = {{Dubuque, IA}},
  isbn = {978-0-07-352339-2},
  langid = {english},
  lccn = {QA76.64 .W77 2008},
  keywords = {Java (Computer program language),Object-oriented programming (Computer science)},
  file = {/Users/igormoreno/Zotero/storage/C9TY4V3Y/Wu - 2008 - A comprehensive introduction to object-oriented pr.pdf}
}

@article{wuEffectivenessEfficiencyAdding2018,
  title = {Effectiveness and Efficiency of Adding Drawing Prompts to an Interactive Educational Technology When Learning with Visual Representations},
  author = {Wu, Sally P. W. and Rau, Martina A.},
  year = {2018},
  month = jun,
  journal = {Learning and Instruction},
  volume = {55},
  pages = {93--104},
  issn = {0959-4752},
  doi = {10.1016/j.learninstruc.2017.09.010},
  urldate = {2018-11-06},
  abstract = {This paper investigates whether prompting students to draw their own visual representations enhances students' learning from technology-based instructional activities with visual representations. Seventy-two undergraduate students were randomly assigned to receive an educational technology with (1) drawing prompts throughout instruction, (2) drawing prompts before and after instruction, or (3) no drawing prompts. We assessed learning outcomes with respect to instructional effectiveness and efficiency using immediate and delayed posttests. Results on instructional efficiency showed a significant advantage for drawing prompts. Results on instructional effectiveness showed an advantage at the delayed posttest for drawing prompts provided throughout instruction, compared to prompts before and after. Qualitative analyses suggest that adding drawing prompts throughout instruction promotes drawing quality. In sum, our findings expand theory by suggesting that drawing prompts facilitate visual sense making of concepts shown in visual representations. Furthermore, we provide practical recommendations on how best to implement drawing prompts with technology-based instructional activities.},
  keywords = {Chemistry,Drawing,Mental models,Sense making,To Read,Visual representations},
  file = {/Users/igormoreno/Zotero/storage/87GZ8TMJ/Wu and Rau - 2018 - Effectiveness and efficiency of adding drawing prompts to an interactive.pdf;/Users/igormoreno/Zotero/storage/ZVSK8NG6/S095947521630113X.html}
}

@article{wuTeacherPerceptionsReadiness2020,
  title = {Teacher's {{Perceptions}} and {{Readiness}} to {{Teach Coding Skills}}: {{A Comparative Study Between Finland}}, {{Mainland China}}, {{Singapore}}, {{Taiwan}}, and {{South Korea}}},
  shorttitle = {Teacher's {{Perceptions}} and {{Readiness}} to {{Teach Coding Skills}}},
  author = {Wu, Longkai and Looi, Chee-Kit and Multisilta, Jari and How, Meng-Leong and Choi, Hyungshin and Hsu, Ting-Chia and Tuomi, Pauliina},
  year = {2020},
  month = feb,
  journal = {The Asia-Pacific Education Researcher},
  volume = {29},
  number = {1},
  pages = {21--34},
  issn = {0119-5646, 2243-7908},
  doi = {10.1007/s40299-019-00485-x},
  urldate = {2020-06-22},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/HINQ4D72/Wu et al - 2020 - Teacher’s Perceptions and Readiness to Teach Coding Skills.pdf}
}

@inproceedings{xiaPeerLensPeerinspiredInteractive2019,
  title = {{{PeerLens}}: {{Peer-inspired Interactive Learning Path Planning}} in {{Online Question Pool}}},
  shorttitle = {{{PeerLens}}},
  booktitle = {Proceedings of the 2019 {{CHI Conference}} on {{Human Factors}} in {{Computing Systems}}},
  author = {Xia, Meng and Sun, Mingfei and Wei, Huan and Chen, Qing and Wang, Yong and Shi, Lei and Qu, Huamin and Ma, Xiaojuan},
  year = {2019},
  month = may,
  pages = {1--12},
  publisher = {{ACM}},
  address = {{Glasgow Scotland Uk}},
  doi = {10.1145/3290605.3300864},
  urldate = {2023-03-22},
  isbn = {978-1-4503-5970-2},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/BBGLVCXP/Xia et al. - 2019 - PeerLens Peer-inspired Interactive Learning Path .pdf}
}

@article{xiaStudentPerformanceComputing2017,
  title = {Student Performance in Computing Education: An Empirical Analysis of Online Learning in Programming Education Environments},
  shorttitle = {Student Performance in Computing Education},
  author = {Xia, Belle Selene and Liiti{\"a}inen, Elia},
  year = {2017},
  month = nov,
  journal = {European Journal of Engineering Education},
  volume = {42},
  number = {6},
  pages = {1025--1037},
  issn = {0304-3797, 1469-5898},
  doi = {10.1080/03043797.2016.1250066},
  urldate = {2020-06-22},
  abstract = {The benefits of using online exercises have been analysed in terms of distance learning, automatic assessment and self-regulated learning. In this study, we have not found a direct proportional relationship between student performance in the course exercises that use online technologies and the exam grades. We see that the average submission rate to these online exercises is not positively correlated with the exercise points. Yet, our results confirm that doing exercises along supports student learning and skill accumulation equipping them with the knowledge of programming. While the student performance in programming courses is affected by factors such as prior background in programming, cognitive skills and the quality of teaching, completing the course exercises via learning-by-doing is an indispensable part of teaching. Based on the student feedback from the course survey, the students are highly satisfied with using online technologies as part of learning.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/AL7ULZUD/Xia and Liitiäinen - 2017 - Student performance in computing education an emp.pdf}
}

@article{xiDoesGamificationSatisfy2019,
  title = {Does Gamification Satisfy Needs? {{A}} Study on the Relationship between Gamification Features and Intrinsic Need Satisfaction},
  shorttitle = {Does Gamification Satisfy Needs?},
  author = {Xi, Nannan and Hamari, Juho},
  year = {2019},
  month = jun,
  journal = {International Journal of Information Management},
  volume = {46},
  pages = {210--221},
  issn = {02684012},
  doi = {10.1016/j.ijinfomgt.2018.12.002},
  urldate = {2023-06-27},
  abstract = {Gamification is increasingly used as an essential part of today's services, software and systems to engage and motivate users, as well as to spark further behaviors. A core assumption is that gamification should be able to increase the ability of a system or a service to satisfy intrinsic needs, and thereby the autotelicy of use as well as consequent change in beneficial behaviors. However, beyond these optimistic expectations, there is a dearth of empirical evidence on how different gamification features satisfy different dimensions intrinsic needs. Therefore, in this study we investigate the relationships between the user (N = 824) interactions with gamification features (immersion, achievement and social -related features) and intrinsic need satisfaction (autonomy, competence and relatedness needs) in Xiaomi and Huawei online gamified communities that represent two large technology product-related online brand communities in China through a survey-based study. The results indicate that immersion-related gamification features were only positively associated with autonomy need satisfaction. Achievement-related features were not only positively associated with all kinds of need satisfaction, but also the strongest predictor of both autonomy and competence need satisfaction. Social-related gamification features, were positively associated with autonomy, competence and relatedness need satisfaction. The results imply that gamification can have a substantially positive effect on intrinsic need satisfaction for services users.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/W3PANH3N/Xi and Hamari - 2019 - Does gamification satisfy needs A study on the re.pdf}
}

@inproceedings{xieExplicitStrategyScaffold2018,
  ids = {xieExplicitStrategyScaffold2018a},
  title = {An {{Explicit Strategy}} to {{Scaffold Novice Program Tracing}}},
  booktitle = {Proceedings of the 49th {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Xie, Benjamin and Nelson, Greg L. and Ko, Andrew J.},
  year = {2018},
  month = feb,
  pages = {344--349},
  publisher = {{ACM}},
  address = {{Baltimore Maryland USA}},
  doi = {10.1145/3159450.3159527},
  urldate = {2020-06-22},
  abstract = {We propose and evaluate a lightweight strategy for tracing code that can be efficiently taught to novice programmers, building off of recent findings on "sketching" when tracing. This strategy helps novices apply the syntactic and semantic knowledge they are learning by encouraging line-by-line tracing and providing an external representation of memory for them to update. To evaluate the effect of teaching this strategy, we conducted a block-randomized experiment with 24 novices enrolled in a university-level CS1 course. We spent only 5-10 minutes introducing the strategy to the experimental condition. We then asked both conditions to think-aloud as they predicted the output of short programs. Students using this strategy scored on average 15\% higher than students in the control group for the tracing problems used the study (p{$<$}0.05). Qualitative analysis of think-aloud and interview data showed that tracing systematically (line-by-line and "sketching" intermediate values) led to better performance and that the strategy scaffolded and encouraged systematic tracing. Students who learned the strategy also scored on average 7\% higher on the course midterm. These findings suggest that in {$<$}1 hour and without computer-based tools, we can improve CS1 students' tracing abilities by explicitly teaching a strategy.},
  isbn = {978-1-4503-5103-4},
  langid = {english},
  keywords = {instructional intervention,program tracing,sketching,think-aloud},
  file = {/Users/igormoreno/Zotero/storage/CHDHPQ9E/Xie et al - 2018 - An Explicit Strategy to Scaffold Novice Program Tracing.pdf;/Users/igormoreno/Zotero/storage/QIUCHIK8/Xie et al - 2018 - An Explicit Strategy to Scaffold Novice Program Tracing.pdf}
}

@article{xinogalosDesigningDeployingProgramming2016,
  title = {Designing and Deploying Programming Courses: {{Strategies}}, Tools, Difficulties and Pedagogy},
  shorttitle = {Designing and Deploying Programming Courses},
  author = {Xinogalos, Stelios},
  year = {2016},
  month = may,
  journal = {Education and Information Technologies},
  volume = {21},
  number = {3},
  pages = {559--588},
  issn = {1360-2357, 1573-7608},
  doi = {10.1007/s10639-014-9341-9},
  urldate = {2020-06-22},
  abstract = {Designing and deploying programming courses is undoubtedly a challenging task. In this paper, an attempt to analyze important aspects of a sequence of two courses on imperative-procedural and object-oriented programming in a non-CS majors Department is made. This analysis is based on a questionnaire filled in by fifty students in a voluntary basis. The issues of the programming courses that are investigated refer to: the strategy selected for the introduction to programming; the sequence of the programming techniques and languages taught and the transition from the one to the other; students' difficulties with programming in general and with imperative-procedural and object-oriented programming in specific; the teaching and learning design of both courses; and the material that students rely on for learning programming. Based on the analysis of students' replies on the questionnaire, related work and the instructor's experience on teaching the courses, conclusions are drawn regarding all the aforementioned aspects of designing and deploying programming courses. The main contribution of the paper is the fact that all the important and interrelated aspects of a sequence of two programming courses are investigated in conjunction, providing realistic implications and guidelines for improving the quality and effectiveness of existing programming courses and designing and deploying new courses. The main results refer to the usage of a pseudo-language for an introduction to programming, the transition from procedural to object-oriented programming, the intrinsic difficulties of learning programming, and practices for a more successful teaching and learning design of programming courses.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/VWLK6X5R/Xinogalos - 2016 - Designing and deploying programming courses Strat.pdf}
}

@inproceedings{xinogalosMicroworldsGamesCollaboration2015,
  title = {Microworlds, {{Games}} and {{Collaboration}}: Three Effective Approaches to Support Novices in Learning Programming},
  shorttitle = {Microworlds, {{Games}} and {{Collaboration}}},
  booktitle = {Proceedings of the 7th {{Balkan Conference}} on {{Informatics Conference}} - {{BCI}} '15},
  author = {Xinogalos, Stelios and Malliarakis, Christos and Tsompanoudi, Despina and Satratzemi, Maya},
  year = {2015},
  pages = {1--8},
  publisher = {{ACM Press}},
  address = {{Craiova, Romania}},
  doi = {10.1145/2801081.2801094},
  urldate = {2020-06-22},
  abstract = {Specially designed programming environments have been used for decades to support the novice programmers learning programming. In this paper, we present various forms of Educational Technology that have guided the design of educational programming environments the last two decades. The design and aspirations of three distinct programming environments developed at the University of Macedonia are presented. These include a Programming Microworld, an Educational Game and a Distributed Pair Programming system. The potential benefits of the different features of the three environments are presented along with results from their evaluation. Conclusions are drawn regarding the technologies incorporated in these different programming environments. Specifically, emphasis is given on technologies and features that seem to be important for motivating and engaging students in learning programming and should be taken into account by researchers designing new educational programming environments.},
  isbn = {978-1-4503-3335-1},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/GFVINISB/Xinogalos et al - 2015 - Microworlds, Games and Collaboration.pdf}
}

@inproceedings{xinogalosProgrammingTechniquesEnvironments2012,
  title = {Programming Techniques and Environments in a Technology Management Department},
  booktitle = {Proceedings of the {{Fifth Balkan Conference}} in {{Informatics}} on - {{BCI}} '12},
  author = {Xinogalos, Stelios},
  year = {2012},
  pages = {136},
  publisher = {{ACM Press}},
  address = {{Novi Sad, Serbia}},
  doi = {10.1145/2371316.2371342},
  urldate = {2020-06-22},
  abstract = {Teaching and learning programming is widely known to be quite problematic. Designing and deploying programming courses is also quite complex. Several choices have to made, such as selecting the first programming technique and language, the sequence of programming techniques presented to students, the programming environments and the teaching approaches utilized. In this paper, the rationale of the sequence of programming techniques and languages taught at a Technology Management Department, as well as the decisions that have been made for a smoother transition from the imperative to the object-oriented programming technique in terms of the environments and the teaching approaches used are presented. Furthermore, students' replies in a questionnaire regarding their difficulties with this sequence of programming techniques and learning programming in general are analyzed.},
  isbn = {978-1-4503-1240-0},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/IHWI8FM8/Xinogalos - 2012 - Programming techniques and environments in a technology management department.pdf}
}

@article{xuInIDECodeGeneration2022,
  title = {In-{{IDE Code Generation}} from {{Natural Language}}: {{Promise}} and {{Challenges}}},
  shorttitle = {In-{{IDE Code Generation}} from {{Natural Language}}},
  author = {Xu, Frank F. and Vasilescu, Bogdan and Neubig, Graham},
  year = {2022},
  month = mar,
  journal = {ACM Transactions on Software Engineering and Methodology},
  volume = {31},
  number = {2},
  pages = {29:1--29:47},
  issn = {1049-331X},
  doi = {10.1145/3487569},
  urldate = {2022-10-18},
  abstract = {A great part of software development involves conceptualizing or communicating the underlying procedures and logic that needs to be expressed in programs. One major difficulty of programming is turning concept into code, especially when dealing with the APIs of unfamiliar libraries. Recently, there has been a proliferation of machine learning methods for code generation and retrieval from natural language queries, but these have primarily been evaluated purely based on retrieval accuracy or overlap of generated code with developer-written code, and the actual effect of these methods on the developer workflow is surprisingly unattested. In this article, we perform the first comprehensive investigation of the promise and challenges of using such technology inside the PyCharm IDE, asking, ``At the current state of technology does it improve developer productivity or accuracy, how does it affect the developer experience, and what are the remaining gaps and challenges?'' To facilitate the study, we first develop a plugin for the PyCharm IDE that implements a hybrid of code generation and code retrieval functionality, and we orchestrate virtual environments to enable collection of many user events (e.g., web browsing, keystrokes, fine-grained code edits). We ask developers with various backgrounds to complete 7 varieties of 14 Python programming tasks ranging from basic file manipulation to machine learning or data visualization, with or without the help of the plugin. While qualitative surveys of developer experience are largely positive, quantitative results with regards to increased productivity, code quality, or program correctness are inconclusive. Further analysis identifies several pain points that could improve the effectiveness of future machine learning-based code generation/retrieval developer assistants and demonstrates when developers prefer code generation over code retrieval and vice versa. We release all data and software to pave the road for future empirical studies on this topic, as well as development of better code generation models.},
  keywords = {code generation,code retrieval,empirical study,Natural language programming assistant},
  file = {/Users/igormoreno/Zotero/storage/VG9MF86W/Xu et al. - 2022 - In-IDE Code Generation from Natural Language Prom.pdf}
}

@article{xuPsychologicalInterventionsVirtual2021,
  title = {Psychological Interventions of Virtual Gamification within Academic Intrinsic Motivation: {{A}} Systematic Review},
  shorttitle = {Psychological Interventions of Virtual Gamification within Academic Intrinsic Motivation},
  author = {Xu, Joy and Lio, Aaron and Dhaliwal, Harshdeep and Andrei, Sorina and Balakrishnan, Shakthika and Nagani, Uzhma and Samadder, Sudipta},
  year = {2021},
  month = oct,
  journal = {Journal of Affective Disorders},
  volume = {293},
  pages = {444--465},
  issn = {01650327},
  doi = {10.1016/j.jad.2021.06.070},
  urldate = {2023-06-27},
  abstract = {METHODS: Qualitative and quantitative studies were extracted from APA PsycInfo, ProQuest, and IEEE for relevance to virtual gamification and intrinsic motivation. Studies were reviewed based on a pre-determined and piloted screening tool. Included studies were published between 1990 and 2020 in English within Asia, North America, or Europe. Only systematic reviews, randomized control trials (RCTs), meta-analysis, and grey litera\- ture were included. Study screening, extraction, and quality appraisals using the Mixed Methods Appraisal Tool (MMAT) were performed independently among two authors. Disagreements following reconciliation between two authors were settled by a third author. Heterogeneity in study designs, outcomes, and measurements pre\- cluded meta and statistical analyses; thus, a qualitative analysis of studies was provided. RESULTS: Based on the appraised articles, gamification improves intrinsic motivation through badges, social interactions, points, and leaderboards. Experimental studies also displayed a correlation between learning behaviour. CONCLUSION: The data exhibited an increase in intrinsic motivation due to gamification features, which can be integrated within a virtual context to enhance motivation with potential for application towards online learning settings.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/UQK9C2U6/Xu et al. - 2021 - Psychological interventions of virtual gamificatio.pdf}
}

@misc{xuSurveyPretrainedLanguage2022,
  title = {A {{Survey}} on {{Pretrained Language Models}} for {{Neural Code Intelligence}}},
  author = {Xu, Yichen and Zhu, Yanqiao},
  year = {2022},
  month = dec,
  number = {arXiv:2212.10079},
  eprint = {2212.10079},
  primaryclass = {cs},
  publisher = {{arXiv}},
  urldate = {2022-12-27},
  abstract = {As the complexity of modern software continues to escalate, software engineering has become an increasingly daunting and error-prone endeavor. In recent years, the field of Neural Code Intelligence (NCI) has emerged as a promising solution, leveraging the power of deep learning techniques to tackle analytical tasks on source code with the goal of improving programming efficiency and minimizing human errors within the software industry. Pretrained language models have become a dominant force in NCI research, consistently delivering state-of-the-art results across a wide range of tasks, including code summarization, generation, and translation. In this paper, we present a comprehensive survey of the NCI domain, including a thorough review of pretraining techniques, tasks, datasets, and model architectures. We hope this paper will serve as a bridge between the natural language and programming language communities, offering insights for future research in this rapidly evolving field.},
  archiveprefix = {arxiv},
  keywords = {Computer Science - Computation and Language,Computer Science - Machine Learning,Computer Science - Software Engineering},
  file = {/Users/igormoreno/Zotero/storage/955PH355/Xu and Zhu - 2022 - A Survey on Pretrained Language Models for Neural .pdf;/Users/igormoreno/Zotero/storage/BDZW8535/2212.html}
}

@article{yadavComputationalThinkingElementary2018,
  title = {Computational Thinking in Elementary Classrooms: Measuring Teacher Understanding of Computational Ideas for Teaching Science},
  shorttitle = {Computational Thinking in Elementary Classrooms},
  author = {Yadav, Aman and Krist, Christina and Good, Jon and Caeli, Elisa Nadire},
  year = {2018},
  month = oct,
  journal = {Computer Science Education},
  volume = {28},
  number = {4},
  pages = {371--400},
  issn = {0899-3408, 1744-5175},
  doi = {10.1080/08993408.2018.1560550},
  urldate = {2020-06-22},
  abstract = {A number of efforts have focused on preparing teachers to integrate CT within secondary disciplinary subject areas; however, there is little research on how CT ideas could be embedded within elementary subjects. We designed a professional development activity for elementary teachers to embed CT within science and examined how their understanding of CT emerged over the course of PD. This paper reports results from qualitative analysis of teacher responses to vignettes and open-ended questions, which presented teaching scenarios related to CT. We found that the vignettes allow us to see shift in teachers\^a\texteuro\texttrademark{} thinking about CT from broad and generalized ideas to more elaborate versions of those ideas. We discuss that while vignettes provided a good method to portray changes in teacher views about CT, we need additional mechanisms to monitor how teachers conceptualize and come to integrate computational thinking into elementary schools.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/RAXVFG2N/Yadav et al - 2018 - Computational thinking in elementary classrooms.pdf}
}

@article{yadavLearningTeachComputer2012,
  title = {Learning to {{Teach Computer Science}}: {{The Need}} for a {{Methods Course}}},
  shorttitle = {Learning to {{Teach Computer Science}}},
  author = {Yadav, Aman and Korb, John T.},
  year = {2012},
  month = nov,
  journal = {Commun. ACM},
  volume = {55},
  number = {11},
  pages = {31--33},
  issn = {0001-0782},
  doi = {10.1145/2366316.2366327},
  urldate = {2019-05-16},
  abstract = {A multipronged approach to preparing computer science teachers is critical to success.},
  file = {/Users/igormoreno/Zotero/storage/ZARQ8H9N/Yadav and Korb - 2012 - Learning to Teach Computer Science.pdf}
}

@article{yadavSowingSeedsLandscape2015,
  title = {Sowing the {{Seeds}}: {{A Landscape Study}} on {{Assessment}} in {{Secondary Computer Science Education}}},
  shorttitle = {Sowing the {{Seeds}}},
  author = {Yadav, Aman and Burkhart, David and Moix, Daniel and Snow, Eric and Bandaru, Padmaja and Clayborn, Lissa},
  year = {2015},
  month = jul,
  abstract = {This study summarizes what is known about assessment of student learning in high school Computer Science (CS) in the United States (US), reports on the results of the landscape study, and concludes with recommendations for advancing the state of assessment in K\textendash 12 CS. With support from Google, we conducted a study of secondary school educators to determine the state of computer science education assessment and how teachers assess student learning in their computer science classrooms. Based on interviews with computer science practitioners, we found that teachers use a variety of formative and summative assessment techniques, but also face a number of challenges finding valid and reliable assessments to use in their classrooms.}
}

@inproceedings{yakushevGenericProgrammingFixed2009,
  title = {Generic Programming with Fixed Points for Mutually Recursive Datatypes},
  booktitle = {Proceedings of the 14th {{ACM SIGPLAN}} International Conference on {{Functional}} Programming},
  author = {Yakushev, Alexey Rodriguez and Holdermans, Stefan and L{\"o}h, Andres and Jeuring, Johan},
  year = {2009},
  month = aug,
  series = {{{ICFP}} '09},
  pages = {233--244},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1596550.1596585},
  urldate = {2021-06-07},
  abstract = {Many datatype-generic functions need access to the recursive positions in the structure of the datatype, and therefore adopt a fixed point view on datatypes. Examples include variants of fold that traverse the data following the recursive structure, or the Zipper data structure that enables navigation along the recursive positions. However, Hindley-Milner-inspired type systems with algebraic datatypes make it difficult to express fixed points for anything but regular datatypes. Many real-life examples such as abstract syntax trees are in fact systems of mutually recursive datatypes and therefore excluded. Using Haskell's GADTs and type families, we describe a technique that allows a fixed-point view for systems of mutually recursive datatypes. We demonstrate that our approach is widely applicable by giving several examples of generic functions for this view, most prominently the Zipper.},
  isbn = {978-1-60558-332-7},
  keywords = {datatype-generic programming,fixed points,haskell,mutually recursive datatypes},
  file = {/Users/igormoreno/Zotero/storage/7SF57EDR/Yakushev et al. - 2009 - Generic programming with fixed points for mutually.pdf}
}

@inproceedings{yamamotoSkillHierarchyRevised2012,
  title = {Skill Hierarchy Revised by {{SEM}} and Additional Skills},
  booktitle = {2012 {{International Conference}} on {{Information Technology Based Higher Education}} and {{Training}} ({{ITHET}})},
  author = {Yamamoto, Mitsuo and Sekiya, Takayuki and Mori, Kazumasa and Yamaguchi, Kazunori},
  year = {2012},
  month = jun,
  pages = {1--8},
  doi = {10.1109/ITHET.2012.6246009},
  abstract = {In this paper, we reexamine the Lopez's skill hierarchy by using structural equation modeling (SEM), by which we can explicitly see the relationship between variables. We also introduce two more skills, a skill to modify a given piece of code to satisfy a given specification and a skill to write code from scratch to satisfy a given specification. The analysis shows that these additional skills are useful. The path diagram (model) with the highest fitness measures suggests an effective order of training and pivotal roles of the Tracing2 and Explain skills in training.},
  keywords = {CS1,Educational institutions,hierarchy,Indexes,Mathematical model,novice programmers,Programming profession,Structural Equation Modeling,tracing,Training,Writing},
  file = {/Users/igormoreno/Zotero/storage/BJUFM3GI/stamp.html}
}

@inproceedings{yamamotoSkillHierarchyRevised2012a,
  title = {Skill Hierarchy Revised by {{SEM}} and Additional Skills},
  booktitle = {2012 {{International Conference}} on {{Information Technology Based Higher Education}} and {{Training}} ({{ITHET}})},
  author = {Yamamoto, Mitsuo and Sekiya, Takayuki and Mori, Kazumasa and Yamaguchi, Kazunori},
  year = {2012},
  month = jun,
  pages = {1--8},
  doi = {10.1109/ITHET.2012.6246009},
  abstract = {In this paper, we reexamine the Lopez's skill hierarchy by using structural equation modeling (SEM), by which we can explicitly see the relationship between variables. We also introduce two more skills, a skill to modify a given piece of code to satisfy a given specification and a skill to write code from scratch to satisfy a given specification. The analysis shows that these additional skills are useful. The path diagram (model) with the highest fitness measures suggests an effective order of training and pivotal roles of the Tracing2 and Explain skills in training.},
  keywords = {CS1,Educational institutions,hierarchy,Indexes,Mathematical model,novice programmers,Programming profession,Structural Equation Modeling,tracing,Training,Writing},
  file = {/Users/igormoreno/Zotero/storage/I57XGVMZ/Yamamoto et al. - 2012 - Skill hierarchy revised by SEM and additional skil.pdf;/Users/igormoreno/Zotero/storage/2I6TPBIQ/6246009.html}
}

@article{yamashitaClassroomPracticeUnderstanding2017,
  ids = {yamashitaClassroomPracticeUnderstanding2017a},
  title = {Classroom Practice for Understanding Pointers Using Learning Support System for Visualizing Memory Image and Target Domain World},
  author = {Yamashita, Koichi and Fujioka, Ryota and Kogure, Satoru and Noguchi, Yasuhiro and Konishi, Tatsuhiro and Itoh, Yukihiro},
  year = {2017},
  month = dec,
  journal = {Research and Practice in Technology Enhanced Learning},
  volume = {12},
  number = {1},
  pages = {17},
  issn = {1793-7078},
  doi = {10.1186/s41039-017-0058-4},
  urldate = {2020-06-22},
  abstract = {Pointers are difficult learning targets for novice learners of C programming. For such difficult targets, introducing a system visualizing program behaviors is generally expected to support learners to understand the targets. However, visualization in existing systems often conceals the concrete value of variables such as pointers; the way in which each visualized object is located on the memory is not made explicit. In order to address this issue, we focused on a program visualization system called TEDViT. It visualizes simultaneously and synchronously the memory image that is the field that presents the concrete value of variables and the target domain world that is the field that presents logically the data structures processed by the program. We consider that observing and comparing program code, memory image, and target domain world with TEDViT could work for understanding pointers. TEDViT visualizes the status of the target domain world according to the visualization policy defined by the teacher in order to allow teachers to set their instruction content based on the growing variety of learner background knowledge. We also consider that this feature could support teachers' instructions and class managements appropriately, and improving teachers' performance by TEDViT's support would bring improvement of learners' understanding. We conducted classroom practice for understanding pointers in connection with a memory model, thus introducing TEDViT to a real class. Analysis of answered scores in a questionnaire conducted after the practice suggests that our practice using TEDViT provided useful supports for participants to understand pointers. It also suggests our practice had a certain effect to reduce uneven levels of understanding among participants. Based on these results, we describe that classroom practices in our framework could support learners to understand pointers and support teachers to manage the class.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/K25XYS86/Yamashita et al - 2017 - Classroom practice for understanding pointers using learning support system for.pdf;/Users/igormoreno/Zotero/storage/MXHSL5W4/Yamashita et al - 2017 - Classroom practice for understanding pointers using learning support system for.pdf}
}

@article{yangInfluencesSelfregulatedLearning2018,
  title = {The Influences of Self-Regulated Learning Support and Prior Knowledge on Improving Learning Performance},
  author = {Yang, Tzu-Chi and Chen, Meng Chang and Chen, Sherry Y.},
  year = {2018},
  month = nov,
  journal = {Computers \& Education},
  volume = {126},
  pages = {37--52},
  issn = {03601315},
  doi = {10.1016/j.compedu.2018.06.025},
  urldate = {2018-11-06},
  abstract = {Self-regulated learning (SRL) is helpful to students. On the other hand, prior knowledge has great effects on students' self-regulation and learning performance. To this end, this study aimed to examine how high prior knowledge students (HPKs) and low prior knowledge students (LPKs) behaved differently when interacting with a SRL environment. To achieve this aim, we proposed a self-regulated learning support system (SRLSS) for a mathematical course. The results showed that the gap of learning performance between the HPKs and LPKs was removed after a long-term learning process. Moreover, the LPKs and HPKs behaved similarly in the forethought and selfreflection phases but some behavior differences were found in the performance phase, where the LPKs relied on the notes and sought support the dashboard and quiz records while the HPKs did not demonstrate such a tendency. Our results' theoretical and methodological implications and possible applications for further research are also discussed.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/AS4L5F5A/Yang et al - 2018 - The influences of self-regulated learning support and prior knowledge on.pdf}
}

@article{yasudaValidatingForceConcept2017,
  title = {Validating the {{Force Concept Inventory}} with {{Sub-Questions}}: {{Preliminary Results}} of the {{Second Year Survey}}},
  shorttitle = {Validating the {{Force Concept Inventory}} with {{Sub-Questions}}},
  author = {Yasuda, Jun-ichiro and Taniguchi, Masa-aki},
  year = {2017},
  month = apr,
  journal = {Scientia in educatione},
  volume = {8},
  issn = {1804-7106},
  doi = {10.14712/18047106.756},
  urldate = {2019-12-18},
  abstract = {We address the validity of the FCI, that is, whether respondents who answer FCI questions correctly have an actual understanding of the concepts of physics tested in the questions. We used sub-questions that test students on concepts believed to be required to answer the actual FCI questions. Our sample size comprises about five hundred respondents; we derive false positive ratios for pre-learners and post-learners, and evaluate the significant difference between them. Our analysis shows a significant difference at the 95 \% confidence level for Q.6, Q.7, and Q.16, implying that it is possible for post-learners to answer three questions without understanding the concepts of physics tested in the questions; therefore, Q.6, Q.7 and Q.16 are invalid.},
  langid = {english},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/8DPRMYDH/Yasuda and Taniguchi - 2017 - Validating the Force Concept Inventory with Sub-Questions.pdf}
}

@inproceedings{yatesDiagramsFunctionalEDSL2015,
  title = {Diagrams: A Functional {{EDSL}} for Vector Graphics},
  shorttitle = {Diagrams},
  booktitle = {Proceedings of the 3rd {{ACM SIGPLAN International Workshop}} on {{Functional Art}}, {{Music}}, {{Modelling}} and {{Design}}},
  author = {Yates, Ryan and Yorgey, Brent A.},
  year = {2015},
  month = aug,
  series = {{{FARM}} 2015},
  pages = {4--5},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2808083.2808085},
  urldate = {2021-12-29},
  abstract = {diagrams is a domain-specific language for creating vector graphics. We will give a short diagrams tutorial/demo, particularly highlighting the power of a functional, embedded domain-specific language.},
  isbn = {978-1-4503-3806-6},
  keywords = {diagrams,EDSL,Haskell,vector},
  file = {/Users/igormoreno/Zotero/storage/P4KIBH6Y/Yates e Yorgey - 2015 - Diagrams a functional EDSL for vector graphics.pdf;/Users/igormoreno/Zotero/storage/P9IY5ZZK/Slides.pdf}
}

@inproceedings{yeckehzaareSpacedInterleavedRetrieval2019,
  title = {A {{Spaced}}, {{Interleaved Retrieval Practice Tool}} That Is {{Motivating}} and {{Effective}}},
  booktitle = {Proceedings of the 2019 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {YeckehZaare, Iman and Resnick, Paul and Ericson, Barbara},
  year = {2019},
  month = jul,
  series = {{{ICER}} '19},
  pages = {71--79},
  publisher = {{Association for Computing Machinery}},
  address = {{Toronto ON, Canada}},
  doi = {10.1145/3291279.3339411},
  urldate = {2020-02-10},
  abstract = {Retrieval practice, spacing, and interleaving are known to enhance long-term learning and transfer, but reduce short-term performance. It can be difficult to get both students and instructors to use these techniques since they perceive them as impeding initial student learning. We leveraged user experience design and research techniques, including survey and participant observation, to improve the design of a practice tool during a semester of use in a large introductory Python programming course. In this paper, we describe the design features that made the tool effective for learning as well as motivating. These include requiring spacing by giving credit for each day that a student answered a minimum number of questions, adapting a spaced repetition algorithm to schedule topics rather than specific questions, providing a visual representation of the evolving schedule in order to support meta-cognition, and providing several gameful design elements. To assess effectiveness, we estimated a regression model: each hour spent using the practice tool over the course of a semester was associated with an increase in final exam grades of 1.04\%, even after controlling for many potential confounds. To assess motivation, we report on the amount of practice tool use: 62 of the 193 students (32\%) voluntarily used the tool more than the required 45 days. This provides evidence that the design of the tool successfully overcame the typically negative perceptions of retrieval practice, spacing, and interleaving.},
  isbn = {978-1-4503-6185-9},
  keywords = {desirable difficulties,gameful design,interleaving,introductory programming,procrastination,retrieval practice,spacing,speed,Strong,To Read},
  annotation = {00003},
  file = {/Users/igormoreno/Zotero/storage/TBM5I23F/YeckehZaare et al - 2019 - A Spaced, Interleaved Retrieval Practice Tool that is Motivating and Effective.pdf}
}

@article{yehOptimalSelfexplanationPrompt2010,
  title = {Optimal Self-Explanation Prompt Design in Dynamic Multi-Representational Learning Environments},
  author = {Yeh, Yu-Fang and Chen, Mei-Chi and Hung, Pi-Hsia and Hwang, Gwo-Jen},
  year = {2010},
  month = may,
  journal = {Computers \& Education},
  volume = {54},
  number = {4},
  pages = {1089--1100},
  issn = {03601315},
  doi = {10.1016/j.compedu.2009.10.013},
  urldate = {2018-11-06},
  abstract = {Self-explanation prompts are considered to be an important form of scaffolding in the comprehension of complex multimedia materials. However, there is little theoretical understanding to date of self-explaining prompt formats tailored to different expertise levels of learners to help them fully exploit the advantages of dynamic multi-representational materials. To address this issue, this study designed two types of self-explaining prompts: the reasoning-based prompts asked the learners to reason the action run of the animation; the predicting-based prompts asked the learners to predict the upcoming action of the animation, and then asked for reasoning if they made a wrong prediction. Furthermore, multiple indicators including learning outcome, cognitive load demand, learning time, and learning efficiency were used to interpret the prompts' effects on different expertise levels of learners. A total of 244 undergraduate students were randomly assigned to one of the three conditions: a control and two different self-explaining prompt conditions. The results indicate that the learning effects of self-explaining prompts depend on levels of learner expertise. Based on the results, this study makes recommendations for adaptive selfexplaining prompt design.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/6LXRH46N/Yeh et al. - 2010 - Optimal self-explanation prompt design in dynamic .pdf;/Users/igormoreno/Zotero/storage/AFTL82XX/Yeh et al. - 2010 - Optimal self-explanation prompt design in dynamic .pdf}
}

@article{yenChoiceScaleEducational1986,
  title = {The {{Choice}} of {{Scale}} for {{Educational Measurement}}: {{An IRT Perspective}}},
  shorttitle = {The {{Choice}} of {{Scale}} for {{Educational Measurement}}},
  author = {Yen, Wendy M.},
  year = {1986},
  journal = {Journal of Educational Measurement},
  volume = {23},
  number = {4},
  eprint = {1434551},
  eprinttype = {jstor},
  pages = {299--325},
  issn = {0022-0655},
  urldate = {2019-01-27},
  abstract = {[Two methods of constructing equal-interval scales for educational achievement are discussed: Thurstone's absolute scaling method and Item Response Theory (IRT). Alternative criteria for choosing a scale are contrasted. It is argued that clearer criteria are needed for judging the appropriateness and usefulness of alternative scaling procedures, and more information is needed about the qualities of the different scales that are available. In answer to this second need, some examples are presented of how IRT can be used to examine the properties of scales: It is demonstrated that for observed score scales in common use (i.e., any scores that are influenced by measurement error), (a) systematic errors can be introduced when comparing growth at selected percentiles, and (b) normalizing observed scores will not necessarily produce a scale that is linearly related to an underlying normally distributed true trait.]},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/UPTME29Y/Yen - 1986 - The Choice of Scale for Educational Measurement A.pdf}
}

@article{yeniDesignCoTASAutomated,
  title = {Design of {{CoTAS}}: {{Automated Computational Thinking Assessment System}}},
  author = {Yeni, Sabiha and Hermans, Felienne},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/S5GS8MP6/Yeni and Hermans - Design of CoTAS Automated Computational Thinking .pdf}
}

@article{yeniDesignCoTASAutomateda,
  title = {Design of {{CoTAS}}: {{Automated Computational Thinking Assessment System}}},
  author = {Yeni, Sabiha and Hermans, Felienne},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/MGWDMDI4/Yeni and Hermans - Design of CoTAS Automated Computational Thinking .pdf}
}

@article{yeomansTransformativeTroublesomeStudents2019,
  title = {Transformative and {{Troublesome}}? {{Students}}' and {{Professional Programmers}}' {{Perspectives}} on {{Difficult Concepts}} in {{Programming}}},
  shorttitle = {Transformative and {{Troublesome}}?},
  author = {Yeomans, Lucy and Zschaler, Steffen and Coate, Kelly},
  year = {2019},
  month = jun,
  journal = {ACM Transactions on Computing Education},
  volume = {19},
  number = {3},
  pages = {1--27},
  issn = {1946-6226, 1946-6226},
  doi = {10.1145/3283071},
  urldate = {2020-06-22},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/2M4KEZVB/Yeomans et al - 2019 - Transformative and Troublesome.pdf}
}

@article{yildizEffectGamificationMotivation2021,
  title = {The Effect of Gamification on Motivation in the Education of Pre-Service Social Studies Teachers},
  author = {Yildiz, {\.I}smail and Top{\c c}u, Ersin and Kaymakci, Selahattin},
  year = {2021},
  month = dec,
  journal = {Thinking Skills and Creativity},
  volume = {42},
  pages = {100907},
  issn = {18711871},
  doi = {10.1016/j.tsc.2021.100907},
  urldate = {2023-06-27},
  abstract = {The purpose of this study was to examine the effect of gamification on motivation levels of preservice teachers in social studies teaching. As a quantitative research method, semi-experimental design with pretest-posttest and control group was used in the study. The research was carried out with 2nd year undergraduate students in the Department of Social Studies Education in the spring semester of the 2018-2019 academic year in Turkey. Participants consisted of 56 teacher can\- didates, 36 in experimental group and 20 in control group. Motivation scale and structured interview form were implemented as data collection tools. According to the findings obtained after the four-week application period, the motivation of the experimental group teacher can\- didates for the course increased significantly compared to those of the control group. As a natural consequence of the increase in motivation - the most basic component of creativity, it was assumed that the creative skills of the participants increased too. On the other hand, the quali\- tative results indicated that they held positive opinions about the lessons i.e., the lessons became more fun. Moreover, the participants stated that gamification added a fun competition to the lesson, and they intended to use it in their own lessons in the future.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/5UB9BAZF/Yildiz et al. - 2021 - The effect of gamification on motivation in the ed.pdf}
}

@book{yinCaseStudyResearch2014,
  title = {Case {{Study Research}}: Design and Methods},
  author = {Yin, Robert K.},
  year = {2014},
  edition = {5th},
  publisher = {{Sage Publications Ltd}},
  isbn = {978-1-4522-4256-9}
}

@article{yingxuwangLayeredReferenceModel2006,
  title = {A Layered Reference Model of the Brain ({{LRMB}})},
  author = {{Yingxu Wang} and {Ying Wang} and Patel, S. and Patel, D.},
  year = {2006},
  month = mar,
  journal = {IEEE Transactions on Systems, Man, and Cybernetics, Part C (Applications and Reviews)},
  volume = {36},
  number = {2},
  pages = {124--133},
  issn = {1558-2442},
  doi = {10.1109/TSMCC.2006.871126},
  abstract = {A variety of life functions and cognitive processes (CPs) have been identified in cognitive informatics, psychology, cognitive science, and neurophilosophy. This paper attempts to develop a layered reference model of the brain (LRMB) that formally and rigorously explains the functional mechanisms and CPs of natural intelligence. A comprehensive and coherent set of mental processes and their relationships is identified in LRMB that encompasses 37 CPs at six layers known as the sensation, memory, perception, action, metacognitive, and higher cognitive layers from the bottom-up. The LRMB reference model provides an integrated framework for modeling the brain and the mind. LRMB also enables future extension and refinement of the CPs within the same hierarchical framework. LRMB can be applied to explain a wide range of physiological, psychological, and cognitive phenomena in cognitive informatics, particularly the relationships and interactions between the inherited and the acquired life functions, as well as those of the subconscious and conscious CPs.},
  keywords = {acquired life function,autonomic computing,Autonomic computing,brain,Brain modeling,brain models,Cities and towns,cognition,cognitive informatics,Cognitive informatics,cognitive layers,cognitive process,cognitive processes (CPs),cognitive science,Cognitive science,Councils,functional mechanism,hierarchical framework,Information processing,integrated framework,Intelligent sensors,Intelligent systems,layered reference model,memory,mental process,natural intelligence,natural intelligence (NI),neurophilosophy,neurophysiology,neuropsychology,perception,psychology,Psychology,reference model,sensation,Software engineering,the brain},
  annotation = {00348},
  file = {/Users/igormoreno/Zotero/storage/53D48HT6/Yingxu Wang et al. - 2006 - A layered reference model of the brain (LRMB).pdf;/Users/igormoreno/Zotero/storage/JWJXG26U/1624538.html}
}

@misc{yorgeyByorgeyThesis2023,
  title = {Byorgey/Thesis},
  author = {Yorgey, Brent},
  year = {2023},
  month = jun,
  urldate = {2023-06-08},
  abstract = {Brent's PhD thesis.}
}

@article{yorgeyCOMBINATORIALSPECIESLABELLED,
  title = {{{COMBINATORIAL SPECIES AND LABELLED STRUCTURES}}},
  author = {Yorgey, Brent},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/RJT2PKFG/Yorgey - COMBINATORIAL SPECIES AND LABELLED STRUCTURES.pdf}
}

@inproceedings{yorgeyGivingHaskellPromotion2012,
  title = {Giving {{Haskell}} a {{Promotion}}},
  booktitle = {Proceedings of the 8th {{ACM SIGPLAN Workshop}} on {{Types}} in {{Language Design}} and {{Implementation}}},
  author = {Yorgey, Brent A. and Weirich, Stephanie and Cretin, Julien and Peyton Jones, Simon and Vytiniotis, Dimitrios and Magalh{\~a}es, Jos{\'e} Pedro},
  year = {2012},
  series = {{{TLDI}} '12},
  pages = {53--66},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2103786.2103795},
  urldate = {2019-06-28},
  abstract = {Static type systems strive to be richly expressive while still being simple enough for programmers to use. We describe an experiment that enriches Haskell's kind system with two features promoted from its type system: data types and polymorphism. The new system has a very good power-to-weight ratio: it offers a significant improvement in expressiveness, but, by re-using concepts that programmers are already familiar with, the system is easy to understand and implement.},
  isbn = {978-1-4503-1120-5},
  keywords = {haskell,kinds,polymorphism,promotion},
  annotation = {00172},
  file = {/Users/igormoreno/Zotero/storage/QFEW3JNJ/Yorgey et al. - 2012 - Giving Haskell a Promotion.pdf}
}

@article{yorgeyMonoidsThemeVariations2012,
  title = {Monoids: {{Theme}} and {{Variations}} ({{Functional Pearl}})},
  shorttitle = {Monoids},
  author = {Yorgey, Brent A.},
  year = {2012},
  month = sep,
  journal = {ACM SIGPLAN Notices},
  volume = {47},
  number = {12},
  pages = {105--116},
  issn = {0362-1340},
  doi = {10.1145/2430532.2364520},
  urldate = {2021-12-29},
  abstract = {The monoid is a humble algebraic structure, at first glance even downright boring. However, there's much more to monoids than meets the eye. Using examples taken from the diagrams vector graphics framework as a case study, I demonstrate the power and beauty of monoids for library design. The paper begins with an extremely simple model of diagrams and proceeds through a series of incremental variations, all related somehow to the central theme of monoids. Along the way, I illustrate the power of compositional semantics; why you should also pay attention to the monoid's even humbler cousin, the semigroup; monoid homomorphisms; and monoid actions.},
  keywords = {edsl,homomorphism,monoid,monoid action},
  file = {/Users/igormoreno/Zotero/storage/4DZASXPZ/Yorgey - 2012 - Monoids Theme and Variations (Functional Pearl).pdf;/Users/igormoreno/Zotero/storage/RUZ7XC9D/Yorgey - Monoids Theme and Variations (Functional Pearl).pdf}
}

@article{youSyntacticApproachShape1979,
  title = {A {{Syntactic Approach}} to {{Shape Recognition Using Attributed Grammars}}},
  author = {You, Kai Ching and Fu, King-Sun},
  year = {1979},
  journal = {IEEE Transactions on Systems, Man, and Cybernetics},
  volume = {9},
  number = {6},
  pages = {334--345},
  issn = {0018-9472},
  doi = {10.1109/TSMC.1979.4310222},
  urldate = {2023-01-11},
  abstract = {The syntactic method is used to describe the structure of a two-dimensional shape by grammatical rules and the local details by primitives. Four attributes are proposed to describe an open curve segment, and the angle between two consecutive curve segments is used to describe the connection. The properties of the attributes and the recognition capability are studied. Two algorithms are implemented to perform the primitive extraction and syntax analysis at the same step by using both semantic and syntactic information, namely, the attributes and production rules. Also, an automatic inference procedure for the shape grammar is presented. This approach attempts to develop a general method for shape recognition.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/CRI733TX/You and Fu - 1979 - A Syntactic Approach to Shape Recognition Using At.pdf}
}

@inproceedings{yuVisualFlexibilityArithmetic2018,
  title = {Visual {{Flexibility}} in {{Arithmetic Expressions}}},
  booktitle = {Proceedings of the 40th {{Annual Conference}} of the {{Cognitive Science Society}}},
  author = {Yu, Jingqi and Landy, David and Goldstone, Robert L},
  year = {2018},
  pages = {2750--2755},
  publisher = {{Cognitive Science Society}},
  abstract = {We investigated whether, and in what, ways people use visual structures to evaluate mathematical expressions. We also explored the relationship between strategy use and other common measures in mathematics education. Participants organized long sum/products when visual structure was available in algebraic expressions. Two experiments showed a similar pattern: One group of participants primarily calculated from left to right, or combined identical numbers together. A second group calculated adjacent pairs. A third group tended to group terms which either produced easy sums (e.g., 6+4), or participated in a global structure. These different strategies were associated with different levels of success on the task, and, in Experiment 2, with differential math anxiety and mathematical skill. Specifically, problem solvers with lower math anxiety and higher math ability tend to group by chunks and easy calculation. These results identify an important role for the perception of coherent structure and pattern identification in mathematical reasoning.},
  langid = {english},
  keywords = {To Read},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/BPTIL756/Yu et al - Visual Flexibility in Arithmetic Expressions.pdf}
}

@article{zainuddinImpactGamificationLearning2020,
  title = {The Impact of Gamification on Learning and Instruction: {{A}} Systematic Review of Empirical Evidence},
  shorttitle = {The Impact of Gamification on Learning and Instruction},
  author = {Zainuddin, Zamzami and Chu, Samuel Kai Wah and Shujahat, Muhammad and Perera, Corinne Jacqueline},
  year = {2020},
  month = jun,
  journal = {Educational Research Review},
  volume = {30},
  pages = {100326},
  issn = {1747938X},
  doi = {10.1016/j.edurev.2020.100326},
  urldate = {2023-06-27},
  abstract = {The adoption of gamification in learning and instruction is perceived to have mass appeal among the learners in stimulating motivation, learner engagement and social influence. This study is an attempt to present a summary of the empirical findings of state-of-the-art literature in the emerging field of gamification within the educational domain of learning and instruction. It reveals the latest scientific research evidence on the emerging trends of learning technologies and gamification plugins along with extending the possibilities for future research directions in revolutionizing learning and instruction through gamification. A systematic literature review examined the thematic and content analysis of 46 empirical research papers published in the Web of Science database between 2016 and 2019. The review critically appraised and evaluated the various contradictions found in the literature along with setting the stage for the significance of future research studies to re-examine the theoretical foundations of gamification, its methodological approaches, theoretical models, gaming platforms and apps, game mechanics and learning outcomes. This study not only attempts to shed light on the novelty of gamified learning perceived as a game-changer and key enabler of motivation, engagement, and user experience but also sought to outline the key challenges and barriers of gamification.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/N5NE4FXN/Zainuddin et al. - 2020 - The impact of gamification on learning and instruc.pdf}
}

@article{zainuddinRoleGamifiedEquizzes2020,
  title = {The Role of Gamified E-Quizzes on Student Learning and Engagement: {{An}} Interactive Gamification Solution for a Formative Assessment System},
  shorttitle = {The Role of Gamified E-Quizzes on Student Learning and Engagement},
  author = {Zainuddin, Zamzami and Shujahat, Muhammad and Haruna, Hussein and Chu, Samuel Kai Wah},
  year = {2020},
  month = feb,
  journal = {Computers \& Education},
  volume = {145},
  pages = {103729},
  issn = {03601315},
  doi = {10.1016/j.compedu.2019.103729},
  urldate = {2023-06-27},
  abstract = {This study investigated the differences in learners' performance and perceived engagement be\- tween three intervention groups in a Science class, using two types of pedagogical intervention: traditional instruction with paper-based quizzes and gamified instruction with gamified e-quizzes as formative assessments. With respect to the gamified instruction, three types of gamification applications were employed: Socrative, Quizizz, and iSpring Learn LMS. The effects of the instructional intervention (n {$\frac{1}{4}$} 94), as well as evaluative feedback, were obtained with the aid of formative quizzes, post-questionnaire surveys, and personal interviews. The results showed that the employment of innovative gamified e-quiz applications (i.e., Socrative, Quizizz, and iSpring Learn LMS) and paper-based quizzes were effective in evaluating students' learning performance, particularly as formative assessment after completing each topic. Finding ways to apply games or game concepts in the classroom can be a promising and innovative tool for educators to engage their students in creative learning skills and attractive competition.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/3N7VTQYA/Zainuddin et al. - 2020 - The role of gamified e-quizzes on student learning.pdf}
}

@article{zamaryAreProvidedExamples2018,
  title = {Are {{Provided Examples}} or {{Faded Examples More Effective}} for {{Declarative Concept Learning}}?},
  author = {Zamary, Amanda and Rawson, Katherine A.},
  year = {2018},
  month = sep,
  journal = {Educational Psychology Review},
  volume = {30},
  number = {3},
  pages = {1167--1197},
  issn = {1573-336X},
  doi = {10.1007/s10648-018-9433-y},
  urldate = {2018-11-09},
  abstract = {Declarative concepts (abstract concepts denoted by key terms and definitions) are foundational content in many courses at most grade levels. The current research compared the relative effectiveness of provided examples to faded examples (a technique involving a transition from studying provided examples to completing partial examples to generating examples) for learning declarative concepts. In two experiments (experiment 1: n = 146, experiment 2: n = 131), participants were randomly assigned to study provided examples or complete faded examples. Two days later, participants took two final tests to assess their long-term learning: a novel example classification test and an example generation test. Results across experiments were highly consistent: performance on both final tests was similar following provided examples and faded examples practice; however, provided examples took much less time to implement during practice. Therefore, considering both long-term learning and efficiency outcomes collectively for evaluating the effectiveness of learning techniques, provided examples continue to be more effective than techniques involving both provided examples and generated examples for learning declarative concepts.},
  langid = {english},
  keywords = {Declarative concepts,Faded examples,Provided examples,Relational categories},
  file = {/Users/igormoreno/Zotero/storage/63TK7ZP3/Zamary and Rawson - 2018 - Are Provided Examples or Faded Examples More Effective for Declarative Concept.pdf}
}

@article{zamaryWhichTechniqueMost2018,
  title = {Which {{Technique}} Is Most {{Effective}} for {{Learning Declarative Concepts}}\textemdash{{Provided Examples}}, {{Generated Examples}}, or {{Both}}?},
  author = {Zamary, Amanda and Rawson, Katherine A.},
  year = {2018},
  month = mar,
  journal = {Educational Psychology Review},
  volume = {30},
  number = {1},
  pages = {275--301},
  issn = {1573-336X},
  doi = {10.1007/s10648-016-9396-9},
  urldate = {2018-11-09},
  abstract = {Students in many courses are commonly expected to learn declarative concepts, which are abstract concepts denoted by key terms with short definitions that can be applied to a variety of scenarios as reported by Rawson et al. (Educational Psychology Review 27:483\textendash 504, 2015). Given that declarative concepts are common and foundational in many courses, an important question arises: What are the most effective techniques for learning declarative concepts? The current research competitively evaluated the effectiveness of various example-based learning techniques for learning declarative concepts, with respect to both long-term learning and efficiency during study. In experiment 1, students at a large, Midwestern university were asked to learn 10 declarative concepts in social psychology by studying provided examples (instances of concepts that are provided to students illustrate how the concept can be applied), generating examples (instances of concepts that the student generates on his or her own to practice applying the concept), or by receiving a combination of alternating provided examples and generated examples. Two days later, students completed final tests (an example classification test and a definition cued recall test). Experiment 2 replicated and extended findings from experiment 1. The extension group was a variation of the combination group, in which participants were simultaneously presented with a provided example while generating an example. In both experiments, long-term learning and study efficiency were greater following the study of provided examples relative to the other example-based learning techniques.},
  langid = {english},
  keywords = {Declarative concepts,Example-based learning,Generated examples,Provided examples},
  file = {/Users/igormoreno/Zotero/storage/MUXSZI4Z/Zamary and Rawson - 2018 - Which Technique is most Effective for Learning Declarative Concepts—Provided.pdf}
}

@article{zanibbiRecognitionRetrievalMathematical2012,
  title = {Recognition and Retrieval of Mathematical Expressions},
  author = {Zanibbi, Richard and Blostein, Dorothea},
  year = {2012},
  month = dec,
  journal = {International Journal on Document Analysis and Recognition (IJDAR)},
  volume = {15},
  number = {4},
  pages = {331--357},
  issn = {1433-2833, 1433-2825},
  doi = {10.1007/s10032-011-0174-4},
  urldate = {2021-05-23},
  abstract = {Document recognition and retrieval technologies complement one another, providing improved access to increasingly large document collections. While recognition and retrieval of textual information is fairly mature, with wide-spread availability of Optical Character Recognition (OCR) and text-based search engines, recognition and retrieval of graphics such as images, figures, tables, diagrams, and mathematical expressions are in comparatively early stages of research. This paper surveys the state of the art in recognition and retrieval of mathematical expressions, organized around four key problems in math retrieval (query construction, normalization, indexing, and relevance feedback), and four key problems in math recognition (detecting expressions, detecting and classifying symbols, analyzing symbol layout, and constructing a representation of meaning). Of special interest is the machine learning problem of jointly optimizing the component algorithms in a math recognition system, and developing effective indexing, retrieval and relevance feedback algorithms for math retrieval. Another important open problem is developing user interfaces that seamlessly integrate recognition and retrieval. Activity in these important research areas is increasing, in part because math notation provides an excellent domain for studying problems common to many document and graphics recognition and retrieval applications, and also because mature applications will likely provide substantial benefits for education, research, and mathematical literacy.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/9GGUDW4C/Zanibbi and Blostein - 2012 - Recognition and retrieval of mathematical expressi.pdf}
}

@article{zaranisUsingScratchApp2016,
  title = {Using {{Scratch}} and {{App Inventor}} for Teaching Introductory Programming in {{Secondary Education}}. {{A}} Case Study.},
  author = {Zaranis, Nicholas and Orfanakis, Vasileios and Papadakis, Stamatis and Kalogiannakis, Michail},
  year = {2016},
  journal = {International Journal of Technology Enhanced Learning},
  volume = {1},
  number = {1},
  pages = {1},
  issn = {1753-5255, 1753-5263},
  doi = {10.1504/IJTEL.2016.10001505},
  urldate = {2020-06-22},
  abstract = {Paradoxically, as the role and significance of computing have increased in society and the economy, and coding is recognised as the fourth literacy, the number of students attending a programming course is in decline. In an attempt to increase interest in computer science (CS), there has been made much effort in developing tools and activities as preliminary learning materials in schools and universities. App Inventor and Scratch strive to engage the novice users by allowing them to write programs about things that connect with their interests in contrast to more conventional programming. In this paper, we focus on the use of these two block-based programming environments as tools to facilitate learning programming for novices. In our analysis, both novice programming environments (NPEs) seemed to be attractive platforms for introducing fundamental concepts in computer programming and both look appealing for majors and non-majors as well.},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/T9ADZ39M/Zaranis et al - 2016 - Using Scratch and App Inventor for teaching introductory programming in.pdf}
}

@inproceedings{zavalaUseSemanticBasedAIG2018,
  title = {On the {{Use}} of {{Semantic-Based AIG}} to {{Automatically Generate Programming Exercises}}},
  booktitle = {Proceedings of the 49th {{ACM Technical Symposium}} on {{Computer Science Education}}},
  author = {Zavala, Laura and Mendoza, Benito},
  year = {2018},
  month = feb,
  pages = {14--19},
  publisher = {{ACM}},
  address = {{Baltimore Maryland USA}},
  doi = {10.1145/3159450.3159608},
  urldate = {2020-07-22},
  abstract = {In introductory programming courses, proficiency is typically achieved through substantial practice in the form of relatively small assignments and quizzes. Unfortunately, creating programming assignments and quizzes is both, time consuming and error prone. Furthermore, grading the assignments and providing timely and detailed feedback is paramount to student improvement. We use Automatic Item Generation (AIG) in order to address the problem of creating numerous programming exercises that can be used for assignments or quizzes in introductory programming courses. AIG is based on the use of test-item templates with embedded variables and formulas. The variables and formulas in the template are resolved by a computer program with actual values to generate test-items. Thus, hundreds or even thousands of test-items can be generated with a single test-item template. We discuss a semantic-based AIG approach for automatically generating programming exercises. The approach was incorporated into an existing selfassessment and practice tool for students learning computer programming. The tool has been used in different introductory programming courses to generate a set of practice exercises different for each student, but with the same difficulty and quality.},
  isbn = {978-1-4503-5103-4},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/X4H4U842/Zavala and Mendoza - 2018 - On the Use of Semantic-Based AIG to Automatically .pdf}
}

@inproceedings{zavgorodniaiaShouldExplanationsProgram2020,
  title = {Should {{Explanations}} of {{Program Code Use Audio}}, {{Text}}, or {{Both}}? {{A Replication Study}}},
  shorttitle = {Should {{Explanations}} of {{Program Code Use Audio}}, {{Text}}, or {{Both}}?},
  booktitle = {Koli {{Calling}} '20: {{Proceedings}} of the 20th {{Koli Calling International Conference}} on {{Computing Education Research}}},
  author = {Zavgorodniaia, Albina and Hellas, Arto and Sepp{\"a}l{\"a}, Otto and Sorva, Juha},
  year = {2020},
  month = nov,
  pages = {1--10},
  publisher = {{ACM}},
  address = {{Koli Finland}},
  doi = {10.1145/3428029.3428050},
  urldate = {2021-06-14},
  abstract = {Studies in educational psychology suggest that people learn better when visual learning materials are accompanied by audio explanations rather than textual ones. Research on how this modality effect applies to computing education is scarce and inconclusive. We explore whether modality of instruction affects learning from videos that use a series of example programs to explain how variables work in Python. Learners (n=186) were crowdsourced from the internet and randomized in three groups, who received explanations as audio, text, or both, respectively. We did not find significant differences between the groups in near transfer to code-tracing tasks or perceived cognitive load. The result affirms the need to further investigate instructional modalities in programming education. There are a number of theoretical, methodological, and instructional-design factors that may explain these and earlier findings; we trace out future research that could explore those factors.},
  isbn = {978-1-4503-8921-1},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/BXT45YUC/Zavgorodniaia et al. - 2020 - Should Explanations of Program Code Use Audio, Tex.pdf}
}

@incollection{zdunGuidingArchitecturalDecision2018,
  title = {Guiding {{Architectural Decision Making}} on {{Quality Aspects}} in {{Microservice APIs}}},
  booktitle = {Service-{{Oriented Computing}}},
  author = {Zdun, Uwe and Stocker, Mirko and Zimmermann, Olaf and Pautasso, Cesare and L{\"u}bke, Daniel},
  editor = {Pahl, Claus and Vukovic, Maja and Yin, Jianwei and Yu, Qi},
  year = {2018},
  volume = {11236},
  pages = {73--89},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-030-03596-9_5},
  urldate = {2021-04-30},
  abstract = {Microservice APIs represent the client perspective on microservicebased software architecture design and related practices. Major issues in API design concern the quality aspects of the API. However, it is not well understood today what the established practices related to those quality aspects are, how these practices are related, and what the major decision drivers are. This leads to great uncertainty in the design process. In this paper, we report on a qualitative, indepth study of 31 widely used APIs plus 24 API specifications, standards, and technologies. In our study we identified six recurring architectural design decisions in two API design contexts with a total of 40 decision options and a total of 47 decision drivers. We modelled our findings in a formal, reusable architectural decision model. We measured the uncertainty in the resulting design space with and without use of our model, and found that a substantial uncertainty reduction can be potentially achieved by applying our model.},
  isbn = {978-3-030-03595-2 978-3-030-03596-9},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/VEV5CHP8/Zdun et al. - 2018 - Guiding Architectural Decision Making on Quality A.pdf}
}

@inproceedings{zehetmeierConceptInterventionsThat2016,
  title = {A Concept for Interventions That Address Typical Error Classes in Programming Education},
  booktitle = {2016 {{IEEE Global Engineering Education Conference}} ({{EDUCON}})},
  author = {Zehetmeier, Daniela and {Bruggemann-Klein}, Anne and Bottcher, Axel and Thurner, Veronika},
  year = {2016},
  month = apr,
  pages = {545--554},
  publisher = {{IEEE}},
  address = {{Abu Dhabi, United Arab Emirates}},
  doi = {10.1109/EDUCON.2016.7474605},
  urldate = {2020-06-22},
  abstract = {Many programming errors that we observe in novice programmers coincide with those that are described in literature. Due to their vast number, it is practically impossible to list all errors explicitly and describe interventions for each specific error. Therefore, to reduce the number of single instances that have to be considered, we developed an error classification scheme that enables us to classify errors into seven classes. These classes are based on the revised Bloom-taxonomy and focus on the underlying problem that causes the observed errors. Based on these classes, we investigate and develop interventions that focus on the underlying problems, thus addressing the problem causes rather than their symptoms. In this paper, we describe both the interventions themselves, and the research process we applied for identifying these interventions.},
  isbn = {978-1-4673-8633-3},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/ML24P6LN/Zehetmeier et al - 2016 - A concept for interventions that address typical error classes in programming.pdf}
}

@misc{zeileisExams,
  title = {R/Exams},
  author = {Zeileis, Achim},
  journal = {R/exams},
  urldate = {2020-07-22},
  abstract = {Automatic generation  and evaluation of exams. From Markdown, LaTeX and R code to standalone documents, learning management systems and live voting.},
  howpublished = {http://www.R-exams.org//},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/TV26CB2F/www.r-exams.org.html}
}

@book{zelkowitzAdvancesComputers2009,
  title = {Advances in Computers},
  author = {Zelkowitz, Marvin V.},
  year = {2009},
  publisher = {{Academic}},
  address = {{London}},
  isbn = {978-0-12-374812-6},
  langid = {english},
  lccn = {004.05},
  file = {/Users/igormoreno/Zotero/storage/7SWBUPAS/Zelkowitz - 2009 - Advances in computers.pdf}
}

@book{zendlerUnterrichtsmethodenFurInformatikunterricht2018,
  title = {{Unterrichtsmethoden f\"ur den Informatikunterricht: Mit praktischen Beispielen f\"ur prozess- und ergebnisorientiertes Lehren}},
  shorttitle = {{Unterrichtsmethoden f\"ur den Informatikunterricht}},
  author = {Zendler, Andreas},
  year = {2018},
  month = mar,
  edition = {1. Aufl. 2018},
  publisher = {{Springer Vieweg}},
  address = {{Wiesbaden}},
  abstract = {Zu den meisten Unterrichtsf\"achern findet man heute umfangreiche Standardwerke zum Thema Unterrichtsmethoden, nur f\"ur das Fach Informatik existiert keine vergleichbare Literatur. Dabei zeigt ein Blick auf die Bildungspl\"ane aller Bundesl\"ander, dass sich die Informatik als Unterrichtsfach in den Sekundarstufen I und II etablieren wird. Das vorliegende Buch versteht sich als ein Beitrag zur Schlie\ss ung dieser L\"ucke in der Informatikdidaktik.~~Unterrichtsmethoden sind f\"ur den Lernerfolg im Unterricht von entscheidender Bedeutung und bilden auch den Dreh- und Angelpunkt dieses Buches. Unterrichtsmethode wird~ verstanden als klar umrissener, begrifflich herausl\"osbarer, selbstst\"andiger, wenn auch integrierter Bestandteil des Unterrichts. Als Beispiele f\"ur dieses Verst\"andnis von Unterrichtsmethoden werden unter anderem die Vor- und Nachteile des problemorientierten Unterrichts, des entdeckenden Lernens, der Computersimulation, des Frontalunterrichts und der Modellmethode f\"ur die Informatikdidaktik erl\"autert. So entsteht ein \"Uberblick \"uber 20 verschiedene und f\"ur den Informatikunterricht relevante Methoden, die anhand von Vorgehensmodellen und konkreten Beispielen f\"ur den Einsatz im Unterricht illustriert werden. Au\ss erdem haben Informatiklehrer die verschiedenen Methoden in Hinblick auf ihre Lerneffektivit\"at eingesch\"atzt.~Die Grundlage f\"ur dieses erste \"Ubersichtswerk zu Unterrichtsmethoden f\"ur den Informatikunterricht bilden verschiedene Forschungsprojekte der P\"adagogischen Hochschule Ludwigsburg, die zwischen 2015 und 2018 Daten zu diesem Thema gesammelt haben. Auch dieses wissenschaftliche Fundament macht das Buch zu einer unbedingten Empfehlung f\"ur alle (angehenden) Informatiklehrer, die schon lange nach einem Titel mit Unterrichtsmaterialien f\"ur den Informatikunterricht gesucht haben.},
  isbn = {978-3-658-20674-1},
  langid = {ngerman}
}

@inproceedings{zengerIndependentlyExtensibleSolutions2005,
  title = {Independently Extensible Solutions to the Expression Problem},
  booktitle = {In {{Proc}}. {{FOOL}} 12},
  author = {Zenger, Matthias and Odersky, Martin},
  year = {2005},
  abstract = {The expression problem is fundamental for the development of extensible software. Many (partial) solutions to this problem have been proposed in the past, but the question of how to use different, independent extensions jointly has received less attention so far. This paper proposes solutions to the expression problem that make it possible to combine independent extensions in a flexible, modular, and typesafe way. The solutions, formulated in the programming language Scala, are affected with only a small implementation overhead and are relatively easy to implement by hand. 1. The Expression Problem Since software evolves over time, it is essential for software systems to be extensible. But the development of extensible software poses many design and implementation problems, especially, if extensions cannot be anticipated. The expression problem is probably the most fundamental one among these problems. It arises when recursively defined datatypes and operations on these types have to be extended simultaneously. The term expression problem was originally coined by Phil Wadler in a post on the Java-Genericity mailing list [34], although it was Cook who first discussed this problem [9]. His work motivated several others to reason about variants of the problem in the following years [18, 27, 17, 12]. In his post to the Java-Genericity mailing list, Wadler also proposed a solution to the problem written in an extended version of GENERIC JAVA [3]. Only later it appeared that this solution could not be typed. For this paper, we paraphrase the problem in the following way: Suppose we have a datatype which is defined by a Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee.},
  annotation = {00103},
  file = {/Users/igormoreno/Zotero/storage/N3NTSLEL/Zenger and Odersky - 2005 - Independently extensible solutions to the expressi.pdf;/Users/igormoreno/Zotero/storage/3ZKC2JAX/summary.html}
}

@article{zhangExaminingDifferentTypes2011,
  title = {Examining Different Types of Collaborative Learning in a Complex Computer-Based Environment: {{A}} Cognitive Load Approach},
  shorttitle = {Examining Different Types of Collaborative Learning in a Complex Computer-Based Environment},
  author = {Zhang, Liming and Ayres, Paul and Chan, KaKin},
  year = {2011},
  month = jan,
  journal = {Computers in Human Behavior},
  series = {Current {{Research Topics}} in {{Cognitive Load Theory}}},
  volume = {27},
  number = {1},
  pages = {94--98},
  issn = {0747-5632},
  doi = {10.1016/j.chb.2010.03.038},
  urldate = {2018-11-06},
  abstract = {This study compared the effects of two collaborative learning strategies (Open-ended and Task-based) with an individualized learning strategy on individual learning in a computer-based environment. The experiment sought ecological validity by conducting it under real teaching and homework conditions. Ninety-four students from grade 9 participated in a webpage design task. Cognitive load theory was used to predict that the collaborative approaches would outperform the individualized approach due to reduced cognitive load. This hypothesis was confirmed by performance scores and cognitive load only in the case of the Open-ended collaborative learning condition. Evidence was also found that the Open-ended collaborative learning condition outperformed the Task-based collaborative one. It was concluded that in collaborative learning a more Open-ended task design together with moderate independent sub-task requirements leads to more effective learning.},
  keywords = {Cognitive load measurement,Cognitive load theory,Collaborative learning,Computer-based learning environment,Individual learning,Quasi-experiment},
  file = {/Users/igormoreno/Zotero/storage/S9RYPK47/Zhang et al - 2011 - Examining different types of collaborative learning in a complex computer-based.pdf;/Users/igormoreno/Zotero/storage/TPLGZT9S/S0747563210001639.html}
}

@misc{zhangMathOperationEmbeddings2021,
  title = {Math {{Operation Embeddings}} for {{Open-ended Solution Analysis}} and {{Feedback}}},
  author = {Zhang, Mengxue and Wang, Zichao and Baraniuk, Richard and Lan, Andrew},
  year = {2021},
  month = apr,
  number = {arXiv:2104.12047},
  eprint = {2104.12047},
  primaryclass = {cs},
  publisher = {{arXiv}},
  urldate = {2023-01-09},
  abstract = {Feedback on student answers and even during intermediate steps in their solutions to open-ended questions is an important element in math education. Such feedback can help students correct their errors and ultimately lead to improved learning outcomes. Most existing approaches for automated student solution analysis and feedback require manually constructing cognitive models and anticipating student errors for each question. This process requires significant human effort and does not scale to most questions used in homework and practices that do not come with this information. In this paper, we analyze students' step-by-step solution processes to equation solving questions in an attempt to scale up error diagnostics and feedback mechanisms developed for a small number of questions to a much larger number of questions. Leveraging a recent math expression encoding method, we represent each math operation applied in solution steps as a transition in the math embedding vector space. We use a dataset that contains student solution steps in the Cognitive Tutor system to learn implicit and explicit representations of math operations. We explore whether these representations can i) identify math operations a student intends to perform in each solution step, regardless of whether they did it correctly or not, and ii) select the appropriate feedback type for incorrect steps. Experimental results show that our learned math operation representations generalize well across different data distributions.},
  archiveprefix = {arxiv},
  keywords = {Computer Science - Computers and Society,Computer Science - Machine Learning},
  file = {/Users/igormoreno/Zotero/storage/3GNBITWC/Zhang et al - 2021 - Math Operation Embeddings for Open-ended Solution Analysis and Feedback.pdf;/Users/igormoreno/Zotero/storage/4S62VPD3/2104.html}
}

@article{zhangRepresentationsDistributedCognitive1994,
  title = {Representations in Distributed Cognitive Tasks},
  author = {Zhang, Jiaje and Norman, Donald A.},
  year = {1994},
  month = jan,
  journal = {Cognitive Science},
  volume = {18},
  number = {1},
  pages = {87--122},
  issn = {0364-0213},
  doi = {10.1016/0364-0213(94)90021-3},
  urldate = {2018-12-02},
  abstract = {In this article we propose a theoretical framework of distributed representations and a methodology of representational analysis for the study of distributed cognitive tasks\textemdash tasks that require the processing of information distributed across the internal mind and the external environment. The basic principle of distributed representations Is that the representational system of a distributed cognitive task is a set of internal and external representations, which together represent the abstract structure of the task. The basic strategy of representational analysis is to decompose the representation of a hierarchical task into its component levels so that the representational properties at each level can be independently examined. The theoretical framework and the methodology are used to analyze the hierarchical structure of the Tower of Hanoi problem. Based on this analysis, four experiments are designed to examine the representational properties of the Tower of Hanoi. Finally, the nature of external representations is discussed.},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/TZPXHDPZ/Zhang and Norman - 1994 - Representations in distributed cognitive tasks.pdf;/Users/igormoreno/Zotero/storage/8RWVQ3BL/0364021394900213.html}
}

@article{zhangSimpleFastAlgorithms1989,
  title = {Simple {{Fast Algorithms}} for the {{Editing Distance Between Trees}} and {{Related Problems}}},
  author = {Zhang, Kaizhong and Shasha, Dennis},
  year = {1989},
  month = dec,
  journal = {SIAM J. Comput.},
  volume = {18},
  pages = {1245--1262},
  doi = {10.1137/0218082},
  abstract = {Ordered labeled trees are trees in which the left-to-right order among siblings is significant. The distance between two ordered trees is considered to be the weighted number of edit operations (insert, delete, and modify) to transform one tree to another. The problem of approximate tree matching is also considered. Specifically, algorithms are designed to answer the following kinds of questions: 1. What is the distance between two trees? 2. What is the minimum distance between T 1 and T 2 when zero or more subtrees can be removed from T 2 ? 3. Let the pruning of a tree at node n mean removing all the descendants of node n. The analogous question for prunings as for subtrees is answered. A dynamic programming algorithm is presented to solve the three questions in sequential time O(|T 1 |\texttimes |T 2 |\texttimes min(depth(T 1 ),leaves(T 1 ))\texttimes min(depth(T 2 ),leaves(T 2 ))) and space O(|T 1 |\texttimes |T 2 |) compared with O(|T 1 |\texttimes |T 2 |\texttimes (depth(T 1 )) 2 \texttimes (depth(T 2 )) 2 ) for the best previous published algorithm due to Tai [J. Assoc. Comput. Mach. 26, 422-433 (1979; Zbl 0409.68040)]. Further, the algorithm presented here can be parallelized to give time O(|T 1 |+|T 2 |).},
  file = {/Users/igormoreno/Zotero/storage/G9R5MEPY/Zhang and Shasha - 1989 - Simple Fast Algorithms for the Editing Distance Be.pdf}
}

@inproceedings{zhangUsingGamelikeModule2014,
  title = {Using a Game-like Module to Reinforce Student Understanding of Recursion},
  booktitle = {2014 {{IEEE Frontiers}} in {{Education Conference}} ({{FIE}}) {{Proceedings}}},
  author = {Zhang, Jinghua and Atay, Mustafa and Smith, Emanuel and Caldwell, Elvira R. and Jones, Elva J.},
  year = {2014},
  month = oct,
  pages = {1--7},
  issn = {2377-634X},
  doi = {10.1109/FIE.2014.7044093},
  abstract = {Recursion is one of the most powerful problem-solving techniques in computer science, but many students seem to struggle with the concept of recursion. In addition, the instructors find it hard to teach this concept using traditional teaching method. This paper presents a game module titled "Recursive Runner" that aims to reinforce student understanding of recursion in a game. Four undergraduate students developed the game with GameMaker Studio in three months. The game was designed for short gameplay time and it does not require any prior experience in gaming. The objective of the game is to provide the students with a fun environment to visualize and follow the flow of execution of recursive functions. This paper presents the game design and implementation in detail and shares our experiences in using this module in the CSC1311 Computer Programming II and CSC2331 Data Structures classes at Winston-Salem State University (WSSU). A pretest, a posttest and a survey were developed and used in the evaluation process. In addition, a lab assignment was designed to use with the game to evaluate student understanding of the concept. Initial assessment outcomes show promising results and the feedback is positive according to the survey and interview.},
  keywords = {computer aided instruction,computer games,Computer Programming,computer science,computer science education,CSC1311 Computer Programming II,CSC2331 data structures,data structures,Data structures,Data Structures,further education,Game-Based Learning,game-like module,GameMaker Studio,Games,Logic gates,Motivation,problem-solving technique,Programming profession,Recursion,recursive runner,Springs,student understanding reinforcement,teaching,teaching method,undergraduate students,Winston-Salem State University,WSSU},
  annotation = {00000},
  file = {/Users/igormoreno/Zotero/storage/7LNNC8HB/Zhang et al. - 2014 - Using a game-like module to reinforce student unde.pdf;/Users/igormoreno/Zotero/storage/C83AIXC8/7044093.html}
}

@inproceedings{zhiEvaluatingEffectivenessParsons2019,
  ids = {zhiEvaluatingEffectivenessParsons2019a},
  title = {Evaluating the {{Effectiveness}} of {{Parsons Problems}} for {{Block-based Programming}}},
  booktitle = {Proceedings of the 2019 {{ACM Conference}} on {{International Computing Education Research}}},
  author = {Zhi, Rui and Chi, Min and Barnes, Tiffany and Price, Thomas W.},
  year = {2019},
  month = jul,
  pages = {51--59},
  publisher = {{ACM}},
  address = {{Toronto ON Canada}},
  doi = {10.1145/3291279.3339419},
  urldate = {2021-06-14},
  abstract = {Parsons problems are program puzzles, where students piece together code fragments to construct a program. Similar to blockbased programming environments, Parsons problems eliminate the need to learn syntax. Parsons problems have been shown to improve learning efficiency when compared to writing code or fixing incorrect code in lab studies, or as part of a larger curriculum. In this study, we directly compared Parsons problems with block-based programming assignments in classroom settings. We hypothesized that Parsons problems would improve students' programming efficiency on the lab assignments where they were used, without impacting performance on the subsequent, related homework or the later programming project. Our results confirmed our hypothesis, showing that on average Parsons problems took students about half as much time to complete compared to equivalent programming problems. At the same time, we found no evidence to suggest that students performed worse on subsequent assignments, as measured by performance and time on task. The results indicate that the effectiveness of Parsons problems is not simply based on helping students avoid syntax errors. We believe this is because Parsons problems dramatically reduce the programming solution space, letting students focus on solving the problem rather than having to solve the combined problem of devising a solution, searching for needed components, and composing them together.},
  isbn = {978-1-4503-6185-9},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/X6RICM93/Zhi et al. - 2019 - Evaluating the Effectiveness of Parsons Problems f.pdf;/Users/igormoreno/Zotero/storage/Z5H484PW/Zhi et al. - 2019 - Evaluating the Effectiveness of Parsons Problems f.pdf}
}

@misc{zhouLeasttoMostPromptingEnables2022,
  title = {Least-to-{{Most Prompting Enables Complex Reasoning}} in {{Large Language Models}}},
  author = {Zhou, Denny and Sch{\"a}rli, Nathanael and Hou, Le and Wei, Jason and Scales, Nathan and Wang, Xuezhi and Schuurmans, Dale and Cui, Claire and Bousquet, Olivier and Le, Quoc and Chi, Ed},
  year = {2022},
  month = oct,
  number = {arXiv:2205.10625},
  eprint = {2205.10625},
  primaryclass = {cs},
  publisher = {{arXiv}},
  urldate = {2022-11-08},
  abstract = {Although chain-of-thought prompting has shown impressive results on many natural language reasoning tasks, it often performs poorly on tasks which need to solve problems harder than the demonstration examples. To tackle such easy-to-hard generalization issues, we propose a novel prompting strategy, least-to-most prompting. It reduces a complex problem into a list of subproblems, and then sequentially solve these subproblems, whereby solving a given subproblem is facilitated by the answers to previously solved subproblems. Experiments on symbolic manipulation, compositional generalization and math reasoning show that least-to-most prompting can generalize to the examples that are harder than those seen in the prompt, and outperform chain-of-thought prompting by a large margin. A notable result is that the GPT-3 code-davinci-002 model with least-to-most-prompting solves the SCAN benchmark regardless of splits (such as length split) with an accuracy of 99.7\% using 14 examples versus an accuracy of 16.2\% by chain-of-thought prompting, and neural-symbolic models in the literature specialized for solving SCAN are trained with the full training set of more than 15,000 examples.},
  archiveprefix = {arxiv},
  keywords = {Computer Science - Artificial Intelligence,Computer Science - Computation and Language},
  file = {/Users/igormoreno/Zotero/storage/E7MNNVM3/Zhou et al. - 2022 - Least-to-Most Prompting Enables Complex Reasoning .pdf;/Users/igormoreno/Zotero/storage/72M3GUC3/2205.html}
}

@inproceedings{zimmermannInterfaceRepresentationPatterns2017,
  title = {Interface {{Representation Patterns}}: {{Crafting}} and {{Consuming Message-Based Remote APIs}}},
  shorttitle = {Interface {{Representation Patterns}}},
  booktitle = {Proceedings of the 22nd {{European Conference}} on {{Pattern Languages}} of {{Programs}}},
  author = {Zimmermann, Olaf and Stocker, Mirko and L{\"u}bke, Daniel and Zdun, Uwe},
  year = {2017},
  month = jul,
  series = {{{EuroPLoP}} '17},
  pages = {1--36},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3147704.3147734},
  urldate = {2021-04-30},
  abstract = {Remote Application Programming Interfaces (APIs) are technology enablers for major distributed system trends such as mobile and cloud computing and the Internet of Things. In such settings, message-based APIs dominate over procedural and object-oriented ones. It is hard to design such APIs so that they are easy and efficient to use for client developers. Maintaining their runtime qualities while preserving backward compatibility is equally challenging for API providers. For instance, finding a well suited granularity for services and their operations is a particularly important design concern in APIs that realize service-oriented software architectures. Due to the fallacies of distributed computing, the forces for message-based APIs and service interfaces differ from those for local APIs -- for instance, network latency and security concerns deserve special attention. Existing pattern languages have dealt with local APIs in object-oriented programming, with remote objects, with queue-based messaging and with service-oriented computing platforms. However, patterns or equivalent guidance for the structural design of request and response messages in message-based remote APIs is still missing. In this paper, we outline such a pattern language and introduce five basic interface representation patterns to promote platform-independent design advice for common remote API technologies such as RESTful HTTP and Web services (WSDL/SOAP). Known uses and examples of the patterns are drawn from public Web APIs, as well as application development and software integration projects the authors have been involved in.},
  isbn = {978-1-4503-4848-5},
  file = {/Users/igormoreno/Zotero/storage/WZFUNPJ3/Zimmermann et al. - 2017 - Interface Representation Patterns Crafting and Co.pdf}
}

@inproceedings{zingaroIdentifyingStudentDifficulties2018,
  ids = {zingaroIdentifyingStudentDifficulties2018a},
  title = {Identifying {{Student Difficulties}} with {{Basic Data Structures}}},
  booktitle = {Proceedings of the 2018 {{ACM Conference}} on {{International Computing Education Research}}  - {{ICER}} '18},
  author = {Zingaro, Daniel and Taylor, Cynthia and Porter, Leo and Clancy, Michael and Lee, Cynthia and Nam Liao, Soohyun and Webb, Kevin C.},
  year = {2018},
  pages = {169--177},
  publisher = {{ACM Press}},
  address = {{Espoo, Finland}},
  doi = {10.1145/3230977.3231005},
  urldate = {2018-10-22},
  abstract = {To be effective instructors and CS education researchers, we must identify and understand student difficulties surrounding core computing topics. This study examines student difficulties with the basic data structures commonly found in CS2 courses. Initial exploration of student thinking began with think-aloud interviews with students. These interviews centered on open-ended questions that were iteratively improved upon based on analysis of interview transcripts. The revised open-ended questions were then posed to 249 students during an end-of-term final exam study session. Using the explanations and justifications included by students, responses to the questions were coded and summarized. This work characterizes the difficulties revealed by student responses, and provides details of their prevalence among the examined student population.},
  isbn = {978-1-4503-5628-2},
  langid = {english},
  file = {/Users/igormoreno/Zotero/storage/2IY3FT9F/Zingaro et al. - 2018 - Identifying Student Difficulties with Basic Data S.pdf;/Users/igormoreno/Zotero/storage/3CS5R426/Zingaro et al - 2018 - Identifying Student Difficulties with Basic Data Structures.pdf;/Users/igormoreno/Zotero/storage/R37DNWAH/Zingaro et al - 2018 - Identifying Student Difficulties with Basic Data Structures.pdf}
}

@misc{zotero-10623,
  urldate = {2023-04-16},
  howpublished = {https://www.ietf.org/rfc/rfc3720.txt},
  file = {/Users/igormoreno/Zotero/storage/4DCS9XA3/rfc3720.html}
}

@misc{zotero-11557,
  type = {Misc}
}

@misc{zotero-11558,
  type = {Misc}
}

@article{zuckerViCurriASCurriculumVisualization2009,
  title = {{{ViCurriAS}}: A Curriculum Visualization Tool for Faculty, Advisors, and Students},
  shorttitle = {{{ViCurriAS}}},
  author = {Zucker, Ron},
  year = {2009},
  month = dec,
  journal = {Journal of Computing Sciences in Colleges},
  volume = {25},
  number = {2},
  pages = {138--145},
  issn = {1937-4771},
  abstract = {This paper introduces ViCurriAS, a visual tool to aid curriculum committees, faculty, and advisors in mapping a particular program of study. ViCurriAS also allows advisors and students to see the course dependencies and progress for the aforementioned program of study. ViCurriAS consists of two integrated environments: one for developing and arranging the flow of courses for a particular program or to aid in the introduction of new courses to an existing curriculum; and the second to provide an advising tool to visually show student progress through the program.},
  annotation = {00028},
  file = {/Users/igormoreno/Zotero/storage/RAMUMD4D/Zucker - 2009 - ViCurriAS.pdf}
}

@inproceedings{zurComputerScienceTeacher2017,
  title = {Computer Science Teacher Training},
  booktitle = {2017 16th {{International Conference}} on {{Information Technology Based Higher Education}} and {{Training}} ({{ITHET}})},
  author = {Zur, E. and Benaya, T.},
  year = {2017},
  month = jul,
  pages = {1--5},
  doi = {10.1109/ITHET.2017.8067797},
  abstract = {The Open University of Israel offers a program of study for Computer Science graduates towards a high school Teaching Certificate in Computer Science. The program is unique in that it enables studying towards the certificate in a distance learning environment and therefore can be pursued by people who wish to combine further education with careers and personal responsibilities. In this paper we describe the Teaching Certificate Program which provides an opportunity for Computer Science graduates to pursue an educational career. Particularly we describe the course ``Methodology of Computer Science Teaching'' which utilizes multi-media technologies expressly developed for distance learning. In addition we present some statistics regarding the program, such as: the number of students enrolled in the program, age and gender distribution.},
  keywords = {Algorithm design and analysis,computer aided instruction,Computer aided instruction,Computer science,computer science education,computer science graduates,Computer science teacher training,Computer Science Teaching,Conferences,Didactics workshop,distance learning,distance learning environment,educational courses,educational institutions,further education,high school Teaching Certificate,multimedia computing,multimedia technologies,Seminars,teacher training,Teacher trainning,teaching,Teaching certificate,Teaching Certificate Program,The Open University of Israel,Training},
  file = {/Users/igormoreno/Zotero/storage/ZILFM84N/Zur and Benaya - 2017 - Computer science teacher training.pdf;/Users/igormoreno/Zotero/storage/CAW8IJDG/8067797.html}
}

@inproceedings{zurTeachingCertificateComputer2004,
  title = {Teaching {{Certificate}} in {{Computer Science}}: {{Didactics Workshop}}},
  shorttitle = {Teaching {{Certificate}} in {{Computer Science}}},
  booktitle = {Proceedings of the 9th {{Annual SIGCSE Conference}} on {{Innovation}} and {{Technology}} in {{Computer Science Education}}},
  author = {Zur, Ela and Vilner, Tamar},
  year = {2004},
  series = {{{ITiCSE}} '04},
  pages = {240--240},
  publisher = {{ACM}},
  address = {{New York, NY, USA}},
  doi = {10.1145/1007996.1008070},
  urldate = {2019-05-16},
  abstract = {Among the prominent characteristics of the Open University of ... is its teaching method: self-study through distance learning. Students from all parts of the country pursue various degrees at the University and the majority utilize advanced technologies for their studies. We will describe the curriculum for a teaching certificate in Computer Science, particularly the course "Methodology of Computer Science Teaching" which utilizes multi-media technologies expressly developed for distance learning.},
  isbn = {978-1-58113-836-8},
  keywords = {didactics workshop,teachers,teaching certificate},
  file = {/Users/igormoreno/Zotero/storage/R7FS93QJ/Zur and Vilner - 2004 - Teaching Certificate in Computer Science.pdf}
}
